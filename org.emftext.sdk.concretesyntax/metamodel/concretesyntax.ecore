<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="concretesyntax"
    nsURI="http://www.emftext.org/sdk/concretesyntax" nsPrefix="org.emftext.sdk.concretesyntax">
  <eClassifiers xsi:type="ecore:EClass" name="GenPackageDependentElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="package" lowerBound="1"
        eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenPackage"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="packageLocationHint" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConcreteSyntax" eSuperTypes="#//GenPackageDependentElement #//Annotable">
    <eOperations name="getOperatorRuleSubset" upperBound="-1" eType="#//Rule">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.Rule > subset = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.sdk.concretesyntax.Rule > ( ) ; &#xD;&#xA;if ( identifier == null ) { &#xD;&#xA;&#x9;return subset ; &#xD;&#xA;} &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.Rule rule : getOperatorRules ( ) ) { &#xD;&#xA;&#x9;org.emftext.sdk.concretesyntax.Annotation annotation = rule .getOperatorAnnotation ( ) ; &#xD;&#xA;&#x9;java.lang.String value = annotation .getValue ( org.emftext.sdk.concretesyntax.OperatorAnnotationProperty .IDENTIFIER .toString ( ) ) ; &#xD;&#xA;&#x9;if ( identifier .equals ( value ) ) { &#xD;&#xA;&#x9;&#x9;subset .add ( rule ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return subset ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="identifier" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getActiveStartSymbols" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > symbols = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > ( ) ; &#xD;&#xA;symbols .addAll ( getStartSymbols ( ) ) ; &#xD;&#xA;if ( symbols .size ( ) > 0 ) { &#xD;&#xA;&#x9;return symbols ; &#xD;&#xA;} &#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.Import > imports = getImports ( ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.Import importedElement : imports ) { &#xD;&#xA;&#x9;final org.emftext.sdk.concretesyntax.ConcreteSyntax importedSyntax = importedElement .getConcreteSyntax ( ) ; &#xD;&#xA;&#x9;if ( importedSyntax != null ) { &#xD;&#xA;&#x9;&#x9;symbols .addAll ( importedSyntax .getActiveStartSymbols ( ) ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return symbols ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllStartSymbols" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > symbols = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > ( ) ; &#xD;&#xA;symbols .addAll ( getStartSymbols ( ) ) ; &#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.Import > imports = getImports ( ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.Import importedElement : imports ) { &#xD;&#xA;&#x9;final org.emftext.sdk.concretesyntax.ConcreteSyntax importedSyntax = importedElement .getConcreteSyntax ( ) ; &#xD;&#xA;&#x9;if ( importedSyntax != null ) { &#xD;&#xA;&#x9;&#x9;symbols .addAll ( importedSyntax .getAllStartSymbols ( ) ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return symbols ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllRules" upperBound="-1" eType="#//Rule">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="//EStructuralFeature eFeature = ConcretesyntaxPackage.Literals.CONCRETE_SYNTAX__ALL_RULES;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.Rule > l = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.sdk.concretesyntax.Rule > ( getRules ( ) .size ( ) ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.Rule rule : getRules ( ) ) { &#xD;&#xA;&#x9;// don't add rules that are @override rules with remove=true&#xA;if ( ! rule .isOverrideRemoveRule ( ) ) { &#xD;&#xA;&#x9;&#x9;l .add ( rule ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.Import aImport : getImports ( ) ) { &#xD;&#xA;&#x9;org.emftext.sdk.concretesyntax.ConcreteSyntax importedCS = aImport .getConcreteSyntax ( ) ; &#xD;&#xA;&#x9;if ( importedCS != null ) { &#xD;&#xA;&#x9;&#x9;outer : for ( org.emftext.sdk.concretesyntax.Rule importedRule : importedCS .getAllRules ( ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;for ( org.emftext.sdk.concretesyntax.Rule rule : getRules ( ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// don't add rules that have @override rules for same&#xA;// meta-class&#xA;if ( rule .isOverrideRule ( importedRule .getMetaclass ( ) ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue outer ; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;l .add ( importedRule ) ; &#xD;&#xA;&#x9;&#x9;} &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return org.eclipse.emf.common.util.ECollections .unmodifiableEList ( l ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getOperatorRules" upperBound="-1" eType="#//Rule">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="initialiseAnnotatedOperatorRules ( ) ; &#xD;&#xA;return get_operatorRules ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="initialiseAnnotatedOperatorRules">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if ( is_operatorRulesInitialized ( ) ) { &#xD;&#xA;&#x9;return ; &#xD;&#xA;} &#xD;&#xA;set_operatorRulesInitialized ( true ) ; &#xD;&#xA;java.util.List &lt; org.emftext.sdk.concretesyntax.Rule > operatorRules = getOperatorRules ( ) ; &#xD;&#xA;java.util.List &lt; java.lang.String > operatorRuleSubsets = getOperatorRuleSubsets ( ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.Rule rule : getAllRules ( ) ) { &#xD;&#xA;&#x9;org.emftext.sdk.concretesyntax.Annotation operatorAnnotation = rule .getOperatorAnnotation ( ) ; &#xD;&#xA;&#x9;if ( operatorAnnotation != null ) { &#xD;&#xA;&#x9;&#x9;boolean added = false ; &#xD;&#xA;&#x9;&#x9;for ( java.util.ListIterator &lt; org.emftext.sdk.concretesyntax.Rule > it = operatorRules .listIterator ( ) ; it .hasNext ( ) ; ) { &#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.sdk.concretesyntax.Rule expressionRule = it .next ( ) ; &#xD;&#xA;&#x9;&#x9;&#x9;if ( expressionRule .getOperatorWeight ( ) > rule .getOperatorWeight ( ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;operatorRules .add ( it .previousIndex ( ) , rule ) ; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;added = true ; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break ; &#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;if ( ! added ) { &#xD;&#xA;&#x9;&#x9;&#x9;operatorRules .add ( rule ) ; &#xD;&#xA;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;java.lang.String identifier = operatorAnnotation .getValue ( org.emftext.sdk.concretesyntax.OperatorAnnotationProperty .IDENTIFIER .toString ( ) ) ; &#xD;&#xA;&#x9;&#x9;operatorRuleSubsets .add ( identifier ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getOperatorRuleSubsets" upperBound="-1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="initialiseAnnotatedOperatorRules ( ) ; &#xD;&#xA;return get_operatorRuleSubsets ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getGenClassCache" eType="#//GenClassCache">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if ( get_genClassCache ( ) == null ) { &#xD;&#xA;&#x9;set_genClassCache ( org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createGenClassCache()) ; &#xD;&#xA;} &#xD;&#xA;return get_genClassCache ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isAbstract" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if ( getModifier ( ) != null ) { &#xD;&#xA;&#x9;return true ; &#xD;&#xA;} &#xD;&#xA;return false ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isImportedRule" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return rule .getSyntax ( ) != this ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Returns true if the given rule was defined in the given syntax.&#xD;&#xA; If the rule is defined in an imported syntax, this method returns&#xD;&#xA; false.&#xD;&#xA; &#xD;&#xA; @param syntax the syntax that refers to the rule&#xD;&#xA; @param rule the rule to check&#xD;&#xA; @return true if the rule is contained, false if it is imported&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="rule" eType="#//Rule"/>
    </eOperations>
    <eOperations name="getEClassUtil" eType="#//EClassUtil">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if ( get_eClassUtil ( ) == null ) { &#xD;&#xA;&#x9;set_eClassUtil ( org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createEClassUtil()) ; &#xD;&#xA;} &#xD;&#xA;return get_eClassUtil ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getClassesWithSyntax" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="java.util.Collection &lt; org.emftext.sdk.concretesyntax.Rule > rules = getAllRules ( ) ; &#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > foundGenClasses = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > ( ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.Rule rule : rules ) { &#xD;&#xA;&#x9;if ( excludeOperatorRules &amp;&amp; rule .getOperatorAnnotation ( ) != null ) { &#xD;&#xA;&#x9;&#x9;continue ; &#xD;&#xA;&#x9;} &#xD;&#xA;&#x9;org.eclipse.emf.codegen.ecore.genmodel.GenClass subClassCand = rule .getMetaclass ( ) ; &#xD;&#xA;&#x9;foundGenClasses .add ( subClassCand ) ; &#xD;&#xA;} &#xD;&#xA;return foundGenClasses ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Collects all the subclasses for which concrete syntax is defined.&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="excludeOperatorRules" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"/>
    </eOperations>
    <eOperations name="getSubClassesWithSyntax" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > subClasses = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > ( ) ; &#xD;&#xA;org.eclipse.emf.ecore.EClass ecoreClass = superClass .getEcoreClass ( ) ; &#xD;&#xA;org.emftext.sdk.concretesyntax.EClassUtil eClassUtil = getEClassUtil ( ) ; &#xD;&#xA;for ( org.eclipse.emf.codegen.ecore.genmodel.GenClass subClassCand : getClassesWithSyntax ( excludeOperatorRules ) ) { &#xD;&#xA;&#x9;if ( eClassUtil .isSubClass ( subClassCand .getEcoreClass ( ) , ecoreClass ) ) { &#xD;&#xA;&#x9;&#x9;subClasses .add ( subClassCand ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return subClasses ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Collects all the subclasses for which concrete syntax is defined.&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="superClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
      <eParameters name="excludeOperatorRules" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifier" eType="#//Abstract"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="startSymbols" upperBound="-1"
        eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activeTokens" upperBound="-1"
        eType="#//CompleteTokenDefinition" transient="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="imports" upperBound="-1"
        eType="#//Import" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="options" upperBound="-1"
        eType="#//Option" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="tokens" upperBound="-1"
        eType="#//TokenDirective" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="syntheticTokens" upperBound="-1"
        eType="#//CompleteTokenDefinition" transient="true" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="tokenStyles" upperBound="-1"
        eType="#//TokenStyle" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allTokenStyles" upperBound="-1"
        eType="#//TokenStyle" transient="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allTokenDirectives" upperBound="-1"
        eType="#//TokenDirective" transient="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rules" lowerBound="1" upperBound="-1"
        eType="#//Rule" containment="true" eOpposite="#//Rule/syntax"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="_operatorRules" upperBound="-1"
        eType="#//Rule" transient="true" derived="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="_operatorRuleSubsets" upperBound="-1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"
        transient="true" defaultValueLiteral="" derived="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="_operatorRulesInitialized"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="_genClassCache" lowerBound="1"
        eType="#//GenClassCache" transient="true" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="_eClassUtil" eType="#//EClassUtil"
        transient="true" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Import" eSuperTypes="#//GenPackageDependentElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="prefix" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="concreteSyntax" eType="#//ConcreteSyntax"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="csLocationHint" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SyntaxElement" abstract="true">
    <eOperations name="getContainingRule" eType="#//Rule">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.emftext.sdk.concretesyntax.Rule rule = null ; &#xD;&#xA;org.eclipse.emf.ecore.EObject o = this ; &#xD;&#xA;do { &#xD;&#xA;&#x9;if ( o instanceof org.emftext.sdk.concretesyntax.Rule ) { &#xD;&#xA;&#x9;&#x9;rule = ( org.emftext.sdk.concretesyntax.Rule ) o ; &#xD;&#xA;&#x9;} else { &#xD;&#xA;&#x9;&#x9;o = o .eContainer ( ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} while ( rule == null &amp;&amp; o != null ) ; &#xD;&#xA;return rule ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="children" upperBound="-1"
        eType="#//SyntaxElement" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Rule" eSuperTypes="#//Annotable #//SyntaxElement">
    <eOperations name="getOperatorAnnotation" eType="#//Annotation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.sdk.concretesyntax.Annotation annotation : getAnnotations ( ) ) { &#xD;&#xA;&#x9;if ( annotation .getType ( ) == org.emftext.sdk.concretesyntax.AnnotationType .OPERATOR ) { &#xD;&#xA;&#x9;&#x9;return annotation ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return null ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getOperatorWeight" lowerBound="1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.emftext.sdk.concretesyntax.Annotation operatorAnnotation = this .getOperatorAnnotation ( ) ; &#xD;&#xA;if ( operatorAnnotation != null ) { &#xD;&#xA;&#x9;java.lang.String ruleWeightString = operatorAnnotation .getValue ( org.emftext.sdk.concretesyntax.OperatorAnnotationProperty .WEIGHT .toString ( ) ) ; &#xD;&#xA;&#x9;if ( ruleWeightString != null ) { &#xD;&#xA;&#x9;&#x9;try { &#xD;&#xA;&#x9;&#x9;&#x9;return java.lang.Integer .parseInt ( ruleWeightString ) ; &#xD;&#xA;&#x9;&#x9;} // ignore exception. invalid numbers are signaled by&#xA;// returning MIN_VALUE&#xA;catch ( java.lang.NumberFormatException e ) { &#xD;&#xA;&#x9;&#x9;} &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return java.lang.Integer .MIN_VALUE ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Returns the weight of this rule if it is an operator rule.&#xD;&#xA; If the rule is not an operator rule or the specified weight&#xD;&#xA; in the operator annotation is not a number, Integer.MIN_VALUE &#xD;&#xA; is returned.&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getDefinition" lowerBound="1" eType="#//Choice">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.SyntaxElement > children = getChildren ( ) ; &#xD;&#xA;// there should be at most one child&#xA;assert children == null || children .size ( ) == 1 ; &#xD;&#xA;if ( children .size ( ) > 0 ) { &#xD;&#xA;&#x9;org.emftext.sdk.concretesyntax.SyntaxElement firstChild = children .get ( 0 ) ; &#xD;&#xA;&#x9;if ( firstChild instanceof org.emftext.sdk.concretesyntax.Choice ) { &#xD;&#xA;&#x9;&#x9;return ( org.emftext.sdk.concretesyntax.Choice ) firstChild ; &#xD;&#xA;&#x9;} else { &#xD;&#xA;&#x9;&#x9;// there should be no element other than Choice&#xA;assert false ; &#xD;&#xA;&#x9;&#x9;return null ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return null ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasAnnotation" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.sdk.concretesyntax.Annotation annotation : getAnnotations ( ) ) { &#xD;&#xA;&#x9;if ( annotation .getType ( ) == type ) { &#xD;&#xA;&#x9;&#x9;if ( key != null ) { &#xD;&#xA;&#x9;&#x9;&#x9;for ( org.emftext.sdk.concretesyntax.KeyValuePair parameter : annotation .getParameters ( ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ( key .equals ( parameter .getKey ( ) ) &amp;&amp; parameter .getValue ( ) .equals ( value ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return true ; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;} else { &#xD;&#xA;&#x9;&#x9;&#x9;return true ; &#xD;&#xA;&#x9;&#x9;} &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return false ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Checks whether this rule is annotated with the given AnnotationType.&#xD;&#xA; If a key and a value is given it is further checked whether the&#xD;&#xA; annotation specifies this key and value. &#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="type" eType="#//AnnotationType"/>
      <eParameters name="key" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
      <eParameters name="value" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
    </eOperations>
    <eOperations name="isOverrideRemoveRule" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="// TODO mseifert: use constant here&#xA;return hasAnnotation ( org.emftext.sdk.concretesyntax.AnnotationType .OVERRIDE , &quot;remove&quot; , &quot;true&quot; ) ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Checks whether this rule is annotated with @Override(remove=&quot;true&quot;).&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isOverrideRule" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="// TODO figure out why 'metaClass == null' is needed&#xA;if ( metaClass == null || getMetaclass ( ) == metaClass ) { &#xD;&#xA;&#x9;if ( hasAnnotation ( org.emftext.sdk.concretesyntax.AnnotationType .OVERRIDE , null , null ) ) { &#xD;&#xA;&#x9;&#x9;return true ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return false ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Checks whether this rule is annotated with @Override.&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="metaClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metaclass" lowerBound="1"
        eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="syntax" lowerBound="1"
        eType="#//ConcreteSyntax" eOpposite="#//ConcreteSyntax/rules"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Choice" eSuperTypes="#//SyntaxElement">
    <eOperations name="getOptions" upperBound="-1" eType="#//Sequence">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.Sequence > options = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.sdk.concretesyntax.Sequence > ( ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.SyntaxElement child : getChildren ( ) ) { &#xD;&#xA;&#x9;if ( child instanceof org.emftext.sdk.concretesyntax.Sequence ) { &#xD;&#xA;&#x9;&#x9;options .add ( ( org.emftext.sdk.concretesyntax.Sequence ) child ) ; &#xD;&#xA;&#x9;} else { &#xD;&#xA;&#x9;&#x9;// there should be no elements other than Sequence elements in the&#xA;// list of children&#xA;assert false ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return options ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Sequence" eSuperTypes="#//SyntaxElement">
    <eOperations name="getParts" upperBound="-1" eType="#//Definition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.Definition > parts = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.sdk.concretesyntax.Definition > ( ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.SyntaxElement child : getChildren ( ) ) { &#xD;&#xA;&#x9;if ( child instanceof org.emftext.sdk.concretesyntax.Definition ) { &#xD;&#xA;&#x9;&#x9;parts .add ( ( org.emftext.sdk.concretesyntax.Definition ) child ) ; &#xD;&#xA;&#x9;} else { &#xD;&#xA;&#x9;&#x9;// there should be no elements other than Definition elements in the&#xA;// list of children&#xA;assert false ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return parts ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Definition" abstract="true" eSuperTypes="#//SyntaxElement">
    <eOperations name="hasMinimalCardinalityOneOrHigher" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return true ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasNoOptionalPart" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return false ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="computeCardinalityString" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.emftext.sdk.concretesyntax.Cardinality cardinality = null ; &#xD;&#xA;if ( this instanceof org.emftext.sdk.concretesyntax.CardinalityDefinition ) { &#xD;&#xA;&#x9;cardinality = ( ( org.emftext.sdk.concretesyntax.CardinalityDefinition ) this ) .getCardinality ( ) ; &#xD;&#xA;} &#xD;&#xA;if ( cardinality == null ) { &#xD;&#xA;&#x9;return &quot;&quot; ; &#xD;&#xA;} else if ( cardinality instanceof org.emftext.sdk.concretesyntax.PLUS ) { &#xD;&#xA;&#x9;return &quot;+&quot; ; &#xD;&#xA;} else if ( cardinality instanceof org.emftext.sdk.concretesyntax.QUESTIONMARK ) { &#xD;&#xA;&#x9;return &quot;?&quot; ; &#xD;&#xA;} else { &#xD;&#xA;&#x9;return &quot;*&quot; ; &#xD;&#xA;} &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Returns a string representation of the cardinality of the&#xD;&#xA;' or the&#xD;&#xA; empty string.&#xD;&#xA; &#xD;&#xA; @param definition&#xD;&#xA; @return&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CardinalityDefinition" abstract="true"
      eSuperTypes="#//Definition">
    <eOperations name="hasMinimalCardinalityOneOrHigher" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return getCardinality ( ) == null || getCardinality ( ) instanceof org.emftext.sdk.concretesyntax.PLUS ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasNoOptionalPart" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return ! ( getCardinality ( ) instanceof org.emftext.sdk.concretesyntax.QUESTIONMARK || getCardinality ( ) instanceof org.emftext.sdk.concretesyntax.STAR ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="cardinality" eType="#//Cardinality"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Terminal" abstract="true" eSuperTypes="#//CardinalityDefinition">
    <eStructuralFeatures xsi:type="ecore:EReference" name="feature" lowerBound="1"
        eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenFeature"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CsString" eSuperTypes="#//Definition">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WhiteSpaces" eSuperTypes="#//Definition">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="amount" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LineBreak" eSuperTypes="#//Definition">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="tab" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Cardinality" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="PLUS" eSuperTypes="#//Cardinality"/>
  <eClassifiers xsi:type="ecore:EClass" name="STAR" eSuperTypes="#//Cardinality"/>
  <eClassifiers xsi:type="ecore:EClass" name="QUESTIONMARK" eSuperTypes="#//Cardinality"/>
  <eClassifiers xsi:type="ecore:EClass" name="CompoundDefinition" eSuperTypes="#//CardinalityDefinition">
    <eOperations name="getDefinition" eType="#//Choice">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.SyntaxElement > children = getChildren ( ) ; &#xD;&#xA;// there should be at most one child&#xA;assert children == null || children .size ( ) == 1 ; &#xD;&#xA;if ( children .size ( ) > 0 ) { &#xD;&#xA;&#x9;org.emftext.sdk.concretesyntax.SyntaxElement firstChild = children .get ( 0 ) ; &#xD;&#xA;&#x9;if ( firstChild instanceof org.emftext.sdk.concretesyntax.Choice ) { &#xD;&#xA;&#x9;&#x9;return ( org.emftext.sdk.concretesyntax.Choice ) firstChild ; &#xD;&#xA;&#x9;} else { &#xD;&#xA;&#x9;&#x9;// there should be no element other than Choice&#xA;assert false ; &#xD;&#xA;&#x9;&#x9;return null ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return null ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TokenDirective" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="RegexComposer">
    <eOperations name="getComposedRegex" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="visitedTokens .add ( token ) ; &#xD;&#xA;java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; &#xD;&#xA;if ( token instanceof org.emftext.sdk.concretesyntax.RegexComposite ) { &#xD;&#xA;&#x9;org.emftext.sdk.concretesyntax.RegexComposite composite = ( org.emftext.sdk.concretesyntax.RegexComposite ) token ; &#xD;&#xA;&#x9;for ( org.emftext.sdk.concretesyntax.RegexPart part : composite .getRegexParts ( ) ) { &#xD;&#xA;&#x9;&#x9;if ( part instanceof org.emftext.sdk.concretesyntax.AtomicRegex ) { &#xD;&#xA;&#x9;&#x9;&#x9;result .append ( part .getRegex ( ) ) ; &#xD;&#xA;&#x9;&#x9;} else if ( part instanceof org.emftext.sdk.concretesyntax.RegexReference ) { &#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.sdk.concretesyntax.RegexReference reference = ( org.emftext.sdk.concretesyntax.RegexReference ) part ; &#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.sdk.concretesyntax.AbstractTokenDefinition target = reference .getTarget ( ) ; &#xD;&#xA;&#x9;&#x9;&#x9;if ( target == null ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;continue ; &#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;if ( target .eIsProxy ( ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;continue ; &#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;if ( visitedTokens .contains ( target ) ) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;continue ; &#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.sdk.concretesyntax.AbstractTokenDefinition > subVisitedTokens = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.sdk.concretesyntax.AbstractTokenDefinition > ( ) ; &#xD;&#xA;&#x9;&#x9;&#x9;subVisitedTokens .addAll ( visitedTokens ) ; &#xD;&#xA;&#x9;&#x9;&#x9;result .append ( getComposedRegex ( target , subVisitedTokens ) ) ; &#xD;&#xA;&#x9;&#x9;} &#xD;&#xA;&#x9;} &#xD;&#xA;} else if ( token instanceof org.emftext.sdk.concretesyntax.RegexOwner ) { &#xD;&#xA;&#x9;org.emftext.sdk.concretesyntax.RegexOwner owner = ( org.emftext.sdk.concretesyntax.RegexOwner ) token ; &#xD;&#xA;&#x9;result .append ( owner .getRegex ( ) ) ; &#xD;&#xA;} &#xD;&#xA;return result .toString ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="token" eType="#//AbstractTokenDefinition"/>
      <eParameters name="visitedTokens" upperBound="-1" eType="#//AbstractTokenDefinition"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RegexOwner" abstract="true" interface="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"
        changeable="false" volatile="true" transient="true" derived="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RegexPart" abstract="true" eSuperTypes="#//RegexOwner"/>
  <eClassifiers xsi:type="ecore:EClass" name="RegexComposite" abstract="true" eSuperTypes="#//RegexOwner">
    <eOperations name="getRegex" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; &#xD;&#xA;for ( org.emftext.sdk.concretesyntax.RegexPart part : getRegexParts ( ) ) { &#xD;&#xA;&#x9;result .append ( part .getRegex ( ) ) ; &#xD;&#xA;} &#xD;&#xA;return result .toString ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="regexParts" lowerBound="1"
        upperBound="-1" eType="#//RegexPart" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AtomicRegex" eSuperTypes="#//RegexPart">
    <eOperations name="getRegex" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return getAtomicExpression ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="atomicExpression" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RegexReference" eSuperTypes="#//RegexPart">
    <eOperations name="getRegex" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.emftext.sdk.concretesyntax.AbstractTokenDefinition target = getTarget ( ) ; &#xD;&#xA;if ( target == null || target .eIsProxy ( ) ) { &#xD;&#xA;&#x9;return &quot;&quot; ; &#xD;&#xA;} else { &#xD;&#xA;&#x9;assert target instanceof org.emftext.sdk.concretesyntax.RegexOwner ; &#xD;&#xA;&#x9;return ( ( org.emftext.sdk.concretesyntax.RegexOwner ) target ) .getRegex ( ) ; &#xD;&#xA;} &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
        eType="#//AbstractTokenDefinition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractTokenDefinition" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PartialTokenDefinition" eSuperTypes="#//AbstractTokenDefinition #//TokenDirective #//RegexComposite">
    <eOperations name="getRegex" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.emftext.sdk.concretesyntax.RegexComposer composer = org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createRegexComposer(); &#xD;&#xA;return composer .getComposedRegex ( this , new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.sdk.concretesyntax.AbstractTokenDefinition > ( ) ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CompleteTokenDefinition" abstract="true"
      eSuperTypes="#//AbstractTokenDefinition #//TokenDirective #//RegexOwner">
    <eOperations name="isHidden" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="boolean isReferenced = ! getAttributeReferences ( ) .isEmpty ( ) ; &#xD;&#xA;boolean isCollectInToken = getAttributeName ( ) != null ; &#xD;&#xA;return ! isReferenced || isCollectInToken ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isUsed" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="boolean isReferenced = ! getAttributeReferences ( ) .isEmpty ( ) ; &#xD;&#xA;boolean isCollectInToken = getAttributeName ( ) != null ; &#xD;&#xA;return isReferenced || isCollectInToken ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isImported" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return ! syntax .equals ( getContainingSyntax ( syntax ) ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="syntax" lowerBound="1" eType="#//ConcreteSyntax"/>
    </eOperations>
    <eOperations name="getContainingSyntax" eType="#//ConcreteSyntax">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.ecore.EObject container = this .eContainer ( ) ; &#xD;&#xA;if ( container instanceof org.emftext.sdk.concretesyntax.ConcreteSyntax ) { &#xD;&#xA;&#x9;return ( org.emftext.sdk.concretesyntax.ConcreteSyntax ) container ; &#xD;&#xA;} &#xD;&#xA;return syntax ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="syntax" lowerBound="1" eType="#//ConcreteSyntax"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributeReferences" upperBound="-1"
        eType="#//Placeholder" eOpposite="#//Placeholder/token"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="attributeName" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NormalTokenDefinition" eSuperTypes="#//CompleteTokenDefinition #//Annotable #//RegexComposite">
    <eOperations name="getRegex" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.emftext.sdk.concretesyntax.RegexComposer composer = org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createRegexComposer(); &#xD;&#xA;return composer .getComposedRegex ( this , new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.sdk.concretesyntax.AbstractTokenDefinition > ( ) ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="QuotedTokenDefinition" eSuperTypes="#//CompleteTokenDefinition">
    <eOperations name="getRegex" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return getSynthesizedRegex ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="prefix" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"
        defaultValueLiteral=""/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="suffix" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"
        defaultValueLiteral=""/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="escapeCharacter" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="synthesizedRegex" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TokenPriorityDirective" eSuperTypes="#//TokenDirective">
    <eStructuralFeatures xsi:type="ecore:EReference" name="token" lowerBound="1" eType="#//CompleteTokenDefinition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Containment" eSuperTypes="#//Terminal">
    <eOperations name="getAllowedSubTypes" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > types = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > ( ) ; &#xD;&#xA;// is there an explicit type defined?&#xA;if ( ! getTypes ( ) .isEmpty ( ) ) { &#xD;&#xA;&#x9;types = getTypes ( ) ; &#xD;&#xA;} else { &#xD;&#xA;&#x9;types = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.codegen.ecore.genmodel.GenClass > ( ) ; &#xD;&#xA;&#x9;types .add ( getFeature ( ) .getTypeGenClass ( ) ) ; &#xD;&#xA;} &#xD;&#xA;return types ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Returns all types that are allowed for the given containment.&#xD;&#xA; If type restrictions are specified in the syntax rule, this&#xD;&#xA; list contains the allowed types. If no restriction are present&#xD;&#xA; the type of the feature references by the containment is &#xD;&#xA; returned.&#xD;&#xA; &#xD;&#xA; @param containment&#xD;&#xA; @return&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="types" upperBound="-1"
        eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Placeholder" abstract="true" eSuperTypes="#//Terminal">
    <eStructuralFeatures xsi:type="ecore:EReference" name="token" lowerBound="1" eType="#//CompleteTokenDefinition"
        eOpposite="#//CompleteTokenDefinition/attributeReferences"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PlaceholderUsingSpecifiedToken" eSuperTypes="#//Placeholder"/>
  <eClassifiers xsi:type="ecore:EClass" name="PlaceholderUsingDefaultToken" eSuperTypes="#//Placeholder"/>
  <eClassifiers xsi:type="ecore:EClass" name="PlaceholderInQuotes" eSuperTypes="#//Placeholder">
    <eOperations name="getNormalizedPrefix" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="java.lang.String prefix = getPrefix ( ) ; &#xD;&#xA;if ( prefix == null ) return prefix ; &#xD;&#xA;if ( prefix .length ( ) == 0 ) return null ; &#xD;&#xA;return prefix ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getNormalizedSuffix" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="java.lang.String suffix = getSuffix ( ) ; &#xD;&#xA;if ( suffix == null ) return suffix ; &#xD;&#xA;if ( suffix .length ( ) == 0 ) return null ; &#xD;&#xA;return suffix ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getNormalizedEscapeCharacter" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="java.lang.String escapeCharacter = getEscapeCharacter ( ) ; &#xD;&#xA;if ( escapeCharacter == null ) return escapeCharacter ; &#xD;&#xA;if ( escapeCharacter .length ( ) == 0 ) return null ; &#xD;&#xA;return escapeCharacter ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="toString" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if ( eIsProxy ( ) ) return super .toString ( ) ; &#xD;&#xA;java.lang.StringBuffer result = new java.lang.StringBuffer ( ) ; &#xD;&#xA;org.eclipse.emf.codegen.ecore.genmodel.GenFeature feature = getFeature ( ) ; &#xD;&#xA;if ( feature != null &amp;&amp; feature .getEcoreFeature ( ) != null ) { &#xD;&#xA;&#x9;result .append ( feature .getName ( ) ) ; &#xD;&#xA;} &#xD;&#xA;result .append ( &quot;[\'&quot; ) ; &#xD;&#xA;result .append ( getPrefix ( ) ) ; &#xD;&#xA;result .append ( &quot;\', \'&quot; ) ; &#xD;&#xA;result .append ( getSuffix ( ) ) ; &#xD;&#xA;result .append ( &quot;\']&quot; ) ; &#xD;&#xA;return result .toString ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="prefix" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"
        defaultValueLiteral=""/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="suffix" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"
        defaultValueLiteral=""/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="escapeCharacter" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Option">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//OptionTypes"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="OptionTypes">
    <eLiterals name="GENERATE_TEST_ACTION" literal="generateTestAction"/>
    <eLiterals name="GENERATE_CODE_FROM_GENERATOR_MODEL" value="1" literal="generateCodeFromGeneratorModel"/>
    <eLiterals name="OVERRIDE_PLUGIN_XML" value="3" literal="overridePluginXML"/>
    <eLiterals name="OVERRIDE_MANIFEST" value="4" literal="overrideManifest"/>
    <eLiterals name="OVERRIDE_PARSER" value="5" literal="overrideParser"/>
    <eLiterals name="OVERRIDE_TOKEN_RESOLVERS" value="6" literal="overrideTokenResolvers"/>
    <eLiterals name="OVERRIDE_REFERENCE_RESOLVERS" value="7" literal="overrideReferenceResolvers"/>
    <eLiterals name="OVERRIDE_REFERENCE_RESOLVER_SWITCH" value="8" literal="overrideReferenceResolverSwitch"/>
    <eLiterals name="OVERRIDE_TOKEN_RESOLVER_FACTORY" value="9" literal="overrideTokenResolverFactory"/>
    <eLiterals name="OVERRIDE_PRINTER" value="10" literal="overridePrinter"/>
    <eLiterals name="ANTLR_BACKTRACKING" value="12" literal="backtracking"/>
    <eLiterals name="ANTLR_MEMOIZE" value="13" literal="memoize"/>
    <eLiterals name="AUTOFIX_SIMPLE_LEFTRECURSION" value="14" literal="autofixSimpleLeftrecursion"/>
    <eLiterals name="FORCE_EOF" value="15" literal="forceEOF"/>
    <eLiterals name="DEFAULT_TOKEN_NAME" value="16" literal="defaultTokenName"/>
    <eLiterals name="USE_PREDEFINED_TOKENS" value="17" literal="usePredefinedTokens"/>
    <eLiterals name="TOKENSPACE" value="18" literal="tokenspace"/>
    <eLiterals name="RELOAD_GENERATOR_MODEL" value="19" literal="reloadGeneratorModel"/>
    <eLiterals name="OVERRIDE_DOT_CLASSPATH" value="20" literal="overrideClasspath"/>
    <eLiterals name="OVERRIDE_DOT_PROJECT" value="21" literal="overrideProjectFile"/>
    <eLiterals name="OVERRIDE_TEXT_RESOURCE" value="22" literal="overrideTextResource"/>
    <eLiterals name="OVERRIDE_RESOURCE_FACTORY" value="23" literal="overrideResourceFactory"/>
    <eLiterals name="OVERRIDE_NEW_FILE_WIZARD" value="24" literal="overrideNewFileWizard"/>
    <eLiterals name="PARSER_GENERATOR" value="25" literal="parserGenerator"/>
    <eLiterals name="SOURCE_FOLDER" value="26" literal="srcFolder"/>
    <eLiterals name="BASE_PACKAGE" value="27" literal="basePackage"/>
    <eLiterals name="RESOURCE_PLUGIN_ID" value="28" literal="resourcePluginID"/>
    <eLiterals name="OVERRIDE_BUILD_PROPERTIES" value="29" literal="overrideBuildProperties"/>
    <eLiterals name="OVERRIDE_META_INFORMATION" value="30" literal="overrideMetaInformation"/>
    <eLiterals name="OVERRIDE_DEFAULT_RESOLVER_DELEGATE" value="31" literal="overrideDefaultResolverDelegate"/>
    <eLiterals name="OVERRIDE_PROBLEM_CLASS" value="32" literal="overrideProblemClass"/>
    <eLiterals name="OVERRIDE_SCANNER" value="33" literal="overrideScanner"/>
    <eLiterals name="OVERRIDE_CONTEXT_DEPENDENT_URI_FRAGMENT" value="34" literal="overrideContextDependentURIFragment"/>
    <eLiterals name="OVERRIDE_CONTEXT_DEPENDENT_URI_FRAGMENT_FACTORY" value="35" literal="overrideContextDependentURIFragmentFactory"/>
    <eLiterals name="OVERRIDE_DELEGATING_RESOLVE_RESULT" value="36" literal="overrideDelegatingResolveResult"/>
    <eLiterals name="OVERRIDE_DUMMY_E_OBJECT" value="37" literal="overrideDummyEObject"/>
    <eLiterals name="OVERRIDE_ELEMENT_MAPPING" value="38" literal="overrideElementMapping"/>
    <eLiterals name="OVERRIDE_FUZZY_RESOLVE_RESULT" value="39" literal="overrideFuzzyResolveResult"/>
    <eLiterals name="OVERRIDE_DEFAULT_TOKEN_RESOLVER" value="40" literal="overrideDefaultTokenResolver"/>
    <eLiterals name="OVERRIDE_LOCATION_MAP" value="41" literal="overrideLocationMap"/>
    <eLiterals name="OVERRIDE_REFERENCE_RESOLVE_RESULT" value="42" literal="overrideReferenceResolveResult"/>
    <eLiterals name="OVERRIDE_TOKEN_RESOLVE_RESULT" value="43" literal="overrideTokenResolveResult"/>
    <eLiterals name="OVERRIDE_URI_MAPPING" value="45" literal="overrideURIMapping"/>
    <eLiterals name="OVERRIDE_HOVER_TEXT_PROVIDER" value="46" literal="overrideHoverTextProvider"/>
    <eLiterals name="OVERRIDE_PARSE_RESULT" value="47" literal="overrideParseResult"/>
    <eLiterals name="OVERRIDE_ANTLR_TOKEN_HELPER" value="48" literal="overrideAntlrTokenHelper"/>
    <eLiterals name="OVERRIDE_BRACKET_SET" value="49" literal="overrideBracketSet"/>
    <eLiterals name="OVERRIDE_BROWSER_INFORMATION_CONTROL" value="50" literal="overrideBrowserInformationControl"/>
    <eLiterals name="OVERRIDE_CODE_FOLDING_MANAGER" value="51" literal="overrideCodeFoldingManager"/>
    <eLiterals name="OVERRIDE_COLOR_MANAGER" value="52" literal="overrideColorManager"/>
    <eLiterals name="OVERRIDE_COMPLETION_PROCESSOR" value="53" literal="overrideCompletionProcessor"/>
    <eLiterals name="OVERRIDE_PARSING_STRATEGY" value="54" literal="overrideParsingStrategy"/>
    <eLiterals name="OVERRIDE_DOC_BROWSER_INFORMATION_CONTROL_INPUT" value="55" literal="overrideDocBrowserInformationControlInput"/>
    <eLiterals name="OVERRIDE_EDITOR_CONFIGURATION" value="55" literal="overrideEditorConfiguration"/>
    <eLiterals name="OVERRIDE_EDITOR" value="56" literal="overrideEditor"/>
    <eLiterals name="OVERRIDE_E_OBJECT_SELECTION" value="57" literal="overrideEObjectSelection"/>
    <eLiterals name="OVERRIDE_HIGHLIGHTING" value="58" literal="overrideHighlighting"/>
    <eLiterals name="OVERRIDE_HTML_PRINTER" value="59" literal="overrideHTMLPrinter"/>
    <eLiterals name="OVERRIDE_HYPERLINK" value="60" literal="overrideHyperlink"/>
    <eLiterals name="OVERRIDE_HYPERLINK_DETECTOR" value="61" literal="overrideHyperlinkDetector"/>
    <eLiterals name="OVERRIDE_MARKER_HELPER" value="62" literal="overrideMarkerHelper"/>
    <eLiterals name="OVERRIDE_OCCURENCE" value="63" literal="overrideOccurrence"/>
    <eLiterals name="OVERRIDE_OUTLINE_PAGE" value="64" literal="overrideOutlinePage"/>
    <eLiterals name="OVERRIDE_OUTLINE_PAGE_TREE_VIEWER" value="65" literal="overrideOutlinePageTreeViewer"/>
    <eLiterals name="OVERRIDE_PLUGIN_ACTIVATOR" value="66" literal="overridePluginActivator"/>
    <eLiterals name="OVERRIDE_POSITION_CATEGORY" value="67" literal="overridePositionCategory"/>
    <eLiterals name="OVERRIDE_POSITION_HELPER" value="68" literal="overridePositionHelper"/>
    <eLiterals name="OVERRIDE_PROPERTY_SHEET_PAGE" value="69" literal="overridePropertySheetPage"/>
    <eLiterals name="OVERRIDE_TEXT_HOVER" value="70" literal="overrideTextHover"/>
    <eLiterals name="OVERRIDE_TOKEN_SCANNER" value="71" literal="overrideTokenScanner"/>
    <eLiterals name="OVERRIDE_BRACKET_PREFERENCE_PAGE" value="72" literal="overrideBracketPreferencePage"/>
    <eLiterals name="OVERRIDE_PREFERENCE_CONSTANTS" value="73" literal="overridePreferenceConstants"/>
    <eLiterals name="OVERRIDE_OCCURENCE_PREFERENCE_PAGE" value="74" literal="overrideOccurencePreferencePage"/>
    <eLiterals name="OVERRIDE_PIXEL_CONVERTER" value="75" literal="overridePixelConverter"/>
    <eLiterals name="OVERRIDE_PREFERENCE_INITIALIZER" value="76" literal="overridePreferenceInitializer"/>
    <eLiterals name="OVERRIDE_SYNTAX_COLORING_HELPER" value="77" literal="overrideSyntaxColoringHelper"/>
    <eLiterals name="OVERRIDE_SYNTAX_COLORING_PREFERENCE_PAGE" value="78" literal="overrideSyntaxColoringPreferencePage"/>
    <eLiterals name="OVERRIDE_I_INPUT_STREAM_PROCESSOR_PROVIDER" value="79" literal="overrideIInputStreamProcessorProvider"/>
    <eLiterals name="OVERRIDE_INPUT_STREAM_PROCESSOR" value="80" literal="overrideInputStreamProcessor"/>
    <eLiterals name="OVERRIDE_I_OPTION_PROVIDER" value="81" literal="overrideIOptionProvider"/>
    <eLiterals name="OVERRIDE_I_OPTIONS" value="82" literal="overrideIOptions"/>
    <eLiterals name="OVERRIDE_I_RESOURCE_POST_PROCESSOR" value="83" literal="overrideIResourcePostProcessor"/>
    <eLiterals name="OVERRIDE_I_RESOURCE_POST_PROCESSOR_PROVIDER" value="84" literal="overrideIResourcePostProcessorProvider"/>
    <eLiterals name="OVERRIDE_I_BRACKET_PAIR" value="85" literal="overrideIBracketPair"/>
    <eLiterals name="OVERRIDE_I_COMMAND" value="86" literal="overrideICommand"/>
    <eLiterals name="OVERRIDE_I_CONFIGURABLE" value="87" literal="overrideIConfigurable"/>
    <eLiterals name="OVERRIDE_I_CONTEXT_DEPENDENT_URI_FRAGMENT" value="88" literal="overrideIContextDependentURIFragment"/>
    <eLiterals name="OVERRIDE_I_CONTEXT_DEPENDENT_URI_FRAGMENT_FACTORY" value="89"
        literal="overrideIContextDependentURIFragmentFactory"/>
    <eLiterals name="OVERRIDE_I_ELEMENT_MAPPING" value="90" literal="overrideIElementMapping"/>
    <eLiterals name="OVERRIDE_I_EXPECTED_ELEMENT" value="91" literal="overrideIExpectedElement"/>
    <eLiterals name="OVERRIDE_I_HOVER_TEXT_PROVIDER" value="92" literal="overrideIHoverTextProvider"/>
    <eLiterals name="OVERRIDE_I_LOCATION_MAP" value="93" literal="overrideILocationMap"/>
    <eLiterals name="OVERRIDE_I_PARSE_RESULT" value="94" literal="overrideIParseResult"/>
    <eLiterals name="OVERRIDE_I_PROBLEM" value="95" literal="overrideIProblem"/>
    <eLiterals name="OVERRIDE_I_REFERENCE_MAPPING" value="96" literal="overrideIReferenceMapping"/>
    <eLiterals name="OVERRIDE_I_REFERENCE_RESOLVER" value="97" literal="overrideIReferenceResolver"/>
    <eLiterals name="OVERRIDE_I_REFERENCE_RESOLVE_RESULT" value="98" literal="overrideIReferenceResolveResult"/>
    <eLiterals name="OVERRIDE_I_REFERENCE_RESOLVER_SWITCH" value="99" literal="overrideIReferenceResolverSwitch"/>
    <eLiterals name="OVERRIDE_I_TEXT_DIAGNOSTIC" value="100" literal="overrideITextDiagnostic"/>
    <eLiterals name="OVERRIDE_I_TEXT_PARSER" value="101" literal="overrideITextParser"/>
    <eLiterals name="OVERRIDE_I_TEXT_PRINTER" value="102" literal="overrideITextPrinter"/>
    <eLiterals name="OVERRIDE_I_TEXT_RESOURCE" value="103" literal="overrideITextResource"/>
    <eLiterals name="OVERRIDE_I_META_INFORMATION" value="104" literal="overrideIMetaInformation"/>
    <eLiterals name="OVERRIDE_I_TEXT_RESOURCE_PLUGIN_PART" value="105" literal="overrideITextResourcePluginPart"/>
    <eLiterals name="OVERRIDE_I_TEXT_SCANNER" value="106" literal="overrideITextScanner"/>
    <eLiterals name="OVERRIDE_I_TEXT_TOKEN" value="107" literal="overrideITextToken"/>
    <eLiterals name="OVERRIDE_I_TOKEN_RESOLVER" value="108" literal="overrideITokenResolver"/>
    <eLiterals name="OVERRIDE_I_TOKEN_RESOLVE_RESULT" value="109" literal="overrideITokenResolveResult"/>
    <eLiterals name="OVERRIDE_I_TOKEN_RESOLVER_FACTORY" value="110" literal="overrideITokenResolverFactory"/>
    <eLiterals name="OVERRIDE_I_TOKEN_STYLE" value="111" literal="overrideITokenStyle"/>
    <eLiterals name="OVERRIDE_IURI_MAPPING" value="112" literal="overrideIURIMapping"/>
    <eLiterals name="OVERRIDE_E_PROBLEM_TYPE" value="113" literal="overrideEProblemType"/>
    <eLiterals name="OVERRIDE_CODE_COMPLETION_HELPER" value="114" literal="overrideCodeCompletionHelper"/>
    <eLiterals name="OVERRIDE_EXPECTED_CS_STRING" value="115" literal="overrideExpectedCsString"/>
    <eLiterals name="OVERRIDE_EXPECTED_STRUCTURAL_FEATURE" value="116" literal="overrideExpectedStructuralFeature"/>
    <eLiterals name="OVERRIDE_CAST_UTIL" value="117" literal="overrideCastUtil"/>
    <eLiterals name="OVERRIDE_COPIED_E_LIST" value="118" literal="overrideCopiedEList"/>
    <eLiterals name="OVERRIDE_COPIED_E_OBJECT_INTERNAL_E_LIST" value="119" literal="overrideCopiedEObjectInternalEList"/>
    <eLiterals name="OVERRIDE_E_CLASS_UTIL" value="120" literal="overrideEClassUtil"/>
    <eLiterals name="OVERRIDE_E_OBJECT_UTIL" value="121" literal="overrideEObjectUtil"/>
    <eLiterals name="OVERRIDE_LIST_UTIL" value="122" literal="overrideListUtil"/>
    <eLiterals name="OVERRIDE_MAP_UTIL" value="123" literal="overrideMapUtil"/>
    <eLiterals name="OVERRIDE_MINIMAL_MODEL_HELPER" value="124" literal="overrideMinimalModelHelper"/>
    <eLiterals name="OVERRIDE_RESOURCE_UTIL" value="125" literal="overrideResourceUtil"/>
    <eLiterals name="OVERRIDE_STREAM_UTIL" value="126" literal="overrideStreamUtil"/>
    <eLiterals name="OVERRIDE_STRING_UTIL" value="127" literal="overrideStringUtil"/>
    <eLiterals name="OVERRIDE_TEXT_RESOURCE_UTIL" value="128" literal="overrideTextResourceUtil"/>
    <eLiterals name="OVERRIDE_UNICODE_CONVERTER" value="129" literal="overrideUnicodeConverter"/>
    <eLiterals name="OVERRIDE_ABSTRACT_EXPECTED_ELEMENT" value="130" literal="overrideAbstractExpectedElement"/>
    <eLiterals name="OVERRIDE_NEW_FILE_WIZARD_PAGE" value="131" literal="overrideNewFileWizardPage"/>
    <eLiterals name="OVERRIDE_I_BACKGROUND_PARSING_LISTENER" value="132" literal="overrideIBackgroundParsingListener"/>
    <eLiterals name="OVERRIDE_TERMINATE_PARSING_EXCEPTION" value="133" literal="overrideTerminateParsingException"/>
    <eLiterals name="OVERRIDE_UNEXPECTED_CONTENT_TYPE_EXCEPTION" value="134" literal="overrideUnexpectedContentTypeException"/>
    <eLiterals name="OVERRIDE_TEXT_TOKEN" value="135" literal="overrideTextToken"/>
    <eLiterals name="SOURCE_GEN_FOLDER" value="136" literal="srcGenFolder"/>
    <eLiterals name="OVERRIDE_DEFAULT_LOAD_OPTIONS_EXTENSION_POINT_SCHEMA" value="137"
        literal="overrideDefaultLoadOptionsExtensionPointSchema"/>
    <eLiterals name="OVERRIDE_ADDITIONAL_EXTENSION_PARSER_EXTENSION_POINT_SCHEMA"
        value="138" literal="overrideAdditionalExtensionParserExtensionPointSchema"/>
    <eLiterals name="OVERRIDE_RESOURCE_FACTORY_DELEGATOR" value="139" literal="overrideResourceFactoryDelegator"/>
    <eLiterals name="BASE_RESOURCE_PLUGIN" value="140" literal="baseResourcePlugin"/>
    <eLiterals name="OVERRIDE_PREFERENCE_PAGE" value="141" literal="overridePreferencePage"/>
    <eLiterals name="ANTLR_PLUGIN_ID" value="142" literal="antlrPluginID"/>
    <eLiterals name="OVERRIDE_ANTLR_PLUGIN" value="143" literal="overrideAntlrPlugin"/>
    <eLiterals name="OVERRIDE_TOKEN_STYLE_INFORMATION_PROVIDER" value="144" literal="overrideTokenStyleInformationProvider"/>
    <eLiterals name="OVERRIDE_FOLDING_INFORMATION_PROVIDER" value="145" literal="overrideFoldingInformationProvider"/>
    <eLiterals name="OVERRIDE_BRACKET_INFORMATION_PROVIDER" value="146" literal="overrideBracketInformationProvider"/>
    <eLiterals name="OVERRIDE_SYNTAX_COVERAGE_INFORMATION_PROVIDER" value="147" literal="overrideSyntaxCoverageInformationProvider"/>
    <eLiterals name="SAVE_CHANGED_RESOURCES_ONLY" value="148" literal="saveChangedResourcesOnly"/>
    <eLiterals name="OVERRIDE_NEW_FILE_CONTENT_PROVIDER" value="149" literal="overrideNewFileContentProvider"/>
    <eLiterals name="LICENCE_HEADER" value="150" literal="licenceHeader"/>
    <eLiterals name="OVERRIDE_EXPECTED_TERMINAL" value="151" literal="overrideExpectedTerminal"/>
    <eLiterals name="OVERRIDE_COMPLETION_PROPOSAL" value="152" literal="overrideCompletionProposal"/>
    <eLiterals name="OVERRIDE_BUILDER" value="153" literal="overrideBuilder"/>
    <eLiterals name="OVERRIDE_BUILDER_ADAPTER" value="154" literal="overrideBuilderAdapter"/>
    <eLiterals name="OVERRIDE_I_BUILDER" value="155" literal="overrideIBuilder"/>
    <eLiterals name="OVERRIDE_NATURE" value="156" literal="overrideNature"/>
    <eLiterals name="ADDITIONAL_DEPENDENCIES" value="157" literal="additionalDependencies"/>
    <eLiterals name="DISABLE_BUILDER" value="158" literal="disableBuilder"/>
    <eLiterals name="ADDITIONAL_EXPORTS" value="159" literal="additionalExports"/>
    <eLiterals name="OVERRIDE_PAIR" value="160" literal="overridePair"/>
    <eLiterals name="OVERRIDE_ABSTRACT_INTERPRETER" value="161" literal="overrideAbstractInterpreter"/>
    <eLiterals name="OVERRIDE_GRAMMAR_INFORMATION_PROVIDER" value="162" literal="overrideGrammarInformationProvider"/>
    <eLiterals name="OVERRIDE_ATTRIBUTE_VALUE_PROVIDER" value="163" literal="overrideAttributeValueProvider"/>
    <eLiterals name="OVERRIDE_FOLLOW_SET_PROVIDER" value="164" literal="overrideFollowSetProvider"/>
    <eLiterals name="OVERRIDE_SYNTAX_ELEMENT" value="165" literal="overrideSyntaxElement"/>
    <eLiterals name="OVERRIDE_KEYWORD" value="166" literal="overrideKeyword"/>
    <eLiterals name="OVERRIDE_PLACEHOLDER" value="167" literal="overridePlaceholder"/>
    <eLiterals name="OVERRIDE_CARDINALITY" value="168" literal="overrideCardinality"/>
    <eLiterals name="OVERRIDE_PRINTER2" value="169" literal="overridePrinter2"/>
    <eLiterals name="OVERRIDE_CHOICE" value="170" literal="overrideChoice"/>
    <eLiterals name="OVERRIDE_COMPOUND" value="171" literal="overrideCompound"/>
    <eLiterals name="OVERRIDE_CONTAINMENT" value="172" literal="overrideContainment"/>
    <eLiterals name="OVERRIDE_LINE_BREAK" value="173" literal="overrideLineBreak"/>
    <eLiterals name="OVERRIDE_SEQUENCE" value="174" literal="overrideSequence"/>
    <eLiterals name="OVERRIDE_WHITE_SPACE" value="175" literal="overrideWhiteSpace"/>
    <eLiterals name="OVERRIDE_SYNTAX_ELEMENT_DECORATOR" value="176" literal="overrideSyntaxElementDecorator"/>
    <eLiterals name="OVERRIDE_IREFERENCE_CACHE" value="177" literal="overrideIReferenceCache"/>
    <eLiterals name="OVERRIDE_DEFAULT_HOVER_TEXT_PROVIDER" value="178" literal="overrideDefaultHoverTextProvider"/>
    <eLiterals name="OVERRIDE_FORMATTING_ELEMENT" value="179" literal="overrideFormattingElement"/>
    <eLiterals name="OVERRIDE_TERMINAL" value="180" literal="overrideTerminal"/>
    <eLiterals name="OVERRIDE_LAYOUT_INFORMATION_ADAPTER" value="181" literal="overrideLayoutInformationAdapter"/>
    <eLiterals name="OVERRIDE_LAYOUT_INFORMATION" value="182" literal="overrideLayoutInformation"/>
    <eLiterals name="USE_CLASSIC_PRINTER" value="183" literal="useClassicPrinter"/>
    <eLiterals name="DISABLE_E_VALIDATORS" value="184" literal="disableEValidators"/>
    <eLiterals name="DISABLE_EMF_VALIDATION_CONSTRAINTS" value="185" literal="disableEMFValidationConstraints"/>
    <eLiterals name="OVERRIDE_UI_META_INFORMATION" value="186" literal="overrideUIMetaInformation"/>
    <eLiterals name="RESOURCE_UI_PLUGIN_ID" value="187" literal="resourceUIPluginID"/>
    <eLiterals name="OVERRIDE_UI_PLUGIN_ACTIVATOR" value="188" literal="overrideUIPluginActivator"/>
    <eLiterals name="UI_BASE_PACKAGE" value="189" literal="uiBasePackage"/>
    <eLiterals name="ADDITIONAL_UI_DEPENDENCIES" value="190" literal="additionalUIDependencies"/>
    <eLiterals name="ADDITIONAL_UI_EXPORTS" value="191" literal="additionalUIExports"/>
    <eLiterals name="OVERRIDE_UI_MANIFEST" value="192" literal="overrideUIManifest"/>
    <eLiterals name="OVERRIDE_UI_BUILD_PROPERTIES" value="193" literal="overrideUIBuildProperties"/>
    <eLiterals name="OVERRIDE_UI_DOT_CLASSPATH" value="194" literal="overrideUIDotClasspath"/>
    <eLiterals name="OVERRIDE_UI_DOT_PROJECT" value="195" literal="overrideUIDotProject"/>
    <eLiterals name="UI_SOURCE_FOLDER" value="196" literal="uiSrcFolder"/>
    <eLiterals name="UI_SOURCE_GEN_FOLDER" value="197" literal="uiSrcGenFolder"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Abstract"/>
  <eClassifiers xsi:type="ecore:EClass" name="TokenStyle">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="tokenName" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="rgb" lowerBound="1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="fontStyles" upperBound="-1"
        eType="#//FontStyle"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="FontStyle">
    <eLiterals name="BOLD"/>
    <eLiterals name="ITALIC" value="1"/>
    <eLiterals name="STRIKETHROUGH" value="2"/>
    <eLiterals name="UNDERLINE" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Annotation">
    <eOperations name="getValue" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.sdk.concretesyntax.KeyValuePair parameter : getParameters ( ) ) { &#xD;&#xA;&#x9;if ( key .equals ( parameter .getKey ( ) ) ) { &#xD;&#xA;&#x9;&#x9;java.lang.String value = parameter .getValue ( ) ; &#xD;&#xA;&#x9;&#x9;return value ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return null ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Returns the annotation value for the given key.&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="key" lowerBound="1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//AnnotationType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
        eType="#//KeyValuePair" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Annotable" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="annotations" upperBound="-1"
        eType="#//Annotation" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="AnnotationType">
    <eLiterals name="OVERRIDE" literal="Override"/>
    <eLiterals name="SUPPRESS_WARNINGS" value="1" literal="SuppressWarnings"/>
    <eLiterals name="FOLDABLE" value="2" literal="Foldable"/>
    <eLiterals name="OPERATOR" value="3" literal="operator"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="OperatorAnnotationType">
    <eLiterals name="binary_left_associative"/>
    <eLiterals name="binary_right_associative" value="1"/>
    <eLiterals name="unary_prefix" value="2"/>
    <eLiterals name="unary_postfix" value="3" literal="unary_postfix"/>
    <eLiterals name="primitive" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="OperatorAnnotationProperty">
    <eLiterals name="type"/>
    <eLiterals name="identifier" value="1"/>
    <eLiterals name="weight" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="KeyValuePair">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="key" lowerBound="1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenClassCache">
    <eOperations name="getQualifiedInterfaceName" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if ( ! get_qualifiedInterfaceNameCache ( ) .containsKey ( genClass ) ) { &#xD;&#xA;&#x9;java.lang.String qualifiedInterfaceName = genClass .getQualifiedInterfaceName ( ) ; &#xD;&#xA;&#x9;get_qualifiedInterfaceNameCache ( ) .put ( genClass , qualifiedInterfaceName ) ; &#xD;&#xA;} &#xD;&#xA;return get_qualifiedInterfaceNameCache ( ) .get ( genClass ) ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Return the qualified name of the interface for the given GenClass.&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="genClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    </eOperations>
    <eOperations name="getEscapedTypeName" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="java.lang.String interfaceName = getQualifiedInterfaceName ( genClass ) ; &#xD;&#xA;java.lang.String escapedName = interfaceName .replace ( &quot;_&quot; , &quot;_005f&quot; ) ; &#xD;&#xA;escapedName = escapedName .replace ( &quot;.&quot; , &quot;_&quot; ) ; &#xD;&#xA;return escapedName ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Return an esacped version of the qualified name of the interface for &#xD;&#xA; the given GenClass. Underscores and dots are replaced to be able to use &#xD;&#xA; the returned name, for example, as method name.&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="genClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    </eOperations>
    <eOperations name="hasMapType" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return java .util .Map .Entry .class .getName ( ) .equals ( genClass .getEcoreClass ( ) .getInstanceClassName ( ) ) ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Checks whether the given GenClass has a map type.&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="genClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    </eOperations>
    <eOperations name="containsEqualByName" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.eclipse.emf.codegen.ecore.genmodel.GenClass entry : list ) { &#xD;&#xA;&#x9;org.eclipse.emf.ecore.EClass entryClass = entry .getEcoreClass ( ) ; &#xD;&#xA;&#x9;org.eclipse.emf.ecore.EClass oClass = genClass .getEcoreClass ( ) ; &#xD;&#xA;&#x9;if ( entryClass .getName ( ) .equals ( oClass .getName ( ) ) &amp;&amp; entryClass .getEPackage ( ) .getNsURI ( ) .equals ( oClass .getEPackage ( ) .getNsURI ( ) ) ) { &#xD;&#xA;&#x9;&#x9;return true ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return false ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Checks whether the given list of GenClasses contains a GenClass&#xD;&#xA; with the same name and namespace URI as the given GenClass. &#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="list" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
      <eParameters name="genClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="_qualifiedInterfaceNameCache"
        upperBound="-1" eType="#//GenClassCacheEntry" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenClassCacheEntry" instanceClassName="java.util.Map$Entry">
    <eStructuralFeatures xsi:type="ecore:EReference" name="key" eType="ecore:EClass platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore#//GenClass"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EClassUtil">
    <eOperations name="isSubClass" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.eclipse.emf.ecore.EClass superClassCandidate : subClassCandidate .getEAllSuperTypes ( ) ) { &#xD;&#xA;&#x9;// There seem to be multiple instances of meta classes when accessed&#xA;// through the generator model. Therefore, we compare by name.&#xA;if ( namesAndPackageURIsAreEqual ( superClassCandidate , superClass ) ) { &#xD;&#xA;&#x9;&#x9;return true ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return false ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="subClassCandidate" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
      <eParameters name="superClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
    </eOperations>
    <eOperations name="getSubClasses" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.eclipse.emf.ecore.EClass > result = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.ecore.EClass > ( ) ; &#xD;&#xA;for ( org.eclipse.emf.ecore.EClass next : availableClasses ) { &#xD;&#xA;&#x9;if ( isSubClass ( next , superClass ) &amp;&amp; isConcrete ( next ) ) { &#xD;&#xA;&#x9;&#x9;result .add ( next ) ; &#xD;&#xA;&#x9;} &#xD;&#xA;} &#xD;&#xA;return result ; &#xD;&#xA;"/>
        <details key="documentation" value="&#xD;&#xA; Returns all subclasses of 'superClass' that are contained&#xD;&#xA; in 'availableClasses'.&#xD;&#xA; &#xD;&#xA; @param superClass the superclass&#xD;&#xA; @param availableClasses the set of classes to search in&#xD;&#xA; @return a list of all subclasses of 'superClass'&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="superClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
      <eParameters name="availableClasses" upperBound="-1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
    </eOperations>
    <eOperations name="namesAndPackageURIsAreEqual" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return namesAreEqual ( classA , classB ) &amp;&amp; packageURIsAreEqual ( classA , classB ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="classA" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
      <eParameters name="classB" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
    </eOperations>
    <eOperations name="packageURIsAreEqual" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="java.lang.String nsURI_A = classA .getEPackage ( ) .getNsURI ( ) ; &#xD;&#xA;java.lang.String nsURI_B = classB .getEPackage ( ) .getNsURI ( ) ; &#xD;&#xA;return ( nsURI_A == null &amp;&amp; nsURI_B == null ) || nsURI_A .equals ( nsURI_B ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="classA" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
      <eParameters name="classB" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
    </eOperations>
    <eOperations name="namesAreEqual" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return classA .getName ( ) .equals ( classB .getName ( ) ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="classA" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
      <eParameters name="classB" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
    </eOperations>
    <eOperations name="isConcrete" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return ! eClass .isAbstract ( ) &amp;&amp; ! eClass .isInterface ( ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="eClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
    </eOperations>
    <eOperations name="isNotConcrete" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return ! isConcrete ( eClass ) ; &#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="eClass" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass"/>
    </eOperations>
  </eClassifiers>
</ecore:EPackage>
