epackage concretesyntax;

import ecore.EClass;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.BasicEList;

eclass EClassUtil {
	
	isConcrete() {
		return !eClass.isAbstract() && !eClass.isInterface();
	}

	isSubClass() {
		for (EClass superClassCandidate : subClassCandidate.getEAllSuperTypes()) {
			// There seem to be multiple instances of meta classes when accessed
			// through the generator model. Therefore, we compare by name.
			if (namesAndPackageURIsAreEqual(superClassCandidate, superClass)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Returns all subclasses of 'superClass' that are contained
	 * in 'availableClasses'.
	 * 
	 * @param superClass the superclass
	 * @param availableClasses the set of classes to search in
	 * @return a list of all subclasses of 'superClass'
	 */
	getSubClasses() {
		EList<EClass> result = new BasicEList<EClass>();
		for (EClass next : availableClasses) {
			if (isSubClass(next, superClass) &&
				isConcrete(next)) {
				result.add(next);
			}
		}
		return result;
	}

	namesAndPackageURIsAreEqual() {
		return namesAreEqual(classA, classB) && 
			packageURIsAreEqual(classA, classB);
	}

	packageURIsAreEqual() {
		String nsURI_A = classA.getEPackage().getNsURI();
		String nsURI_B = classB.getEPackage().getNsURI();
		if (nsURI_A == null && nsURI_B == null) {
			return true;
		}
		if (nsURI_A != null) {
			return nsURI_A.equals(nsURI_B);
		} else {
			// nsURI_A is null, but nsURI_B is not
			return false;
		}
	}

	namesAreEqual() {
		String nameA = classA.getName();
		String nameB = classB.getName();
		if (nameA == null) {
			return nameB == null;
		}
		return nameA.equals(nameB);
	}

	isNotConcrete() {
		return !isConcrete(eClass);
	}
}