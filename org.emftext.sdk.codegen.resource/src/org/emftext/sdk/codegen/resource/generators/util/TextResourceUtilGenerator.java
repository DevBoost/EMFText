/*******************************************************************************
 * Copyright (c) 2006-2011
 * Software Technology Group, Dresden University of Technology
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0 
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Software Technology Group - TU Dresden, Germany 
 *      - initial API and implementation
 ******************************************************************************/
package org.emftext.sdk.codegen.resource.generators.util;

import static org.emftext.sdk.codegen.resource.generators.IClassNameConstants.FILE;
import static org.emftext.sdk.codegen.resource.generators.IClassNameConstants.I_FILE;
import static org.emftext.sdk.codegen.resource.generators.IClassNameConstants.MAP;
import static org.emftext.sdk.codegen.resource.generators.IClassNameConstants.URI;

import org.emftext.sdk.codegen.composites.JavaComposite;
import org.emftext.sdk.codegen.parameters.ArtifactParameter;
import org.emftext.sdk.codegen.resource.GenerationContext;
import org.emftext.sdk.codegen.resource.generators.JavaBaseGenerator;

/**
 * Generates a utility class for text resources. This generator is only kept for compatibility
 * reasons. All methods are now generated by the ResourceUtilGenerator.
 */
public class TextResourceUtilGenerator extends JavaBaseGenerator<ArtifactParameter<GenerationContext>> {

	@Override
	public void generateJavaContents(JavaComposite sc) {
		
		sc.add("package " + getResourcePackageName() + ";");
		sc.addLineBreak();
		
		sc.addJavadoc(
			"Class " + getResourceClassName() + " can be used to perform common tasks on text resources, " +
			"such as loading and saving resources, as well as, checking them for errors. " +
			"This class is deprecated and has been replaced by " + resourceUtilClassName + "."
		);
		sc.add("public class " + getResourceClassName() + " {");
		sc.addLineBreak();
		addMethods(sc);
		sc.add("}");
	}

	private void addMethods(JavaComposite sc) {
		addGetResourceMethod1(sc);
		addGetResourceMethod2(sc);
		addGetResourceMethod3(sc);
		addGetResourceMethod4(sc);
	}

	private void addGetResourceMethod4(JavaComposite sc) {
		sc.add("@Deprecated").addLineBreak();
		sc.add("public static " + textResourceClassName + " getResource(" + URI + " uri, " + MAP + "<?,?> options) {");
		sc.add("return " + resourceUtilClassName + ".getResource(uri, options);");
		sc.add("}");
		sc.addLineBreak();
	}

	private void addGetResourceMethod3(JavaComposite sc) {
		sc.add("@Deprecated").addLineBreak();
		sc.add("public static " + textResourceClassName + " getResource(" + URI + " uri) {");
		sc.add("return " + resourceUtilClassName + ".getResource(uri);");
		sc.add("}");
		sc.addLineBreak();
	}

	private void addGetResourceMethod2(JavaComposite sc) {
		sc.add("@Deprecated").addLineBreak();
		sc.add("public static " + textResourceClassName + " getResource(" + FILE + " file, " + MAP + "<?,?> options) {");
		sc.add("return " + resourceUtilClassName + ".getResource(file, options);");
		sc.add("}");
		sc.addLineBreak();
	}

	private void addGetResourceMethod1(JavaComposite sc) {
		sc.add("@Deprecated").addLineBreak();
		sc.add("public static " + textResourceClassName + " getResource(" + I_FILE + " file) {");
		sc.add("return " + resourceUtilClassName + ".getResource(file);");
		sc.add("}");
		sc.addLineBreak();
	}
}
