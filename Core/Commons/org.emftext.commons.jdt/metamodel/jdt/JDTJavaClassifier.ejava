epackage jdt;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.jdt.core.IField;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;

eclass JDTJavaClassifier {

	getQualifiedName() {
		StringBuilder qualifiedName = new StringBuilder();
		qualifiedName.append(getPackageName());
		qualifiedName.append(".");
		for (String enclosingType : getEnclosingTypeNames()) {
			qualifiedName.append(enclosingType);
			qualifiedName.append("$");
		}
		qualifiedName.append(getSimpleName());
		return qualifiedName.toString();
	}

	getFields() {
		if (!isHasCachedFields()) {
			try {
				IWorkspace workspace = ResourcesPlugin.getWorkspace();
				IWorkspaceRoot root = workspace.getRoot();
				IProject project = root.getProject(getProjectName());
				org.eclipse.jdt.core.IJavaProject javaProject = JavaCore.create(project);
				if (javaProject != null && javaProject.exists()) {
					org.eclipse.jdt.core.IType type = javaProject.findType(getQualifiedName());
					org.eclipse.jdt.core.IField[] fields = type.getFields();
					for ( org.eclipse.jdt.core.IField field : fields) {
						org.emftext.commons.jdt.JDTField newField = org.emftext.commons.jdt.JdtFactory.eINSTANCE.createJDTField();
						newField.setName(field.getElementName());
						getCachedFields().add(newField);
					}
				}
			} catch (JavaModelException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			setHasCachedFields(true);
		}
		return getCachedFields();
	}
}
