epackage concretesyntax;

// plain Java imports
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.BasicEList;
 
eclass Rule {
	
	getDefinition() {
		EList<SyntaxElement> children = getChildren();
		// there should be at most one child
		assert children == null || children.size() == 1;
		
		if (children.size() > 0) {
			SyntaxElement firstChild = children.get(0);
			if (firstChild instanceof Choice) {
				return (Choice) firstChild;
			} else {
				// there should be no element other than Choice
				assert false;
				return null;
			}
		}
		return null;
	}

	getOperatorAnnotation() {
		for (Annotation annotation : getAnnotations()) {
			if (annotation.getType() == AnnotationType.OPERATOR) {
				return annotation;
			}
		}
		return null;
	}

	/**
	 * Returns the weight of this rule if it is an operator rule.
	 * If the rule is not an operator rule or the specified weight
	 * in the operator annotation is not a number, Integer.MIN_VALUE 
	 * is returned.
	 */
	getOperatorWeight() {
		Annotation operatorAnnotation = this.getOperatorAnnotation();
		if (operatorAnnotation != null) {
			String ruleWeightString = operatorAnnotation.getValue(OperatorAnnotationProperty.WEIGHT.toString());
			if (ruleWeightString != null) {
				try {
					return Integer.parseInt(ruleWeightString);			
				} catch (NumberFormatException e) {
					// ignore exception. invalid numbers are signaled by
					// returning MIN_VALUE
				}
			}
		}
		return Integer.MIN_VALUE;
	}

	/**
	 * Checks whether this rule is annotated with the given AnnotationType.
	 * If a key and a value is given it is further checked whether the
	 * annotation specifies this key and value. 
	 */
	hasAnnotation() {
		for (Annotation annotation : getAnnotations()) {
			if (annotation.getType() == type) {
				if (key != null) {
					for (KeyValuePair parameter : annotation.getParameters()) {
						if (key.equals(parameter.getKey())
								&& parameter.getValue().equals(value)) {
							return true;
						}
					}
				} else {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Checks whether this rule is annotated with @Override(remove="true").
	 */
	isOverrideRemoveRule() {
		// TODO mseifert: use constant here
		return hasAnnotation(AnnotationType.OVERRIDE, "remove", "true");
	}

	/**
	 * Checks whether this rule is annotated with @Override.
	 */
	isOverrideRule() {
		if (metaClass == null || getMetaclass() == metaClass) {
			if (hasAnnotation(AnnotationType.OVERRIDE, null, null)) {
				return true;
			}
		}
		return false;
	}
}