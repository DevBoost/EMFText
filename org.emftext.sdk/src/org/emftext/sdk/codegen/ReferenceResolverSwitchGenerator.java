package org.emftext.sdk.codegen;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.emftext.runtime.resource.IReferenceResolver;
import org.emftext.runtime.resource.IResolveResult;

/**
 * A generator that creates a multiplexing reference resolver.
 * Depending on the type of the reference that must be resolved,
 * the generated class delegates the resolve call to the appropriate
 * reference resolver.
 */
public class ReferenceResolverSwitchGenerator extends BaseGenerator {
	
	private Map<GenFeature, String> proxyReferences;
	private GenerationContext context;
	
	/**
	 * 
	 * 
	 * @param context
	 * 
	 * @param proxyReferences - a Map which contains all GenFeatures which where referenced and 
	 * a mapping to the corresponding resolver class which was generated.
	 */
	public ReferenceResolverSwitchGenerator(GenerationContext context, Map<GenFeature, String> proxyReferences) {
		super(context.getPackageName(), context.getReferenceResolverSwitchClassName());
		this.context = context;
		this.proxyReferences = proxyReferences;
	}
	
	@Override
	public boolean generate(PrintWriter out) {
		out.print(generateReferenceResolverSwitch());
		return true;
	}
	
	 /**
     * Generates the reference resolver switch that calls the correct
     * reference resolvers generated by <code>generateReferenceResolver()</code>.
     */
    private String generateReferenceResolverSwitch()  {  
    	StringBuffer s = new StringBuffer();
        s.append("package " + getResourcePackageName() + "; \n\n");
        
        generateImports(s);
        
		s.append("public class " + getResourceClassName() + " implements " + IReferenceResolver.class.getName() + " {\n\n");
		
		generateFields(s);
		generateResolveMethod(s);
		generateResolveStrictMethod(s);   
		generateDeResolveMethod(s);   
        generateSetOptionsMethod(s);
		generateResolveFuzzyMethod1(s);
		generateResolveFuzzyMethod2(s);
		
		s.append("}\n");
		
    	return s.toString();	
    }

	private void generateImports(StringBuffer s) {
		//import required EClasses
        EList<GenClass> importedClasses = new BasicEList<GenClass>();
        for(GenFeature proxyReference : proxyReferences.keySet()) {
        	GenClass genClass = proxyReference.getGenClass();
        	GenPackage p = genClass.getGenPackage();
        	String base = p.getBasePackage() == null ? "" : (p.getBasePackage() +".");
        	String classImport =  base + p.getEcorePackage().getName() + "." + genClass.getName();
            if (!importedClasses.contains(genClass)) {
            	s.append("import "+ classImport + ";\n");
            	importedClasses.add(genClass);
            }
        }
	}

	private void generateResolveFuzzyMethod2(StringBuffer s) {
		s.append("\tprotected void resolveFuzzy(" + EClass.class.getName() + " eClass, " + String.class.getName() + " identifier, " + EObject.class.getName() + " container, int position, \n");
		s.append("\t\t\tint featureID, \n");
		s.append("\t\t\t" + IReferenceResolver.class.getName() + " resolver, " + IResolveResult.class.getName() + " result\n");
		s.append("\t\t\t) {\n");
		s.append("\n");
		s.append("\t\tif (eClass.isInstance(container)) {\n");
		s.append("\t\t\t" + EStructuralFeature.class.getName() + " feature = container.eClass().getEStructuralFeature(featureID);\n");
		s.append("\t\t\tif (!(feature instanceof " + EReference.class.getName() + ")) {\n");
		s.append("\t\t\t\treturn;\n");
		s.append("\t\t\t}\n");
		s.append("\t\t\tresolver.resolve(identifier, container, (" + EReference.class.getName() + ") feature, position, true, result);\n");
		s.append("\t\t}\n");
		s.append("\t}\n");
		s.append("\n");
	}

	private void generateResolveFuzzyMethod1(StringBuffer s) {
		s.append("\tpublic void resolveFuzzy(" + String.class.getName() + " identifier, " + EObject.class.getName() + " container, int position, " + IResolveResult.class.getName() + " result) {\n\n");
		for(GenFeature proxyReference : proxyReferences.keySet()) {
			GenClass genClass = proxyReference.getGenClass();
			String accessorName = genClass.getGenPackage().getQualifiedPackageInterfaceName() + ".eINSTANCE.get"  + genClass.getName() + "()";
			String generatedClassName = proxyReferences.get(proxyReference);
			// TODO we should use the featureID constant instead of the integer value
			int featureID = genClass.getEcoreClass().getEStructuralFeature(proxyReference.getName()).getFeatureID();
			s.append("\t\tresolveFuzzy(" + accessorName + ", identifier, container, position, " + featureID + ", " + low(generatedClassName) + ", result);\n");
		}
		s.append("\t}\n\n");
	}

	private void generateSetOptionsMethod(StringBuffer s) {
		s.append("\tpublic void setOptions(" + java.util.Map.class.getName() + "<?, ?> options) {\n");
		for(GenFeature proxyReference : proxyReferences.keySet()) {
			String generatedClassName = proxyReferences.get(proxyReference);
			s.append("\t\t" + low(generatedClassName) + ".setOptions(options);\n");			
		}
		s.append("\t}\n\n");
	}

	private void generateDeResolveMethod(StringBuffer s) {
		s.append("\tpublic " + String.class.getName() + " deResolve(" + EObject.class.getName() + " refObject, " + EObject.class.getName() + " container, " + EReference.class.getName() + " reference) {\n");
		for(GenFeature proxyReference : proxyReferences.keySet()) {
			String generatedClassName = proxyReferences.get(proxyReference);
			String genClassName = proxyReference.getGenClass().getName();
			// TODO we should use the featureID constant instead of the integer value
			int featureID = proxyReference.getGenClass().getEcoreClass().getEStructuralFeature(proxyReference.getName()).getFeatureID();
			s.append("\t\tif (container instanceof " + genClassName + " && reference.getFeatureID() == " + featureID + ") {\n");		
			s.append("\t\t\treturn " + low(generatedClassName)+".deResolve(refObject,container,reference);\n");			
			s.append("\t\t}\n");
		}
		s.append("\t\treturn null;\n");
		s.append("\t}\n\n");
	}

	private void generateResolveStrictMethod(StringBuffer s) {
		s.append("\tpublic void resolveStrict(" + String.class.getName() + " identifier, " + EObject.class.getName() + " container, " + EReference.class.getName() + " reference, int position, " + IResolveResult.class.getName() + " result) {\n");		
		for(GenFeature proxyReference : proxyReferences.keySet()) {
			String generatedClassName = proxyReferences.get(proxyReference);
			GenClass genClass = proxyReference.getGenClass();
			final int featureID = genClass.getEcoreClass().getEStructuralFeature(proxyReference.getName()).getFeatureID();
			// TODO we should use the featureID constant instead of the integer value
			s.append("\t\tif (container instanceof " + genClass.getName() + " && reference.getFeatureID() == " + featureID + ") {\n");		
			s.append("\t\t\t" + low(generatedClassName) + ".resolve(identifier, container, reference, position, false, result);\n");
			s.append("\t\t\treturn;\n");
			s.append("\t\t}\n");			
		}
		s.append("\t}\n\n");
	}

	private void generateResolveMethod(StringBuffer s) {
		s.append("\tpublic void resolve(" + String.class.getName() + " identifier, " + EObject.class.getName() + " container, " + EReference.class.getName() + " reference, int position, boolean resolveFuzzy, " + IResolveResult.class.getName() + " result) {\n");
		s.append("\t\tif (resolveFuzzy) {\n");
		s.append("\t\t\tresolveFuzzy(identifier, container, position, result);\n");
		s.append("\t\t} else {\n");
		s.append("\t\t\tresolveStrict(identifier, container, reference, position, result);\n");
		s.append("\t\t}\n");
		s.append("\t}\n\n");
	}

	private void generateFields(StringBuffer s) {
    	List<String> generatedResolvers = new ArrayList<String>();

		for(GenFeature proxyReference : proxyReferences.keySet()) {
			String generatedClassName = proxyReferences.get(proxyReference);
			if (!generatedResolvers.contains(generatedClassName)) {
				generatedResolvers.add(generatedClassName);
				String fullClassName = context.getResolverPackageName() + "." + generatedClassName;
				s.append("\tprotected " + fullClassName + " " + low(generatedClassName) + " = new " + fullClassName + "();\n\n");			
			}
		}
	}
}
