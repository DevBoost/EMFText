epackage emfdoc;

// plain Java imports
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.TreeIterator;

import ecore.EModelElement;
import ecore.EClass;
import ecore.EObject;
 
eclass Documentation {

	getDocumentationElement() {
		EList<DocumentationElement> documentationElements = getDocumentationElements();
		for (DocumentationElement documentationElement : documentationElements) {
			EModelElement documentedElement = documentationElement.getDocumentedElement();
			if (documentedElement == modelElement) {
				return documentationElement;
			}
		}
		return null;  
	}
	
	getCoverage() {
		EPackage documentedPackage = getDocumentedPackage();
		
		int elements = 0;
		int documentedElements = 0;
		TreeIterator<EObject> contents = documentedPackage.eAllContents();
		while (contents.hasNext()) {
			EObject content = contents.next();
			if (content instanceof EAnnotation) {
				// ignore annotations
				continue;
			}
			if (content instanceof EModelElement && type.isSuperTypeOf(content.eClass())) {
				EModelElement element = (EModelElement) content;
				elements++;
				if (getDocumentationElement(element) != null) {
					documentedElements++;
				}
			}
		}
		
		if (elements == 0) {
			return 0;
		} else {
			return (int) (100.0 * documentedElements / elements);
		}
	}
}