-- Anmerkung: 

-- quellmodell muss invasiv geändert werden, um korrektes Mapping zu realisieren
-- parameterTypes erfordenr wieder viele einzelne regeln :-(
-- wie genau mit statements umgehen das alle closures gefunden werden?
-- directe closures oberhalb des Syntaxbaumes kein Problem
-- Closures in tiefen Expressions ein Problem
-- eigene Regeln für jeden Statementtyp notwendig
-- TODO: eigene Regeln für jeden Expressiontyp um zu unterscheiden ob StatementExpression oder nicht

transformation copy(JAVA : java, CLOSURES : closures) {
	/*
	relation References_Argumentable_Closure {

		enforce domain JAVA s : java::references::Argumentable {
			arguments = s_a : java::instantiations::NewConstructorCall{}
		};

		enforce domain CLOSURES t : java::references::Argumentable {
			arguments = t_a : closures::Closure{}
		};
		where {
			Closures_Closure(s_a,t_a);
		}

	}*/
	
	relation References_MethodCall_Closure {

		enforce domain JAVA s : java::references::MethodCall {
			arguments = s_a : java::instantiations::NewConstructorCall{}
		};

		enforce domain CLOSURES t : java::references::MethodCall {
			arguments = t_a : closures::Closure{}
		};
		where {
			Closures_Closure(s_a,t_a)
			or true;
		}

	}
	
	relation Instantiations_NewConstructorCall_Closure {

		enforce domain JAVA s : java::instantiations::NewConstructorCall {
			arguments = s_a : java::instantiations::NewConstructorCall{}
		};

		enforce domain CLOSURES t : java::instantiations::NewConstructorCall {
			arguments = t_a : closures::Closure{}
		};
		where {
			Closures_Closure(s_a,t_a)
			or true;
		}

	}
	
	relation AssignmentExpression_Value_Closure {

		enforce domain JAVA s : java::expressions::AssignmentExpression {
			value = s_a : java::instantiations::NewConstructorCall{}
		};

		enforce domain CLOSURES t : java::expressions::AssignmentExpression {
			value = t_a : closures::Closure{}
		};
		when{
			if not s_a.oclIsUndefined() then 
				not s_a.anonymousClass.oclIsUndefined()
			else
				true
			endif;
		}
		where {
			Closures_Closure(s_a,t_a)
			or true;
		}

	}
	
	relation LocalVariable_InitialValue_Closure {
		
		enforce domain JAVA s : java::variables::LocalVariable {
			initialValue = s_a : java::instantiations::NewConstructorCall {}
		};

		enforce domain CLOSURES t : java::variables::LocalVariable {
			initialValue = t_a : closures::Closure{}
		};
		when{
			if not s_a.oclIsUndefined() then 
				not s_a.anonymousClass.oclIsUndefined()
			else
				true
			endif;
		}
		where {
			Closures_Closure(s_a,t_a)
			or true;
		}
	}
	
	relation Return_ReturnValue_Closure {
		
		enforce domain JAVA s : java::statements::Return {
			returnValue = s_a : java::instantiations::NewConstructorCall {}
		};

		enforce domain CLOSURES t : java::statements::Return {
			returnValue = t_a : closures::Closure{}
		};
		when{
			if not s_a.oclIsUndefined() then 
				not s_a.anonymousClass.oclIsUndefined()
			else
				true
			endif;
		}
		where {
			Closures_Closure(s_a,t_a)
			or true;
		}
	}
	
	relation AssignmentExpression_Value_Expression {

		varValue : java::expressions::Expression;

		enforce domain JAVA s : java::expressions::AssignmentExpression {
			value =  varValue
		};

		enforce domain CLOSURES t : java::expressions::AssignmentExpression {
			value =  varValue
		};
		when{
			if not s.value.oclIsUndefined() then
				if not s.value.oclIsTypeOf(java::instantiations::NewConstructorCall) then
					true
				else
					s.value.oclAsType(java::instantiations::NewConstructorCall).
						anonymousClass.oclIsUndefined()
				endif
			else
				if not t.value.oclIsTypeOf(closures::Closure) then
					true
				else
					false
				endif
			endif;
		}
	}
	
	relation LocalVariable_InitialValue_Expression {
		
		varValue : java::expressions::Expression;
		
		enforce domain JAVA s : java::variables::LocalVariable {
			initialValue = varValue
		};
		enforce domain CLOSURES t : java::variables::LocalVariable {
			initialValue = varValue
		};
		when{
			if not s.initialValue.oclIsUndefined() then
				if not s.initialValue.oclIsTypeOf(java::instantiations::NewConstructorCall) then
					true
				else
					s.initialValue.oclAsType(java::instantiations::NewConstructorCall).
						anonymousClass.oclIsUndefined()
				endif
			else
				if t.initialValue.oclIsUndefined() then
					true
				else
					if not t.initialValue.oclIsTypeOf(closures::Closure) then
						true
					else
						false
					endif
				endif
			endif;
		}
	}
	
	relation Return_ReturnValue_Expression {

		varValue : java::expressions::Expression;

		enforce domain JAVA s : java::statements::Return {
			returnValue =  varValue
		};

		enforce domain CLOSURES t : java::statements::Return {
			returnValue =  varValue
		};
		when{
			if not s.returnValue.oclIsUndefined() then 
				if not s.returnValue.oclIsTypeOf(java::instantiations::NewConstructorCall) then
					true
				else
					s.returnValue.oclAsType(java::instantiations::NewConstructorCall).
						anonymousClass.oclIsUndefined()
				endif
			else
				if not t.returnValue.oclIsTypeOf(closures::Closure) then
					true
				else
					false
				endif
			endif;
		}
	}
	
	relation References_Argumentable_NewConstructorCall {

		varTypRef : java::types::TypeReference;

		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_n : java::instantiations::NewConstructorCall{
				typeReference =  varTypRef
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_n : java::instantiations::NewConstructorCall{
				typeReference =  varTypRef
			}
		};
		when{
			if not s_n.oclIsUndefined() then
				if not s_n.anonymousClass.oclIsUndefined() then
					s_n.anonymousClass.members->size() <> 1
				else
					true
				endif
			else
				true
			endif;
		}
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or
			Instantiations_NewConstructorCall_Closure(s_n,t_n) or
			References_Argumentable_NewConstructorCall(s_n,t_n) or
			References_Argumentable_MethodCall(s_n,t_n) or
			References_Argumentable_IdentifierReference(s_n,t_n) or
			References_Argumentable_StringReference(s_n,t_n) or
			References_Argumentable_SelfReference(s_n,t_n) or
			References_Argumentable_PrimitiveTypeReference(s_n,t_n)
			or 
			 TypedElement_TypeReference_NamespaceClassifierReference(s_n,t_n) or
			 TypedElement_TypeReference_Int(s_n,t_n) or
			 TypedElement_TypeReference_Void(s_n,t_n) or
			 TypedElement_TypeReference_Boolean(s_n,t_n) or
			 TypedElement_TypeReference_Byte(s_n,t_n) or
			 TypedElement_TypeReference_Double(s_n,t_n) or
			 TypedElement_TypeReference_Float(s_n,t_n) or
			 TypedElement_TypeReference_Long(s_n,t_n) or
			 TypedElement_TypeReference_Short(s_n,t_n) or
			 TypedElement_TypeReference_Char(s_n,t_n)
			 or
			 true;
		}
	}
	
	relation References_Argumentable_MethodCall {

		targetElement : java::references::ReferenceableElement;

		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_n : java::references::MethodCall{
				target = targetElement
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_n : java::references::MethodCall{
				target = targetElement
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or
			References_MethodCall_Closure(s_n,t_n) or
			References_Argumentable_NewConstructorCall(s_n,t_n) or
			References_Argumentable_MethodCall(s_n,t_n) or
			References_Argumentable_IdentifierReference(s_n,t_n) or
			References_Argumentable_StringReference(s_n,t_n) or
			References_Argumentable_SelfReference(s_n,t_n) or
			References_Argumentable_PrimitiveTypeReference(s_n,t_n)
			or 
			true;
		}
	}
	
	relation References_Argumentable_IdentifierReference {

		varTypRef : java::references::ReferenceableElement;

		enforce domain JAVA s: java::references::Argumentable{
			arguments = s_n : java::references::IdentifierReference{
				target =  varTypRef
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable{
			arguments = t_n : java::references::IdentifierReference{
				target =  varTypRef
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or true;
		}
	}
	
	relation References_Argumentable_StringReference {

		valueVar : String;

		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_n : java::references::StringReference{
				value = valueVar
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_n : java::references::StringReference{
				value = valueVar
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or true;
		}
	}
	
	relation References_Argumentable_SelfReference {

		selfVar : java::literals::Self;

		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_n : java::references::SelfReference{
				_self = selfVar
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_n : java::references::SelfReference{
				_self = selfVar
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or true;
		}
	}
	
	relation References_Argumentable_PrimitiveTypeReference {

		primitiveTypeVar : java::types::PrimitiveType;

		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_n : java::references::PrimitiveTypeReference{
				primitiveType = primitiveTypeVar
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_n : java::references::PrimitiveTypeReference{
				primitiveType = primitiveTypeVar
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or true;
		}
	}

	relation Closures_Closure {

		methodName : String;
		statementElements : OrderedSet(java::statements::Statement);
		valueTypeElement : java::types::TypeReference;
		
		modifiers : OrderedSet(java::modifiers::AnnotationInstanceOrModifier);
		typRef : java::types::TypeReference;
		paraTypRef : OrderedSet(java::types::TypeReference);
		
		enforce domain JAVA s : java::instantiations::NewConstructorCall {
			anonymousClass = s_ac : java::classifiers::AnonymousClass {
				members = s_ac_m : java::members::ClassMethod {
					statements = statementElements,
					name = methodName,
					typeReference = valueTypeElement,
					annotationsAndModifiers = modifiers
				}
			},
			typeReference = typRef
		};

		enforce domain CLOSURES t : closures::Closure {
			
			valueType = valueTypeElement,
			statements = statementElements,
			methodName = methodName,
			typeReference = typRef,
			annotationsAndModifiers = modifiers,
			parameterTypes = paraTypRef
		};
		when{
			if s.typeReference.oclIsUndefined()
				and
				s.anonymousClass.oclIsUndefined() then
					true
			else
				s_ac.members->size() = 1
				and
				s_ac.members->at(1).oclIsTypeOf(java::members::ClassMethod)
				and
				not s_ac.members->at(1).oclAsType(java::members::ClassMethod).typeReference.oclIsUndefined()
				and 
				not s_ac.members->at(1).oclAsType(java::members::ClassMethod).statements->isEmpty()
			endif; 
		}
	}
	
	relation Closure_ParameterType_NamespaceClassifierReference {

		targetElement : java::classifiers::Classifier;
		targetElement2 : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::NamespaceClassifierReference {
					classifierReferences = s_p_tr_cr : java::types::ClassifierReference {
						target = targetElement,
						target = targetElement2
					}
				},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::NamespaceClassifierReference {
					classifierReferences = t_p_tr_cr : java::types::ClassifierReference {
						target = targetElement
					}
				},
				name = parameterName
			}
			,
			parameterTypes = t_pt : java::types::NamespaceClassifierReference {
				classifierReferences = t_pt_cr : java::types::ClassifierReference {
					target = targetElement2
				}
			}
		};
	}
	
	relation Closure_ParameterType_Integer {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Int{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Int{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Int{}
		};
		when{
			if t_p.oclIsUndefined() then
				true
			else
				if t.parameters->size() <> t.parameterTypes->size() then
					false
				else
			--	if s.parameters->size() >= t.parameters->size() then
			--		false
			--	else
				if s.parameters->forAll(p|
					p.name <> t_p.name) then
					true
				else
					false
				endif endif 
			--	endif
			endif;
		}
	}
	
	relation Closure_ParameterType_Boolean {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Boolean{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Boolean{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Boolean{}
		};
	}
	
	relation Closure_ParameterType_Float {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Float{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Float{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Float{}
		};
	}

	relation Closure_ParameterType_Long {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Long{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Long{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Long{}
		};
	}
	
	relation Closure_ParameterType_Byte {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Byte{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Byte{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Byte{}
		};
	}
	
	relation Closure_ParameterType_Double {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Double{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Double{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Double{}
		};
	}
	
	relation Closure_ParameterType_Char {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Char{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Char{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Char{}
		};
	}
	
	relation Closure_ParameterType_Short {

		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Short{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Short{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Short{}
		};
	}
	
	top relation CompilationUnit {
		
		varName : String;
		varNamespace : Sequence(String);
		varImport : OrderedSet(java::imports::Import);
				
		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			name = varName,
			namespaces = varNamespace,
			imports =  varImport
		};
		
		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			name = varName,
			namespaces = varNamespace,
			imports =  varImport
		};
		where{
	--		CompilationUnit_Import(s_cu,t_cu) or
			CompilationUnit_Class(s_cu,t_cu)or
			CompilationUnit_Interface(s_cu,t_cu) or
			CompilationUnit_Annotation(s_cu,t_cu) or
			CompilationUnit_Enumeration(s_cu,t_cu)
			or true;
		}
	}
	
	relation CompilationUnit_Class {

		varClassName : String;
					
		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Class {
				name = varClassName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Class  {
				name = varClassName
			}
		};
		where{
			-- is necessary to get a TRUE in this OCL constraint 
			Class_Extends_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Implementor_Implements_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Members_Constructor(s_cl,t_cl) or
			Members_EmptyMember(s_cl,t_cl) or
			Members_Field(s_cl,t_cl) or
			Members_ClassMethod(s_cl,t_cl) or
			Members_Class(s_cl,t_cl) or
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl)
			or true;
		}

	}
	
	relation CompilationUnit_Interface {

		varInterfaceName : String;

		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Interface {
				name = varInterfaceName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Interface  {
				name = varInterfaceName
			}
		};
		where{
			Members_InterfaceMethod(s_cl,t_cl) or
			Members_Field(s_cl,t_cl) or
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl) or
			Interface_Extends_TypeReference_NamespaceClassifierReference(s_cl,t_cl)
			or true;
		}
	}
	
	relation CompilationUnit_Annotation {

		varInterfaceName : String;

		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Annotation {
				name = varInterfaceName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Annotation  {
				name = varInterfaceName
			}
		};
		where{
			Members_AnnotationMethod(s_cl,t_cl) or
			Annotation_Attribute(s_cl,t_cl) or 
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl) 
			or true;
		}
	}
	
	relation CompilationUnit_Enumeration {

		varInterfaceName : String;

		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Enumeration {
				name = varInterfaceName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Enumeration  {
				name = varInterfaceName
			}
		};
		where{
			Enumeration_Enum_Constant(s_cl,t_cl) or
			Implementor_Implements_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Members_InterfaceMethod(s_cl,t_cl) or
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl)
			or true;
		}
	}
	
	relation CompilationUnit_Import {
		
		varImportName : String;
		varImportNamespace : Sequence(String);
				
		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			
			imports = s_imp : java::imports::ClassifierImport  {
				namespaces = varImportNamespace,
				classifier = s_cl : java::classifiers::Class {
					name = varImportName
				}
			}
		};
		
		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			
			imports = t_imp : java::imports::ClassifierImport  {
				namespaces = varImportNamespace,
				classifier = s_cl : java::classifiers::Class {
					name = varImportName
				}
			}
		};
	}
	
	relation Members_ClassMethod {

		varName : String;
		
		enforce domain JAVA s_c2 : java::classifiers::Class  {
			members =  s_cm : java::members::ClassMethod {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Class  {
			members = t_cm : java::members::ClassMethod {
				name = varName
			}
		};
		
		where{
			ArrayTypeable_ArrayDimension(s_cm,t_cm) 
			or
			Parametrizable_Parameter(s_cm,t_cm) 
			or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm) 
			or
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Protected(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Static(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Abstract(s_cm,t_cm)
			or
			Statements_StatementListContainer_Return(s_cm,t_cm) or
			Statements_StatementListContainer_IdentifierReference(s_cm,t_cm) or
			Statements_StatementListContainer_SelfReference(s_cm,t_cm) or
			Statements_StatementListContainer_StringReference(s_cm,t_cm) or
			Statements_StatementListContainer_PrimitiveTypeReference(s_cm,t_cm) or
			Statements_StatementListContainer_Assert(s_cm,t_cm) or
			Statements_StatementListContainer_Block(s_cm,t_cm) or
			Statements_StatementListContainer_Condition(s_cm,t_cm) or
			Statements_StatementListContainer_DoWhileLoop(s_cm,t_cm) or
			Statements_StatementListContainer_WhileLoop(s_cm,t_cm) or
			Statements_StatementListContainer_ForEachLoop(s_cm,t_cm) or
			Statements_StatementListContainer_ForLoop(s_cm,t_cm) or
			Statements_StatementListContainer_Switch(s_cm,t_cm) or
			Statements_StatementListContainer_SynchronizedBlock(s_cm,t_cm) or
			Statements_StatementListContainer_TryBlock(s_cm,t_cm) or
			Statements_StatementListContainer_NewConstructorCall(s_cm,t_cm) or
			Statements_StatementListContainer_MethodCall(s_cm,t_cm) or
			Statements_StatementListContainer_AssignmentExpression(s_cm,t_cm)or
			Statements_StatementListContainer_LocalVariableStatement(s_cm,t_cm)
			or true;
		}
		
	}
	
	relation Members_InterfaceMethod {

		varName : String;

		enforce domain JAVA s_cl : java::members::MemberContainer  {
			members =  s_cm : java::members::InterfaceMethod {
				name = varName
			}
		};

		enforce domain CLOSURES t_cl : java::members::MemberContainer  {
			members = t_cm : java::members::InterfaceMethod {
				name = varName
			}
		};
		where{
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm) 
			or
			AnnotableAndModifiable_Modifier_Abstract(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm)
			or
			Parametrizable_Parameter(s_cm,t_cm)
			or
			ArrayTypeable_ArrayDimension(s_cm,t_cm)
			or true;
		}
	}
	
	relation Members_AnnotationMethod {

		varName : String;

		enforce domain JAVA s_cl : java::classifiers::Annotation  {
			members =  s_cm : java::members::InterfaceMethod {
				name = varName
			}
		};

		enforce domain CLOSURES t_cl : java::classifiers::Annotation  {
			members = t_cm : java::members::InterfaceMethod {
				name = varName
			}
		};
		where{
			(TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm))  
			and
			(AnnotableAndModifiable_Modifier_Abstract(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm)) 
			or
			Parametrizable_Parameter(s_cm,t_cm)
			or
			ArrayTypeable_ArrayDimension(s_cm,t_cm)
			or true;
		}
	}
	
	relation Members_Constructor {

		varName : String;

		enforce domain JAVA s_c2 : java::classifiers::Class  {
			members =  s_mem : java::members::Constructor {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Class  {
			members = t_mem : java::members::Constructor {
				name = varName
			}
		};
		where{
			Parametrizable_Parameter(s_mem,t_mem) 
			or
			AnnotableAndModifiable_Modifier_Public(s_mem,t_mem) or
			AnnotableAndModifiable_Modifier_Private(s_mem,t_mem)
			or
			Statements_StatementListContainer_IdentifierReference(s_mem,t_mem) or
			Statements_StatementListContainer_SelfReference(s_mem,t_mem) or
			Statements_StatementListContainer_StringReference(s_mem,t_mem) or
			Statements_StatementListContainer_PrimitiveTypeReference(s_mem,t_mem) or
			Statements_StatementListContainer_Assert(s_mem,t_mem) or
			Statements_StatementListContainer_Block(s_mem,t_mem) or
			Statements_StatementListContainer_Condition(s_mem,t_mem) or
			Statements_StatementListContainer_DoWhileLoop(s_mem,t_mem) or
			Statements_StatementListContainer_WhileLoop(s_mem,t_mem) or
			Statements_StatementListContainer_ForEachLoop(s_mem,t_mem) or
			Statements_StatementListContainer_ForLoop(s_mem,t_mem) or
			Statements_StatementListContainer_Switch(s_mem,t_mem) or
			Statements_StatementListContainer_SynchronizedBlock(s_mem,t_mem) or
			Statements_StatementListContainer_TryBlock(s_mem,t_mem) or
			Statements_StatementListContainer_NewConstructorCall(s_mem,t_mem) or
			Statements_StatementListContainer_MethodCall(s_mem,t_mem) or
			Statements_StatementListContainer_AssignmentExpression(s_mem,t_mem) or
			Statements_StatementListContainer_LocalVariableStatement(s_mem,t_mem)
			or
			true; --when modifier is empty

		}
	}
	
	relation Members_EmptyMember {

		varName : String;

		enforce domain JAVA s_c2 : java::classifiers::Class  {
			members =  s_mem : java::members::EmptyMember {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Class  {
			members = t_mem : java::members::EmptyMember {
				name = varName
			}
		};

	}
	
	relation Members_Field {

		varName : String;
		initialValueVar : java::expressions::Expression;
		
		enforce domain JAVA s_c2 : java::members::MemberContainer  {
			members =  s_cm : java::members::Field {
				name = varName,
				initialValue =  initialValueVar
			}
		};

		enforce domain CLOSURES t_c2 : java::members::MemberContainer  {
			members = t_cm : java::members::Field {
				name = varName,
				initialValue =  initialValueVar
			}
		};
		
		where{
			ArrayTypeable_ArrayDimension(s_cm,t_cm) or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm) 
			or  
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Protected(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Static(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Final(s_cm,t_cm)
			or true;
			
		}
	}
	
	relation Members_Class {

		varClassName : String;
					
		enforce domain JAVA s_cu : java::classifiers::Class {
			members = s_cl : java::classifiers::Class {
				name = varClassName,
				annotationsAndModifiers = s_aam : java::modifiers::Public {}
			}
		};

		enforce domain CLOSURES t_cu : java::classifiers::Class {
			members = t_cl : java::classifiers::Class  {
				name = varClassName,
				annotationsAndModifiers = t_aam : java::modifiers::Public {}
			}
		};
		where{
			Class_Extends_TypeReference_NamespaceClassifierReference(s_cl,t_cl) 
			or
			Implementor_Implements_TypeReference_NamespaceClassifierReference(s_cl,t_cl) 
			or
			Members_Constructor(s_cl,t_cl) or
			Members_EmptyMember(s_cl,t_cl) or
			Members_Field(s_cl,t_cl) or
			Members_ClassMethod(s_cl,t_cl)
			or true;
		}

	}
	
	relation Statements_StatementListContainer_NewConstructorCall {

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::instantiations::NewConstructorCall {}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::instantiations::NewConstructorCall {}
			}
		};
		where{
			Instantiations_NewConstructorCall_Closure(s_s_e,t_s_e) or
			References_Argumentable_NewConstructorCall(s_s_e,t_s_e) or
			References_Argumentable_MethodCall(s_s_e,t_s_e) or
			References_Argumentable_IdentifierReference(s_s_e,t_s_e) or
			References_Argumentable_StringReference(s_s_e,t_s_e) or
			References_Argumentable_SelfReference(s_s_e,t_s_e) or
			References_Argumentable_PrimitiveTypeReference(s_s_e,t_s_e)or
			References_Argumentable_BooleanLiteral(s_s_e,t_s_e)or
			References_Argumentable_DecimalDoubleLiteral(s_s_e,t_s_e)or
			References_Argumentable_DecimalFloatLiteral(s_s_e,t_s_e)or
			References_Argumentable_NullLiteral(s_s_e,t_s_e)or
			References_Argumentable_Expression(s_s_e,t_s_e)
			or
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e) or
			References_Reference_ReflectiveClassReference(s_s_e,t_s_e)
			or
			 TypedElement_TypeReference_NamespaceClassifierReference(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Int(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Void(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Boolean(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Byte(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Double(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Float(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Long(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Short(s_s_e,t_s_e) or
			 TypedElement_TypeReference_Char(s_s_e,t_s_e)
			 or true;
			
		}
	}
	
	relation Statements_StatementListContainer_MethodCall {

		targetElement : java::references::ReferenceableElement;
		

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::MethodCall {
					target =  targetElement
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::MethodCall {
					target =  targetElement
				}
			}
		};
		where{
			References_MethodCall_Closure(s_s_e,t_s_e) or
			References_Argumentable_NewConstructorCall(s_s_e,t_s_e) or
			References_Argumentable_MethodCall(s_s_e,t_s_e) or
			References_Argumentable_IdentifierReference(s_s_e,t_s_e) or
			References_Argumentable_StringReference(s_s_e,t_s_e) or
			References_Argumentable_SelfReference(s_s_e,t_s_e) or
			References_Argumentable_PrimitiveTypeReference(s_s_e,t_s_e) or
			References_Argumentable_BooleanLiteral(s_s_e,t_s_e)or
			References_Argumentable_DecimalDoubleLiteral(s_s_e,t_s_e)or
			References_Argumentable_DecimalFloatLiteral(s_s_e,t_s_e)or
			References_Argumentable_NullLiteral(s_s_e,t_s_e)or
			References_Argumentable_Expression(s_s_e,t_s_e)
			or
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e) or
			References_Reference_ReflectiveClassReference(s_s_e,t_s_e)
			or true;
		}
	}
	
	relation Statements_StatementListContainer_AssignmentExpression {
	
		varChild : java::expressions::AssignmentExpressionChild;
		varAssOp : java::operators::AssignmentOperator;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::expressions::AssignmentExpression {
					child = varChild,
					assignmentOperator = varAssOp
				}
			}
		};
		
		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::expressions::AssignmentExpression {
					child = varChild,
					assignmentOperator = varAssOp
				}
			}
		};
		where{
			AssignmentExpression_Value_Closure(s_s_e,t_s_e) or
			AssignmentExpression_Value_Expression(s_s_e,t_s_e)
			or true;
		}
	}
	
	relation Statements_StatementListContainer_LocalVariableStatement {
	
		varName : String;
		varTypRef :  java::types::TypeReference;
	
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::LocalVariableStatement{
				variable = s_s_v : java::variables::LocalVariable {
					name = varName,
					typeReference = varTypRef
				}
			}
		};
		
		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::LocalVariableStatement{
				variable = t_s_v : java::variables::LocalVariable {
					name = varName,
					typeReference = varTypRef
				}
			}
		};
		where{
			LocalVariable_InitialValue_Closure(s_s_v,t_s_v) or
			LocalVariable_InitialValue_Expression(s_s_v,t_s_v)
			or true;
		}
	}
	
	relation Statements_StatementListContainer_Return {
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::Return{}
		};
		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::Return{}
		};
		where{
			Return_ReturnValue_Closure(s_s,t_s) or
			Return_ReturnValue_Expression(s_s,t_s);
		}
	}	
	
	relation Statements_StatementListContainer_SelfReference {

		selfElement : java::literals::Self;

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::SelfReference{
					_self = selfElement
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::SelfReference{
					_self = selfElement
				}
			}
		};
		where{
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e) or
			References_Reference_ReflectiveClassReference(s_s_e,t_s_e)
			or true;
		}
	}
	
	relation Statements_StatementListContainer_IdentifierReference {

		targetElement : java::references::ReferenceableElement;

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::IdentifierReference{
					target =  targetElement
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::IdentifierReference{
					target =  targetElement
				}
			}
		};
		where{
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e) or
			References_Reference_ReflectiveClassReference(s_s_e,t_s_e)
			or true;
		}
	}
	
	relation Statements_StatementListContainer_PrimitiveTypeReference {

		primitiveTypeVar : java::types::PrimitiveType;

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::PrimitiveTypeReference{
					primitiveType = primitiveTypeVar
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::PrimitiveTypeReference{
					primitiveType = primitiveTypeVar
				}
			}
		};
		where{
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e) or
			References_Reference_ReflectiveClassReference(s_s_e,t_s_e)
			or true;
		}
	}
	
	relation Statements_StatementListContainer_StringReference {

		valueVar : String;

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::StringReference{
					value = valueVar
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::StringReference{
					value = valueVar
				}
			}
		};
		where{
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e) or
			References_Reference_ReflectiveClassReference(s_s_e,t_s_e)
			or true;
		}
	}
	
	relation Statements_StatementListContainer_Assert {

		conditionVar : java::expressions::Expression;
		errorMessageVar : java::expressions::Expression;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::Assert  {
				condition = conditionVar,
				errorMessage = errorMessageVar
			}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::Assert  {
				condition = conditionVar,
				errorMessage = errorMessageVar
			}
		};

	}
	
	relation Statements_StatementListContainer_Block { --statementListCont

		modifiersVar : OrderedSet(java::modifiers::Modifier);
		nameVar : String;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::Block  {
			modifiers =  modifiersVar,
			name = nameVar
			}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::Block  {
			modifiers =  modifiersVar,
			name = nameVar
			}
		};

	}
	
	relation Statements_StatementListContainer_Condition {

		conditionVar : java::expressions::Expression;
		elseStatementVar : java::statements::Statement;
		statementVar : java::statements::Statement;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::Condition  {
			condition =  conditionVar,
			elseStatement = elseStatementVar,
			statement = statementVar
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::Condition  {
			condition =  conditionVar,
			elseStatement = elseStatementVar,
			statement = statementVar
			}
		};

	}
	
	relation Statements_StatementListContainer_DoWhileLoop {

		conditionVar : java::expressions::Expression;
		statementVar : java::statements::Statement;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::DoWhileLoop   {
			condition =  conditionVar,
			statement = statementVar
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::DoWhileLoop   {
			condition =  conditionVar,
			statement = statementVar
			}
		};

	}
	
	relation Statements_StatementListContainer_ForEachLoop {

		collectionVar : java::expressions::Expression;
		statementVar : java::statements::Statement;
		nextVar : java::parameters::OrdinaryParameter;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ForEachLoop   {
			collection = collectionVar,
			statement = statementVar,
			next = nextVar
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ForEachLoop   {
			collection = collectionVar,
			statement = statementVar,
			next = nextVar
			}
		};

	}
	
	relation Statements_StatementListContainer_ForLoop {

		conditionVar : java::expressions::Expression;
		statementVar : java::statements::Statement;
		initVar : java::statements::ForLoopInitializer;
		updatesVar : OrderedSet( java::expressions::Expression);
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ForLoop   {
			condition = conditionVar,
			statement = statementVar,
			_init = initVar,
			updates = updatesVar
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ForLoop   {
			condition = conditionVar,
			statement = statementVar,
			_init = initVar,
			updates = updatesVar
			}
		};

	}
	
	relation Statements_StatementListContainer_Switch {

		casesVar : OrderedSet(java::statements::SwitchCase);
		variableVar : java::expressions::Expression;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::Switch   {
			cases = casesVar,
			variable = variableVar
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::Switch   {
			cases = casesVar,
			variable = variableVar
			}
		};

	}
	
	relation Statements_StatementListContainer_SynchronizedBlock { -- statementListCont

		lockProviderVar : java::expressions::Expression;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::SynchronizedBlock   {
			lockProvider = lockProviderVar
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::SynchronizedBlock   {
			lockProvider = lockProviderVar
			}
		};

	}
	
	relation Statements_StatementListContainer_TryBlock { -- statementListCont

		catchBlocks : OrderedSet(java::statements::CatchBlock);
		finallyBlock : java::statements::Block;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::TryBlock   {
			catcheBlocks = catchBlocks,
			finallyBlock = finallyBlock
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::TryBlock   {
			catcheBlocks = catchBlocks,
			finallyBlock = finallyBlock
			}
		};

	}
	
	relation Statements_StatementListContainer_WhileLoop {

		conditionVar : java::expressions::Expression;
		statementVar : java::statements::Statement;
		
		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::WhileLoop   {
			condition = conditionVar,
			statement =  statementVar
		}
		};
		
		

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::WhileLoop   {
			condition = conditionVar,
			statement =  statementVar
			}
		};

	}
	
	relation References_Reference_NewConstructorCall {

		enforce domain JAVA s : java::references::Reference {
			next = s_n : java::instantiations::NewConstructorCall{}
		};

		enforce domain CLOSURES t : java::references::Reference  {
			next = t_n : java::instantiations::NewConstructorCall{}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or
			Instantiations_NewConstructorCall_Closure(s_n,t_n) or
			References_Argumentable_NewConstructorCall(s_n,t_n) or
			References_Argumentable_MethodCall(s_n,t_n) or
			References_Argumentable_IdentifierReference(s_n,t_n) or
			References_Argumentable_StringReference(s_n,t_n) or
			References_Argumentable_SelfReference(s_n,t_n) or
			References_Argumentable_PrimitiveTypeReference(s_n,t_n) or
			References_Argumentable_BooleanLiteral(s_n,t_n) or
			References_Argumentable_DecimalDoubleLiteral(s_n,t_n)or
			References_Argumentable_DecimalFloatLiteral(s_n,t_n)or
			References_Argumentable_NullLiteral(s_n,t_n)or
			References_Argumentable_Expression(s_n,t_n)
			or 
			 TypedElement_TypeReference_NamespaceClassifierReference(s_n,t_n) or
			 TypedElement_TypeReference_Int(s_n,t_n) or
			 TypedElement_TypeReference_Void(s_n,t_n) or
			 TypedElement_TypeReference_Boolean(s_n,t_n) or
			 TypedElement_TypeReference_Byte(s_n,t_n) or
			 TypedElement_TypeReference_Double(s_n,t_n) or
			 TypedElement_TypeReference_Float(s_n,t_n) or
			 TypedElement_TypeReference_Long(s_n,t_n) or
			 TypedElement_TypeReference_Short(s_n,t_n) or
			 TypedElement_TypeReference_Char(s_n,t_n)
			 or
			 true;
		}
		
	
	}
	
	-- References_Reference_SelfReference ist sinnlos

	relation References_Reference_MethodCall {

		targetElement : java::references::ReferenceableElement;
		
		enforce domain JAVA s : java::references::Reference {
			next = s_n : java::references::MethodCall{
				target = targetElement
			}
		};

		enforce domain CLOSURES t : java::references::Reference  {
			next = t_n : java::references::MethodCall{
				target = targetElement
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n) or
			References_Reference_ReflectiveClassReference(s_n,t_n)
			or
			References_MethodCall_Closure(s_n,t_n) or
			References_Argumentable_NewConstructorCall(s_n,t_n) or
			References_Argumentable_MethodCall(s_n,t_n) or
			References_Argumentable_IdentifierReference(s_n,t_n) or
			References_Argumentable_StringReference(s_n,t_n) or
			References_Argumentable_SelfReference(s_n,t_n) or
			References_Argumentable_PrimitiveTypeReference(s_n,t_n) or
			References_Argumentable_BooleanLiteral(s_n,t_n) or
			References_Argumentable_DecimalDoubleLiteral(s_n,t_n)or
			References_Argumentable_DecimalFloatLiteral(s_n,t_n)or
			References_Argumentable_NullLiteral(s_n,t_n)or
			References_Argumentable_Expression(s_n,t_n)
			or 
			true;
		}
	
	}
	
	relation References_Reference_IdentifierReference {

		targetElement : java::references::ReferenceableElement;

		enforce domain JAVA s : java::references::Reference {
			next = s_n : java::references::IdentifierReference{
				target = targetElement
			}
		};

		enforce domain CLOSURES t : java::references::Reference  {
			next = t_n : java::references::IdentifierReference{
				target = targetElement
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n)
			or true;
		}
	}
	
	relation References_Reference_ReflectiveClassReference {

		enforce domain JAVA s : java::references::Reference {
			next = s_n : java::references::ReflectiveClassReference{}
		};

		enforce domain CLOSURES t : java::references::Reference  {
			next = t_n : java::references::ReflectiveClassReference{}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n)
			or true;
		}
	}
	
	relation Enumeration_Enum_Constant{

		varName : String;

		enforce domain JAVA s_c2 : java::classifiers::Enumeration  {
			constants =  s_f : java::members::EnumConstant {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Enumeration  {
			constants = t_f : java::members::EnumConstant {
				name = varName
			}
		};
	}
	
	relation Annotation_Attribute{

		varName : String;

		enforce domain JAVA s : java::classifiers::Annotation  {
			members =  s_cm : java::annotations::AnnotationAttribute {
				name = varName
			}
		};

		enforce domain CLOSURES t : java::classifiers::Annotation  {
			members = t_cm : java::annotations::AnnotationAttribute {
				name = varName
			}
		};
		where{
			(ArrayTypeable_ArrayDimension(s_cm,t_cm) or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm))  
			and
			(AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Protected(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Static(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Final(s_cm,t_cm))
			or true;
		}
	}
	
	relation AnnotableAndModifiable_Modifier_Private {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Private {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Private {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Public {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Public {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Public {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Protected {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Protected {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Protected {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Static {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Static {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Static {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Final {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Final {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Final {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Abstract {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Abstract {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Abstract {}
		};

	}
	
	relation TypedElement_TypeReference_NamespaceClassifierReference {

		varClass : java::classifiers::Classifier;

		enforce domain JAVA s_f : java::types::TypedElement {
			typeReference = s_ncr : java::types::NamespaceClassifierReference {
				classifierReferences = s_cr : java::types::ClassifierReference {
					target = varClass
				}
			}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_ncr : java::types::NamespaceClassifierReference {
				classifierReferences = t_cr : java::types::ClassifierReference {
					target = varClass
				}
			}
		};
	}
	
	relation TypedElement_TypeReference_Int {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Int {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Int {}
		};
	}
	
	relation TypedElement_TypeReference_Boolean {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Boolean {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Boolean {}
		};
	}
	
	relation TypedElement_TypeReference_Byte {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Byte {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Byte {}
		};
	}
	
	relation TypedElement_TypeReference_Char {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Char {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Char {}
		};
	}
	
	relation TypedElement_TypeReference_Double {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Double {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Double {}
		};
	}
	
	relation TypedElement_TypeReference_Float {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Float {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Float {}
		};
	}
	
	relation TypedElement_TypeReference_Long {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Long {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Long {}
		};
	}
	
	relation TypedElement_TypeReference_Short {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Short {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Short {}
		};
	}
	
	relation TypedElement_TypeReference_Void {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Void {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Void {}
		};
	}
	
	
	relation ArrayTypeable_ArrayDimension {

		enforce domain JAVA s : java::arrays::ArrayTypeable {
			arrayDimensionsBefore = s_adb : java::arrays::ArrayDimension {}
		};

		enforce domain CLOSURES t : java::arrays::ArrayTypeable {
			arrayDimensionsBefore = t_adb : java::arrays::ArrayDimension {}
		};

	}
	
	relation Parametrizable_Parameter {

		varName : String;

		enforce domain JAVA s : java::parameters::Parametrizable {
			parameters = s_cm : java::parameters::OrdinaryParameter {
				name = varName
			}
		};
		enforce domain CLOSURES t : java::parameters::Parametrizable  {
			parameters = t_cm : java::parameters::OrdinaryParameter {
				name = varName
			}	
		};
		where{
			ArrayTypeable_ArrayDimension(s_cm,t_cm) or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm)
			or true;  
		}
	}
	
	relation Class_Extends_TypeReference_NamespaceClassifierReference {

		varClassifier : java::classifiers::Classifier;

		enforce domain JAVA s_cm : java::classifiers::Class  {
			_extends = s_ex : java::types::NamespaceClassifierReference {
				classifierReferences = s_ref : java::types::ClassifierReference {
					target =  varClassifier
				}
			}
		};

		enforce domain CLOSURES t_cm : java::classifiers::Class  {
			_extends = t_ex : java::types::NamespaceClassifierReference {
				classifierReferences = t_ref : java::types::ClassifierReference {
					target = varClassifier
				}
			}
		};
	}
	
	relation Interface_Extends_TypeReference_NamespaceClassifierReference {

		varClassifier : java::classifiers::Classifier;

		enforce domain JAVA s_cm : java::classifiers::Interface  {
			_extends = s_ex : java::types::NamespaceClassifierReference {
				classifierReferences = s_ref : java::types::ClassifierReference {
					target =  varClassifier
				}
			}
		};

		enforce domain CLOSURES t_cm : java::classifiers::Interface  {
			_extends = t_ex : java::types::NamespaceClassifierReference {
				classifierReferences = t_ref : java::types::ClassifierReference {
					target = varClassifier
				}
			}
		};
	}
	
	relation Implementor_Implements_TypeReference_NamespaceClassifierReference {

		varClassifier : java::classifiers::Classifier;

		enforce domain JAVA s_cm : java::classifiers::Implementor  {
			implements = s_imp : java::types::NamespaceClassifierReference {
				classifierReferences = s_ref : java::types::ClassifierReference {
					target =  varClassifier
				}
			}
		};

		enforce domain CLOSURES t_cm : java::classifiers::Implementor  {
			implements = t_imp : java::types::NamespaceClassifierReference {
				classifierReferences = t_ref : java::types::ClassifierReference {
					target = varClassifier
				}
			}
		};
	}
	
	relation References_Argumentable_BooleanLiteral {
		
		valValue : Boolean;
		
		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_a : java::literals::BooleanLiteral  {
				value = valValue
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_a : java::literals::BooleanLiteral  {
				value = valValue
			}
		};
	}
	
	relation References_Argumentable_DecimalDoubleLiteral {
		
		valValue : Real;
		
		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_a : java::literals::DecimalDoubleLiteral  {
				decimalValue = valValue
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_a : java::literals::DecimalDoubleLiteral  {
				decimalValue = valValue
			}
		};
	}
	
	relation References_Argumentable_DecimalFloatLiteral {
		
		valValue : Real;
		
		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_a : java::literals::DecimalFloatLiteral  {
				decimalValue = valValue
			}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_a : java::literals::DecimalFloatLiteral  {
				decimalValue = valValue
			}
		};
	}

	relation References_Argumentable_NullLiteral {
		
		enforce domain JAVA s: java::references::Argumentable  {
			arguments = s_a : java::literals::NullLiteral  {}
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = t_a : java::literals::NullLiteral  {}
		};
	}
	
	relation References_Argumentable_Expression {
		
		varArg : OrderedSet(java::expressions::Expression);
		
		enforce domain JAVA s: java::references::Argumentable  {
			arguments = varArg
		};

		enforce domain CLOSURES t: java::references::Argumentable  {
			arguments = varArg
		};
		when{
			if s.arguments->size()>0 then
				not s.arguments->forAll(a|
					not a.oclIsTypeOf(java::literals::DecimalLongLiteral)
					and
					not a.oclIsTypeOf(java::literals::DecimalIntegerLiteral)
					and
					not a.oclIsTypeOf(java::literals::CharacterLiteral))
			else
				not t.arguments->forAll(a|
					not a.oclIsTypeOf(java::literals::DecimalLongLiteral)
					and
					not a.oclIsTypeOf(java::literals::DecimalIntegerLiteral)
					and
					not a.oclIsTypeOf(java::literals::CharacterLiteral))
			endif;
		}
	}

}