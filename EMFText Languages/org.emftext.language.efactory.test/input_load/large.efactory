use "../metamodels/AM3Core.ecore"
use "../metamodels/Platform.ecore"
use "../metamodels/OSGi.ecore"
use "../metamodels/EquinoxP2.ecore"
use "../metamodels/GlobalModelManagement.ecore"
use "../metamodels/EclipseCartography.ecore"

new Cartography {

	features += new Feature feature_org_eclipse_emf_validation_doc {
		__id = "org.eclipse.emf.validation.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.validation.doc"
		}
		version = new Version {
			value = "1.3.0.v200901271722-35-8s733L357H5H77"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Validation Framework (documentation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_validation_doc {
			__id = "org.eclipse.emf.validation.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.validation.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271722"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.validation.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.validation.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_validation_examples {
			__id = "org.eclipse.emf.validation.examples"
			identifier = new PlatformID {
				value = "org.eclipse.emf.validation.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271722"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_examples
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_examples
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_examples
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_examples
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_validation_examples_internal {
				__id = "org.eclipse.emf.validation.examples.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.examples.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_examples_internal_l10n {
				__id = "org.eclipse.emf.validation.examples.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.examples.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_examples_internal_wizard {
				__id = "org.eclipse.emf.validation.examples.internal.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.examples.internal.wizard"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_mylyn_wikitext_feature {
		__id = "org.eclipse.mylyn.wikitext_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn.wikitext_feature"
		}
		version = new Version {
			value = "1.1.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Enables parsing and display of lightweight markup (wiki text).  Extends the Mylyn task editor to create a markup-aware editor."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_core {
			__id = "org.eclipse.mylyn.wikitext.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_core
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.7.0'"
				maxVersion = "'1.7.0'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_core {
				__id = "org.eclipse.mylyn.internal.wikitext.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_core_parser_builder {
				__id = "org.eclipse.mylyn.internal.wikitext.core.parser.builder"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.core.parser.builder"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_core_util {
				__id = "org.eclipse.mylyn.internal.wikitext.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.core.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_core_util_css {
				__id = "org.eclipse.mylyn.internal.wikitext.core.util.css"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.core.util.css"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_core_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.core.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.core.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core {
				__id = "org.eclipse.mylyn.wikitext.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser {
				__id = "org.eclipse.mylyn.wikitext.core.parser"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser_builder {
				__id = "org.eclipse.mylyn.wikitext.core.parser.builder"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser.builder"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser_markup {
				__id = "org.eclipse.mylyn.wikitext.core.parser.markup"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser.markup"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser_markup_block {
				__id = "org.eclipse.mylyn.wikitext.core.parser.markup.block"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser.markup.block"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser_markup_phrase {
				__id = "org.eclipse.mylyn.wikitext.core.parser.markup.phrase"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser.markup.phrase"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser_markup_token {
				__id = "org.eclipse.mylyn.wikitext.core.parser.markup.token"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser.markup.token"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser_outline {
				__id = "org.eclipse.mylyn.wikitext.core.parser.outline"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser.outline"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_parser_util {
				__id = "org.eclipse.mylyn.wikitext.core.parser.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.parser.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_util {
				__id = "org.eclipse.mylyn.wikitext.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_util_anttask {
				__id = "org.eclipse.mylyn.wikitext.core.util.anttask"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.util.anttask"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_core_validation {
				__id = "org.eclipse.mylyn.wikitext.core.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.core.validation"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_textile_core {
			__id = "org.eclipse.mylyn.wikitext.textile.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.textile.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_textile_core
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_textile_core
				target = plugin_org_eclipse_team_core
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_textile_core {
				__id = "org.eclipse.mylyn.internal.wikitext.textile.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.textile.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_textile_core_block {
				__id = "org.eclipse.mylyn.internal.wikitext.textile.core.block"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.textile.core.block"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_textile_core_phrase {
				__id = "org.eclipse.mylyn.internal.wikitext.textile.core.phrase"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.textile.core.phrase"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_textile_core_token {
				__id = "org.eclipse.mylyn.internal.wikitext.textile.core.token"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.textile.core.token"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_textile_core_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.textile.core.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.textile.core.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_textile_core {
				__id = "org.eclipse.mylyn.wikitext.textile.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.textile.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_mediawiki_core {
			__id = "org.eclipse.mylyn.wikitext.mediawiki.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.mediawiki.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_mediawiki_core
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_mediawiki_core
				target = plugin_org_eclipse_team_core
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_mediawiki_core {
				__id = "org.eclipse.mylyn.internal.wikitext.mediawiki.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.mediawiki.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_mediawiki_core_block {
				__id = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.block"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.block"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_mediawiki_core_phrase {
				__id = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.phrase"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.phrase"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_mediawiki_core_token {
				__id = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.token"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.token"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_mediawiki_core_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.mediawiki.core.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_mediawiki_core {
				__id = "org.eclipse.mylyn.wikitext.mediawiki.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.mediawiki.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_confluence_core {
			__id = "org.eclipse.mylyn.wikitext.confluence.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.confluence.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_confluence_core
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_confluence_core
				target = plugin_org_eclipse_team_core
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_confluence_core_block {
				__id = "org.eclipse.mylyn.internal.wikitext.confluence.core.block"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.confluence.core.block"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_confluence_core_phrase {
				__id = "org.eclipse.mylyn.internal.wikitext.confluence.core.phrase"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.confluence.core.phrase"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_confluence_core_token {
				__id = "org.eclipse.mylyn.internal.wikitext.confluence.core.token"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.confluence.core.token"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_confluence_core_util {
				__id = "org.eclipse.mylyn.internal.wikitext.confluence.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.confluence.core.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_confluence_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.confluence.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.confluence.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_confluence_core {
				__id = "org.eclipse.mylyn.wikitext.confluence.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.confluence.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_tracwiki_core {
			__id = "org.eclipse.mylyn.wikitext.tracwiki.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.tracwiki.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tracwiki_core
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tracwiki_core
				target = plugin_org_eclipse_team_core
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tracwiki_core_block {
				__id = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.block"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.block"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tracwiki_core_phrase {
				__id = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.phrase"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.phrase"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tracwiki_core_token {
				__id = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.token"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.token"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tracwiki_core_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tracwiki.core.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_tracwiki_core {
				__id = "org.eclipse.mylyn.wikitext.tracwiki.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.tracwiki.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_twiki_core {
			__id = "org.eclipse.mylyn.wikitext.twiki.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.twiki.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_twiki_core
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_twiki_core
				target = plugin_org_eclipse_team_core
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_twiki_core_block {
				__id = "org.eclipse.mylyn.internal.wikitext.twiki.core.block"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.twiki.core.block"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_twiki_core_phrase {
				__id = "org.eclipse.mylyn.internal.wikitext.twiki.core.phrase"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.twiki.core.phrase"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_twiki_core_token {
				__id = "org.eclipse.mylyn.internal.wikitext.twiki.core.token"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.twiki.core.token"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_twiki_core_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.twiki.core.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.twiki.core.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_twiki_core {
				__id = "org.eclipse.mylyn.wikitext.twiki.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.twiki.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_ui {
			__id = "org.eclipse.mylyn.wikitext.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_ui
				target = plugin_org_eclipse_help
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui {
				__id = "org.eclipse.mylyn.internal.wikitext.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_actions {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.actions"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_assist {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.assist"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.assist"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_commands {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.commands"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.commands"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_dnd {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.dnd"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_help {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.help"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.help"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_operations {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.operations"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.operations"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_outline {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.outline"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.outline"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_preferences {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.preferences"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_reconciler {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.reconciler"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.reconciler"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_syntax {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.syntax"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.syntax"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_editor_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.editor.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.editor.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_properties {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_util {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_util_css_editor {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.util.css.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.util.css.editor"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_util_resources {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.util.resources"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.util.resources"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_validation {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.validation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.validation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_viewer {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.viewer"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.viewer"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_ui_viewer_annotation {
				__id = "org.eclipse.mylyn.internal.wikitext.ui.viewer.annotation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.ui.viewer.annotation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_ui_annotation {
				__id = "org.eclipse.mylyn.wikitext.ui.annotation"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.ui.annotation"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_ui_commands {
				__id = "org.eclipse.mylyn.wikitext.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_ui_editor {
				__id = "org.eclipse.mylyn.wikitext.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_ui_viewer {
				__id = "org.eclipse.mylyn.wikitext.ui.viewer"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.ui.viewer"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_help_ui {
			__id = "org.eclipse.mylyn.wikitext.help.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.help.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			ownedEntities += new Document {
				__id = "org.eclipse.mylyn.wikitext.help.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.help.ui"
				}
				locator = new EFSLocator {
					value = "org.eclipse.mylyn.wikitext.help.ui"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_help_ui
				target = plugin_org_eclipse_help
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_textile_ui {
			__id = "org.eclipse.mylyn.wikitext.textile.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.textile.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_textile_ui
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_textile_ui
				target = plugin_org_eclipse_mylyn_wikitext_textile_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_textile_ui
				target = plugin_org_eclipse_mylyn_wikitext_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_textile_ui {
				__id = "org.eclipse.mylyn.internal.wikitext.textile.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.textile.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_mediawiki_ui {
			__id = "org.eclipse.mylyn.wikitext.mediawiki.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.mediawiki.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_mediawiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_mediawiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_mediawiki_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_mediawiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_mediawiki_ui {
				__id = "org.eclipse.mylyn.internal.wikitext.mediawiki.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.mediawiki.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_confluence_ui {
			__id = "org.eclipse.mylyn.wikitext.confluence.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.confluence.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_confluence_ui
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_confluence_ui
				target = plugin_org_eclipse_mylyn_wikitext_confluence_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_confluence_ui
				target = plugin_org_eclipse_mylyn_wikitext_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_confluence_ui {
				__id = "org.eclipse.mylyn.internal.wikitext.confluence.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.confluence.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_tracwiki_ui {
			__id = "org.eclipse.mylyn.wikitext.tracwiki.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.tracwiki.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tracwiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tracwiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_tracwiki_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tracwiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tracwiki_ui {
				__id = "org.eclipse.mylyn.internal.wikitext.tracwiki.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tracwiki.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_twiki_ui {
			__id = "org.eclipse.mylyn.wikitext.twiki.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.twiki.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_twiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_twiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_twiki_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_twiki_ui
				target = plugin_org_eclipse_mylyn_wikitext_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_twiki_ui {
				__id = "org.eclipse.mylyn.internal.wikitext.twiki.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.twiki.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_wikitext_tasks_ui {
			__id = "org.eclipse.mylyn.wikitext.tasks.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.wikitext.tasks.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2-4.0.0)'"
				maxVersion = "'[3.2-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2-4.0.0)'"
				maxVersion = "'[3.2-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2-4.0.0)'"
				maxVersion = "'[3.2-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2-4.0.0)'"
				maxVersion = "'[3.2-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2-4.0.0)'"
				maxVersion = "'[3.2-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_monitor_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2-4.0.0)'"
				maxVersion = "'[3.2-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_confluence_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_confluence_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_mediawiki_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_mediawiki_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_textile_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_textile_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_tracwiki_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_tracwiki_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_twiki_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_wikitext_tasks_ui
				target = plugin_org_eclipse_mylyn_wikitext_twiki_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tasks_ui {
				__id = "org.eclipse.mylyn.internal.wikitext.tasks.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tasks.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tasks_ui_actions {
				__id = "org.eclipse.mylyn.internal.wikitext.tasks.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tasks.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tasks_ui_editor {
				__id = "org.eclipse.mylyn.internal.wikitext.tasks.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tasks.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tasks_ui_preferences {
				__id = "org.eclipse.mylyn.internal.wikitext.tasks.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tasks.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tasks_ui_util {
				__id = "org.eclipse.mylyn.internal.wikitext.tasks.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tasks.ui.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_wikitext_tasks_ui_util_bugzilla {
				__id = "org.eclipse.mylyn.internal.wikitext.tasks.ui.util.bugzilla"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.wikitext.tasks.ui.util.bugzilla"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_tasks_ui_editor {
				__id = "org.eclipse.mylyn.wikitext.tasks.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.tasks.ui.editor"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_xtend_typesystem_uml2_source {
		__id = "org.eclipse.xtend.typesystem.uml2.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.typesystem.uml2.source"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Xtend UML2 typesystem component.(Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_uml2_source {
			__id = "org.eclipse.xtend.typesystem.uml2.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.uml2.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_mapping_ui {
		__id = "org.eclipse.emf.mapping.ui"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mapping.ui"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Framework for implementing EMF mapping editors in the IDE."
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_ui {
			__id = "org.eclipse.emf.mapping.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ui
				target = plugin_org_eclipse_emf_mapping
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ui
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ui
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_mapping_action {
				__id = "org.eclipse.emf.mapping.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.action"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_presentation {
				__id = "org.eclipse.emf.mapping.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.presentation"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_sdk {
		__id = "org.eclipse.sdk"
		identifier = new PlatformID {
			value = "org.eclipse.sdk"
		}
		version = new Version {
			value = "3.5.1.R35x_v20090811-7Q7bAIBPVUBVbKSMTyyfpOteKTem7_g2paS1__z-Rrmf4"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "SDK for Eclipse."
		}
		plugins += new Plugin plugin_org_eclipse_sdk {
			__id = "org.eclipse.sdk"
			identifier = new PlatformID {
				value = "org.eclipse.sdk"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.1.v200909170800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_sdk
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_sdk
				target = plugin_org_eclipse_help_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_sdk
				target = plugin_org_eclipse_help_base
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_sdk
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_sdk
				target = plugin_org_eclipse_ui_ide_application
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
		}
		sites += site__download_eclipse_org_eclipse_updates_3_5
		sites += site__download_eclipse_org_releases_galileo
	}

	features += new Feature feature_org_eclipse_xtend_typesystem_uml2 {
		__id = "org.eclipse.xtend.typesystem.uml2"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.typesystem.uml2"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Xtend UML2 typesystem (Incubation)  This feature allows to access UML2 based models from within Xpand and Xtend."
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_uml2 {
			__id = "org.eclipse.xtend.typesystem.uml2"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.uml2"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_eclipse_uml2_uml_ecore_importer
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_eclipse_uml2_uml_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_eclipse_emf_mapping_ecore2xml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			exports += new Package package_org_eclipse_xtend_typesystem_uml2 {
				__id = "org.eclipse.xtend.typesystem.uml2"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.uml2"
				}
			}
			exports += new Package package_org_eclipse_xtend_typesystem_uml2_profile {
				__id = "org.eclipse.xtend.typesystem.uml2.profile"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.uml2.profile"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_uml2_ui {
			__id = "org.eclipse.xtend.typesystem.uml2.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.uml2.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_uml2_uml_ecore_importer
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_xtend_shared_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_uml2_ui
				target = plugin_org_eclipse_xtend_typesystem_uml2
			}
			exports += new Package package_org_eclipse_xtend_typesystem_uml2_ui {
				__id = "org.eclipse.xtend.typesystem.uml2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.uml2.ui"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_query_doc {
		__id = "org.eclipse.emf.query.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.query.doc"
		}
		version = new Version {
			value = "1.2.100.v200901271543-33-8s733L357H5FB9"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2009 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Model Query (documentation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_query_doc {
			__id = "org.eclipse.emf.query.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.query.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v200901271643"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.query.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.query.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_query_examples {
			__id = "org.eclipse.emf.query.examples"
			identifier = new PlatformID {
				value = "org.eclipse.emf.query.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v200901271643"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_examples
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_examples
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_examples
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_examples
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_query_examples_internal {
				__id = "org.eclipse.emf.query.examples.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.examples.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_query_examples_internal_wizard {
				__id = "org.eclipse.emf.query.examples.internal.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.examples.internal.wizard"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_platform {
		__id = "org.eclipse.platform"
		identifier = new PlatformID {
			value = "org.eclipse.platform"
		}
		version = new Version {
			value = "3.5.1.R35x_v20090910-9gEeG1_FthkNDSP2odXdThaOu9GFDPn83DGB7"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "Common OS-independent base of the Eclipse platform. (Binary runtime and user documentation.)"
		}
		plugins += new Plugin plugin_org_apache_ant {
			__id = "org.apache.ant"
			identifier = new PlatformID {
				value = "org.apache.ant"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.7.1.v20090120-1145"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_ant
				target = plugin_org_eclipse_osgi
			}
			exports += new Package package_images {
				__id = "images"
				identifier = new PlatformID {
					value = "images"
				}
			}
			exports += new Package package_org_apache_tools_ant {
				__id = "org.apache.tools.ant"
				identifier = new PlatformID {
					value = "org.apache.tools.ant"
				}
			}
			exports += new Package package_org_apache_tools_ant_dispatch {
				__id = "org.apache.tools.ant.dispatch"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.dispatch"
				}
			}
			exports += new Package package_org_apache_tools_ant_filters {
				__id = "org.apache.tools.ant.filters"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.filters"
				}
			}
			exports += new Package package_org_apache_tools_ant_filters_util {
				__id = "org.apache.tools.ant.filters.util"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.filters.util"
				}
			}
			exports += new Package package_org_apache_tools_ant_helper {
				__id = "org.apache.tools.ant.helper"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.helper"
				}
			}
			exports += new Package package_org_apache_tools_ant_input {
				__id = "org.apache.tools.ant.input"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.input"
				}
			}
			exports += new Package package_org_apache_tools_ant_launch {
				__id = "org.apache.tools.ant.launch"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.launch"
				}
			}
			exports += new Package package_org_apache_tools_ant_listener {
				__id = "org.apache.tools.ant.listener"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.listener"
				}
			}
			exports += new Package package_org_apache_tools_ant_loader {
				__id = "org.apache.tools.ant.loader"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.loader"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs {
				__id = "org.apache.tools.ant.taskdefs"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_compilers {
				__id = "org.apache.tools.ant.taskdefs.compilers"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.compilers"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_condition {
				__id = "org.apache.tools.ant.taskdefs.condition"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.condition"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_cvslib {
				__id = "org.apache.tools.ant.taskdefs.cvslib"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.cvslib"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_email {
				__id = "org.apache.tools.ant.taskdefs.email"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.email"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional {
				__id = "org.apache.tools.ant.taskdefs.optional"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_ccm {
				__id = "org.apache.tools.ant.taskdefs.optional.ccm"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.ccm"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_clearcase {
				__id = "org.apache.tools.ant.taskdefs.optional.clearcase"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.clearcase"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_depend {
				__id = "org.apache.tools.ant.taskdefs.optional.depend"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.depend"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_depend_constantpool {
				__id = "org.apache.tools.ant.taskdefs.optional.depend.constantpool"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.depend.constantpool"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_dotnet {
				__id = "org.apache.tools.ant.taskdefs.optional.dotnet"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.dotnet"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_ejb {
				__id = "org.apache.tools.ant.taskdefs.optional.ejb"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.ejb"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_extension {
				__id = "org.apache.tools.ant.taskdefs.optional.extension"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.extension"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_extension_resolvers {
				__id = "org.apache.tools.ant.taskdefs.optional.extension.resolvers"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.extension.resolvers"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_i18n {
				__id = "org.apache.tools.ant.taskdefs.optional.i18n"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.i18n"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_image {
				__id = "org.apache.tools.ant.taskdefs.optional.image"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.image"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_j2ee {
				__id = "org.apache.tools.ant.taskdefs.optional.j2ee"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.j2ee"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_javacc {
				__id = "org.apache.tools.ant.taskdefs.optional.javacc"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.javacc"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_javah {
				__id = "org.apache.tools.ant.taskdefs.optional.javah"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.javah"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_jdepend {
				__id = "org.apache.tools.ant.taskdefs.optional.jdepend"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.jdepend"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_jlink {
				__id = "org.apache.tools.ant.taskdefs.optional.jlink"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.jlink"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_jsp {
				__id = "org.apache.tools.ant.taskdefs.optional.jsp"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.jsp"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_jsp_compilers {
				__id = "org.apache.tools.ant.taskdefs.optional.jsp.compilers"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.jsp.compilers"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_junit {
				__id = "org.apache.tools.ant.taskdefs.optional.junit"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.junit"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_junit_xsl {
				__id = "org.apache.tools.ant.taskdefs.optional.junit.xsl"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.junit.xsl"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_native2ascii {
				__id = "org.apache.tools.ant.taskdefs.optional.native2ascii"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.native2ascii"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_net {
				__id = "org.apache.tools.ant.taskdefs.optional.net"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.net"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_perforce {
				__id = "org.apache.tools.ant.taskdefs.optional.perforce"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.perforce"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_pvcs {
				__id = "org.apache.tools.ant.taskdefs.optional.pvcs"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.pvcs"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_scm {
				__id = "org.apache.tools.ant.taskdefs.optional.scm"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.scm"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_script {
				__id = "org.apache.tools.ant.taskdefs.optional.script"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.script"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_sos {
				__id = "org.apache.tools.ant.taskdefs.optional.sos"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.sos"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_sound {
				__id = "org.apache.tools.ant.taskdefs.optional.sound"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.sound"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_splash {
				__id = "org.apache.tools.ant.taskdefs.optional.splash"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.splash"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_ssh {
				__id = "org.apache.tools.ant.taskdefs.optional.ssh"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.ssh"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_starteam {
				__id = "org.apache.tools.ant.taskdefs.optional.starteam"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.starteam"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_unix {
				__id = "org.apache.tools.ant.taskdefs.optional.unix"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.unix"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_vss {
				__id = "org.apache.tools.ant.taskdefs.optional.vss"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.vss"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_optional_windows {
				__id = "org.apache.tools.ant.taskdefs.optional.windows"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.optional.windows"
				}
			}
			exports += new Package package_org_apache_tools_ant_taskdefs_rmic {
				__id = "org.apache.tools.ant.taskdefs.rmic"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.taskdefs.rmic"
				}
			}
			exports += new Package package_org_apache_tools_ant_types {
				__id = "org.apache.tools.ant.types"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_conditions {
				__id = "org.apache.tools.ant.types.conditions"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.conditions"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_mappers {
				__id = "org.apache.tools.ant.types.mappers"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.mappers"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_optional {
				__id = "org.apache.tools.ant.types.optional"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.optional"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_optional_depend {
				__id = "org.apache.tools.ant.types.optional.depend"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.optional.depend"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_optional_image {
				__id = "org.apache.tools.ant.types.optional.image"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.optional.image"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_resolver {
				__id = "org.apache.tools.ant.types.resolver"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.resolver"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_resources {
				__id = "org.apache.tools.ant.types.resources"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.resources"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_resources_comparators {
				__id = "org.apache.tools.ant.types.resources.comparators"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.resources.comparators"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_resources_selectors {
				__id = "org.apache.tools.ant.types.resources.selectors"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.resources.selectors"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_selectors {
				__id = "org.apache.tools.ant.types.selectors"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.selectors"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_selectors_modifiedselector {
				__id = "org.apache.tools.ant.types.selectors.modifiedselector"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.selectors.modifiedselector"
				}
			}
			exports += new Package package_org_apache_tools_ant_types_spi {
				__id = "org.apache.tools.ant.types.spi"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.types.spi"
				}
			}
			exports += new Package package_org_apache_tools_ant_util {
				__id = "org.apache.tools.ant.util"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.util"
				}
			}
			exports += new Package package_org_apache_tools_ant_util_depend {
				__id = "org.apache.tools.ant.util.depend"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.util.depend"
				}
			}
			exports += new Package package_org_apache_tools_ant_util_depend_bcel {
				__id = "org.apache.tools.ant.util.depend.bcel"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.util.depend.bcel"
				}
			}
			exports += new Package package_org_apache_tools_ant_util_facade {
				__id = "org.apache.tools.ant.util.facade"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.util.facade"
				}
			}
			exports += new Package package_org_apache_tools_ant_util_java15 {
				__id = "org.apache.tools.ant.util.java15"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.util.java15"
				}
			}
			exports += new Package package_org_apache_tools_ant_util_optional {
				__id = "org.apache.tools.ant.util.optional"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.util.optional"
				}
			}
			exports += new Package package_org_apache_tools_ant_util_regexp {
				__id = "org.apache.tools.ant.util.regexp"
				identifier = new PlatformID {
					value = "org.apache.tools.ant.util.regexp"
				}
			}
			exports += new Package package_org_apache_tools_bzip2 {
				__id = "org.apache.tools.bzip2"
				identifier = new PlatformID {
					value = "org.apache.tools.bzip2"
				}
			}
			exports += new Package package_org_apache_tools_mail {
				__id = "org.apache.tools.mail"
				identifier = new PlatformID {
					value = "org.apache.tools.mail"
				}
			}
			exports += new Package package_org_apache_tools_tar {
				__id = "org.apache.tools.tar"
				identifier = new PlatformID {
					value = "org.apache.tools.tar"
				}
			}
			exports += new Package package_org_apache_tools_zip {
				__id = "org.apache.tools.zip"
				identifier = new PlatformID {
					value = "org.apache.tools.zip"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ant_core {
			__id = "org.eclipse.ant.core"
			identifier = new PlatformID {
				value = "org.eclipse.ant.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.100.v20090817_r351"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_core
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ant_core {
				__id = "org.eclipse.ant.core"
				identifier = new PlatformID {
					value = "org.eclipse.ant.core"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_core {
				__id = "org.eclipse.ant.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.core"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_core_contentDescriber {
				__id = "org.eclipse.ant.internal.core.contentDescriber"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.core.contentDescriber"
				}
			}
		}
		plugins += new Plugin plugin_com_jcraft_jsch {
			__id = "com.jcraft.jsch"
			identifier = new PlatformID {
				value = "com.jcraft.jsch"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.1.41.v200903070017"
			}
			vendor = vendor_JCraft__Inc_
			exports += new Package package_com_jcraft_jsch {
				__id = "com.jcraft.jsch"
				identifier = new PlatformID {
					value = "com.jcraft.jsch"
				}
				version = new Version {
					value = "0.1.41"
				}
			}
			exports += new Package package_com_jcraft_jsch_jce {
				__id = "com.jcraft.jsch.jce"
				identifier = new PlatformID {
					value = "com.jcraft.jsch.jce"
				}
				version = new Version {
					value = "0.1.41"
				}
			}
			exports += new Package package_com_jcraft_jsch_jcraft {
				__id = "com.jcraft.jsch.jcraft"
				identifier = new PlatformID {
					value = "com.jcraft.jsch.jcraft"
				}
				version = new Version {
					value = "0.1.41"
				}
			}
			exports += new Package package_com_jcraft_jsch_jgss {
				__id = "com.jcraft.jsch.jgss"
				identifier = new PlatformID {
					value = "com.jcraft.jsch.jgss"
				}
				version = new Version {
					value = "0.1.41"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_compare_core {
			__id = "org.eclipse.compare.core"
			identifier = new PlatformID {
				value = "org.eclipse.compare.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.I20090430-0408"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_compare_internal_core {
				__id = "org.eclipse.compare.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.compare.internal.core"
				}
			}
			exports += new Package package_org_eclipse_compare_internal_core_patch {
				__id = "org.eclipse.compare.internal.core.patch"
				identifier = new PlatformID {
					value = "org.eclipse.compare.internal.core.patch"
				}
			}
			exports += new Package package_org_eclipse_compare_patch {
				__id = "org.eclipse.compare.patch"
				identifier = new PlatformID {
					value = "org.eclipse.compare.patch"
				}
			}
			exports += new Package package_org_eclipse_compare_rangedifferencer {
				__id = "org.eclipse.compare.rangedifferencer"
				identifier = new PlatformID {
					value = "org.eclipse.compare.rangedifferencer"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.6.1"
				maxVersion = "3.6.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.6.1"
				maxVersion = "3.6.1"
			}
		}
		plugins += new Plugin plugin_org_eclipse_compare {
			__id = "org.eclipse.compare"
			identifier = new PlatformID {
				value = "org.eclipse.compare"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.I20090514-0808"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = plugin_org_eclipse_compare_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_compare {
				__id = "org.eclipse.compare"
				identifier = new PlatformID {
					value = "org.eclipse.compare"
				}
			}
			exports += new Package package_org_eclipse_compare_contentmergeviewer {
				__id = "org.eclipse.compare.contentmergeviewer"
				identifier = new PlatformID {
					value = "org.eclipse.compare.contentmergeviewer"
				}
			}
			exports += new Package package_org_eclipse_compare_internal {
				__id = "org.eclipse.compare.internal"
				identifier = new PlatformID {
					value = "org.eclipse.compare.internal"
				}
			}
			exports += new Package package_org_eclipse_compare_internal_merge {
				__id = "org.eclipse.compare.internal.merge"
				identifier = new PlatformID {
					value = "org.eclipse.compare.internal.merge"
				}
			}
			exports += new Package package_org_eclipse_compare_internal_patch {
				__id = "org.eclipse.compare.internal.patch"
				identifier = new PlatformID {
					value = "org.eclipse.compare.internal.patch"
				}
			}
			exports += new Package package_org_eclipse_compare_patch {
				__id = "org.eclipse.compare.patch"
				identifier = new PlatformID {
					value = "org.eclipse.compare.patch"
				}
			}
			exports += new Package package_org_eclipse_compare_structuremergeviewer {
				__id = "org.eclipse.compare.structuremergeviewer"
				identifier = new PlatformID {
					value = "org.eclipse.compare.structuremergeviewer"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = package_com_ibm_icu_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_compare
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_boot {
			__id = "org.eclipse.core.boot"
			identifier = new PlatformID {
				value = "org.eclipse.core.boot"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.100.v20080218"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_core_filebuffers {
			__id = "org.eclipse.core.filebuffers"
			identifier = new PlatformID {
				value = "org.eclipse.core.filebuffers"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.v20090526-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filebuffers
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filebuffers
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filebuffers
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filebuffers
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_core_filebuffers {
				__id = "org.eclipse.core.filebuffers"
				identifier = new PlatformID {
					value = "org.eclipse.core.filebuffers"
				}
			}
			exports += new Package package_org_eclipse_core_filebuffers_manipulation {
				__id = "org.eclipse.core.filebuffers.manipulation"
				identifier = new PlatformID {
					value = "org.eclipse.core.filebuffers.manipulation"
				}
			}
			exports += new Package package_org_eclipse_core_internal_filebuffers {
				__id = "org.eclipse.core.internal.filebuffers"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.filebuffers"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filebuffers
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_filesystem {
			__id = "org.eclipse.core.filesystem"
			identifier = new PlatformID {
				value = "org.eclipse.core.filesystem"
			}
			state = : "State.active"
			version = new Version {
				value = "1.2.0.v20090507"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filesystem
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filesystem
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_filesystem
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_filesystem {
				__id = "org.eclipse.core.filesystem"
				identifier = new PlatformID {
					value = "org.eclipse.core.filesystem"
				}
			}
			exports += new Package package_org_eclipse_core_filesystem_provider {
				__id = "org.eclipse.core.filesystem.provider"
				identifier = new PlatformID {
					value = "org.eclipse.core.filesystem.provider"
				}
			}
			exports += new Package package_org_eclipse_core_internal_filesystem {
				__id = "org.eclipse.core.internal.filesystem"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.filesystem"
				}
			}
			exports += new Package package_org_eclipse_core_internal_filesystem_local {
				__id = "org.eclipse.core.internal.filesystem.local"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.filesystem.local"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_net {
			__id = "org.eclipse.core.net"
			identifier = new PlatformID {
				value = "org.eclipse.core.net"
			}
			state = : "State.active"
			version = new Version {
				value = "1.2.1.r35x_20090812-1200"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_net
				target = plugin_org_eclipse_equinox_security
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_net
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_net
				target = plugin_org_eclipse_equinox_preferences
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.200'"
				maxVersion = "'3.2.200'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_net
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_net
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			exports += new Package package_org_eclipse_core_internal_net {
				__id = "org.eclipse.core.internal.net"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.net"
				}
			}
			exports += new Package package_org_eclipse_core_net_proxy {
				__id = "org.eclipse.core.net.proxy"
				identifier = new PlatformID {
					value = "org.eclipse.core.net.proxy"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_net_linux_x86 {
			__id = "org.eclipse.core.net.linux.x86"
			identifier = new PlatformID {
				value = "org.eclipse.core.net.linux.x86"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.I20081021"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_core_resources {
			__id = "org.eclipse.core.resources"
			identifier = new PlatformID {
				value = "org.eclipse.core.resources"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.R35x_v20090826-0451"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_resources
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_resources
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_resources
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_resources
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_dtree {
				__id = "org.eclipse.core.internal.dtree"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.dtree"
				}
			}
			exports += new Package package_org_eclipse_core_internal_events {
				__id = "org.eclipse.core.internal.events"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.events"
				}
			}
			exports += new Package package_org_eclipse_core_internal_localstore {
				__id = "org.eclipse.core.internal.localstore"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.localstore"
				}
			}
			exports += new Package package_org_eclipse_core_internal_properties {
				__id = "org.eclipse.core.internal.properties"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.properties"
				}
			}
			exports += new Package package_org_eclipse_core_internal_propertytester {
				__id = "org.eclipse.core.internal.propertytester"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.propertytester"
				}
			}
			exports += new Package package_org_eclipse_core_internal_refresh {
				__id = "org.eclipse.core.internal.refresh"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.refresh"
				}
			}
			exports += new Package package_org_eclipse_core_internal_resources {
				__id = "org.eclipse.core.internal.resources"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.resources"
				}
			}
			exports += new Package package_org_eclipse_core_internal_resources_mapping {
				__id = "org.eclipse.core.internal.resources.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.resources.mapping"
				}
			}
			exports += new Package package_org_eclipse_core_internal_resources_refresh_win32 {
				__id = "org.eclipse.core.internal.resources.refresh.win32"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.resources.refresh.win32"
				}
			}
			exports += new Package package_org_eclipse_core_internal_utils {
				__id = "org.eclipse.core.internal.utils"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.utils"
				}
			}
			exports += new Package package_org_eclipse_core_internal_watson {
				__id = "org.eclipse.core.internal.watson"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.watson"
				}
			}
			exports += new Package package_org_eclipse_core_resources {
				__id = "org.eclipse.core.resources"
				identifier = new PlatformID {
					value = "org.eclipse.core.resources"
				}
			}
			exports += new Package package_org_eclipse_core_resources_mapping {
				__id = "org.eclipse.core.resources.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.core.resources.mapping"
				}
			}
			exports += new Package package_org_eclipse_core_resources_refresh {
				__id = "org.eclipse.core.resources.refresh"
				identifier = new PlatformID {
					value = "org.eclipse.core.resources.refresh"
				}
			}
			exports += new Package package_org_eclipse_core_resources_team {
				__id = "org.eclipse.core.resources.team"
				identifier = new PlatformID {
					value = "org.eclipse.core.resources.team"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_resources_compatibility {
			__id = "org.eclipse.core.resources.compatibility"
			identifier = new PlatformID {
				value = "org.eclipse.core.resources.compatibility"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.4.0.v20090505"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_eclipse_core_internal_indexing {
				__id = "org.eclipse.core.internal.indexing"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.indexing"
				}
			}
			exports += new Package package_org_eclipse_core_internal_localstore {
				__id = "org.eclipse.core.internal.localstore"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.localstore"
				}
			}
			exports += new Package package_org_eclipse_core_internal_properties {
				__id = "org.eclipse.core.internal.properties"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.properties"
				}
			}
			exports += new Package package_org_eclipse_core_internal_resources {
				__id = "org.eclipse.core.internal.resources"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.resources"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_runtime_compatibility {
			__id = "org.eclipse.core.runtime.compatibility"
			identifier = new PlatformID {
				value = "org.eclipse.core.runtime.compatibility"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.0.v20090413"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility
				target = plugin_org_eclipse_update_configurator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.100-4.0.0)'"
				maxVersion = "'[3.1.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_boot {
				__id = "org.eclipse.core.boot"
				identifier = new PlatformID {
					value = "org.eclipse.core.boot"
				}
			}
			exports += new Package package_org_eclipse_core_internal_boot {
				__id = "org.eclipse.core.internal.boot"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.boot"
				}
			}
			exports += new Package package_org_eclipse_core_internal_compatibility {
				__id = "org.eclipse.core.internal.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.compatibility"
				}
			}
			exports += new Package package_org_eclipse_core_internal_model {
				__id = "org.eclipse.core.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.model"
				}
			}
			exports += new Package package_org_eclipse_core_internal_plugins {
				__id = "org.eclipse.core.internal.plugins"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.plugins"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_model {
				__id = "org.eclipse.core.runtime.model"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.model"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_runtime_compatibility_registry {
			__id = "org.eclipse.core.runtime.compatibility.registry"
			identifier = new PlatformID {
				value = "org.eclipse.core.runtime.compatibility.registry"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.200.v20090429-1800"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_osgi_util {
			__id = "org.eclipse.osgi.util"
			identifier = new PlatformID {
				value = "org.eclipse.osgi.util"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.0.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_osgi_util_measurement {
				__id = "org.osgi.util.measurement"
				identifier = new PlatformID {
					value = "org.osgi.util.measurement"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
			exports += new Package package_org_osgi_util_position {
				__id = "org.osgi.util.position"
				identifier = new PlatformID {
					value = "org.osgi.util.position"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
			exports += new Package package_org_osgi_util_xml {
				__id = "org.osgi.util.xml"
				identifier = new PlatformID {
					value = "org.osgi.util.xml"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_osgi_util
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "version=1.1"
				maxVersion = "version=1.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_osgi_util
				target = package_javax_xml_parsers
			}
		}
		plugins += new Plugin plugin_org_eclipse_debug_core {
			__id = "org.eclipse.debug.core"
			identifier = new PlatformID {
				value = "org.eclipse.debug.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.v20090526-1600"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_core
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_core
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_core
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_debug_core {
				__id = "org.eclipse.debug.core"
				identifier = new PlatformID {
					value = "org.eclipse.debug.core"
				}
			}
			exports += new Package package_org_eclipse_debug_core_commands {
				__id = "org.eclipse.debug.core.commands"
				identifier = new PlatformID {
					value = "org.eclipse.debug.core.commands"
				}
			}
			exports += new Package package_org_eclipse_debug_core_model {
				__id = "org.eclipse.debug.core.model"
				identifier = new PlatformID {
					value = "org.eclipse.debug.core.model"
				}
			}
			exports += new Package package_org_eclipse_debug_core_sourcelookup {
				__id = "org.eclipse.debug.core.sourcelookup"
				identifier = new PlatformID {
					value = "org.eclipse.debug.core.sourcelookup"
				}
			}
			exports += new Package package_org_eclipse_debug_core_sourcelookup_containers {
				__id = "org.eclipse.debug.core.sourcelookup.containers"
				identifier = new PlatformID {
					value = "org.eclipse.debug.core.sourcelookup.containers"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_core {
				__id = "org.eclipse.debug.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.core"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_core_commands {
				__id = "org.eclipse.debug.internal.core.commands"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.core.commands"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_core_sourcelookup {
				__id = "org.eclipse.debug.internal.core.sourcelookup"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.core.sourcelookup"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_core_sourcelookup_containers {
				__id = "org.eclipse.debug.internal.core.sourcelookup.containers"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.core.sourcelookup.containers"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_core_variables {
				__id = "org.eclipse.debug.internal.core.variables"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.core.variables"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_core
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_debug_ui {
			__id = "org.eclipse.debug.ui"
			identifier = new PlatformID {
				value = "org.eclipse.debug.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.1.v20090811_r351"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_debug_internal_ui {
				__id = "org.eclipse.debug.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_actions {
				__id = "org.eclipse.debug.internal.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_actions_breakpointGroups {
				__id = "org.eclipse.debug.internal.ui.actions.breakpointGroups"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.actions.breakpointGroups"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_actions_breakpoints {
				__id = "org.eclipse.debug.internal.ui.actions.breakpoints"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.actions.breakpoints"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_actions_expressions {
				__id = "org.eclipse.debug.internal.ui.actions.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.actions.expressions"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_actions_variables {
				__id = "org.eclipse.debug.internal.ui.actions.variables"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.actions.variables"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_actions_variables_details {
				__id = "org.eclipse.debug.internal.ui.actions.variables.details"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.actions.variables.details"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_commands_actions {
				__id = "org.eclipse.debug.internal.ui.commands.actions"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.commands.actions"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_contextlaunching {
				__id = "org.eclipse.debug.internal.ui.contextlaunching"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.contextlaunching"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_contexts {
				__id = "org.eclipse.debug.internal.ui.contexts"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.contexts"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_elements_adapters {
				__id = "org.eclipse.debug.internal.ui.elements.adapters"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.elements.adapters"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_importexport_breakpoints {
				__id = "org.eclipse.debug.internal.ui.importexport.breakpoints"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.importexport.breakpoints"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_importexport_launchconfigurations {
				__id = "org.eclipse.debug.internal.ui.importexport.launchconfigurations"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.importexport.launchconfigurations"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_launchConfigurations {
				__id = "org.eclipse.debug.internal.ui.launchConfigurations"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.launchConfigurations"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_memory {
				__id = "org.eclipse.debug.internal.ui.memory"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.memory"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_memory_provisional {
				__id = "org.eclipse.debug.internal.ui.memory.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.memory.provisional"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_model_elements {
				__id = "org.eclipse.debug.internal.ui.model.elements"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.model.elements"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_preferences {
				__id = "org.eclipse.debug.internal.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_sourcelookup {
				__id = "org.eclipse.debug.internal.ui.sourcelookup"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.sourcelookup"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_sourcelookup_browsers {
				__id = "org.eclipse.debug.internal.ui.sourcelookup.browsers"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.sourcelookup.browsers"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_stringsubstitution {
				__id = "org.eclipse.debug.internal.ui.stringsubstitution"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.stringsubstitution"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_viewers {
				__id = "org.eclipse.debug.internal.ui.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.viewers"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_viewers_breadcrumb {
				__id = "org.eclipse.debug.internal.ui.viewers.breadcrumb"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.viewers.breadcrumb"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_viewers_model {
				__id = "org.eclipse.debug.internal.ui.viewers.model"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.viewers.model"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_viewers_model_provisional {
				__id = "org.eclipse.debug.internal.ui.viewers.model.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.viewers.model.provisional"
				}
			}
			exports += new Package package_org_eclipse_cdt_dsf_ui {
				__id = "org.eclipse.cdt.dsf.ui"
				identifier = new PlatformID {
					value = "org.eclipse.cdt.dsf.ui"
				}
			}
			exports += new Package package_org_eclipse_cdt_dsf_gdb_ui_ {
				__id = "org.eclipse.cdt.dsf.gdb.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.cdt.dsf.gdb.ui'"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_viewers_provisional {
				__id = "org.eclipse.debug.internal.ui.viewers.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.viewers.provisional"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_viewers_update {
				__id = "org.eclipse.debug.internal.ui.viewers.update"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.viewers.update"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views {
				__id = "org.eclipse.debug.internal.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_breakpoints {
				__id = "org.eclipse.debug.internal.ui.views.breakpoints"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.breakpoints"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_console {
				__id = "org.eclipse.debug.internal.ui.views.console"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.console"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_expression {
				__id = "org.eclipse.debug.internal.ui.views.expression"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.expression"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_launch {
				__id = "org.eclipse.debug.internal.ui.views.launch"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.launch"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_memory {
				__id = "org.eclipse.debug.internal.ui.views.memory"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.memory"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_memory_renderings {
				__id = "org.eclipse.debug.internal.ui.views.memory.renderings"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.memory.renderings"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_modules {
				__id = "org.eclipse.debug.internal.ui.views.modules"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.modules"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_registers {
				__id = "org.eclipse.debug.internal.ui.views.registers"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.registers"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_variables {
				__id = "org.eclipse.debug.internal.ui.views.variables"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.variables"
				}
			}
			exports += new Package package_org_eclipse_debug_internal_ui_views_variables_details {
				__id = "org.eclipse.debug.internal.ui.views.variables.details"
				identifier = new PlatformID {
					value = "org.eclipse.debug.internal.ui.views.variables.details"
				}
			}
			exports += new Package package_org_eclipse_debug_ui {
				__id = "org.eclipse.debug.ui"
				identifier = new PlatformID {
					value = "org.eclipse.debug.ui"
				}
			}
			exports += new Package package_org_eclipse_debug_ui_actions {
				__id = "org.eclipse.debug.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.debug.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_debug_ui_console {
				__id = "org.eclipse.debug.ui.console"
				identifier = new PlatformID {
					value = "org.eclipse.debug.ui.console"
				}
			}
			exports += new Package package_org_eclipse_debug_ui_contexts {
				__id = "org.eclipse.debug.ui.contexts"
				identifier = new PlatformID {
					value = "org.eclipse.debug.ui.contexts"
				}
			}
			exports += new Package package_org_eclipse_debug_ui_memory {
				__id = "org.eclipse.debug.ui.memory"
				identifier = new PlatformID {
					value = "org.eclipse.debug.ui.memory"
				}
			}
			exports += new Package package_org_eclipse_debug_ui_sourcelookup {
				__id = "org.eclipse.debug.ui.sourcelookup"
				identifier = new PlatformID {
					value = "org.eclipse.debug.ui.sourcelookup"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_debug_ui
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_help_appserver {
			__id = "org.eclipse.help.appserver"
			identifier = new PlatformID {
				value = "org.eclipse.help.appserver"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.400.v20090429_1800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_appserver
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_help_internal_appserver {
				__id = "org.eclipse.help.internal.appserver"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.appserver"
				}
			}
			exports += new Package package_org_eclipse_ua_tests {
				__id = "org.eclipse.ua.tests"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests"
				}
			}
			exports += new Package package_org_eclipse_tomcat_ {
				__id = "org.eclipse.tomcat'"
				identifier = new PlatformID {
					value = "org.eclipse.tomcat'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ltk_core_refactoring {
			__id = "org.eclipse.ltk.core.refactoring"
			identifier = new PlatformID {
				value = "org.eclipse.ltk.core.refactoring"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.v20090513-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = plugin_org_eclipse_core_commands
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ltk_core_refactoring {
				__id = "org.eclipse.ltk.core.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.core.refactoring"
				}
			}
			exports += new Package package_org_eclipse_ltk_core_refactoring_history {
				__id = "org.eclipse.ltk.core.refactoring.history"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.core.refactoring.history"
				}
			}
			exports += new Package package_org_eclipse_ltk_core_refactoring_model {
				__id = "org.eclipse.ltk.core.refactoring.model"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.core.refactoring.model"
				}
			}
			exports += new Package package_org_eclipse_ltk_core_refactoring_participants {
				__id = "org.eclipse.ltk.core.refactoring.participants"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.core.refactoring.participants"
				}
			}
			exports += new Package package_org_eclipse_ltk_core_refactoring_resource {
				__id = "org.eclipse.ltk.core.refactoring.resource"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.core.refactoring.resource"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_core_refactoring {
				__id = "org.eclipse.ltk.internal.core.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.core.refactoring"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_core_refactoring_history {
				__id = "org.eclipse.ltk.internal.core.refactoring.history"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.core.refactoring.history"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_core_refactoring_resource {
				__id = "org.eclipse.ltk.internal.core.refactoring.resource"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.core.refactoring.resource"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_core_refactoring_resource_undostates {
				__id = "org.eclipse.ltk.internal.core.refactoring.resource.undostates"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.core.refactoring.resource.undostates"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_core_refactoring
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ltk_ui_refactoring {
			__id = "org.eclipse.ltk.ui.refactoring"
			identifier = new PlatformID {
				value = "org.eclipse.ltk.ui.refactoring"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.100.v20090604"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_ui_navigator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.200-4.0.0)'"
				maxVersion = "'[3.3.200-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_compare
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = plugin_org_eclipse_team_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ltk_internal_ui_refactoring {
				__id = "org.eclipse.ltk.internal.ui.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.ui.refactoring"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_ui_refactoring_actions {
				__id = "org.eclipse.ltk.internal.ui.refactoring.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.ui.refactoring.actions"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_ui_refactoring_history {
				__id = "org.eclipse.ltk.internal.ui.refactoring.history"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.ui.refactoring.history"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_ui_refactoring_model {
				__id = "org.eclipse.ltk.internal.ui.refactoring.model"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.ui.refactoring.model"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_ui_refactoring_scripting {
				__id = "org.eclipse.ltk.internal.ui.refactoring.scripting"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.ui.refactoring.scripting"
				}
			}
			exports += new Package package_org_eclipse_ltk_internal_ui_refactoring_util {
				__id = "org.eclipse.ltk.internal.ui.refactoring.util"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.internal.ui.refactoring.util"
				}
			}
			exports += new Package package_org_eclipse_ltk_ui_refactoring {
				__id = "org.eclipse.ltk.ui.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.ui.refactoring"
				}
			}
			exports += new Package package_org_eclipse_ltk_ui_refactoring_actions {
				__id = "org.eclipse.ltk.ui.refactoring.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.ui.refactoring.actions"
				}
			}
			exports += new Package package_org_eclipse_ltk_ui_refactoring_history {
				__id = "org.eclipse.ltk.ui.refactoring.history"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.ui.refactoring.history"
				}
			}
			exports += new Package package_org_eclipse_ltk_ui_refactoring_model {
				__id = "org.eclipse.ltk.ui.refactoring.model"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.ui.refactoring.model"
				}
			}
			exports += new Package package_org_eclipse_ltk_ui_refactoring_resource {
				__id = "org.eclipse.ltk.ui.refactoring.resource"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.ui.refactoring.resource"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ltk_ui_refactoring
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_platform {
			__id = "org.eclipse.platform"
			identifier = new PlatformID {
				value = "org.eclipse.platform"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.3.201.v200909170800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_ui_intro
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_update_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_ui_intro_universal
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = plugin_org_eclipse_ui_ide_application
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_platform_internal {
				__id = "org.eclipse.platform.internal"
				identifier = new PlatformID {
					value = "org.eclipse.platform.internal"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_platform_doc_user {
			__id = "org.eclipse.platform.doc.user"
			identifier = new PlatformID {
				value = "org.eclipse.platform.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.r351_v20090821-0800"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.platform.doc.user"
				identifier = new PlatformID {
					value = "org.eclipse.platform.doc.user"
				}
				locator = new EFSLocator {
					value = "org.eclipse.platform.doc.user"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform_doc_user
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_search {
			__id = "org.eclipse.search"
			identifier = new PlatformID {
				value = "org.eclipse.search"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.1.r351_v20090708-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = plugin_org_eclipse_ltk_ui_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_search_core_text {
				__id = "org.eclipse.search.core.text"
				identifier = new PlatformID {
					value = "org.eclipse.search.core.text"
				}
			}
			exports += new Package package_org_eclipse_search_internal_core_text {
				__id = "org.eclipse.search.internal.core.text"
				identifier = new PlatformID {
					value = "org.eclipse.search.internal.core.text"
				}
			}
			exports += new Package package_org_eclipse_search_internal_ui {
				__id = "org.eclipse.search.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.search.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_search_internal_ui_text {
				__id = "org.eclipse.search.internal.ui.text"
				identifier = new PlatformID {
					value = "org.eclipse.search.internal.ui.text"
				}
			}
			exports += new Package package_org_eclipse_search_internal_ui_util {
				__id = "org.eclipse.search.internal.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.search.internal.ui.util"
				}
			}
			exports += new Package package_org_eclipse_search_ui {
				__id = "org.eclipse.search.ui"
				identifier = new PlatformID {
					value = "org.eclipse.search.ui"
				}
			}
			exports += new Package package_org_eclipse_search_ui_actions {
				__id = "org.eclipse.search.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.search.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_search_ui_text {
				__id = "org.eclipse.search.ui.text"
				identifier = new PlatformID {
					value = "org.eclipse.search.ui.text"
				}
			}
			exports += new Package package_org_eclipse_search2_internal_ui {
				__id = "org.eclipse.search2.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.search2.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_search2_internal_ui_basic_views {
				__id = "org.eclipse.search2.internal.ui.basic.views"
				identifier = new PlatformID {
					value = "org.eclipse.search2.internal.ui.basic.views"
				}
			}
			exports += new Package package_org_eclipse_search2_internal_ui_text {
				__id = "org.eclipse.search2.internal.ui.text"
				identifier = new PlatformID {
					value = "org.eclipse.search2.internal.ui.text"
				}
			}
			exports += new Package package_org_eclipse_search2_internal_ui_text2 {
				__id = "org.eclipse.search2.internal.ui.text2"
				identifier = new PlatformID {
					value = "org.eclipse.search2.internal.ui.text2"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_search
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_team_core {
			__id = "org.eclipse.team.core"
			identifier = new PlatformID {
				value = "org.eclipse.team.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.I20090527-0620"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_core
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_team_core {
				__id = "org.eclipse.team.core"
				identifier = new PlatformID {
					value = "org.eclipse.team.core"
				}
			}
			exports += new Package package_org_eclipse_team_core_diff {
				__id = "org.eclipse.team.core.diff"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.diff"
				}
			}
			exports += new Package package_org_eclipse_team_core_diff_provider {
				__id = "org.eclipse.team.core.diff.provider"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.diff.provider"
				}
			}
			exports += new Package package_org_eclipse_team_core_history {
				__id = "org.eclipse.team.core.history"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.history"
				}
			}
			exports += new Package package_org_eclipse_team_core_history_provider {
				__id = "org.eclipse.team.core.history.provider"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.history.provider"
				}
			}
			exports += new Package package_org_eclipse_team_core_mapping {
				__id = "org.eclipse.team.core.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.mapping"
				}
			}
			exports += new Package package_org_eclipse_team_core_mapping_provider {
				__id = "org.eclipse.team.core.mapping.provider"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.mapping.provider"
				}
			}
			exports += new Package package_org_eclipse_team_core_subscribers {
				__id = "org.eclipse.team.core.subscribers"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.subscribers"
				}
			}
			exports += new Package package_org_eclipse_team_core_synchronize {
				__id = "org.eclipse.team.core.synchronize"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.synchronize"
				}
			}
			exports += new Package package_org_eclipse_team_core_variants {
				__id = "org.eclipse.team.core.variants"
				identifier = new PlatformID {
					value = "org.eclipse.team.core.variants"
				}
			}
			exports += new Package package_org_eclipse_team_internal_core {
				__id = "org.eclipse.team.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.core"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ssh2 {
				__id = "org.eclipse.team.cvs.ssh2"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ssh2"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui {
				__id = "org.eclipse.team.cvs.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui"
				}
			}
			exports += new Package package_org_eclipse_team_ui_ {
				__id = "org.eclipse.team.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_core_history {
				__id = "org.eclipse.team.internal.core.history"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.core.history"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ssh2 {
				__id = "org.eclipse.team.cvs.ssh2"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ssh2"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui {
				__id = "org.eclipse.team.cvs.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui"
				}
			}
			exports += new Package package_org_eclipse_team_ui_ {
				__id = "org.eclipse.team.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_core_mapping {
				__id = "org.eclipse.team.internal.core.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.core.mapping"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ssh2 {
				__id = "org.eclipse.team.cvs.ssh2"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ssh2"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui {
				__id = "org.eclipse.team.cvs.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui"
				}
			}
			exports += new Package package_org_eclipse_team_ui_ {
				__id = "org.eclipse.team.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_core_streams {
				__id = "org.eclipse.team.internal.core.streams"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.core.streams"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ssh2 {
				__id = "org.eclipse.team.cvs.ssh2"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ssh2"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui {
				__id = "org.eclipse.team.cvs.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui"
				}
			}
			exports += new Package package_org_eclipse_team_ui_ {
				__id = "org.eclipse.team.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_core_subscribers {
				__id = "org.eclipse.team.internal.core.subscribers"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.core.subscribers"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ssh2 {
				__id = "org.eclipse.team.cvs.ssh2"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ssh2"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui {
				__id = "org.eclipse.team.cvs.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui"
				}
			}
			exports += new Package package_org_eclipse_team_ui_ {
				__id = "org.eclipse.team.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_team_ui {
			__id = "org.eclipse.team.ui"
			identifier = new PlatformID {
				value = "org.eclipse.team.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.I20090430-0408"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_compare
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_ui_navigator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_ui_navigator_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_team_internal_ui {
				__id = "org.eclipse.team.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_actions {
				__id = "org.eclipse.team.internal.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_dialogs {
				__id = "org.eclipse.team.internal.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_history {
				__id = "org.eclipse.team.internal.ui.history"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.history"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_mapping {
				__id = "org.eclipse.team.internal.ui.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.mapping"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_preferences {
				__id = "org.eclipse.team.internal.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_registry {
				__id = "org.eclipse.team.internal.ui.registry"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.registry"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_synchronize {
				__id = "org.eclipse.team.internal.ui.synchronize"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.synchronize"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_synchronize_actions {
				__id = "org.eclipse.team.internal.ui.synchronize.actions"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.synchronize.actions"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ui_wizards {
				__id = "org.eclipse.team.internal.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_ui {
				__id = "org.eclipse.team.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui"
				}
			}
			exports += new Package package_org_eclipse_team_ui_history {
				__id = "org.eclipse.team.ui.history"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui.history"
				}
			}
			exports += new Package package_org_eclipse_team_ui_mapping {
				__id = "org.eclipse.team.ui.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui.mapping"
				}
			}
			exports += new Package package_org_eclipse_team_ui_synchronize {
				__id = "org.eclipse.team.ui.synchronize"
				identifier = new PlatformID {
					value = "org.eclipse.team.ui.synchronize"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_ui
				target = package_com_ibm_icu_util
			}
		}
		plugins += new Plugin plugin_org_eclipse_text {
			__id = "org.eclipse.text"
			identifier = new PlatformID {
				value = "org.eclipse.text"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.0.v20090513-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_text
				target = plugin_org_eclipse_core_commands
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_text
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jface_text {
				__id = "org.eclipse.jface.text"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text"
				}
			}
			exports += new Package package_org_eclipse_jface_text_link {
				__id = "org.eclipse.jface.text.link"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.link"
				}
			}
			exports += new Package package_org_eclipse_jface_text_projection {
				__id = "org.eclipse.jface.text.projection"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.projection"
				}
			}
			exports += new Package package_org_eclipse_jface_text_source {
				__id = "org.eclipse.jface.text.source"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.source"
				}
			}
			exports += new Package package_org_eclipse_jface_text_templates {
				__id = "org.eclipse.jface.text.templates"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.templates"
				}
			}
			exports += new Package package_org_eclipse_text_edits {
				__id = "org.eclipse.text.edits"
				identifier = new PlatformID {
					value = "org.eclipse.text.edits"
				}
			}
			exports += new Package package_org_eclipse_text_undo {
				__id = "org.eclipse.text.undo"
				identifier = new PlatformID {
					value = "org.eclipse.text.undo"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_text
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_text
				target = package_com_ibm_icu_util
			}
		}
		plugins += new Plugin plugin_org_eclipse_jface_text {
			__id = "org.eclipse.jface.text"
			identifier = new PlatformID {
				value = "org.eclipse.jface.text"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.r351_v20090708-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_text
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_text
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_text
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jface_contentassist {
				__id = "org.eclipse.jface.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.jface.contentassist"
				}
			}
			exports += new Package package_org_eclipse_jface_contentassist_images {
				__id = "org.eclipse.jface.contentassist.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.contentassist.images"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_text {
				__id = "org.eclipse.jface.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.text"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_text_html {
				__id = "org.eclipse.jface.internal.text.html"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.text.html"
				}
			}
			exports += new Package package_org_eclipse_jdt_debug_ui {
				__id = "org.eclipse.jdt.debug.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.debug.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui {
				__id = "org.eclipse.jdt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui"
				}
			}
			exports += new Package package_org_eclipse_ant_ui {
				__id = "org.eclipse.ant.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ant.ui"
				}
			}
			exports += new Package package_org_eclipse_ltk_ui_refactoring_ {
				__id = "org.eclipse.ltk.ui.refactoring'"
				identifier = new PlatformID {
					value = "org.eclipse.ltk.ui.refactoring'"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_text_link_contentassist {
				__id = "org.eclipse.jface.internal.text.link.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.text.link.contentassist"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_text_revisions {
				__id = "org.eclipse.jface.internal.text.revisions"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.text.revisions"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_text_source {
				__id = "org.eclipse.jface.internal.text.source"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.text.source"
				}
			}
			exports += new Package package_org_eclipse_jface_text {
				__id = "org.eclipse.jface.text"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text"
				}
			}
			exports += new Package package_org_eclipse_jface_text_contentassist {
				__id = "org.eclipse.jface.text.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.contentassist"
				}
			}
			exports += new Package package_org_eclipse_jface_text_formatter {
				__id = "org.eclipse.jface.text.formatter"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.formatter"
				}
			}
			exports += new Package package_org_eclipse_jface_text_hyperlink {
				__id = "org.eclipse.jface.text.hyperlink"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.hyperlink"
				}
			}
			exports += new Package package_org_eclipse_jface_text_information {
				__id = "org.eclipse.jface.text.information"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.information"
				}
			}
			exports += new Package package_org_eclipse_jface_text_link {
				__id = "org.eclipse.jface.text.link"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.link"
				}
			}
			exports += new Package package_org_eclipse_jface_text_presentation {
				__id = "org.eclipse.jface.text.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.presentation"
				}
			}
			exports += new Package package_org_eclipse_jface_text_quickassist {
				__id = "org.eclipse.jface.text.quickassist"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.quickassist"
				}
			}
			exports += new Package package_org_eclipse_jface_text_reconciler {
				__id = "org.eclipse.jface.text.reconciler"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.reconciler"
				}
			}
			exports += new Package package_org_eclipse_jface_text_revisions {
				__id = "org.eclipse.jface.text.revisions"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.revisions"
				}
			}
			exports += new Package package_org_eclipse_jface_text_rules {
				__id = "org.eclipse.jface.text.rules"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.rules"
				}
			}
			exports += new Package package_org_eclipse_jface_text_source {
				__id = "org.eclipse.jface.text.source"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.source"
				}
			}
			exports += new Package package_org_eclipse_jface_text_source_projection {
				__id = "org.eclipse.jface.text.source.projection"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.source.projection"
				}
			}
			exports += new Package package_org_eclipse_jface_text_source_projection_images {
				__id = "org.eclipse.jface.text.source.projection.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.source.projection.images"
				}
			}
			exports += new Package package_org_eclipse_jface_text_templates {
				__id = "org.eclipse.jface.text.templates"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.templates"
				}
			}
			exports += new Package package_org_eclipse_jface_text_templates_persistence {
				__id = "org.eclipse.jface.text.templates.persistence"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.templates.persistence"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_text
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_jsch_core {
			__id = "org.eclipse.jsch.core"
			identifier = new PlatformID {
				value = "org.eclipse.jsch.core"
			}
			state = : "State.active"
			version = new Version {
				value = "1.1.100.I20090430-0408"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_core
				target = plugin_com_jcraft_jsch
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[0.1.28-1.0.0)'"
				maxVersion = "'[0.1.28-1.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_core
				target = plugin_org_eclipse_core_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_jsch_core {
				__id = "org.eclipse.jsch.core"
				identifier = new PlatformID {
					value = "org.eclipse.jsch.core"
				}
			}
			exports += new Package package_org_eclipse_jsch_internal_core {
				__id = "org.eclipse.jsch.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.jsch.internal.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jsch_ui {
			__id = "org.eclipse.jsch.ui"
			identifier = new PlatformID {
				value = "org.eclipse.jsch.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.200.I20090430-0408"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_ui
				target = plugin_org_eclipse_jsch_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jsch_ui
				target = plugin_com_jcraft_jsch
			}
			exports += new Package package_org_eclipse_jsch_internal_ui {
				__id = "org.eclipse.jsch.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jsch.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_jsch_internal_ui_preference {
				__id = "org.eclipse.jsch.internal.ui.preference"
				identifier = new PlatformID {
					value = "org.eclipse.jsch.internal.ui.preference"
				}
			}
			exports += new Package package_org_eclipse_jsch_ui {
				__id = "org.eclipse.jsch.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jsch.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_console {
			__id = "org.eclipse.ui.console"
			identifier = new PlatformID {
				value = "org.eclipse.ui.console"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.0.v20090513"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_console
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_console
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_console
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_console
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_console
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_console
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_console {
				__id = "org.eclipse.ui.console"
				identifier = new PlatformID {
					value = "org.eclipse.ui.console"
				}
			}
			exports += new Package package_org_eclipse_ui_console_actions {
				__id = "org.eclipse.ui.console.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.console.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_console {
				__id = "org.eclipse.ui.internal.console"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.console"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_console
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_presentations_r21 {
			__id = "org.eclipse.ui.presentations.r21"
			identifier = new PlatformID {
				value = "org.eclipse.ui.presentations.r21"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.100.I20081007-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_presentations_r21
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_presentations_r21
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_presentations {
				__id = "org.eclipse.ui.internal.presentations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.presentations"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_presentations_r21 {
				__id = "org.eclipse.ui.internal.presentations.r21"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.presentations.r21"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_presentations_r21_widgets {
				__id = "org.eclipse.ui.internal.presentations.r21.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.presentations.r21.widgets"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_presentations_r21
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_intro {
			__id = "org.eclipse.ui.intro"
			identifier = new PlatformID {
				value = "org.eclipse.ui.intro"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.3.1.v20090805_35x"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = plugin_org_eclipse_help_base
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl {
				__id = "org.eclipse.ui.internal.intro.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_html {
				__id = "org.eclipse.ui.internal.intro.impl.html"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.html"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_model {
				__id = "org.eclipse.ui.internal.intro.impl.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.model"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_model_loader {
				__id = "org.eclipse.ui.internal.intro.impl.model.loader"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.model.loader"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_model_url {
				__id = "org.eclipse.ui.internal.intro.impl.model.url"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.model.url"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_model_util {
				__id = "org.eclipse.ui.internal.intro.impl.model.util"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.model.util"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_model_viewer {
				__id = "org.eclipse.ui.internal.intro.impl.model.viewer"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.model.viewer"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_parts {
				__id = "org.eclipse.ui.internal.intro.impl.parts"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.parts"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_presentations {
				__id = "org.eclipse.ui.internal.intro.impl.presentations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.presentations"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_swt {
				__id = "org.eclipse.ui.internal.intro.impl.swt"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.swt"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_impl_util {
				__id = "org.eclipse.ui.internal.intro.impl.util"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.impl.util"
				}
			}
			exports += new Package package_org_eclipse_ui_intro_config {
				__id = "org.eclipse.ui.intro.config"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro.config"
				}
			}
			exports += new Package package_org_eclipse_ui_intro_contentproviders {
				__id = "org.eclipse.ui.intro.contentproviders"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro.contentproviders"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = package_javax_xml_transform
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = package_javax_xml_transform_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = package_javax_xml_transform_stream
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_intro_universal {
			__id = "org.eclipse.ui.intro.universal"
			identifier = new PlatformID {
				value = "org.eclipse.ui.intro.universal"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.300.v20090526"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro_universal
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro_universal
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro_universal
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro_universal
				target = plugin_org_eclipse_ui_intro
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_intro_universal {
				__id = "org.eclipse.ui.internal.intro.universal"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.universal"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_universal_contentdetect {
				__id = "org.eclipse.ui.internal.intro.universal.contentdetect"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.universal.contentdetect"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro_universal_util {
				__id = "org.eclipse.ui.internal.intro.universal.util"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro.universal.util"
				}
			}
			exports += new Package package_org_eclipse_ui_intro_universal {
				__id = "org.eclipse.ui.intro.universal"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro.universal"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro_universal
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro_universal
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_intro_universal
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_cheatsheets {
			__id = "org.eclipse.ui.cheatsheets"
			identifier = new PlatformID {
				value = "org.eclipse.ui.cheatsheets"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.3.200.v20090526"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = plugin_org_eclipse_help_base
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = plugin_org_eclipse_help_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_ui_cheatsheets {
				__id = "org.eclipse.ui.cheatsheets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.cheatsheets"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets {
				__id = "org.eclipse.ui.internal.cheatsheets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_actions {
				__id = "org.eclipse.ui.internal.cheatsheets.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_composite_explorer {
				__id = "org.eclipse.ui.internal.cheatsheets.composite.explorer"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.composite.explorer"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_composite_model {
				__id = "org.eclipse.ui.internal.cheatsheets.composite.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.composite.model"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_composite_parser {
				__id = "org.eclipse.ui.internal.cheatsheets.composite.parser"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.composite.parser"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_composite_views {
				__id = "org.eclipse.ui.internal.cheatsheets.composite.views"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.composite.views"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_data {
				__id = "org.eclipse.ui.internal.cheatsheets.data"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.data"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_dialogs {
				__id = "org.eclipse.ui.internal.cheatsheets.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.dialogs"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_handlers {
				__id = "org.eclipse.ui.internal.cheatsheets.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.handlers"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_registry {
				__id = "org.eclipse.ui.internal.cheatsheets.registry"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.registry"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_state {
				__id = "org.eclipse.ui.internal.cheatsheets.state"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.state"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_cheatsheets_views {
				__id = "org.eclipse.ui.internal.cheatsheets.views"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.cheatsheets.views"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_provisional_cheatsheets {
				__id = "org.eclipse.ui.internal.provisional.cheatsheets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.provisional.cheatsheets"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = package_org_apache_lucene_document
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_cheatsheets
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_browser {
			__id = "org.eclipse.ui.browser"
			identifier = new PlatformID {
				value = "org.eclipse.ui.browser"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.300.v20090526"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_browser
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_browser
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_browser {
				__id = "org.eclipse.ui.browser"
				identifier = new PlatformID {
					value = "org.eclipse.ui.browser"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_browser {
				__id = "org.eclipse.ui.internal.browser"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.browser"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_browser_browsers {
				__id = "org.eclipse.ui.internal.browser.browsers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.browser.browsers"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_browser_macosx {
				__id = "org.eclipse.ui.internal.browser.macosx"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.browser.macosx"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_browser
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_navigator {
			__id = "org.eclipse.ui.navigator"
			identifier = new PlatformID {
				value = "org.eclipse.ui.navigator"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.1.M20090911-1550"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_navigator {
				__id = "org.eclipse.ui.internal.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_actions {
				__id = "org.eclipse.ui.internal.navigator.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_dnd {
				__id = "org.eclipse.ui.internal.navigator.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.dnd"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_extensions {
				__id = "org.eclipse.ui.internal.navigator.extensions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.extensions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_filters {
				__id = "org.eclipse.ui.internal.navigator.filters"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.filters"
				}
			}
			exports += new Package package_org_eclipse_ui_tests_navigator_ {
				__id = "org.eclipse.ui.tests.navigator'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.tests.navigator'"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_framelist {
				__id = "org.eclipse.ui.internal.navigator.framelist"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.framelist"
				}
			}
			exports += new Package package_org_eclipse_ui_tests_navigator_ {
				__id = "org.eclipse.ui.tests.navigator'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.tests.navigator'"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_sorters {
				__id = "org.eclipse.ui.internal.navigator.sorters"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.sorters"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_wizards {
				__id = "org.eclipse.ui.internal.navigator.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.wizards"
				}
			}
			exports += new Package package_org_eclipse_ui_navigator {
				__id = "org.eclipse.ui.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.ui.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_navigator_resources {
			__id = "org.eclipse.ui.navigator.resources"
			identifier = new PlatformID {
				value = "org.eclipse.ui.navigator.resources"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.1.M20090826-0800"
			}
			vendor = vendor_Eclipse_org_
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_ui_navigator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_ui_views_properties_tabbed
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_navigator_resources
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_resources {
				__id = "org.eclipse.ui.internal.navigator.resources"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.resources"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_resources_actions {
				__id = "org.eclipse.ui.internal.navigator.resources.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.resources.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_resources_plugin {
				__id = "org.eclipse.ui.internal.navigator.resources.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.resources.plugin"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_resources_workbench {
				__id = "org.eclipse.ui.internal.navigator.resources.workbench"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.resources.workbench"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_navigator_workingsets {
				__id = "org.eclipse.ui.internal.navigator.workingsets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.navigator.workingsets"
				}
			}
			exports += new Package package_org_eclipse_ui_navigator_resources {
				__id = "org.eclipse.ui.navigator.resources"
				identifier = new PlatformID {
					value = "org.eclipse.ui.navigator.resources"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_net {
			__id = "org.eclipse.ui.net"
			identifier = new PlatformID {
				value = "org.eclipse.ui.net"
			}
			state = : "State.active"
			version = new Version {
				value = "1.2.1.r35x_20090812-1200"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_net
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_net
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_net
				target = plugin_org_eclipse_core_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_net {
				__id = "org.eclipse.ui.internal.net"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.net"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_net_auth {
				__id = "org.eclipse.ui.internal.net.auth"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.net.auth"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_workbench_texteditor {
			__id = "org.eclipse.ui.workbench.texteditor"
			identifier = new PlatformID {
				value = "org.eclipse.ui.workbench.texteditor"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.v20090603"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench_texteditor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench_texteditor
				target = plugin_org_eclipse_compare_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench_texteditor
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench_texteditor
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench_texteditor
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_contentassist {
				__id = "org.eclipse.ui.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.ui.contentassist"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_texteditor {
				__id = "org.eclipse.ui.internal.texteditor"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.texteditor"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_texteditor_quickdiff {
				__id = "org.eclipse.ui.internal.texteditor.quickdiff"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.texteditor.quickdiff"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_texteditor_quickdiff_compare_equivalence {
				__id = "org.eclipse.ui.internal.texteditor.quickdiff.compare.equivalence"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.texteditor.quickdiff.compare.equivalence"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_texteditor_rulers {
				__id = "org.eclipse.ui.internal.texteditor.rulers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.texteditor.rulers"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_texteditor_spelling {
				__id = "org.eclipse.ui.internal.texteditor.spelling"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.texteditor.spelling"
				}
			}
			exports += new Package package_org_eclipse_ui_texteditor {
				__id = "org.eclipse.ui.texteditor"
				identifier = new PlatformID {
					value = "org.eclipse.ui.texteditor"
				}
			}
			exports += new Package package_org_eclipse_ui_texteditor_link {
				__id = "org.eclipse.ui.texteditor.link"
				identifier = new PlatformID {
					value = "org.eclipse.ui.texteditor.link"
				}
			}
			exports += new Package package_org_eclipse_ui_texteditor_quickdiff {
				__id = "org.eclipse.ui.texteditor.quickdiff"
				identifier = new PlatformID {
					value = "org.eclipse.ui.texteditor.quickdiff"
				}
			}
			exports += new Package package_org_eclipse_ui_texteditor_rulers {
				__id = "org.eclipse.ui.texteditor.rulers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.texteditor.rulers"
				}
			}
			exports += new Package package_org_eclipse_ui_texteditor_spelling {
				__id = "org.eclipse.ui.texteditor.spelling"
				identifier = new PlatformID {
					value = "org.eclipse.ui.texteditor.spelling"
				}
			}
			exports += new Package package_org_eclipse_ui_texteditor_templates {
				__id = "org.eclipse.ui.texteditor.templates"
				identifier = new PlatformID {
					value = "org.eclipse.ui.texteditor.templates"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench_texteditor
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_views {
			__id = "org.eclipse.ui.views"
			identifier = new PlatformID {
				value = "org.eclipse.ui.views"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.1.M20090826-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_views {
				__id = "org.eclipse.ui.internal.views"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_contentoutline {
				__id = "org.eclipse.ui.internal.views.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.contentoutline"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_properties {
				__id = "org.eclipse.ui.internal.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.properties"
				}
			}
			exports += new Package package_org_eclipse_ui_views_contentoutline {
				__id = "org.eclipse.ui.views.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.contentoutline"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties {
				__id = "org.eclipse.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_editors {
			__id = "org.eclipse.ui.editors"
			identifier = new PlatformID {
				value = "org.eclipse.ui.editors"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.v20090527-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_editors_text {
				__id = "org.eclipse.ui.editors.text"
				identifier = new PlatformID {
					value = "org.eclipse.ui.editors.text"
				}
			}
			exports += new Package package_org_eclipse_ui_editors_text_templates {
				__id = "org.eclipse.ui.editors.text.templates"
				identifier = new PlatformID {
					value = "org.eclipse.ui.editors.text.templates"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_editors_quickdiff {
				__id = "org.eclipse.ui.internal.editors.quickdiff"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.editors.quickdiff"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_editors_text {
				__id = "org.eclipse.ui.internal.editors.text"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.editors.text"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_texteditor {
				__id = "org.eclipse.ui.internal.texteditor"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.texteditor"
				}
			}
			exports += new Package package_org_eclipse_ui_texteditor {
				__id = "org.eclipse.ui.texteditor"
				identifier = new PlatformID {
					value = "org.eclipse.ui.texteditor"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_editors
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_externaltools {
			__id = "org.eclipse.ui.externaltools"
			identifier = new PlatformID {
				value = "org.eclipse.ui.externaltools"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.0.v20090504"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_externaltools
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_externaltools
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_externaltools
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_externaltools
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_externaltools
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_externaltools
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_externaltools
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_externaltools_internal_launchConfigurations {
				__id = "org.eclipse.ui.externaltools.internal.launchConfigurations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.externaltools.internal.launchConfigurations"
				}
			}
			exports += new Package package_org_eclipse_ui_externaltools_internal_menu {
				__id = "org.eclipse.ui.externaltools.internal.menu"
				identifier = new PlatformID {
					value = "org.eclipse.ui.externaltools.internal.menu"
				}
			}
			exports += new Package package_org_eclipse_ui_externaltools_internal_model {
				__id = "org.eclipse.ui.externaltools.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.externaltools.internal.model"
				}
			}
			exports += new Package package_org_eclipse_ui_externaltools_internal_program_launchConfigurations {
				__id = "org.eclipse.ui.externaltools.internal.program.launchConfigurations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.externaltools.internal.program.launchConfigurations"
				}
			}
			exports += new Package package_org_eclipse_ui_externaltools_internal_registry {
				__id = "org.eclipse.ui.externaltools.internal.registry"
				identifier = new PlatformID {
					value = "org.eclipse.ui.externaltools.internal.registry"
				}
			}
			exports += new Package package_org_eclipse_ui_externaltools_internal_ui {
				__id = "org.eclipse.ui.externaltools.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui.externaltools.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_ui_externaltools_internal_variables {
				__id = "org.eclipse.ui.externaltools.internal.variables"
				identifier = new PlatformID {
					value = "org.eclipse.ui.externaltools.internal.variables"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_ide {
			__id = "org.eclipse.ui.ide"
			identifier = new PlatformID {
				value = "org.eclipse.ui.ide"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.M20090826-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_equinox_p2_engine
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_equinox_p2_metadata
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_ui_actions {
				__id = "org.eclipse.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_dialogs {
				__id = "org.eclipse.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_ui_ide {
				__id = "org.eclipse.ui.ide"
				identifier = new PlatformID {
					value = "org.eclipse.ui.ide"
				}
			}
			exports += new Package package_org_eclipse_ui_ide_dialogs {
				__id = "org.eclipse.ui.ide.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.ide.dialogs"
				}
			}
			exports += new Package package_org_eclipse_ui_ide_fileSystem {
				__id = "org.eclipse.ui.ide.fileSystem"
				identifier = new PlatformID {
					value = "org.eclipse.ui.ide.fileSystem"
				}
			}
			exports += new Package package_org_eclipse_ui_ide_undo {
				__id = "org.eclipse.ui.ide.undo"
				identifier = new PlatformID {
					value = "org.eclipse.ui.ide.undo"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide {
				__id = "org.eclipse.ui.internal.ide"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_actions {
				__id = "org.eclipse.ui.internal.ide.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_commands {
				__id = "org.eclipse.ui.internal.ide.commands"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.commands"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_dialogs {
				__id = "org.eclipse.ui.internal.ide.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.dialogs"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_filesystem {
				__id = "org.eclipse.ui.internal.ide.filesystem"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.filesystem"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_handlers {
				__id = "org.eclipse.ui.internal.ide.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.handlers"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_misc {
				__id = "org.eclipse.ui.internal.ide.misc"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.misc"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_model {
				__id = "org.eclipse.ui.internal.ide.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.model"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_registry {
				__id = "org.eclipse.ui.internal.ide.registry"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.registry"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_undo {
				__id = "org.eclipse.ui.internal.ide.undo"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.undo"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_bookmarkexplorer {
				__id = "org.eclipse.ui.internal.views.bookmarkexplorer"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.bookmarkexplorer"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_framelist {
				__id = "org.eclipse.ui.internal.views.framelist"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.framelist"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_markers {
				__id = "org.eclipse.ui.internal.views.markers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.markers"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_navigator {
				__id = "org.eclipse.ui.internal.views.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.navigator"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_properties {
				__id = "org.eclipse.ui.internal.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.properties"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_tasklist {
				__id = "org.eclipse.ui.internal.views.tasklist"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.tasklist"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_wizards_datatransfer {
				__id = "org.eclipse.ui.internal.wizards.datatransfer"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.wizards.datatransfer"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_wizards_newresource {
				__id = "org.eclipse.ui.internal.wizards.newresource"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.wizards.newresource"
				}
			}
			exports += new Package package_org_eclipse_ui_model {
				__id = "org.eclipse.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.model"
				}
			}
			exports += new Package package_org_eclipse_ui_part {
				__id = "org.eclipse.ui.part"
				identifier = new PlatformID {
					value = "org.eclipse.ui.part"
				}
			}
			exports += new Package package_org_eclipse_ui_views_bookmarkexplorer {
				__id = "org.eclipse.ui.views.bookmarkexplorer"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.bookmarkexplorer"
				}
			}
			exports += new Package package_org_eclipse_ui_views_framelist {
				__id = "org.eclipse.ui.views.framelist"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.framelist"
				}
			}
			exports += new Package package_org_eclipse_ui_views_markers {
				__id = "org.eclipse.ui.views.markers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.markers"
				}
			}
			exports += new Package package_org_eclipse_ui_views_markers_internal {
				__id = "org.eclipse.ui.views.markers.internal"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.markers.internal"
				}
			}
			exports += new Package package_org_eclipse_ui_views_navigator {
				__id = "org.eclipse.ui.views.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.navigator"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties {
				__id = "org.eclipse.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties"
				}
			}
			exports += new Package package_org_eclipse_ui_views_tasklist {
				__id = "org.eclipse.ui.views.tasklist"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.tasklist"
				}
			}
			exports += new Package package_org_eclipse_ui_wizards_datatransfer {
				__id = "org.eclipse.ui.wizards.datatransfer"
				identifier = new PlatformID {
					value = "org.eclipse.ui.wizards.datatransfer"
				}
			}
			exports += new Package package_org_eclipse_ui_wizards_newresource {
				__id = "org.eclipse.ui.wizards.newresource"
				identifier = new PlatformID {
					value = "org.eclipse.ui.wizards.newresource"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_ide_application {
			__id = "org.eclipse.ui.ide.application"
			identifier = new PlatformID {
				value = "org.eclipse.ui.ide.application"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.101.M20090826-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide_application
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide_application
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide_application
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide_application
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide_application
				target = plugin_org_eclipse_ui_navigator_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide_application
				target = plugin_org_eclipse_core_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_ide_application {
				__id = "org.eclipse.ui.internal.ide.application"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.application"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_ide_application_dialogs {
				__id = "org.eclipse.ui.internal.ide.application.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.ide.application.dialogs"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_ide_application
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_update_core {
			__id = "org.eclipse.update.core"
			identifier = new PlatformID {
				value = "org.eclipse.update.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.300.v20090525"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_core
				target = plugin_org_eclipse_update_configurator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_core
				target = plugin_org_eclipse_core_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_update_configuration {
				__id = "org.eclipse.update.configuration"
				identifier = new PlatformID {
					value = "org.eclipse.update.configuration"
				}
			}
			exports += new Package package_org_eclipse_update_core {
				__id = "org.eclipse.update.core"
				identifier = new PlatformID {
					value = "org.eclipse.update.core"
				}
			}
			exports += new Package package_org_eclipse_update_core_model {
				__id = "org.eclipse.update.core.model"
				identifier = new PlatformID {
					value = "org.eclipse.update.core.model"
				}
			}
			exports += new Package package_org_eclipse_update_internal_core {
				__id = "org.eclipse.update.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.core"
				}
			}
			exports += new Package package_org_eclipse_pde_build_ {
				__id = "org.eclipse.pde.build'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.build'"
				}
			}
			exports += new Package package_org_eclipse_update_internal_core_connection {
				__id = "org.eclipse.update.internal.core.connection"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.core.connection"
				}
			}
			exports += new Package package_org_eclipse_update_internal_jarprocessor {
				__id = "org.eclipse.update.internal.jarprocessor"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.jarprocessor"
				}
			}
			exports += new Package package_org_eclipse_update_internal_mirror {
				__id = "org.eclipse.update.internal.mirror"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.mirror"
				}
			}
			exports += new Package package_org_eclipse_update_internal_model {
				__id = "org.eclipse.update.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.model"
				}
			}
			exports += new Package package_org_eclipse_update_internal_operations {
				__id = "org.eclipse.update.internal.operations"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.operations"
				}
			}
			exports += new Package package_org_eclipse_update_internal_provisional {
				__id = "org.eclipse.update.internal.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.provisional"
				}
			}
			exports += new Package package_org_eclipse_update_internal_search {
				__id = "org.eclipse.update.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.search"
				}
			}
			exports += new Package package_org_eclipse_update_internal_security {
				__id = "org.eclipse.update.internal.security"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.security"
				}
			}
			exports += new Package package_org_eclipse_update_internal_verifier {
				__id = "org.eclipse.update.internal.verifier"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.verifier"
				}
			}
			exports += new Package package_org_eclipse_update_operations {
				__id = "org.eclipse.update.operations"
				identifier = new PlatformID {
					value = "org.eclipse.update.operations"
				}
			}
			exports += new Package package_org_eclipse_update_search {
				__id = "org.eclipse.update.search"
				identifier = new PlatformID {
					value = "org.eclipse.update.search"
				}
			}
			exports += new Package package_org_eclipse_update_standalone {
				__id = "org.eclipse.update.standalone"
				identifier = new PlatformID {
					value = "org.eclipse.update.standalone"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_core
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_core
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_core
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_core
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_update_scheduler {
			__id = "org.eclipse.update.scheduler"
			identifier = new PlatformID {
				value = "org.eclipse.update.scheduler"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.200.v20081127"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_scheduler
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_scheduler
				target = plugin_org_eclipse_update_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_scheduler
				target = plugin_org_eclipse_update_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_scheduler
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_scheduler
				target = plugin_org_eclipse_update_configurator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.100-4.0.0)'"
				maxVersion = "'[3.1.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_update_internal_scheduler {
				__id = "org.eclipse.update.internal.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.scheduler"
				}
			}
			exports += new Package package_org_eclipse_update_internal_scheduler_preferences {
				__id = "org.eclipse.update.internal.scheduler.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.scheduler.preferences"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_update_ui {
			__id = "org.eclipse.update.ui"
			identifier = new PlatformID {
				value = "org.eclipse.update.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.201.R35x_v20090813"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = plugin_org_eclipse_update_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = plugin_org_eclipse_update_configurator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_update_internal_ui {
				__id = "org.eclipse.update.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_update_internal_ui_model {
				__id = "org.eclipse.update.internal.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui.model"
				}
			}
			exports += new Package package_org_eclipse_update_internal_ui_parts {
				__id = "org.eclipse.update.internal.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_update_internal_ui_preferences {
				__id = "org.eclipse.update.internal.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_update_internal_ui_properties {
				__id = "org.eclipse.update.internal.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_update_internal_ui_security {
				__id = "org.eclipse.update.internal.ui.security"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui.security"
				}
			}
			exports += new Package package_org_eclipse_update_internal_ui_views {
				__id = "org.eclipse.update.internal.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui.views"
				}
			}
			exports += new Package package_org_eclipse_update_internal_ui_wizards {
				__id = "org.eclipse.update.internal.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_update_ui {
				__id = "org.eclipse.update.ui"
				identifier = new PlatformID {
					value = "org.eclipse.update.ui"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_ui
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_workbench_compatibility {
			__id = "org.eclipse.ui.workbench.compatibility"
			identifier = new PlatformID {
				value = "org.eclipse.ui.workbench.compatibility"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.0.I20090429-1800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench_compatibility
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_filesystem_linux_x86 {
			__id = "org.eclipse.core.filesystem.linux.x86"
			identifier = new PlatformID {
				value = "org.eclipse.core.filesystem.linux.x86"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.v20080604-1400"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_core_variables {
			__id = "org.eclipse.core.variables"
			identifier = new PlatformID {
				value = "org.eclipse.core.variables"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.200.v20090521"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_variables
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_variables {
				__id = "org.eclipse.core.internal.variables"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.variables"
				}
			}
			exports += new Package package_org_eclipse_core_variables {
				__id = "org.eclipse.core.variables"
				identifier = new PlatformID {
					value = "org.eclipse.core.variables"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_forms {
			__id = "org.eclipse.ui.forms"
			identifier = new PlatformID {
				value = "org.eclipse.ui.forms"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.1.v20090714_35x"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_forms
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_forms
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_forms
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_forms {
				__id = "org.eclipse.ui.forms"
				identifier = new PlatformID {
					value = "org.eclipse.ui.forms"
				}
			}
			exports += new Package package_org_eclipse_ui_forms_editor {
				__id = "org.eclipse.ui.forms.editor"
				identifier = new PlatformID {
					value = "org.eclipse.ui.forms.editor"
				}
			}
			exports += new Package package_org_eclipse_ui_forms_events {
				__id = "org.eclipse.ui.forms.events"
				identifier = new PlatformID {
					value = "org.eclipse.ui.forms.events"
				}
			}
			exports += new Package package_org_eclipse_ui_forms_widgets {
				__id = "org.eclipse.ui.forms.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.forms.widgets"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_forms {
				__id = "org.eclipse.ui.internal.forms"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.forms"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_forms_widgets {
				__id = "org.eclipse.ui.internal.forms.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.forms.widgets"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_forms
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_forms
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_forms
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_forms
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_update_core_linux {
			__id = "org.eclipse.update.core.linux"
			identifier = new PlatformID {
				value = "org.eclipse.update.core.linux"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.100.v20081008"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_ui_views_properties_tabbed {
			__id = "org.eclipse.ui.views.properties.tabbed"
			identifier = new PlatformID {
				value = "org.eclipse.ui.views.properties.tabbed"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.I20090429-1800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_properties_tabbed
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_properties_tabbed
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_properties_tabbed
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_properties_tabbed
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_views_properties_tabbed {
				__id = "org.eclipse.ui.internal.views.properties.tabbed"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.properties.tabbed"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_properties_tabbed_l10n {
				__id = "org.eclipse.ui.internal.views.properties.tabbed.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.properties.tabbed.l10n"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_views_properties_tabbed_view {
				__id = "org.eclipse.ui.internal.views.properties.tabbed.view"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.properties.tabbed.view"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties_tabbed {
				__id = "org.eclipse.ui.views.properties.tabbed"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties.tabbed"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_properties_tabbed
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_security {
			__id = "org.eclipse.equinox.security"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.security"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_internal_security_auth {
				__id = "org.eclipse.equinox.internal.security.auth"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.auth"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_auth_events {
				__id = "org.eclipse.equinox.internal.security.auth.events"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.auth.events"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_auth_ext_loader {
				__id = "org.eclipse.equinox.internal.security.auth.ext.loader"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.auth.ext.loader"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_auth_nls {
				__id = "org.eclipse.equinox.internal.security.auth.nls"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.auth.nls"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_credentials {
				__id = "org.eclipse.equinox.internal.security.credentials"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.credentials"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_storage {
				__id = "org.eclipse.equinox.internal.security.storage"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.storage"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_storage_friends {
				__id = "org.eclipse.equinox.internal.security.storage.friends"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.storage.friends"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_security_auth {
				__id = "org.eclipse.equinox.security.auth"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.security.auth"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_security_auth_credentials {
				__id = "org.eclipse.equinox.security.auth.credentials"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.security.auth.credentials"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_security_auth_module {
				__id = "org.eclipse.equinox.security.auth.module"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.security.auth.module"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_security_storage {
				__id = "org.eclipse.equinox.security.storage"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.security.storage"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_security_storage_provider {
				__id = "org.eclipse.equinox.security.storage.provider"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.security.storage.provider"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_javax_crypto
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_javax_crypto_spec
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_javax_security_auth
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_javax_security_auth_callback
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_javax_security_auth_login
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_javax_security_auth_spi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_core_internal_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_core_runtime_preferences
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_osgi_framework_log
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_osgi_service_debug
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_osgi_service_environment
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.4.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_osgi_service_prefs
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.3.3"
				maxVersion = "2.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_security_ui {
			__id = "org.eclipse.equinox.security.ui"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.security.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = plugin_org_eclipse_equinox_security
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = plugin_org_eclipse_equinox_preferences
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.200-4.0.0)'"
				maxVersion = "'[3.2.200-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_security_ui {
				__id = "org.eclipse.equinox.internal.provisional.security.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.security.ui"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_ui {
				__id = "org.eclipse.equinox.internal.security.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_ui_nls {
				__id = "org.eclipse.equinox.internal.security.ui.nls"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.ui.nls"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_ui_preferences {
				__id = "org.eclipse.equinox.internal.security.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_ui_storage {
				__id = "org.eclipse.equinox.internal.security.ui.storage"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.ui.storage"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_ui_storage_view {
				__id = "org.eclipse.equinox.internal.security.ui.storage.view"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.ui.storage.view"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_security_ui_wizard {
				__id = "org.eclipse.equinox.internal.security.ui.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.security.ui.wizard"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_javax_crypto_spec
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_javax_security_auth_x500
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_eclipse_osgi_internal_provisional_service_security
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_eclipse_osgi_internal_service_security
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_eclipse_osgi_service_debug
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.2.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_eclipse_osgi_service_security
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_security_ui
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.3.3"
				maxVersion = "2.0.0"
			}
		}
		sites += site__download_eclipse_org_eclipse_updates_3_5
		sites += site__download_eclipse_org_releases_galileo
	}

	features += new Feature feature_org_eclipse_emf_mwe_core_source {
		__id = "org.eclipse.emf.mwe.core.source"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mwe.core.source"
		}
		version = new Version {
			value = "0.7.2.v200908120417"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "MWE source code (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_core_source {
			__id = "org.eclipse.emf.mwe.core.source"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.core.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xtend_typesystem_xsd_source {
		__id = "org.eclipse.xtend.typesystem.xsd.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.typesystem.xsd.source"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Xtend XSD typesystem component.(Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_xsd_source {
			__id = "org.eclipse.xtend.typesystem.xsd.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.xsd.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_xsd_mapping {
		__id = "org.eclipse.xsd.mapping"
		identifier = new PlatformID {
			value = "org.eclipse.xsd.mapping"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Platform-independent support for mapping between XML Schemas and Ecore models."
		}
		plugins += new Plugin plugin_org_eclipse_xsd_mapping {
			__id = "org.eclipse.xsd.mapping"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.mapping"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_xsd2ecore {
			__id = "org.eclipse.emf.mapping.xsd2ecore"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.xsd2ecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore
				target = plugin_org_eclipse_emf_mapping
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore
				target = plugin_org_eclipse_xsd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore
				target = plugin_org_eclipse_xsd_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2002_XSD2Ecore {
				__id = "_www_eclipse_org_emf_2002_XSD2Ecore"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2002_XSD2Ecore"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2002/XSD2Ecore"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2002_XSD2Ecore {
					__id = "conformsTo__www_eclipse_org_emf_2002_XSD2Ecore"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2002_XSD2Ecore"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2002/XSD2Ecore.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_mapping_xsd2ecore {
				__id = "org.eclipse.emf.mapping.xsd2ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.xsd2ecore"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_xsd2ecore_impl {
				__id = "org.eclipse.emf.mapping.xsd2ecore.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.xsd2ecore.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_xsd2ecore_provider {
				__id = "org.eclipse.emf.mapping.xsd2ecore.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.xsd2ecore.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_xsd2ecore_util {
				__id = "org.eclipse.emf.mapping.xsd2ecore.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.xsd2ecore.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_emf_teneo_eclipselink {
		__id = "org.eclipse.emf.teneo.eclipselink"
		identifier = new PlatformID {
			value = "org.eclipse.emf.teneo.eclipselink"
		}
		version = new Version {
			value = "1.1.1.v200909151729-7910EVVFGMGMNsO6WM"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2009 Oracle, GeenSys and others. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF EclipseLink Object Relational Persistence"
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_eclipselink {
			__id = "org.eclipse.emf.teneo.eclipselink"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.eclipselink"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink
				target = plugin_org_eclipse_emf_teneo_eclipselink_elistfactory
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink
				target = plugin_org_eclipse_persistence_jpa
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink
				target = plugin_javax_persistence
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.99.0'"
				maxVersion = "'1.99.0'"
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink {
				__id = "org.eclipse.emf.teneo.eclipselink"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_elist {
				__id = "org.eclipse.emf.teneo.eclipselink.elist"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.elist"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_emap {
				__id = "org.eclipse.emf.teneo.eclipselink.emap"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.emap"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_internal_messages {
				__id = "org.eclipse.emf.teneo.eclipselink.internal.messages"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.internal.messages"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_resource {
				__id = "org.eclipse.emf.teneo.eclipselink.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.resource"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_util {
				__id = "org.eclipse.emf.teneo.eclipselink.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_eclipselink_common_ui {
			__id = "org.eclipse.emf.teneo.eclipselink.common.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.eclipselink.common.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_common_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_common_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_common_ui
				target = plugin_org_eclipse_emf_edit_ui
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_common_ui {
				__id = "org.eclipse.emf.teneo.eclipselink.common.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.common.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_common_ui_internal_messages {
				__id = "org.eclipse.emf.teneo.eclipselink.common.ui.internal.messages"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.common.ui.internal.messages"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_common_ui_preferencepages {
				__id = "org.eclipse.emf.teneo.eclipselink.common.ui.preferencepages"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.common.ui.preferencepages"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_common_ui_wizards {
				__id = "org.eclipse.emf.teneo.eclipselink.common.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.common.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_common_ui_wizards_pages {
				__id = "org.eclipse.emf.teneo.eclipselink.common.ui.wizards.pages"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.common.ui.wizards.pages"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_eclipselink_elistfactory {
			__id = "org.eclipse.emf.teneo.eclipselink.elistfactory"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.eclipselink.elistfactory"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_elistfactory
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_elistfactory
				target = plugin_org_eclipse_emf_ecore
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_elistfactory {
				__id = "org.eclipse.emf.teneo.eclipselink.elistfactory"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.elistfactory"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_elistfactory_internal_messages {
				__id = "org.eclipse.emf.teneo.eclipselink.elistfactory.internal.messages"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.elistfactory.internal.messages"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_eclipselink_ui {
			__id = "org.eclipse.emf.teneo.eclipselink.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.eclipselink.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_ui
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_ui
				target = plugin_javax_persistence
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.99.0'"
				maxVersion = "'1.99.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_ui
				target = plugin_org_eclipse_emf_teneo_eclipselink
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipselink_ui
				target = plugin_org_eclipse_emf_teneo_eclipselink_common_ui
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_ui_wizards {
				__id = "org.eclipse.emf.teneo.eclipselink.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipselink_ui_wizards_pages {
				__id = "org.eclipse.emf.teneo.eclipselink.ui.wizards.pages"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipselink.ui.wizards.pages"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo {
			__id = "org.eclipse.emf.teneo"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.1.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_teneo_annotations
			}
			exports += new Package package_org_eclipse_emf_teneo {
				__id = "org.eclipse.emf.teneo"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations {
				__id = "org.eclipse.emf.teneo.annotations"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_mapper {
				__id = "org.eclipse.emf.teneo.annotations.mapper"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.mapper"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_parser {
				__id = "org.eclipse.emf.teneo.annotations.parser"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.parser"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_xml {
				__id = "org.eclipse.emf.teneo.annotations.xml"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.xml"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_classloader {
				__id = "org.eclipse.emf.teneo.classloader"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.classloader"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_ecore {
				__id = "org.eclipse.emf.teneo.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.ecore"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_extension {
				__id = "org.eclipse.emf.teneo.extension"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.extension"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_mapping_elist {
				__id = "org.eclipse.emf.teneo.mapping.elist"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.mapping.elist"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_mapping_strategy {
				__id = "org.eclipse.emf.teneo.mapping.strategy"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.mapping.strategy"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_mapping_strategy_impl {
				__id = "org.eclipse.emf.teneo.mapping.strategy.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.mapping.strategy.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_resource {
				__id = "org.eclipse.emf.teneo.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.resource"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_simpledom {
				__id = "org.eclipse.emf.teneo.simpledom"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.simpledom"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_type {
				__id = "org.eclipse.emf.teneo.type"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.type"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_util {
				__id = "org.eclipse.emf.teneo.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = package_org_apache_commons_logging
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_annotations {
			__id = "org.eclipse.emf.teneo.annotations"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.annotations"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200909151729"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_annotations
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_annotations
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_annotations
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_teneo_elver_2005_pamodel {
				__id = "_www_eclipse_org_emf_teneo_elver_2005_pamodel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_teneo_elver_2005_pamodel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/teneo/elver/2005/pamodel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_teneo_elver_2005_pamodel {
					__id = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_pamodel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_pamodel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/teneo/elver/2005/pamodel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_teneo_elver_2005_PAnnotation {
				__id = "_www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/teneo/elver/2005/PAnnotation"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_teneo_elver_2005_PAnnotation {
					__id = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/teneo/elver/2005/PAnnotation.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pamodel {
				__id = "org.eclipse.emf.teneo.annotations.pamodel"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pamodel"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pamodel_impl {
				__id = "org.eclipse.emf.teneo.annotations.pamodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pamodel.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pamodel_util {
				__id = "org.eclipse.emf.teneo.annotations.pamodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pamodel.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pannotation {
				__id = "org.eclipse.emf.teneo.annotations.pannotation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pannotation"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pannotation_impl {
				__id = "org.eclipse.emf.teneo.annotations.pannotation.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pannotation.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pannotation_util {
				__id = "org.eclipse.emf.teneo.annotations.pannotation.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pannotation.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_mwe_examples_source {
		__id = "org.eclipse.emf.mwe.examples.source"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mwe.examples.source"
		}
		version = new Version {
			value = "0.7.2.v200908120417"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "MWE Examples source code (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_examples_source {
			__id = "org.eclipse.emf.mwe.examples.source"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.examples.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_help {
		__id = "org.eclipse.help"
		identifier = new PlatformID {
			value = "org.eclipse.help"
		}
		version = new Version {
			value = "1.1.1.R35x_v20090811-7e7eFAnFEx2XZoYz0uPgIfwD"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "Eclipse help system."
		}
		plugins += new Plugin plugin_javax_servlet {
			__id = "javax.servlet"
			identifier = new PlatformID {
				value = "javax.servlet"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.5.0.v200806031605"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_javax_servlet {
				__id = "javax.servlet"
				identifier = new PlatformID {
					value = "javax.servlet"
				}
				version = new Version {
					value = "2.5"
				}
			}
			exports += new Package package_javax_servlet_http {
				__id = "javax.servlet.http"
				identifier = new PlatformID {
					value = "javax.servlet.http"
				}
				version = new Version {
					value = "2.5"
				}
			}
			exports += new Package package_javax_servlet_resources {
				__id = "javax.servlet.resources"
				identifier = new PlatformID {
					value = "javax.servlet.resources"
				}
				version = new Version {
					value = "2.5"
				}
			}
		}
		plugins += new Plugin plugin_javax_servlet_jsp {
			__id = "javax.servlet.jsp"
			identifier = new PlatformID {
				value = "javax.servlet.jsp"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.0.0.v200806031607"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_javax_servlet_jsp {
				__id = "javax.servlet.jsp"
				identifier = new PlatformID {
					value = "javax.servlet.jsp"
				}
				version = new Version {
					value = "version=2."
				}
			}
			exports += new Package package_javax_servlet_jsp_el {
				__id = "javax.servlet.jsp.el"
				identifier = new PlatformID {
					value = "javax.servlet.jsp.el"
				}
				version = new Version {
					value = "version=2."
				}
			}
			exports += new Package package_javax_servlet_jsp_resources {
				__id = "javax.servlet.jsp.resources"
				identifier = new PlatformID {
					value = "javax.servlet.jsp.resources"
				}
				version = new Version {
					value = "version=2."
				}
			}
			exports += new Package package_javax_servlet_jsp_tagext {
				__id = "javax.servlet.jsp.tagext"
				identifier = new PlatformID {
					value = "javax.servlet.jsp.tagext"
				}
				version = new Version {
					value = "version=2."
				}
			}
			dependencies += new VersionDependency {
				source = plugin_javax_servlet_jsp
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "version=2.4"
				maxVersion = "version=2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_javax_servlet_jsp
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "version=2.4"
				maxVersion = "version=2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_javax_servlet_jsp
				target = package_javax_servlet_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "version=2.4"
				maxVersion = "version=2.4"
			}
		}
		plugins += new Plugin plugin_org_apache_commons_el {
			__id = "org.apache.commons.el"
			identifier = new PlatformID {
				value = "org.apache.commons.el"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.v200806031608"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_el {
				__id = "org.apache.commons.el"
				identifier = new PlatformID {
					value = "org.apache.commons.el"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_apache_commons_el_parser {
				__id = "org.apache.commons.el.parser"
				identifier = new PlatformID {
					value = "org.apache.commons.el.parser"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_el
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_el
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_el
				target = package_javax_servlet_jsp
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_el
				target = package_javax_servlet_jsp_el
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_el
				target = package_javax_servlet_jsp_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_el
				target = package_javax_servlet_jsp_tagext
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_el
				target = package_javax_servlet_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
		}
		plugins += new Plugin plugin_org_apache_commons_logging {
			__id = "org.apache.commons.logging"
			identifier = new PlatformID {
				value = "org.apache.commons.logging"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.1.v200904062255"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_logging {
				__id = "org.apache.commons.logging"
				identifier = new PlatformID {
					value = "org.apache.commons.logging"
				}
				version = new Version {
					value = "1.1.1"
				}
			}
			exports += new Package package_org_apache_commons_logging_impl {
				__id = "org.apache.commons.logging.impl"
				identifier = new PlatformID {
					value = "org.apache.commons.logging.impl"
				}
				version = new Version {
					value = "1.1.1"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_jasper {
			__id = "org.apache.jasper"
			identifier = new PlatformID {
				value = "org.apache.jasper"
			}
			state = : "State.resolved"
			version = new Version {
				value = "5.5.17.v200903231320"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_jasper {
				__id = "org.apache.jasper"
				identifier = new PlatformID {
					value = "org.apache.jasper"
				}
			}
			exports += new Package package_org_apache_jasper_compiler {
				__id = "org.apache.jasper.compiler"
				identifier = new PlatformID {
					value = "org.apache.jasper.compiler"
				}
			}
			exports += new Package package_org_apache_jasper_compiler_tagplugin {
				__id = "org.apache.jasper.compiler.tagplugin"
				identifier = new PlatformID {
					value = "org.apache.jasper.compiler.tagplugin"
				}
			}
			exports += new Package package_org_apache_jasper_resources {
				__id = "org.apache.jasper.resources"
				identifier = new PlatformID {
					value = "org.apache.jasper.resources"
				}
			}
			exports += new Package package_org_apache_jasper_runtime {
				__id = "org.apache.jasper.runtime"
				identifier = new PlatformID {
					value = "org.apache.jasper.runtime"
				}
			}
			exports += new Package package_org_apache_jasper_security {
				__id = "org.apache.jasper.security"
				identifier = new PlatformID {
					value = "org.apache.jasper.security"
				}
			}
			exports += new Package package_org_apache_jasper_servlet {
				__id = "org.apache.jasper.servlet"
				identifier = new PlatformID {
					value = "org.apache.jasper.servlet"
				}
			}
			exports += new Package package_org_apache_jasper_tagplugins_jstl {
				__id = "org.apache.jasper.tagplugins.jstl"
				identifier = new PlatformID {
					value = "org.apache.jasper.tagplugins.jstl"
				}
			}
			exports += new Package package_org_apache_jasper_tagplugins_jstl_core {
				__id = "org.apache.jasper.tagplugins.jstl.core"
				identifier = new PlatformID {
					value = "org.apache.jasper.tagplugins.jstl.core"
				}
			}
			exports += new Package package_org_apache_jasper_util {
				__id = "org.apache.jasper.util"
				identifier = new PlatformID {
					value = "org.apache.jasper.util"
				}
			}
			exports += new Package package_org_apache_jasper_xmlparser {
				__id = "org.apache.jasper.xmlparser"
				identifier = new PlatformID {
					value = "org.apache.jasper.xmlparser"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_servlet_jsp
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_servlet_jsp_el
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_servlet_jsp_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_servlet_jsp_tagext
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_servlet_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_apache_commons_el
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_apache_commons_logging
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_apache_tools_ant
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_apache_tools_ant_taskdefs
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_apache_tools_ant_types
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_apache_tools_ant_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_xml_sax_ext
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_jasper
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_apache_lucene {
			__id = "org.apache.lucene"
			identifier = new PlatformID {
				value = "org.apache.lucene"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.9.1.v20080530-1600"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_lucene {
				__id = "org.apache.lucene"
				identifier = new PlatformID {
					value = "org.apache.lucene"
				}
			}
			exports += new Package package_org_apache_lucene_analysis {
				__id = "org.apache.lucene.analysis"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_de {
				__id = "org.apache.lucene.analysis.de"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.de"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_standard {
				__id = "org.apache.lucene.analysis.standard"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.standard"
				}
			}
			exports += new Package package_org_apache_lucene_document {
				__id = "org.apache.lucene.document"
				identifier = new PlatformID {
					value = "org.apache.lucene.document"
				}
			}
			exports += new Package package_org_apache_lucene_index {
				__id = "org.apache.lucene.index"
				identifier = new PlatformID {
					value = "org.apache.lucene.index"
				}
			}
			exports += new Package package_org_apache_lucene_queryParser {
				__id = "org.apache.lucene.queryParser"
				identifier = new PlatformID {
					value = "org.apache.lucene.queryParser"
				}
			}
			exports += new Package package_org_apache_lucene_search {
				__id = "org.apache.lucene.search"
				identifier = new PlatformID {
					value = "org.apache.lucene.search"
				}
			}
			exports += new Package package_org_apache_lucene_search_spans {
				__id = "org.apache.lucene.search.spans"
				identifier = new PlatformID {
					value = "org.apache.lucene.search.spans"
				}
			}
			exports += new Package package_org_apache_lucene_store {
				__id = "org.apache.lucene.store"
				identifier = new PlatformID {
					value = "org.apache.lucene.store"
				}
			}
			exports += new Package package_org_apache_lucene_util {
				__id = "org.apache.lucene.util"
				identifier = new PlatformID {
					value = "org.apache.lucene.util"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_lucene_analysis {
			__id = "org.apache.lucene.analysis"
			identifier = new PlatformID {
				value = "org.apache.lucene.analysis"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.9.1.v20080530-1600"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_lucene_analysis
				target = plugin_org_apache_lucene
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.9.1-2.0.0)'"
				maxVersion = "'[1.9.1-2.0.0)'"
			}
			exports += new Package package_org_apache_lucene_analysis_br {
				__id = "org.apache.lucene.analysis.br"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.br"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_cjk {
				__id = "org.apache.lucene.analysis.cjk"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.cjk"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_cn {
				__id = "org.apache.lucene.analysis.cn"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.cn"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_cz {
				__id = "org.apache.lucene.analysis.cz"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.cz"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_de {
				__id = "org.apache.lucene.analysis.de"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.de"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_el {
				__id = "org.apache.lucene.analysis.el"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.el"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_fr {
				__id = "org.apache.lucene.analysis.fr"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.fr"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_nl {
				__id = "org.apache.lucene.analysis.nl"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.nl"
				}
			}
			exports += new Package package_org_apache_lucene_analysis_ru {
				__id = "org.apache.lucene.analysis.ru"
				identifier = new PlatformID {
					value = "org.apache.lucene.analysis.ru"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_http_jetty {
			__id = "org.eclipse.equinox.http.jetty"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.http.jetty"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_http_jetty {
				__id = "org.eclipse.equinox.http.jetty"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.http.jetty"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_javax_servlet
				closure = : "IntervalClosure.includeExclude"
				minVersion = "2.5.0"
				maxVersion = "2.6.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeExclude"
				minVersion = "2.5.0"
				maxVersion = "2.6.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_eclipse_equinox_http_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_component
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_jetty
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_jetty_bio
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_jetty_handler
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_jetty_nio
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_jetty_security
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_jetty_servlet
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_mortbay_log
				closure = : "IntervalClosure.includeExclude"
				minVersion = "6.1.0"
				maxVersion = "7.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_osgi_service_cm
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_jetty
				target = package_org_osgi_service_startlevel
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_http_registry {
			__id = "org.eclipse.equinox.http.registry"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.http.registry"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.200.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = plugin_org_eclipse_equinox_registry
			}
			exports += new Package package_org_eclipse_equinox_http_registry {
				__id = "org.eclipse.equinox.http.registry"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.http.registry"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.3"
				maxVersion = "2.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.3"
				maxVersion = "2.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = package_org_osgi_service_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_registry
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.1"
				maxVersion = "1.3.1"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_http_servlet {
			__id = "org.eclipse.equinox.http.servlet"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.http.servlet"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.200.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_http_servlet {
				__id = "org.eclipse.equinox.http.servlet"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.http.servlet"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_servlet
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.3"
				maxVersion = "2.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_servlet
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.3"
				maxVersion = "2.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_servlet
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_http_servlet
				target = package_org_osgi_service_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_jsp_jasper {
			__id = "org.eclipse.equinox.jsp.jasper"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.jsp.jasper"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.200.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_jsp_jasper {
				__id = "org.eclipse.equinox.jsp.jasper"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.jsp.jasper"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_javax_servlet_jsp
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.0"
				maxVersion = "2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_org_apache_jasper_servlet
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_org_osgi_service_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.1"
				maxVersion = "1.3.1"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_jsp_jasper_registry {
			__id = "org.eclipse.equinox.jsp.jasper.registry"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.jsp.jasper.registry"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = plugin_org_eclipse_equinox_registry
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = plugin_org_eclipse_equinox_common
			}
			exports += new Package package_org_eclipse_equinox_jsp_jasper_registry {
				__id = "org.eclipse.equinox.jsp.jasper.registry"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.jsp.jasper.registry"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = package_org_eclipse_equinox_jsp_jasper
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_jsp_jasper_registry
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4"
				maxVersion = "2.4"
			}
		}
		plugins += new Plugin plugin_org_eclipse_help_base {
			__id = "org.eclipse.help.base"
			identifier = new PlatformID {
				value = "org.eclipse.help.base"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.0.v200909170800"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.help.base"
				identifier = new PlatformID {
					value = "org.eclipse.help.base"
				}
				locator = new EFSLocator {
					value = "org.eclipse.help.base"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = plugin_org_apache_lucene
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.9.1-2.0.0)'"
				maxVersion = "'[1.9.1-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = plugin_org_apache_lucene_analysis
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.9.1-2.0.0)'"
				maxVersion = "'[1.9.1-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.100'"
				maxVersion = "'3.2.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			exports += new Package package_org_apache_lucene_demo_html {
				__id = "org.apache.lucene.demo.html"
				identifier = new PlatformID {
					value = "org.apache.lucene.demo.html"
				}
			}
			exports += new Package package_org_eclipse_help_browser {
				__id = "org.eclipse.help.browser"
				identifier = new PlatformID {
					value = "org.eclipse.help.browser"
				}
			}
			exports += new Package package_org_eclipse_help_internal_base {
				__id = "org.eclipse.help.internal.base"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.base"
				}
			}
			exports += new Package package_org_eclipse_ua_tests {
				__id = "org.eclipse.ua.tests"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests"
				}
			}
			exports += new Package package_org_eclipse_ui_intro_ {
				__id = "org.eclipse.ui.intro'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_base_remote {
				__id = "org.eclipse.help.internal.base.remote"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.base.remote"
				}
			}
			exports += new Package package_org_eclipse_help_ui_ {
				__id = "org.eclipse.help.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_base_util {
				__id = "org.eclipse.help.internal.base.util"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.base.util"
				}
			}
			exports += new Package package_org_eclipse_ua_tests_ {
				__id = "org.eclipse.ua.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_browser {
				__id = "org.eclipse.help.internal.browser"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.browser"
				}
			}
			exports += new Package package_org_eclipse_help_internal_browser_macosx {
				__id = "org.eclipse.help.internal.browser.macosx"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.browser.macosx"
				}
			}
			exports += new Package package_org_eclipse_help_internal_protocols {
				__id = "org.eclipse.help.internal.protocols"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.protocols"
				}
			}
			exports += new Package package_org_eclipse_help_webapp {
				__id = "org.eclipse.help.webapp"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp"
				}
			}
			exports += new Package package_org_eclipse_ua_tests_ {
				__id = "org.eclipse.ua.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_search {
				__id = "org.eclipse.help.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.search"
				}
			}
			exports += new Package package_org_eclipse_ua_tests_ {
				__id = "org.eclipse.ua.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_search_federated {
				__id = "org.eclipse.help.internal.search.federated"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.search.federated"
				}
			}
			exports += new Package package_org_eclipse_help_internal_server {
				__id = "org.eclipse.help.internal.server"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.server"
				}
			}
			exports += new Package package_org_eclipse_help_internal_standalone {
				__id = "org.eclipse.help.internal.standalone"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.standalone"
				}
			}
			exports += new Package package_org_eclipse_help_internal_validation {
				__id = "org.eclipse.help.internal.validation"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.validation"
				}
			}
			exports += new Package package_org_eclipse_help_internal_workingset {
				__id = "org.eclipse.help.internal.workingset"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.workingset"
				}
			}
			exports += new Package package_org_eclipse_ua_tests_ {
				__id = "org.eclipse.ua.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_xhtml {
				__id = "org.eclipse.help.internal.xhtml"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.xhtml"
				}
			}
			exports += new Package package_org_eclipse_ui_intro {
				__id = "org.eclipse.ui.intro"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro"
				}
			}
			exports += new Package package_org_eclipse_help_webapp_ {
				__id = "org.eclipse.help.webapp'"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp'"
				}
			}
			exports += new Package package_org_eclipse_help_search {
				__id = "org.eclipse.help.search"
				identifier = new PlatformID {
					value = "org.eclipse.help.search"
				}
			}
			exports += new Package package_org_eclipse_help_server {
				__id = "org.eclipse.help.server"
				identifier = new PlatformID {
					value = "org.eclipse.help.server"
				}
			}
			exports += new Package package_org_eclipse_help_standalone {
				__id = "org.eclipse.help.standalone"
				identifier = new PlatformID {
					value = "org.eclipse.help.standalone"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_base
				target = package_org_eclipse_equinox_http_jetty
			}
		}
		plugins += new Plugin plugin_org_eclipse_help_ui {
			__id = "org.eclipse.help.ui"
			identifier = new PlatformID {
				value = "org.eclipse.help.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.1.v20090819_35x"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_ui
				target = plugin_org_eclipse_help_base
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_help_ui {
				__id = "org.eclipse.help.ui"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui"
				}
			}
			exports += new Package package_org_eclipse_help_ui_browser {
				__id = "org.eclipse.help.ui.browser"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui.browser"
				}
			}
			exports += new Package package_org_eclipse_help_ui_internal {
				__id = "org.eclipse.help.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_help_ui_internal_browser {
				__id = "org.eclipse.help.ui.internal.browser"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui.internal.browser"
				}
			}
			exports += new Package package_org_eclipse_help_ui_internal_browser_embedded {
				__id = "org.eclipse.help.ui.internal.browser.embedded"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui.internal.browser.embedded"
				}
			}
			exports += new Package package_org_eclipse_help_ui_internal_search {
				__id = "org.eclipse.help.ui.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui.internal.search"
				}
			}
			exports += new Package package_org_eclipse_help_ui_internal_util {
				__id = "org.eclipse.help.ui.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui.internal.util"
				}
			}
			exports += new Package package_org_eclipse_help_ui_internal_views {
				__id = "org.eclipse.help.ui.internal.views"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui.internal.views"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_ui
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_help_webapp {
			__id = "org.eclipse.help.webapp"
			identifier = new PlatformID {
				value = "org.eclipse.help.webapp"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.1.v20090819_35x"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = plugin_org_eclipse_help_base
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = plugin_org_apache_jasper
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'5.5.17'"
				maxVersion = "'5.5.17'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = plugin_org_eclipse_equinox_jsp_jasper_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = plugin_org_eclipse_equinox_http_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.200'"
				maxVersion = "'1.0.200'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_help_internal_webapp {
				__id = "org.eclipse.help.internal.webapp"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.webapp"
				}
			}
			exports += new Package package_org_eclipse_help_internal_webapp_data {
				__id = "org.eclipse.help.internal.webapp.data"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.webapp.data"
				}
			}
			exports += new Package package_org_eclipse_help_internal_webapp_servlet {
				__id = "org.eclipse.help.internal.webapp.servlet"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.webapp.servlet"
				}
			}
			exports += new Package package_org_eclipse_help_webapp {
				__id = "org.eclipse.help.webapp"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8.0"
				maxVersion = "3.8.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4.0"
				maxVersion = "2.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.4.0"
				maxVersion = "2.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help_webapp
				target = package_org_osgi_service_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
		}
		plugins += new Plugin plugin_org_mortbay_jetty_server {
			__id = "org.mortbay.jetty.server"
			identifier = new PlatformID {
				value = "org.mortbay.jetty.server"
			}
			state = : "State.resolved"
			version = new Version {
				value = "6.1.15.v200905151201"
			}
			vendor = vendor_Mort_Bay_Consulting
			exports += new Package package_org_mortbay_jetty_bio {
				__id = "org.mortbay.jetty.bio"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.bio"
				}
			}
			exports += new Package package_org_mortbay_io_bio {
				__id = "org.mortbay.io.bio"
				identifier = new PlatformID {
					value = "org.mortbay.io.bio"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
			}
			exports += new Package package_org_mortbay_jetty_ {
				__id = "org.mortbay.jetty'"
				identifier = new PlatformID {
					value = "org.mortbay.jetty'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_servlet_jetty {
				__id = "org.mortbay.servlet.jetty"
				identifier = new PlatformID {
					value = "org.mortbay.servlet.jetty"
				}
			}
			exports += new Package package_org_mortbay_jetty_ {
				__id = "org.mortbay.jetty'"
				identifier = new PlatformID {
					value = "org.mortbay.jetty'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_jetty_nio {
				__id = "org.mortbay.jetty.nio"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.nio"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
			}
			exports += new Package package_org_mortbay_jetty {
				__id = "org.mortbay.jetty"
				identifier = new PlatformID {
					value = "org.mortbay.jetty"
				}
			}
			exports += new Package package_org_mortbay_util_ajax {
				__id = "org.mortbay.util.ajax"
				identifier = new PlatformID {
					value = "org.mortbay.util.ajax"
				}
			}
			exports += new Package package_org_mortbay_io_nio_ {
				__id = "org.mortbay.io.nio'"
				identifier = new PlatformID {
					value = "org.mortbay.io.nio'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_io_nio {
				__id = "org.mortbay.io.nio"
				identifier = new PlatformID {
					value = "org.mortbay.io.nio"
				}
			}
			exports += new Package package_org_mortbay_thread {
				__id = "org.mortbay.thread"
				identifier = new PlatformID {
					value = "org.mortbay.thread"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
			}
			exports += new Package package_org_mortbay_jetty_ {
				__id = "org.mortbay.jetty'"
				identifier = new PlatformID {
					value = "org.mortbay.jetty'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_jetty_security {
				__id = "org.mortbay.jetty.security"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.security"
				}
			}
			exports += new Package package_javax_servlet_http {
				__id = "javax.servlet.http"
				identifier = new PlatformID {
					value = "javax.servlet.http"
				}
			}
			exports += new Package package_org_mortbay_jetty_bio {
				__id = "org.mortbay.jetty.bio"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.bio"
				}
			}
			exports += new Package package_javax_security_cert {
				__id = "javax.security.cert"
				identifier = new PlatformID {
					value = "javax.security.cert"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
			}
			exports += new Package package_javax_servlet {
				__id = "javax.servlet"
				identifier = new PlatformID {
					value = "javax.servlet"
				}
			}
			exports += new Package package_org_mortbay_io_bio {
				__id = "org.mortbay.io.bio"
				identifier = new PlatformID {
					value = "org.mortbay.io.bio"
				}
			}
			exports += new Package package_org_mortbay_jetty_servlet {
				__id = "org.mortbay.jetty.servlet"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.servlet"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
			}
			exports += new Package package_org_mortbay_jetty_handler {
				__id = "org.mortbay.jetty.handler"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.handler"
				}
			}
			exports += new Package package_org_mortbay_jetty_webapp {
				__id = "org.mortbay.jetty.webapp"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.webapp"
				}
			}
			exports += new Package package_org_mortbay_jetty {
				__id = "org.mortbay.jetty"
				identifier = new PlatformID {
					value = "org.mortbay.jetty"
				}
			}
			exports += new Package package_javax_net_ssl_ {
				__id = "javax.net.ssl'"
				identifier = new PlatformID {
					value = "javax.net.ssl'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_jetty_deployer {
				__id = "org.mortbay.jetty.deployer"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.deployer"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
			}
			exports += new Package package_org_mortbay_xml {
				__id = "org.mortbay.xml"
				identifier = new PlatformID {
					value = "org.mortbay.xml"
				}
			}
			exports += new Package package_org_mortbay_jetty_handler {
				__id = "org.mortbay.jetty.handler"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.handler"
				}
			}
			exports += new Package package_org_mortbay_jetty {
				__id = "org.mortbay.jetty"
				identifier = new PlatformID {
					value = "org.mortbay.jetty"
				}
			}
			exports += new Package package_org_mortbay_jetty_webapp_ {
				__id = "org.mortbay.jetty.webapp'"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.webapp'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_xml {
				__id = "org.mortbay.xml"
				identifier = new PlatformID {
					value = "org.mortbay.xml"
				}
			}
			exports += new Package package_org_xml_sax {
				__id = "org.xml.sax"
				identifier = new PlatformID {
					value = "org.xml.sax"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
			}
			exports += new Package package_javax_xml_parsers {
				__id = "javax.xml.parsers"
				identifier = new PlatformID {
					value = "javax.xml.parsers"
				}
			}
			exports += new Package package_org_xml_sax_helpers_ {
				__id = "org.xml.sax.helpers'"
				identifier = new PlatformID {
					value = "org.xml.sax.helpers'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_io_bio {
				__id = "org.mortbay.io.bio"
				identifier = new PlatformID {
					value = "org.mortbay.io.bio"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_jetty_servlet {
				__id = "org.mortbay.jetty.servlet"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.servlet"
				}
			}
			exports += new Package package_org_mortbay_component {
				__id = "org.mortbay.component"
				identifier = new PlatformID {
					value = "org.mortbay.component"
				}
			}
			exports += new Package package_org_mortbay_jetty_nio {
				__id = "org.mortbay.jetty.nio"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.nio"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
			}
			exports += new Package package_org_mortbay_io_nio {
				__id = "org.mortbay.io.nio"
				identifier = new PlatformID {
					value = "org.mortbay.io.nio"
				}
			}
			exports += new Package package_org_mortbay_jetty_security {
				__id = "org.mortbay.jetty.security"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.security"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
			}
			exports += new Package package_javax_servlet {
				__id = "javax.servlet"
				identifier = new PlatformID {
					value = "javax.servlet"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
			}
			exports += new Package package_org_mortbay_jetty_handler {
				__id = "org.mortbay.jetty.handler"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.handler"
				}
			}
			exports += new Package package_org_mortbay_jetty_ {
				__id = "org.mortbay.jetty'"
				identifier = new PlatformID {
					value = "org.mortbay.jetty'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_jetty_handler {
				__id = "org.mortbay.jetty.handler"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.handler"
				}
			}
			exports += new Package package_javax_servlet_http {
				__id = "javax.servlet.http"
				identifier = new PlatformID {
					value = "javax.servlet.http"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
			}
			exports += new Package package_javax_servlet {
				__id = "javax.servlet"
				identifier = new PlatformID {
					value = "javax.servlet"
				}
			}
			exports += new Package package_org_mortbay_jetty_servlet {
				__id = "org.mortbay.jetty.servlet"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.servlet"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
			}
			exports += new Package package_org_mortbay_jetty_webapp {
				__id = "org.mortbay.jetty.webapp"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.webapp"
				}
			}
			exports += new Package package_org_mortbay_jetty_ {
				__id = "org.mortbay.jetty'"
				identifier = new PlatformID {
					value = "org.mortbay.jetty'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_jetty {
				__id = "org.mortbay.jetty"
				identifier = new PlatformID {
					value = "org.mortbay.jetty"
				}
			}
			exports += new Package package_javax_servlet_http {
				__id = "javax.servlet.http"
				identifier = new PlatformID {
					value = "javax.servlet.http"
				}
			}
			exports += new Package package_org_mortbay_jetty_bio {
				__id = "org.mortbay.jetty.bio"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.bio"
				}
			}
			exports += new Package package_org_mortbay_thread {
				__id = "org.mortbay.thread"
				identifier = new PlatformID {
					value = "org.mortbay.thread"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
			}
			exports += new Package package_org_mortbay_io_nio {
				__id = "org.mortbay.io.nio"
				identifier = new PlatformID {
					value = "org.mortbay.io.nio"
				}
			}
			exports += new Package package_org_mortbay_jetty_security {
				__id = "org.mortbay.jetty.security"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.security"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
			}
			exports += new Package package_javax_servlet {
				__id = "javax.servlet"
				identifier = new PlatformID {
					value = "javax.servlet"
				}
			}
			exports += new Package package_org_mortbay_jetty_servlet {
				__id = "org.mortbay.jetty.servlet"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.servlet"
				}
			}
			exports += new Package package_org_mortbay_jetty_handler {
				__id = "org.mortbay.jetty.handler"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.handler"
				}
			}
			exports += new Package package_org_mortbay_io {
				__id = "org.mortbay.io"
				identifier = new PlatformID {
					value = "org.mortbay.io"
				}
			}
			exports += new Package package_org_mortbay_jetty_webapp {
				__id = "org.mortbay.jetty.webapp"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.webapp"
				}
			}
			exports += new Package package_org_mortbay_util_ajax_ {
				__id = "org.mortbay.util.ajax'"
				identifier = new PlatformID {
					value = "org.mortbay.util.ajax'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_jetty_webapp {
				__id = "org.mortbay.jetty.webapp"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.webapp"
				}
			}
			exports += new Package package_org_mortbay_resource {
				__id = "org.mortbay.resource"
				identifier = new PlatformID {
					value = "org.mortbay.resource"
				}
			}
			exports += new Package package_org_mortbay_jetty_security {
				__id = "org.mortbay.jetty.security"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.security"
				}
			}
			exports += new Package package_org_mortbay_jetty_deployer {
				__id = "org.mortbay.jetty.deployer"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.deployer"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
			}
			exports += new Package package_javax_servlet {
				__id = "javax.servlet"
				identifier = new PlatformID {
					value = "javax.servlet"
				}
			}
			exports += new Package package_org_mortbay_xml {
				__id = "org.mortbay.xml"
				identifier = new PlatformID {
					value = "org.mortbay.xml"
				}
			}
			exports += new Package package_org_mortbay_jetty_servlet {
				__id = "org.mortbay.jetty.servlet"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.servlet"
				}
			}
			exports += new Package package_org_mortbay_jetty_handler {
				__id = "org.mortbay.jetty.handler"
				identifier = new PlatformID {
					value = "org.mortbay.jetty.handler"
				}
			}
			exports += new Package package_org_mortbay_jetty_ {
				__id = "org.mortbay.jetty'"
				identifier = new PlatformID {
					value = "org.mortbay.jetty'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_javax_net_ssl
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_javax_security_cert
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_javax_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.5"
				maxVersion = "2.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_javax_servlet_http
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.5"
				maxVersion = "2.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_javax_servlet_jsp
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_javax_servlet_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "2.5"
				maxVersion = "2.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_apache_jasper_servlet
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_mortbay_component
				closure = : "IntervalClosure.includeInclude"
				minVersion = "6.1"
				maxVersion = "6.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_mortbay_jetty_handler_management
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_mortbay_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "6.1"
				maxVersion = "6.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_mortbay_servlet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "6.1"
				maxVersion = "6.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_mortbay_thread
				closure = : "IntervalClosure.includeInclude"
				minVersion = "6.1"
				maxVersion = "6.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_mortbay_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "6.1"
				maxVersion = "6.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_mortbay_util_ajax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "6.1"
				maxVersion = "6.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_server
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_mortbay_jetty_util {
			__id = "org.mortbay.jetty.util"
			identifier = new PlatformID {
				value = "org.mortbay.jetty.util"
			}
			state = : "State.resolved"
			version = new Version {
				value = "6.1.15.v200905182336"
			}
			vendor = vendor_Mort_Bay_Consulting
			exports += new Package package_org_mortbay_util {
				__id = "org.mortbay.util"
				identifier = new PlatformID {
					value = "org.mortbay.util"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_log {
				__id = "org.mortbay.log"
				identifier = new PlatformID {
					value = "org.mortbay.log"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_component {
				__id = "org.mortbay.component"
				identifier = new PlatformID {
					value = "org.mortbay.component"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_thread {
				__id = "org.mortbay.thread"
				identifier = new PlatformID {
					value = "org.mortbay.thread"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_servlet {
				__id = "org.mortbay.servlet"
				identifier = new PlatformID {
					value = "org.mortbay.servlet"
				}
			}
			exports += new Package package_javax_servlet_http {
				__id = "javax.servlet.http"
				identifier = new PlatformID {
					value = "javax.servlet.http"
				}
			}
			exports += new Package package_javax_servlet {
				__id = "javax.servlet"
				identifier = new PlatformID {
					value = "javax.servlet"
				}
			}
			exports += new Package package_org_mortbay_util_ajax_ {
				__id = "org.mortbay.util.ajax'"
				identifier = new PlatformID {
					value = "org.mortbay.util.ajax'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			exports += new Package package_org_mortbay_util_ajax {
				__id = "org.mortbay.util.ajax"
				identifier = new PlatformID {
					value = "org.mortbay.util.ajax"
				}
			}
			exports += new Package package_javax_servlet_http {
				__id = "javax.servlet.http"
				identifier = new PlatformID {
					value = "javax.servlet.http"
				}
			}
			exports += new Package package_javax_servlet_ {
				__id = "javax.servlet'"
				identifier = new PlatformID {
					value = "javax.servlet'"
				}
				version = new Version {
					value = "6.1.15"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_util
				target = package_javax_servlet
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_util
				target = package_javax_servlet_http
			}
			dependencies += new VersionDependency {
				source = plugin_org_mortbay_jetty_util
				target = package_org_slf4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3"
				maxVersion = "1.3"
			}
		}
	}

	features += new Feature feature_org_eclipse_gef {
		__id = "org.eclipse.gef"
		identifier = new PlatformID {
			value = "org.eclipse.gef"
		}
		version = new Version {
			value = "3.5.1.v20090724-1146-777908193B6696L3DA843563"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Graphical Editing Framework GEF"
		}
		plugins += new Plugin plugin_org_eclipse_gef {
			__id = "org.eclipse.gef"
			identifier = new PlatformID {
				value = "org.eclipse.gef"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.v20090528-1511"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef
				target = plugin_org_eclipse_ui_workbench
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_gef_dnd {
				__id = "org.eclipse.gef.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.gef.dnd"
				}
			}
			exports += new Package package_org_eclipse_gef_editparts {
				__id = "org.eclipse.gef.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gef.editparts"
				}
			}
			exports += new Package package_org_eclipse_gef_editpolicies {
				__id = "org.eclipse.gef.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gef.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_gef_handles {
				__id = "org.eclipse.gef.handles"
				identifier = new PlatformID {
					value = "org.eclipse.gef.handles"
				}
			}
			exports += new Package package_org_eclipse_gef_internal {
				__id = "org.eclipse.gef.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gef.internal"
				}
			}
			exports += new Package package_org_eclipse_gef_internal_icons {
				__id = "org.eclipse.gef.internal.icons"
				identifier = new PlatformID {
					value = "org.eclipse.gef.internal.icons"
				}
			}
			exports += new Package package_org_eclipse_gef_internal_ui_palette {
				__id = "org.eclipse.gef.internal.ui.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gef.internal.ui.palette"
				}
			}
			exports += new Package package_org_eclipse_gef_internal_ui_palette_editparts {
				__id = "org.eclipse.gef.internal.ui.palette.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gef.internal.ui.palette.editparts"
				}
			}
			exports += new Package package_org_eclipse_gef_internal_ui_rulers {
				__id = "org.eclipse.gef.internal.ui.rulers"
				identifier = new PlatformID {
					value = "org.eclipse.gef.internal.ui.rulers"
				}
			}
			exports += new Package package_org_eclipse_gef_palette {
				__id = "org.eclipse.gef.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gef.palette"
				}
			}
			exports += new Package package_org_eclipse_gef_print {
				__id = "org.eclipse.gef.print"
				identifier = new PlatformID {
					value = "org.eclipse.gef.print"
				}
			}
			exports += new Package package_org_eclipse_gef_requests {
				__id = "org.eclipse.gef.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gef.requests"
				}
			}
			exports += new Package package_org_eclipse_gef_rulers {
				__id = "org.eclipse.gef.rulers"
				identifier = new PlatformID {
					value = "org.eclipse.gef.rulers"
				}
			}
			exports += new Package package_org_eclipse_gef_tools {
				__id = "org.eclipse.gef.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gef.tools"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_actions {
				__id = "org.eclipse.gef.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_console {
				__id = "org.eclipse.gef.ui.console"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.console"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_console_icons {
				__id = "org.eclipse.gef.ui.console.icons"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.console.icons"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_palette {
				__id = "org.eclipse.gef.ui.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.palette"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_palette_customize {
				__id = "org.eclipse.gef.ui.palette.customize"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.palette.customize"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_palette_editparts {
				__id = "org.eclipse.gef.ui.palette.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.palette.editparts"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_parts {
				__id = "org.eclipse.gef.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_properties {
				__id = "org.eclipse.gef.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_rulers {
				__id = "org.eclipse.gef.ui.rulers"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.rulers"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_stackview {
				__id = "org.eclipse.gef.ui.stackview"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.stackview"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_stackview_icons {
				__id = "org.eclipse.gef.ui.stackview.icons"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.stackview.icons"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_views_palette {
				__id = "org.eclipse.gef.ui.views.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.views.palette"
				}
			}
			exports += new Package package_org_eclipse_gef_util {
				__id = "org.eclipse.gef.util"
				identifier = new PlatformID {
					value = "org.eclipse.gef.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "3.8.1"
				maxVersion = "5.0.0"
			}
		}
		sites += site__download_eclipse_org_tools_gef_updates_releases_site_xml
	}

	features += new Feature feature_org_eclipse_net4j {
		__id = "org.eclipse.net4j"
		identifier = new PlatformID {
			value = "org.eclipse.net4j"
		}
		version = new Version {
			value = "2.0.0.v200906160348"
		}
		provider = vendor_Eclipse_org
		copyright = new Copyright {
			name = "_copyrightURL"
			text = "%copyright"
			locator = new URLLocator {
				value = "%copyrightURL"
			}
		}
		description = new Description {
			name = "description"
			text = "Net4j Signalling Platform Runtime contains the Net4j core and transport provider plugins (tcp, jvm and http)."
		}
		plugins += new Plugin plugin_org_apache_commons_codec {
			__id = "org.apache.commons.codec"
			identifier = new PlatformID {
				value = "org.apache.commons.codec"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.0.v20080530-1600"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_codec {
				__id = "org.apache.commons.codec"
				identifier = new PlatformID {
					value = "org.apache.commons.codec"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_binary {
				__id = "org.apache.commons.codec.binary"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.binary"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_digest {
				__id = "org.apache.commons.codec.digest"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.digest"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_language {
				__id = "org.apache.commons.codec.language"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.language"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_net {
				__id = "org.apache.commons.codec.net"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.net"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_commons_httpclient {
			__id = "org.apache.commons.httpclient"
			identifier = new PlatformID {
				value = "org.apache.commons.httpclient"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.1.0.v20080605-1935"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_httpclient {
				__id = "org.apache.commons.httpclient"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_auth {
				__id = "org.apache.commons.httpclient.auth"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.auth"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_cookie {
				__id = "org.apache.commons.httpclient.cookie"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.cookie"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_methods {
				__id = "org.apache.commons.httpclient.methods"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.methods"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_methods_multipart {
				__id = "org.apache.commons.httpclient.methods.multipart"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.methods.multipart"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_params {
				__id = "org.apache.commons.httpclient.params"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.params"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_protocol {
				__id = "org.apache.commons.httpclient.protocol"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.protocol"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_util {
				__id = "org.apache.commons.httpclient.util"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.util"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_crypto
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_crypto_spec
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_net
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_net_ssl
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_codec
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.2.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_codec_binary
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.2.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_codec_net
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.2.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_logging
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.4"
				maxVersion = "2.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_net4j_util {
			__id = "org.eclipse.net4j.util"
			identifier = new PlatformID {
				value = "org.eclipse.net4j.util"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.1.v200610271244"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_net4j_util
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_net4j_util
				target = plugin_org_eclipse_core_resources
			}
			exports += new Package package_org_apache_commons_logging {
				__id = "org.apache.commons.logging"
				identifier = new PlatformID {
					value = "org.apache.commons.logging"
				}
			}
			exports += new Package package_org_apache_commons_logging_impl {
				__id = "org.apache.commons.logging.impl"
				identifier = new PlatformID {
					value = "org.apache.commons.logging.impl"
				}
			}
			exports += new Package package_org_apache_log4j {
				__id = "org.apache.log4j"
				identifier = new PlatformID {
					value = "org.apache.log4j"
				}
			}
			exports += new Package package_org_eclipse_net4j_util {
				__id = "org.eclipse.net4j.util"
				identifier = new PlatformID {
					value = "org.eclipse.net4j.util"
				}
			}
			exports += new Package package_org_eclipse_net4j_util_eclipse {
				__id = "org.eclipse.net4j.util.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.net4j.util.eclipse"
				}
			}
			exports += new Package package_org_eclipse_net4j_util_fsm {
				__id = "org.eclipse.net4j.util.fsm"
				identifier = new PlatformID {
					value = "org.eclipse.net4j.util.fsm"
				}
			}
			exports += new Package package_org_eclipse_net4j_util_store {
				__id = "org.eclipse.net4j.util.store"
				identifier = new PlatformID {
					value = "org.eclipse.net4j.util.store"
				}
			}
			exports += new Package package_org_eclipse_net4j_util_store_handlers {
				__id = "org.eclipse.net4j.util.store.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.net4j.util.store.handlers"
				}
			}
			exports += new Package package_org_eclipse_net4j_util_thread {
				__id = "org.eclipse.net4j.util.thread"
				identifier = new PlatformID {
					value = "org.eclipse.net4j.util.thread"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_net4j {
			__id = "org.eclipse.net4j"
			identifier = new PlatformID {
				value = "org.eclipse.net4j"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.1.v200610271244"
			}
			vendor = vendor_Eclipse_org
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_compare_source {
		__id = "org.eclipse.emf.compare.source"
		identifier = new PlatformID {
			value = "org.eclipse.emf.compare.source"
		}
		version = new Version {
			value = "1.0.1.v200909161031"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*    * Copyright (c) 2006, 2009 Obeo.  * All rights reserved. This program and the accompanying materials  * are made available under the terms of the Eclipse Public License v1.0  * which accompanies this distribution, and is available at  * http://www.eclipse.org/legal/epl-v10.html  *   */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Model comparison support"
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare_source {
			__id = "org.eclipse.emf.compare.source"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xpand_doc {
		__id = "org.eclipse.xpand.doc"
		identifier = new PlatformID {
			value = "org.eclipse.xpand.doc"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "M2T Xpand Documentation (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xpand_doc {
			__id = "org.eclipse.xpand.doc"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.xpand.doc"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.xpand.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_doc
				target = plugin_org_eclipse_help
			}
		}
		sites += site__download_eclipse_org_modeling_m2t_updates_
	}

	features += new Feature feature_org_jfree_chart {
		__id = "org.jfree.chart"
		identifier = new PlatformID {
			value = "org.jfree.chart"
		}
		version = new Version {
			value = "1.0.0"
		}
		license = license__Enter_License_URL_here__
		copyright = new Copyright {
			name = "_Enter_Copyright_URL_here__"
			text = "[Enter Copyright Description here.]"
			locator = new URLLocator {
				value = "[Enter Copyright URL here.]"
			}
		}
		description = new Description {
			name = "description"
			text = ""
		}
		plugins += new Plugin plugin_org_jfree_chart {
			__id = "org.jfree.chart"
			identifier = new PlatformID {
				value = "org.jfree.chart"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.9.21"
			}
			dependencies += new VersionDependency {
				source = plugin_org_jfree_chart
				target = plugin_org_jfree_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_jfree_chart
				target = plugin_org_junit
			}
			exports += new Package package_CVS {
				__id = "CVS"
				identifier = new PlatformID {
					value = "CVS"
				}
			}
			exports += new Package package_org_jfree_chart {
				__id = "org.jfree.chart"
				identifier = new PlatformID {
					value = "org.jfree.chart"
				}
			}
			exports += new Package package_org_jfree_chart_annotations {
				__id = "org.jfree.chart.annotations"
				identifier = new PlatformID {
					value = "org.jfree.chart.annotations"
				}
			}
			exports += new Package package_org_jfree_chart_annotations_junit {
				__id = "org.jfree.chart.annotations.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.annotations.junit"
				}
			}
			exports += new Package package_org_jfree_chart_axis {
				__id = "org.jfree.chart.axis"
				identifier = new PlatformID {
					value = "org.jfree.chart.axis"
				}
			}
			exports += new Package package_org_jfree_chart_axis_junit {
				__id = "org.jfree.chart.axis.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.axis.junit"
				}
			}
			exports += new Package package_org_jfree_chart_encoders {
				__id = "org.jfree.chart.encoders"
				identifier = new PlatformID {
					value = "org.jfree.chart.encoders"
				}
			}
			exports += new Package package_org_jfree_chart_entity {
				__id = "org.jfree.chart.entity"
				identifier = new PlatformID {
					value = "org.jfree.chart.entity"
				}
			}
			exports += new Package package_org_jfree_chart_entity_junit {
				__id = "org.jfree.chart.entity.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.entity.junit"
				}
			}
			exports += new Package package_org_jfree_chart_event {
				__id = "org.jfree.chart.event"
				identifier = new PlatformID {
					value = "org.jfree.chart.event"
				}
			}
			exports += new Package package_org_jfree_chart_imagemap {
				__id = "org.jfree.chart.imagemap"
				identifier = new PlatformID {
					value = "org.jfree.chart.imagemap"
				}
			}
			exports += new Package package_org_jfree_chart_junit {
				__id = "org.jfree.chart.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.junit"
				}
			}
			exports += new Package package_org_jfree_chart_labels {
				__id = "org.jfree.chart.labels"
				identifier = new PlatformID {
					value = "org.jfree.chart.labels"
				}
			}
			exports += new Package package_org_jfree_chart_labels_junit {
				__id = "org.jfree.chart.labels.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.labels.junit"
				}
			}
			exports += new Package package_org_jfree_chart_needle {
				__id = "org.jfree.chart.needle"
				identifier = new PlatformID {
					value = "org.jfree.chart.needle"
				}
			}
			exports += new Package package_org_jfree_chart_plot {
				__id = "org.jfree.chart.plot"
				identifier = new PlatformID {
					value = "org.jfree.chart.plot"
				}
			}
			exports += new Package package_org_jfree_chart_plot_junit {
				__id = "org.jfree.chart.plot.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.plot.junit"
				}
			}
			exports += new Package package_org_jfree_chart_renderer {
				__id = "org.jfree.chart.renderer"
				identifier = new PlatformID {
					value = "org.jfree.chart.renderer"
				}
			}
			exports += new Package package_org_jfree_chart_renderer_category {
				__id = "org.jfree.chart.renderer.category"
				identifier = new PlatformID {
					value = "org.jfree.chart.renderer.category"
				}
			}
			exports += new Package package_org_jfree_chart_renderer_category_junit {
				__id = "org.jfree.chart.renderer.category.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.renderer.category.junit"
				}
			}
			exports += new Package package_org_jfree_chart_renderer_junit {
				__id = "org.jfree.chart.renderer.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.renderer.junit"
				}
			}
			exports += new Package package_org_jfree_chart_renderer_xy {
				__id = "org.jfree.chart.renderer.xy"
				identifier = new PlatformID {
					value = "org.jfree.chart.renderer.xy"
				}
			}
			exports += new Package package_org_jfree_chart_renderer_xy_junit {
				__id = "org.jfree.chart.renderer.xy.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.renderer.xy.junit"
				}
			}
			exports += new Package package_org_jfree_chart_resources {
				__id = "org.jfree.chart.resources"
				identifier = new PlatformID {
					value = "org.jfree.chart.resources"
				}
			}
			exports += new Package package_org_jfree_chart_title {
				__id = "org.jfree.chart.title"
				identifier = new PlatformID {
					value = "org.jfree.chart.title"
				}
			}
			exports += new Package package_org_jfree_chart_title_junit {
				__id = "org.jfree.chart.title.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.title.junit"
				}
			}
			exports += new Package package_org_jfree_chart_ui {
				__id = "org.jfree.chart.ui"
				identifier = new PlatformID {
					value = "org.jfree.chart.ui"
				}
			}
			exports += new Package package_org_jfree_chart_ui_junit {
				__id = "org.jfree.chart.ui.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.ui.junit"
				}
			}
			exports += new Package package_org_jfree_chart_urls {
				__id = "org.jfree.chart.urls"
				identifier = new PlatformID {
					value = "org.jfree.chart.urls"
				}
			}
			exports += new Package package_org_jfree_chart_urls_junit {
				__id = "org.jfree.chart.urls.junit"
				identifier = new PlatformID {
					value = "org.jfree.chart.urls.junit"
				}
			}
			exports += new Package package_org_jfree_data {
				__id = "org.jfree.data"
				identifier = new PlatformID {
					value = "org.jfree.data"
				}
			}
			exports += new Package package_org_jfree_data_category {
				__id = "org.jfree.data.category"
				identifier = new PlatformID {
					value = "org.jfree.data.category"
				}
			}
			exports += new Package package_org_jfree_data_category_junit {
				__id = "org.jfree.data.category.junit"
				identifier = new PlatformID {
					value = "org.jfree.data.category.junit"
				}
			}
			exports += new Package package_org_jfree_data_contour {
				__id = "org.jfree.data.contour"
				identifier = new PlatformID {
					value = "org.jfree.data.contour"
				}
			}
			exports += new Package package_org_jfree_data_function {
				__id = "org.jfree.data.function"
				identifier = new PlatformID {
					value = "org.jfree.data.function"
				}
			}
			exports += new Package package_org_jfree_data_gantt {
				__id = "org.jfree.data.gantt"
				identifier = new PlatformID {
					value = "org.jfree.data.gantt"
				}
			}
			exports += new Package package_org_jfree_data_gantt_junit {
				__id = "org.jfree.data.gantt.junit"
				identifier = new PlatformID {
					value = "org.jfree.data.gantt.junit"
				}
			}
			exports += new Package package_org_jfree_data_general {
				__id = "org.jfree.data.general"
				identifier = new PlatformID {
					value = "org.jfree.data.general"
				}
			}
			exports += new Package package_org_jfree_data_general_junit {
				__id = "org.jfree.data.general.junit"
				identifier = new PlatformID {
					value = "org.jfree.data.general.junit"
				}
			}
			exports += new Package package_org_jfree_data_io {
				__id = "org.jfree.data.io"
				identifier = new PlatformID {
					value = "org.jfree.data.io"
				}
			}
			exports += new Package package_org_jfree_data_jdbc {
				__id = "org.jfree.data.jdbc"
				identifier = new PlatformID {
					value = "org.jfree.data.jdbc"
				}
			}
			exports += new Package package_org_jfree_data_junit {
				__id = "org.jfree.data.junit"
				identifier = new PlatformID {
					value = "org.jfree.data.junit"
				}
			}
			exports += new Package package_org_jfree_data_resources {
				__id = "org.jfree.data.resources"
				identifier = new PlatformID {
					value = "org.jfree.data.resources"
				}
			}
			exports += new Package package_org_jfree_data_statistics {
				__id = "org.jfree.data.statistics"
				identifier = new PlatformID {
					value = "org.jfree.data.statistics"
				}
			}
			exports += new Package package_org_jfree_data_statistics_junit {
				__id = "org.jfree.data.statistics.junit"
				identifier = new PlatformID {
					value = "org.jfree.data.statistics.junit"
				}
			}
			exports += new Package package_org_jfree_data_time {
				__id = "org.jfree.data.time"
				identifier = new PlatformID {
					value = "org.jfree.data.time"
				}
			}
			exports += new Package package_org_jfree_data_time_junit {
				__id = "org.jfree.data.time.junit"
				identifier = new PlatformID {
					value = "org.jfree.data.time.junit"
				}
			}
			exports += new Package package_org_jfree_data_xml {
				__id = "org.jfree.data.xml"
				identifier = new PlatformID {
					value = "org.jfree.data.xml"
				}
			}
			exports += new Package package_org_jfree_data_xy {
				__id = "org.jfree.data.xy"
				identifier = new PlatformID {
					value = "org.jfree.data.xy"
				}
			}
			exports += new Package package_org_jfree_data_xy_junit {
				__id = "org.jfree.data.xy.junit"
				identifier = new PlatformID {
					value = "org.jfree.data.xy.junit"
				}
			}
		}
		plugins += new Plugin plugin_org_jfree_common {
			__id = "org.jfree.common"
			identifier = new PlatformID {
				value = "org.jfree.common"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.9.6"
			}
			dependencies += new VersionDependency {
				source = plugin_org_jfree_common
				target = plugin_org_junit
			}
			exports += new Package package_CVS {
				__id = "CVS"
				identifier = new PlatformID {
					value = "CVS"
				}
			}
			exports += new Package package_com_keypoint {
				__id = "com.keypoint"
				identifier = new PlatformID {
					value = "com.keypoint"
				}
			}
			exports += new Package package_org_jfree {
				__id = "org.jfree"
				identifier = new PlatformID {
					value = "org.jfree"
				}
			}
			exports += new Package package_org_jfree_base {
				__id = "org.jfree.base"
				identifier = new PlatformID {
					value = "org.jfree.base"
				}
			}
			exports += new Package package_org_jfree_base_config {
				__id = "org.jfree.base.config"
				identifier = new PlatformID {
					value = "org.jfree.base.config"
				}
			}
			exports += new Package package_org_jfree_base_log {
				__id = "org.jfree.base.log"
				identifier = new PlatformID {
					value = "org.jfree.base.log"
				}
			}
			exports += new Package package_org_jfree_base_modules {
				__id = "org.jfree.base.modules"
				identifier = new PlatformID {
					value = "org.jfree.base.modules"
				}
			}
			exports += new Package package_org_jfree_date {
				__id = "org.jfree.date"
				identifier = new PlatformID {
					value = "org.jfree.date"
				}
			}
			exports += new Package package_org_jfree_date_junit {
				__id = "org.jfree.date.junit"
				identifier = new PlatformID {
					value = "org.jfree.date.junit"
				}
			}
			exports += new Package package_org_jfree_demo {
				__id = "org.jfree.demo"
				identifier = new PlatformID {
					value = "org.jfree.demo"
				}
			}
			exports += new Package package_org_jfree_io {
				__id = "org.jfree.io"
				identifier = new PlatformID {
					value = "org.jfree.io"
				}
			}
			exports += new Package package_org_jfree_io_junit {
				__id = "org.jfree.io.junit"
				identifier = new PlatformID {
					value = "org.jfree.io.junit"
				}
			}
			exports += new Package package_org_jfree_junit {
				__id = "org.jfree.junit"
				identifier = new PlatformID {
					value = "org.jfree.junit"
				}
			}
			exports += new Package package_org_jfree_layout {
				__id = "org.jfree.layout"
				identifier = new PlatformID {
					value = "org.jfree.layout"
				}
			}
			exports += new Package package_org_jfree_resources {
				__id = "org.jfree.resources"
				identifier = new PlatformID {
					value = "org.jfree.resources"
				}
			}
			exports += new Package package_org_jfree_text {
				__id = "org.jfree.text"
				identifier = new PlatformID {
					value = "org.jfree.text"
				}
			}
			exports += new Package package_org_jfree_text_junit {
				__id = "org.jfree.text.junit"
				identifier = new PlatformID {
					value = "org.jfree.text.junit"
				}
			}
			exports += new Package package_org_jfree_threads {
				__id = "org.jfree.threads"
				identifier = new PlatformID {
					value = "org.jfree.threads"
				}
			}
			exports += new Package package_org_jfree_ui {
				__id = "org.jfree.ui"
				identifier = new PlatformID {
					value = "org.jfree.ui"
				}
			}
			exports += new Package package_org_jfree_ui_about {
				__id = "org.jfree.ui.about"
				identifier = new PlatformID {
					value = "org.jfree.ui.about"
				}
			}
			exports += new Package package_org_jfree_ui_about_resources {
				__id = "org.jfree.ui.about.resources"
				identifier = new PlatformID {
					value = "org.jfree.ui.about.resources"
				}
			}
			exports += new Package package_org_jfree_ui_action {
				__id = "org.jfree.ui.action"
				identifier = new PlatformID {
					value = "org.jfree.ui.action"
				}
			}
			exports += new Package package_org_jfree_ui_junit {
				__id = "org.jfree.ui.junit"
				identifier = new PlatformID {
					value = "org.jfree.ui.junit"
				}
			}
			exports += new Package package_org_jfree_ui_tabbedui {
				__id = "org.jfree.ui.tabbedui"
				identifier = new PlatformID {
					value = "org.jfree.ui.tabbedui"
				}
			}
			exports += new Package package_org_jfree_util {
				__id = "org.jfree.util"
				identifier = new PlatformID {
					value = "org.jfree.util"
				}
			}
			exports += new Package package_org_jfree_util_junit {
				__id = "org.jfree.util.junit"
				identifier = new PlatformID {
					value = "org.jfree.util.junit"
				}
			}
			exports += new Package package_org_jfree_xml {
				__id = "org.jfree.xml"
				identifier = new PlatformID {
					value = "org.jfree.xml"
				}
			}
			exports += new Package package_org_jfree_xml_attributehandlers {
				__id = "org.jfree.xml.attributehandlers"
				identifier = new PlatformID {
					value = "org.jfree.xml.attributehandlers"
				}
			}
			exports += new Package package_org_jfree_xml_factory_objects {
				__id = "org.jfree.xml.factory.objects"
				identifier = new PlatformID {
					value = "org.jfree.xml.factory.objects"
				}
			}
			exports += new Package package_org_jfree_xml_generator {
				__id = "org.jfree.xml.generator"
				identifier = new PlatformID {
					value = "org.jfree.xml.generator"
				}
			}
			exports += new Package package_org_jfree_xml_generator_model {
				__id = "org.jfree.xml.generator.model"
				identifier = new PlatformID {
					value = "org.jfree.xml.generator.model"
				}
			}
			exports += new Package package_org_jfree_xml_parser {
				__id = "org.jfree.xml.parser"
				identifier = new PlatformID {
					value = "org.jfree.xml.parser"
				}
			}
			exports += new Package package_org_jfree_xml_parser_coretypes {
				__id = "org.jfree.xml.parser.coretypes"
				identifier = new PlatformID {
					value = "org.jfree.xml.parser.coretypes"
				}
			}
			exports += new Package package_org_jfree_xml_util {
				__id = "org.jfree.xml.util"
				identifier = new PlatformID {
					value = "org.jfree.xml.util"
				}
			}
			exports += new Package package_org_jfree_xml_writer {
				__id = "org.jfree.xml.writer"
				identifier = new PlatformID {
					value = "org.jfree.xml.writer"
				}
			}
			exports += new Package package_org_jfree_xml_writer_coretypes {
				__id = "org.jfree.xml.writer.coretypes"
				identifier = new PlatformID {
					value = "org.jfree.xml.writer.coretypes"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_xpand_source {
		__id = "org.eclipse.xpand.source"
		identifier = new PlatformID {
			value = "org.eclipse.xpand.source"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Xpand component. (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xpand_source {
			__id = "org.eclipse.xpand.source"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_compare_sdk {
		__id = "org.eclipse.emf.compare.sdk"
		identifier = new PlatformID {
			value = "org.eclipse.emf.compare.sdk"
		}
		version = new Version {
			value = "1.0.1.v200909161031"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*    * Copyright (c) 2006, 2009 Obeo.  * All rights reserved. This program and the accompanying materials  * are made available under the terms of the Eclipse Public License v1.0  * which accompanies this distribution, and is available at  * http://www.eclipse.org/legal/epl-v10.html  *   */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Compare SDK includes runtime, source, and documentation"
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xsd_ecore_converter {
		__id = "org.eclipse.xsd.ecore.converter"
		identifier = new PlatformID {
			value = "org.eclipse.xsd.ecore.converter"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Importer and exporter for converting between Ecore models and XML Schemas."
		}
		plugins += new Plugin plugin_org_eclipse_xsd_ecore_converter {
			__id = "org.eclipse.xsd.ecore.converter"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.ecore.converter"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_xsd_ecore_importer {
			__id = "org.eclipse.xsd.ecore.importer"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.ecore.importer"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_eclipse_xsd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_eclipse_emf_mapping_xsd2ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.7.0-2.0.0)'"
				maxVersion = "'[1.7.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_importer
				target = plugin_org_eclipse_emf_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_xsd_ecore_importer {
				__id = "org.eclipse.xsd.ecore.importer"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.ecore.importer"
				}
			}
			exports += new Package package_org_eclipse_xsd_ecore_importer_taskdefs {
				__id = "org.eclipse.xsd.ecore.importer.taskdefs"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.ecore.importer.taskdefs"
				}
			}
			exports += new Package package_org_eclipse_xsd_ecore_importer_ui {
				__id = "org.eclipse.xsd.ecore.importer.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.ecore.importer.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xsd_ecore_exporter {
			__id = "org.eclipse.xsd.ecore.exporter"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.ecore.exporter"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_exporter
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_exporter
				target = plugin_org_eclipse_xsd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_exporter
				target = plugin_org_eclipse_emf_exporter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_exporter
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_ecore_exporter
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_xsd_ecore_exporter {
				__id = "org.eclipse.xsd.ecore.exporter"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.ecore.exporter"
				}
			}
			exports += new Package package_org_eclipse_xsd_ecore_exporter_ui {
				__id = "org.eclipse.xsd.ecore.exporter.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.ecore.exporter.ui"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_xtend_typesystem_emf {
		__id = "org.eclipse.xtend.typesystem.emf"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.typesystem.emf"
		}
		version = new Version {
			value = "0.7.0.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Xtend EMF typesystem (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_emf {
			__id = "org.eclipse.xtend.typesystem.emf"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.emf"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf
				target = plugin_org_eclipse_emf_mwe_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_eclipse_xtend_typesystem_emf {
				__id = "org.eclipse.xtend.typesystem.emf"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.emf"
				}
			}
			exports += new Package package_org_eclipse_xtend_typesystem_emf_check {
				__id = "org.eclipse.xtend.typesystem.emf.check"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.emf.check"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_emf_ui {
			__id = "org.eclipse.xtend.typesystem.emf.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.emf.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_xtend_shared_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_emf_ui
				target = plugin_org_eclipse_emf_converter
			}
			exports += new Package package_org_eclipse_xtend_typesystem_emf_ui {
				__id = "org.eclipse.xtend.typesystem.emf.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.emf.ui"
				}
			}
		}
	}

	features += new Feature feature_de_fh_reutlingen_cap {
		__id = "de.fh.reutlingen.cap"
		identifier = new PlatformID {
			value = "de.fh.reutlingen.cap"
		}
		version = new Version {
			value = "1.2.0"
		}
		provider = vendor_Johannes_Schneider
		license = license__www_gnu_org_copyleft_gpl_html
		copyright = new Copyright {
			name = "_www_gnu_org_copyleft_gpl_html"
			text = "CAP is released under the GPL"
			locator = new URLLocator {
				value = "http://www.gnu.org/copyleft/gpl.html"
			}
		}
		description = new Description {
			name = "description"
			text = "CAP is a plugin for the eclipse platform and analysis the dependencies of your Java project. It opens a own perspective and displays the results in an clear way using different diagrams. Showing the weaknesses in your architektur, will help to improve the encapsulation. As a result your application will have a maximized reusability and a much better maintainability. The main approach of the analysis is based on a paper published by Robert Martin in 1994. It is called 'OO Design Quality Metrics'."
		}
		plugins += new Plugin plugin_de_fh_reutlingen_cap {
			__id = "de.fh.reutlingen.cap"
			identifier = new PlatformID {
				value = "de.fh.reutlingen.cap"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_Johannes_Schneider
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_de_fh_reutlingen_cap_ui
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_de_fh_reutlingen_cap_core
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_de_fh_reutlingen_cap_core_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_jfree_chart
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap
				target = plugin_org_jfree_common
			}
			exports += new Package package_CVS {
				__id = "CVS"
				identifier = new PlatformID {
					value = "CVS"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse {
				__id = "de.fh.reutlingen.cap.eclipse"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui {
				__id = "de.fh.reutlingen.cap.eclipse.ui"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_actions {
				__id = "de.fh.reutlingen.cap.eclipse.ui.actions"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.actions"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_draw2d {
				__id = "de.fh.reutlingen.cap.eclipse.ui.draw2d"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.draw2d"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_prefs {
				__id = "de.fh.reutlingen.cap.eclipse.ui.prefs"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.prefs"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_util {
				__id = "de.fh.reutlingen.cap.eclipse.ui.util"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.util"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_analysis {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.analysis"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.analysis"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_analysis_classanalysis {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.classanalysis"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.classanalysis"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_analysis_classanalysis_draw2d {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.classanalysis.draw2d"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.classanalysis.draw2d"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_analysis_overview {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.overview"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.overview"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_analysis_packageanalysis {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.packageanalysis"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.packageanalysis"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_analysis_packageanalysis_draw2d {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.packageanalysis.draw2d"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.analysis.packageanalysis.draw2d"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_packagestats {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.packagestats"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.packagestats"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_views_protocol {
				__id = "de.fh.reutlingen.cap.eclipse.ui.views.protocol"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.views.protocol"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_eclipse_ui_wizards {
				__id = "de.fh.reutlingen.cap.eclipse.ui.wizards"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.eclipse.ui.wizards"
				}
			}
		}
		plugins += new Plugin plugin_de_fh_reutlingen_cap_core {
			__id = "de.fh.reutlingen.cap.core"
			identifier = new PlatformID {
				value = "de.fh.reutlingen.cap.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0"
			}
			vendor = vendor_Johannes_Schneider___Matthias_Mergenthaler
			exports += new Package package_CVS {
				__id = "CVS"
				identifier = new PlatformID {
					value = "CVS"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_core {
				__id = "de.fh.reutlingen.cap.core"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.core"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_core_analysis {
				__id = "de.fh.reutlingen.cap.core.analysis"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.core.analysis"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_core_analysis_filter {
				__id = "de.fh.reutlingen.cap.core.analysis.filter"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.core.analysis.filter"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_core_protocol {
				__id = "de.fh.reutlingen.cap.core.protocol"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.core.protocol"
				}
			}
		}
		plugins += new Plugin plugin_de_fh_reutlingen_cap_core_eclipse {
			__id = "de.fh.reutlingen.cap.core.eclipse"
			identifier = new PlatformID {
				value = "de.fh.reutlingen.cap.core.eclipse"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0"
			}
			vendor = vendor_Johannes_Schneider
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap_core_eclipse
				target = plugin_de_fh_reutlingen_cap_core
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap_core_eclipse
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap_core_eclipse
				target = plugin_org_eclipse_jdt
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap_core_eclipse
				target = plugin_org_eclipse_jdt_core
			}
			exports += new Package package_CVS {
				__id = "CVS"
				identifier = new PlatformID {
					value = "CVS"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_core_analysis {
				__id = "de.fh.reutlingen.cap.core.analysis"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.core.analysis"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_core_eclipse {
				__id = "de.fh.reutlingen.cap.core.eclipse"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.core.eclipse"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_core_eclipse_protocol {
				__id = "de.fh.reutlingen.cap.core.eclipse.protocol"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.core.eclipse.protocol"
				}
			}
		}
		plugins += new Plugin plugin_de_fh_reutlingen_cap_ui {
			__id = "de.fh.reutlingen.cap.ui"
			identifier = new PlatformID {
				value = "de.fh.reutlingen.cap.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_Johannes_Schneider___Matthias_Mergenthaler
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap_ui
				target = plugin_de_fh_reutlingen_cap_core
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap_ui
				target = plugin_org_jfree_chart
			}
			dependencies += new VersionDependency {
				source = plugin_de_fh_reutlingen_cap_ui
				target = plugin_org_jfree_common
			}
			exports += new Package package_CVS {
				__id = "CVS"
				identifier = new PlatformID {
					value = "CVS"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap {
				__id = "de.fh.reutlingen.cap"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_ui_graph {
				__id = "de.fh.reutlingen.cap.ui.graph"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.ui.graph"
				}
			}
			exports += new Package package_de_fh_reutlingen_cap_util {
				__id = "de.fh.reutlingen.cap.util"
				identifier = new PlatformID {
					value = "de.fh.reutlingen.cap.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_m2m_qvt_oml_sdk {
		__id = "org.eclipse.m2m.qvt.oml.sdk"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.qvt.oml.sdk"
		}
		version = new Version {
			value = "2.0.1.v20090701-2200-7N-5CLrGiFfYqKJ7FOaWVaJlXLqT"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Operational QVT SDK"
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_ui {
			__id = "org.eclipse.m2m.qvt.oml.ui"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090526-1940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_emf_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_m2m_qvt_oml_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = plugin_org_eclipse_m2m_qvt_oml_project
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ui {
				__id = "org.eclipse.m2m.internal.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ui_wizards {
				__id = "org.eclipse.m2m.internal.qvt.oml.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ui_wizards_project {
				__id = "org.eclipse.m2m.internal.qvt.oml.ui.wizards.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ui.wizards.project"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ui
				target = package_com_ibm_icu_lang
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
	}

	features += new Feature feature_org_eclipse_m2m_qvt_oml_editor {
		__id = "org.eclipse.m2m.qvt.oml.editor"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.qvt.oml.editor"
		}
		version = new Version {
			value = "2.0.1.v20090701-2200-3-07w311A181203311"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Operational QVT editor support"
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_editor_ui {
			__id = "org.eclipse.m2m.qvt.oml.editor.ui"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.editor.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.1.v20090701-2200"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_m2m_qvt_oml_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_m2m_qvt_oml_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_m2m_qvt_oml_project
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_editor_ui
				target = plugin_org_eclipse_m2m_qvt_oml_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_editor_ui {
				__id = "org.eclipse.m2m.internal.qvt.oml.editor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.editor.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_editor_ui_completion {
				__id = "org.eclipse.m2m.internal.qvt.oml.editor.ui.completion"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.editor.ui.completion"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_editor_ui_completion_collectorregistry {
				__id = "org.eclipse.m2m.internal.qvt.oml.editor.ui.completion.collectorregistry"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.editor.ui.completion.collectorregistry"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_editor_ui_completion_cst_parser {
				__id = "org.eclipse.m2m.internal.qvt.oml.editor.ui.completion.cst.parser"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.editor.ui.completion.cst.parser"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_editor_ui_hovers {
				__id = "org.eclipse.m2m.internal.qvt.oml.editor.ui.hovers"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.editor.ui.hovers"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_editor_ui_hyperlinks {
				__id = "org.eclipse.m2m.internal.qvt.oml.editor.ui.hyperlinks"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.editor.ui.hyperlinks"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_editor_ui_outline {
				__id = "org.eclipse.m2m.internal.qvt.oml.editor.ui.outline"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.editor.ui.outline"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_xsd_mapping_editor {
		__id = "org.eclipse.xsd.mapping.editor"
		identifier = new PlatformID {
			value = "org.eclipse.xsd.mapping.editor"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Editor for examining mappings between XML Schemas and Ecore models in the IDE."
		}
		plugins += new Plugin plugin_org_eclipse_xsd_mapping_editor {
			__id = "org.eclipse.xsd.mapping.editor"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.mapping.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_xsd2ecore_editor {
			__id = "org.eclipse.emf.mapping.xsd2ecore.editor"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.xsd2ecore.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.4.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore_editor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore_editor
				target = plugin_org_eclipse_emf_mapping_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore_editor
				target = plugin_org_eclipse_emf_mapping_xsd2ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_xsd2ecore_editor
				target = plugin_org_eclipse_xsd_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_mapping_xsd2ecore_presentation {
				__id = "org.eclipse.emf.mapping.xsd2ecore.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.xsd2ecore.presentation"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_m2m_qvt_oml_examples {
		__id = "org.eclipse.m2m.qvt.oml.examples"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.qvt.oml.examples"
		}
		version = new Version {
			value = "2.0.0.v20090616-1500-3--7w311A171902941"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Operational QVT examples"
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_samples {
			__id = "org.eclipse.m2m.qvt.oml.samples"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.samples"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090608-1830"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_samples
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_samples
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_samples
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_samples
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_samples
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_samples
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_samples
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_qvt_1_0_0_Operational_examples_simpleuml {
				__id = "_www_eclipse_org_qvt_1_0_0_Operational_examples_simpleuml"
				identifier = new PlatformID {
					value = "_www_eclipse_org_qvt_1_0_0_Operational_examples_simpleuml"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/simpleuml"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_simpleuml {
					__id = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_simpleuml"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_simpleuml"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/simpleuml.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb {
				__id = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb"
				identifier = new PlatformID {
					value = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb {
					__id = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_constraints {
				__id = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_constraints"
				identifier = new PlatformID {
					value = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_constraints"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb/constraints"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_constraints {
					__id = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_constraints"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_constraints"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb/constraints.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_datatypes {
				__id = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_datatypes"
				identifier = new PlatformID {
					value = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_datatypes"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb/datatypes"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_datatypes {
					__id = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_datatypes"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_datatypes"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb/datatypes.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_view {
				__id = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_view"
				identifier = new PlatformID {
					value = "_www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_view"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb/view"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_view {
					__id = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_view"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_examples_rdb_view"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb/view.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_samples {
				__id = "org.eclipse.m2m.internal.qvt.oml.samples"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.samples"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_samples_ui {
				__id = "org.eclipse.m2m.internal.qvt.oml.samples.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.samples.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_samples_ui_wizard {
				__id = "org.eclipse.m2m.internal.qvt.oml.samples.ui.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.samples.ui.wizard"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_samples_wizards {
				__id = "org.eclipse.m2m.internal.qvt.oml.samples.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.samples.wizards"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_samples_wizards_launch {
				__id = "org.eclipse.m2m.internal.qvt.oml.samples.wizards.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.samples.wizards.launch"
				}
			}
			exports += new Package package_rdb {
				__id = "rdb"
				identifier = new PlatformID {
					value = "rdb"
				}
			}
			exports += new Package package_rdb_constraints {
				__id = "rdb.constraints"
				identifier = new PlatformID {
					value = "rdb.constraints"
				}
			}
			exports += new Package package_rdb_constraints_impl {
				__id = "rdb.constraints.impl"
				identifier = new PlatformID {
					value = "rdb.constraints.impl"
				}
			}
			exports += new Package package_rdb_constraints_presentation {
				__id = "rdb.constraints.presentation"
				identifier = new PlatformID {
					value = "rdb.constraints.presentation"
				}
			}
			exports += new Package package_rdb_constraints_provider {
				__id = "rdb.constraints.provider"
				identifier = new PlatformID {
					value = "rdb.constraints.provider"
				}
			}
			exports += new Package package_rdb_constraints_util {
				__id = "rdb.constraints.util"
				identifier = new PlatformID {
					value = "rdb.constraints.util"
				}
			}
			exports += new Package package_rdb_datatypes {
				__id = "rdb.datatypes"
				identifier = new PlatformID {
					value = "rdb.datatypes"
				}
			}
			exports += new Package package_rdb_datatypes_impl {
				__id = "rdb.datatypes.impl"
				identifier = new PlatformID {
					value = "rdb.datatypes.impl"
				}
			}
			exports += new Package package_rdb_datatypes_presentation {
				__id = "rdb.datatypes.presentation"
				identifier = new PlatformID {
					value = "rdb.datatypes.presentation"
				}
			}
			exports += new Package package_rdb_datatypes_provider {
				__id = "rdb.datatypes.provider"
				identifier = new PlatformID {
					value = "rdb.datatypes.provider"
				}
			}
			exports += new Package package_rdb_datatypes_util {
				__id = "rdb.datatypes.util"
				identifier = new PlatformID {
					value = "rdb.datatypes.util"
				}
			}
			exports += new Package package_rdb_impl {
				__id = "rdb.impl"
				identifier = new PlatformID {
					value = "rdb.impl"
				}
			}
			exports += new Package package_rdb_presentation {
				__id = "rdb.presentation"
				identifier = new PlatformID {
					value = "rdb.presentation"
				}
			}
			exports += new Package package_rdb_provider {
				__id = "rdb.provider"
				identifier = new PlatformID {
					value = "rdb.provider"
				}
			}
			exports += new Package package_rdb_util {
				__id = "rdb.util"
				identifier = new PlatformID {
					value = "rdb.util"
				}
			}
			exports += new Package package_rdb_view {
				__id = "rdb.view"
				identifier = new PlatformID {
					value = "rdb.view"
				}
			}
			exports += new Package package_rdb_view_impl {
				__id = "rdb.view.impl"
				identifier = new PlatformID {
					value = "rdb.view.impl"
				}
			}
			exports += new Package package_rdb_view_presentation {
				__id = "rdb.view.presentation"
				identifier = new PlatformID {
					value = "rdb.view.presentation"
				}
			}
			exports += new Package package_rdb_view_provider {
				__id = "rdb.view.provider"
				identifier = new PlatformID {
					value = "rdb.view.provider"
				}
			}
			exports += new Package package_rdb_view_util {
				__id = "rdb.view.util"
				identifier = new PlatformID {
					value = "rdb.view.util"
				}
			}
			exports += new Package package_simpleuml {
				__id = "simpleuml"
				identifier = new PlatformID {
					value = "simpleuml"
				}
			}
			exports += new Package package_simpleuml_impl {
				__id = "simpleuml.impl"
				identifier = new PlatformID {
					value = "simpleuml.impl"
				}
			}
			exports += new Package package_simpleuml_presentation {
				__id = "simpleuml.presentation"
				identifier = new PlatformID {
					value = "simpleuml.presentation"
				}
			}
			exports += new Package package_simpleuml_provider {
				__id = "simpleuml.provider"
				identifier = new PlatformID {
					value = "simpleuml.provider"
				}
			}
			exports += new Package package_simpleuml_util {
				__id = "simpleuml.util"
				identifier = new PlatformID {
					value = "simpleuml.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_jet_doc {
		__id = "org.eclipse.jet.doc"
		identifier = new PlatformID {
			value = "org.eclipse.jet.doc"
		}
		version = new Version {
			value = "1.0.2.v201001281539-2-17w31211239264A"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "JET Documentation"
		}
		plugins += new Plugin plugin_org_eclipse_jet_doc {
			__id = "org.eclipse.jet.doc"
			identifier = new PlatformID {
				value = "org.eclipse.jet.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200908201022"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.jet.doc"
				identifier = new PlatformID {
					value = "org.eclipse.jet.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.jet.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_compare {
		__id = "org.eclipse.emf.compare"
		identifier = new PlatformID {
			value = "org.eclipse.emf.compare"
		}
		version = new Version {
			value = "1.0.1.v200909161031"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*    * Copyright (c) 2006, 2009 Obeo.  * All rights reserved. This program and the accompanying materials  * are made available under the terms of the Eclipse Public License v1.0  * which accompanies this distribution, and is available at  * http://www.eclipse.org/legal/epl-v10.html  *   */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Model comparison support"
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare {
			__id = "org.eclipse.emf.compare"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_org_eclipse_emf_compare {
				__id = "org.eclipse.emf.compare"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_util {
				__id = "org.eclipse.emf.compare.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare_diff {
			__id = "org.eclipse.emf.compare.diff"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare.diff"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff
				target = plugin_org_eclipse_emf_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff
				target = plugin_org_eclipse_emf_compare_match
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_compare_diff_1_1 {
				__id = "_www_eclipse_org_emf_compare_diff_1_1"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_compare_diff_1_1"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/compare/diff/1.1"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_compare_diff_1_1 {
					__id = "conformsTo__www_eclipse_org_emf_compare_diff_1_1"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_compare_diff_1_1"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/compare/diff/1.1.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_compare_diff {
				__id = "org.eclipse.emf.compare.diff"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_engine {
				__id = "org.eclipse.emf.compare.diff.engine"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.engine"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_engine_check {
				__id = "org.eclipse.emf.compare.diff.engine.check"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.engine.check"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_merge {
				__id = "org.eclipse.emf.compare.diff.merge"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.merge"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_merge_service {
				__id = "org.eclipse.emf.compare.diff.merge.service"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.merge.service"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_metamodel {
				__id = "org.eclipse.emf.compare.diff.metamodel"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.metamodel"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_metamodel_impl {
				__id = "org.eclipse.emf.compare.diff.metamodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.metamodel.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_metamodel_util {
				__id = "org.eclipse.emf.compare.diff.metamodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.metamodel.util"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_service {
				__id = "org.eclipse.emf.compare.diff.service"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.service"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare_diff_edit {
			__id = "org.eclipse.emf.compare.diff.edit"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare.diff.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff_edit
				target = plugin_org_eclipse_emf_compare_diff
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff_edit
				target = plugin_org_eclipse_emf_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff_edit
				target = plugin_org_eclipse_emf_compare_match
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_diff_edit
				target = plugin_org_eclipse_emf_ecore_edit
			}
			exports += new Package package_org_eclipse_emf_compare_diff_provider {
				__id = "org.eclipse.emf.compare.diff.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare_match {
			__id = "org.eclipse.emf.compare.match"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare.match"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_match
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_match
				target = plugin_org_eclipse_emf_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_match
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_match
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_match
				target = plugin_org_eclipse_emf_edit
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_compare_match_1_1 {
				__id = "_www_eclipse_org_emf_compare_match_1_1"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_compare_match_1_1"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/compare/match/1.1"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_compare_match_1_1 {
					__id = "conformsTo__www_eclipse_org_emf_compare_match_1_1"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_compare_match_1_1"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/compare/match/1.1.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_compare_match {
				__id = "org.eclipse.emf.compare.match"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_engine {
				__id = "org.eclipse.emf.compare.match.engine"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.engine"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_filter {
				__id = "org.eclipse.emf.compare.match.filter"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.filter"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_internal_statistic {
				__id = "org.eclipse.emf.compare.match.internal.statistic"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.internal.statistic"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_tests {
				__id = "org.eclipse.emf.compare.tests"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.tests"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_diff_ {
				__id = "org.eclipse.emf.compare.diff'"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.diff'"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_metamodel {
				__id = "org.eclipse.emf.compare.match.metamodel"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.metamodel"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_metamodel_impl {
				__id = "org.eclipse.emf.compare.match.metamodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.metamodel.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_metamodel_provider {
				__id = "org.eclipse.emf.compare.match.metamodel.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.metamodel.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_metamodel_util {
				__id = "org.eclipse.emf.compare.match.metamodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.metamodel.util"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_service {
				__id = "org.eclipse.emf.compare.match.service"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.service"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_match_statistic {
				__id = "org.eclipse.emf.compare.match.statistic"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.match.statistic"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare_ui {
			__id = "org.eclipse.emf.compare.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_emf_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_emf_compare_diff
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_emf_compare_match
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_emf_ecore_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_ltk_ui_refactoring
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_ltk_core_refactoring
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_team_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_team_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_ui
				target = plugin_org_eclipse_core_filesystem
			}
			exports += new Package package_org_eclipse_emf_compare_ui {
				__id = "org.eclipse.emf.compare.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_editor {
				__id = "org.eclipse.emf.compare.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_export {
				__id = "org.eclipse.emf.compare.ui.export"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.export"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_team {
				__id = "org.eclipse.emf.compare.ui.team"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.team"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_util {
				__id = "org.eclipse.emf.compare.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.util"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_viewer {
				__id = "org.eclipse.emf.compare.ui.viewer"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.viewer"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_viewer_content {
				__id = "org.eclipse.emf.compare.ui.viewer.content"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.viewer.content"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_viewer_content_part {
				__id = "org.eclipse.emf.compare.ui.viewer.content.part"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.viewer.content.part"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_viewer_content_part_diff {
				__id = "org.eclipse.emf.compare.ui.viewer.content.part.diff"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.viewer.content.part.diff"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_viewer_content_part_property {
				__id = "org.eclipse.emf.compare.ui.viewer.content.part.property"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.viewer.content.part.property"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_ui_viewer_structure {
				__id = "org.eclipse.emf.compare.ui.viewer.structure"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.ui.viewer.structure"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare_epatch {
			__id = "org.eclipse.emf.compare.epatch"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare.epatch"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_epatch
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.3.0'"
				maxVersion = "'2.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_epatch
				target = plugin_org_eclipse_emf_compare_diff
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.9.0'"
				maxVersion = "'0.9.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_compare_epatch
				target = plugin_org_eclipse_emf_compare_match
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.9.0'"
				maxVersion = "'0.9.0'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_compare_epatch_0_1 {
				__id = "_www_eclipse_org_emf_compare_epatch_0_1"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_compare_epatch_0_1"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/compare/epatch/0.1"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_compare_epatch_0_1 {
					__id = "conformsTo__www_eclipse_org_emf_compare_epatch_0_1"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_compare_epatch_0_1"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/compare/epatch/0.1.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_compare_epatch {
				__id = "org.eclipse.emf.compare.epatch"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.epatch"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_epatch_applier {
				__id = "org.eclipse.emf.compare.epatch.applier"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.epatch.applier"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_epatch_diff {
				__id = "org.eclipse.emf.compare.epatch.diff"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.epatch.diff"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_epatch_impl {
				__id = "org.eclipse.emf.compare.epatch.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.epatch.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_epatch_recorder {
				__id = "org.eclipse.emf.compare.epatch.recorder"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.epatch.recorder"
				}
			}
			exports += new Package package_org_eclipse_emf_compare_epatch_util {
				__id = "org.eclipse.emf.compare.epatch.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.epatch.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_ocl {
		__id = "org.eclipse.ocl"
		identifier = new PlatformID {
			value = "org.eclipse.ocl"
		}
		version = new Version {
			value = "1.3.0.v200901271800-46-9oB55V5I9P8M65"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Object Constraint Language (OCL) 2.0 parser/interpreter implementation."
		}
		plugins += new Plugin plugin_org_eclipse_ocl {
			__id = "org.eclipse.ocl"
			identifier = new PlatformID {
				value = "org.eclipse.ocl"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200905271400"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl
				target = plugin_net_sourceforge_lpg_lpgjavaruntime
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "1.2.0"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_ocl_1_1_0_OCL_Types {
				__id = "_www_eclipse_org_ocl_1_1_0_OCL_Types"
				identifier = new PlatformID {
					value = "_www_eclipse_org_ocl_1_1_0_OCL_Types"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/ocl/1.1.0/OCL/Types"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Types {
					__id = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Types"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Types"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/ocl/1.1.0/OCL/Types.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_ocl_1_1_0_OCL_Expressions {
				__id = "_www_eclipse_org_ocl_1_1_0_OCL_Expressions"
				identifier = new PlatformID {
					value = "_www_eclipse_org_ocl_1_1_0_OCL_Expressions"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/ocl/1.1.0/OCL/Expressions"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Expressions {
					__id = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Expressions"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Expressions"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/ocl/1.1.0/OCL/Expressions.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_ocl_1_1_0_OCL_Utilities {
				__id = "_www_eclipse_org_ocl_1_1_0_OCL_Utilities"
				identifier = new PlatformID {
					value = "_www_eclipse_org_ocl_1_1_0_OCL_Utilities"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/ocl/1.1.0/OCL/Utilities"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Utilities {
					__id = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Utilities"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_Utilities"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/ocl/1.1.0/OCL/Utilities.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_ocl_1_1_0_OCL_CST {
				__id = "_www_eclipse_org_ocl_1_1_0_OCL_CST"
				identifier = new PlatformID {
					value = "_www_eclipse_org_ocl_1_1_0_OCL_CST"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/ocl/1.1.0/OCL/CST"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_ocl_1_1_0_OCL_CST {
					__id = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_CST"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_ocl_1_1_0_OCL_CST"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/ocl/1.1.0/OCL/CST.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_ocl {
				__id = "org.eclipse.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl"
				}
			}
			exports += new Package package_org_eclipse_ocl_cst {
				__id = "org.eclipse.ocl.cst"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.cst"
				}
			}
			exports += new Package package_org_eclipse_ocl_cst_impl {
				__id = "org.eclipse.ocl.cst.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.cst.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_cst_util {
				__id = "org.eclipse.ocl.cst.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.cst.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions {
				__id = "org.eclipse.ocl.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions_impl {
				__id = "org.eclipse.ocl.expressions.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions_operations {
				__id = "org.eclipse.ocl.expressions.operations"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions.operations"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions_util {
				__id = "org.eclipse.ocl.expressions.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_helper {
				__id = "org.eclipse.ocl.helper"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.helper"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal {
				__id = "org.eclipse.ocl.internal"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal_evaluation {
				__id = "org.eclipse.ocl.internal.evaluation"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal.evaluation"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal_helper {
				__id = "org.eclipse.ocl.internal.helper"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal.helper"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal_l10n {
				__id = "org.eclipse.ocl.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_ocl_lpg {
				__id = "org.eclipse.ocl.lpg"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.lpg"
				}
			}
			exports += new Package package_org_eclipse_ocl_options {
				__id = "org.eclipse.ocl.options"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.options"
				}
			}
			exports += new Package package_org_eclipse_ocl_parser {
				__id = "org.eclipse.ocl.parser"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.parser"
				}
			}
			exports += new Package package_org_eclipse_ocl_parser_backtracking {
				__id = "org.eclipse.ocl.parser.backtracking"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.parser.backtracking"
				}
			}
			exports += new Package package_org_eclipse_ocl_types {
				__id = "org.eclipse.ocl.types"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types"
				}
			}
			exports += new Package package_org_eclipse_ocl_types_impl {
				__id = "org.eclipse.ocl.types.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_types_operations {
				__id = "org.eclipse.ocl.types.operations"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types.operations"
				}
			}
			exports += new Package package_org_eclipse_ocl_types_util {
				__id = "org.eclipse.ocl.types.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_util {
				__id = "org.eclipse.ocl.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_utilities {
				__id = "org.eclipse.ocl.utilities"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.utilities"
				}
			}
			exports += new Package package_org_eclipse_ocl_utilities_impl {
				__id = "org.eclipse.ocl.utilities.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.utilities.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_utilities_util {
				__id = "org.eclipse.ocl.utilities.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.utilities.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl
				target = package_com_ibm_icu_lang
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_net_sourceforge_lpg_lpgjavaruntime {
			__id = "net.sourceforge.lpg.lpgjavaruntime"
			identifier = new PlatformID {
				value = "net.sourceforge.lpg.lpgjavaruntime"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200803061910"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_lpg_lpgjavaruntime {
				__id = "lpg.lpgjavaruntime"
				identifier = new PlatformID {
					value = "lpg.lpgjavaruntime"
				}
				version = new Version {
					value = "1.1"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ocl_ecore {
			__id = "org.eclipse.ocl.ecore"
			identifier = new PlatformID {
				value = "org.eclipse.ocl.ecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200905271400"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_ecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_ecore
				target = plugin_org_eclipse_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_ecore
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-2.6.0)'"
				maxVersion = "'[2.5.0-2.6.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_ecore
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_ecore
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_ocl_1_1_0_Ecore {
				__id = "_www_eclipse_org_ocl_1_1_0_Ecore"
				identifier = new PlatformID {
					value = "_www_eclipse_org_ocl_1_1_0_Ecore"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/ocl/1.1.0/Ecore"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_ocl_1_1_0_Ecore {
					__id = "conformsTo__www_eclipse_org_ocl_1_1_0_Ecore"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_ocl_1_1_0_Ecore"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/ocl/1.1.0/Ecore.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_ocl_ecore {
				__id = "org.eclipse.ocl.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.ecore"
				}
			}
			exports += new Package package_org_eclipse_ocl_ecore_impl {
				__id = "org.eclipse.ocl.ecore.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.ecore.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_ecore_internal {
				__id = "org.eclipse.ocl.ecore.internal"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.ecore.internal"
				}
			}
			exports += new Package package_org_eclipse_ocl_ecore_util {
				__id = "org.eclipse.ocl.ecore.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.ecore.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_emf_cdo_doc {
		__id = "org.eclipse.emf.cdo.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.cdo.doc"
		}
		version = new Version {
			value = "0.7.1.v200610271316"
		}
		provider = vendor_Eclipse_org
		copyright = new Copyright {
			name = "_copyrightURL"
			text = "%copyright"
			locator = new URLLocator {
				value = "%copyrightURL"
			}
		}
		description = new Description {
			name = "description"
			text = "CDO Documentation"
		}
		plugins += new Plugin plugin_org_eclipse_emf_cdo_doc {
			__id = "org.eclipse.emf.cdo.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.cdo.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.1.v200610271316"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.emf.cdo.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.cdo.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.cdo.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cdo_doc
				target = plugin_org_eclipse_help
			}
		}
	}

	features += new Feature feature_fr_irisa_triskell_kermeta_ocl {
		__id = "fr.irisa.triskell.kermeta.ocl"
		identifier = new PlatformID {
			value = "fr.irisa.triskell.kermeta.ocl"
		}
		version = new Version {
			value = "1.3.2"
		}
		provider = vendor_IRISA_INRIA
		license = license__www_example_com_license
		copyright = new Copyright {
			name = "_www_example_com_copyright"
			text = "[Enter Copyright Description here.]"
			locator = new URLLocator {
				value = "http://www.example.com/copyright"
			}
		}
		description = new Description {
			name = "description"
			text = "[Enter Feature Description here.]"
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_ocl {
			__id = "fr.irisa.triskell.kermeta.ocl"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.ocl"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = plugin_net_sourceforge_lpg_lpgjavaruntime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = plugin_org_kermeta_eclipse_ocl_parser
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ocl {
				__id = "fr.irisa.triskell.kermeta.ocl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ocl"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ocl_kmtactions {
				__id = "fr.irisa.triskell.kermeta.ocl.kmtactions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ocl.kmtactions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ocl_ui {
				__id = "fr.irisa.triskell.kermeta.ocl.ui"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ocl.ui"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ocl_ui_popup_actions {
				__id = "fr.irisa.triskell.kermeta.ocl.ui.popup.actions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ocl.ui.popup.actions"
				}
			}
			exports += new Package package_org_kermeta_compiler_runtime_basetypes_ocl_helpers {
				__id = "org.kermeta.compiler.runtime.basetypes.ocl.helpers"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.runtime.basetypes.ocl.helpers"
				}
			}
			exports += new Package package_org_kermeta_interpreter_runtime_basetypes_ocl_helpers {
				__id = "org.kermeta.interpreter.runtime.basetypes.ocl.helpers"
				identifier = new PlatformID {
					value = "org.kermeta.interpreter.runtime.basetypes.ocl.helpers"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_cst
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_cst_impl
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_cst_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_ecore_impl
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_ecore_internal
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_ecore_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_expressions_impl
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_expressions_operations
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_expressions_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_helper
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_internal
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_internal_evaluation
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_internal_helper
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_internal_l10n
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_lpg
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_options
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_parser
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_parser_backtracking
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_types
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_types_impl
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_types_operations
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_types_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_utilities
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_utilities_impl
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ocl
				target = package_org_eclipse_ocl_utilities_util
			}
		}
		plugins += new Plugin plugin_net_sourceforge_lpg_lpgjavaruntime {
			__id = "net.sourceforge.lpg.lpgjavaruntime"
			identifier = new PlatformID {
				value = "net.sourceforge.lpg.lpgjavaruntime"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200803061910"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_lpg_lpgjavaruntime {
				__id = "lpg.lpgjavaruntime"
				identifier = new PlatformID {
					value = "lpg.lpgjavaruntime"
				}
				version = new Version {
					value = "1.1"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_traceability_model {
			__id = "fr.irisa.triskell.traceability.model"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.traceability.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model
				target = plugin_fr_irisa_triskell_eclipse_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_Traceability {
				__id = "_www_kermeta_org_Traceability"
				identifier = new PlatformID {
					value = "_www_kermeta_org_Traceability"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/Traceability"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_Traceability {
					__id = "conformsTo__www_kermeta_org_Traceability"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_Traceability"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/Traceability.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_fr_irisa_triskell_traceability {
				__id = "fr.irisa.triskell.traceability"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability"
				}
			}
			exports += new Package package_fr_irisa_triskell_traceability_helper {
				__id = "fr.irisa.triskell.traceability.helper"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability.helper"
				}
			}
			exports += new Package package_fr_irisa_triskell_traceability_impl {
				__id = "fr.irisa.triskell.traceability.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_traceability_model {
				__id = "fr.irisa.triskell.traceability.model"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability.model"
				}
			}
			exports += new Package package_fr_irisa_triskell_traceability_util {
				__id = "fr.irisa.triskell.traceability.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_eclipse_ocl_parser {
			__id = "org.kermeta.eclipse.ocl.parser"
			identifier = new PlatformID {
				value = "org.kermeta.eclipse.ocl.parser"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_Eclipse_org_adapted_by_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_eclipse_ocl_parser
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_eclipse_ocl_parser
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_ocl {
				__id = "org.eclipse.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl"
				}
			}
			exports += new Package package_org_eclipse_ocl_cst {
				__id = "org.eclipse.ocl.cst"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.cst"
				}
			}
			exports += new Package package_org_eclipse_ocl_cst_impl {
				__id = "org.eclipse.ocl.cst.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.cst.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_cst_util {
				__id = "org.eclipse.ocl.cst.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.cst.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions {
				__id = "org.eclipse.ocl.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions_impl {
				__id = "org.eclipse.ocl.expressions.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions_operations {
				__id = "org.eclipse.ocl.expressions.operations"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions.operations"
				}
			}
			exports += new Package package_org_eclipse_ocl_expressions_util {
				__id = "org.eclipse.ocl.expressions.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.expressions.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_helper {
				__id = "org.eclipse.ocl.helper"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.helper"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal {
				__id = "org.eclipse.ocl.internal"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal_evaluation {
				__id = "org.eclipse.ocl.internal.evaluation"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal.evaluation"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal_helper {
				__id = "org.eclipse.ocl.internal.helper"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal.helper"
				}
			}
			exports += new Package package_org_eclipse_ocl_internal_l10n {
				__id = "org.eclipse.ocl.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_ocl_lpg {
				__id = "org.eclipse.ocl.lpg"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.lpg"
				}
			}
			exports += new Package package_org_eclipse_ocl_options {
				__id = "org.eclipse.ocl.options"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.options"
				}
			}
			exports += new Package package_org_eclipse_ocl_parser {
				__id = "org.eclipse.ocl.parser"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.parser"
				}
			}
			exports += new Package package_org_eclipse_ocl_parser_backtracking {
				__id = "org.eclipse.ocl.parser.backtracking"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.parser.backtracking"
				}
			}
			exports += new Package package_org_eclipse_ocl_types {
				__id = "org.eclipse.ocl.types"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types"
				}
			}
			exports += new Package package_org_eclipse_ocl_types_impl {
				__id = "org.eclipse.ocl.types.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_types_operations {
				__id = "org.eclipse.ocl.types.operations"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types.operations"
				}
			}
			exports += new Package package_org_eclipse_ocl_types_util {
				__id = "org.eclipse.ocl.types.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.types.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_util {
				__id = "org.eclipse.ocl.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.util"
				}
			}
			exports += new Package package_org_eclipse_ocl_utilities {
				__id = "org.eclipse.ocl.utilities"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.utilities"
				}
			}
			exports += new Package package_org_eclipse_ocl_utilities_impl {
				__id = "org.eclipse.ocl.utilities.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.utilities.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_utilities_util {
				__id = "org.eclipse.ocl.utilities.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.utilities.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_eclipse_ocl_parser
				target = package_lpg_lpgjavaruntime
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_eclipse_ocl_parser
				target = package_com_ibm_icu_lang
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_eclipse_ocl_parser
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
	}

	features += new Feature feature_fr_irisa_triskell_kermeta_ecore {
		__id = "fr.irisa.triskell.kermeta.ecore"
		identifier = new PlatformID {
			value = "fr.irisa.triskell.kermeta.ecore"
		}
		version = new Version {
			value = "1.3.2"
		}
		provider = vendor_IRISA_INRIA
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright : IRISA / INRIA / Universite de Rennes 1. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "KerMeta MDK for Ecore is a set of tools for manipulation & processing of Ecore files."
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_ecore {
			__id = "fr.irisa.triskell.kermeta.ecore"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.ecore"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ecore
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ecore
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ecore
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ecore
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ecore
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ecore
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ecore {
				__id = "fr.irisa.triskell.kermeta.ecore"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ecore"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ecore_wrapper {
				__id = "fr.irisa.triskell.kermeta.ecore.wrapper"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ecore.wrapper"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_ecore_documentation {
			__id = "org.kermeta.ecore.documentation"
			identifier = new PlatformID {
				value = "org.kermeta.ecore.documentation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			ownedEntities += new Document {
				__id = "org.kermeta.ecore.documentation"
				identifier = new PlatformID {
					value = "org.kermeta.ecore.documentation"
				}
				locator = new EFSLocator {
					value = "org.kermeta.ecore.documentation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ecore_documentation
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ecore_documentation
				target = plugin_org_eclipse_core_runtime
			}
		}
		sites += site__www_kermeta_org_update
	}

	features += new Feature feature_org_eclipse_emf_ecoretools {
		__id = "org.eclipse.emf.ecoretools"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ecoretools"
		}
		version = new Version {
			value = "0.9.0.v200906221231"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007, 2009 Anyware Technologies All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Ecore Tools component (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools {
			__id = "org.eclipse.emf.ecoretools"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_org_eclipse_emf_ecoretools_internal {
				__id = "org.eclipse.emf.ecoretools.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_internal_actions {
				__id = "org.eclipse.emf.ecoretools.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_internal_ui {
				__id = "org.eclipse.emf.ecoretools.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_internal_views {
				__id = "org.eclipse.emf.ecoretools.internal.views"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.internal.views"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_diagram {
			__id = "org.eclipse.emf.ecoretools.diagram"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.diagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_emf_ecoretools_diagram_ui_outline
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_emf_validation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram
				target = plugin_org_eclipse_draw2d
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_edit_commands {
				__id = "org.eclipse.emf.ecoretools.diagram.edit.commands"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.edit.commands"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_edit_dialogs {
				__id = "org.eclipse.emf.ecoretools.diagram.edit.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.edit.dialogs"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_edit_figures {
				__id = "org.eclipse.emf.ecoretools.diagram.edit.figures"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.edit.figures"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_edit_helpers {
				__id = "org.eclipse.emf.ecoretools.diagram.edit.helpers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.edit.helpers"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_edit_parts {
				__id = "org.eclipse.emf.ecoretools.diagram.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_edit_policies {
				__id = "org.eclipse.emf.ecoretools.diagram.edit.policies"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.edit.policies"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_expressions {
				__id = "org.eclipse.emf.ecoretools.diagram.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.expressions"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_navigator {
				__id = "org.eclipse.emf.ecoretools.diagram.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.navigator"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_outline {
				__id = "org.eclipse.emf.ecoretools.diagram.outline"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.outline"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_parsers {
				__id = "org.eclipse.emf.ecoretools.diagram.parsers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.parsers"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_part {
				__id = "org.eclipse.emf.ecoretools.diagram.part"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.part"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_preferences {
				__id = "org.eclipse.emf.ecoretools.diagram.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.preferences"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_providers {
				__id = "org.eclipse.emf.ecoretools.diagram.providers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.providers"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_sheet {
				__id = "org.eclipse.emf.ecoretools.diagram.sheet"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.sheet"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_view_factories {
				__id = "org.eclipse.emf.ecoretools.diagram.view.factories"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.view.factories"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_properties {
			__id = "org.eclipse.emf.ecoretools.properties"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.properties"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_properties
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_properties
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_properties
				target = plugin_org_eclipse_emf_ecoretools_tabbedproperties
			}
			exports += new Package package_org_eclipse_emf_ecoretools_properties_internal {
				__id = "org.eclipse.emf.ecoretools.properties.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.properties.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_properties_internal_metadata {
				__id = "org.eclipse.emf.ecoretools.properties.internal.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.properties.internal.metadata"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_properties_internal_sections {
				__id = "org.eclipse.emf.ecoretools.properties.internal.sections"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.properties.internal.sections"
				}
			}
		}
		sites += site__www_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_mwe_core {
		__id = "org.eclipse.emf.mwe.core"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mwe.core"
		}
		version = new Version {
			value = "0.7.2.v200908120417"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Modeling Workflow Engine Core (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_core {
			__id = "org.eclipse.emf.mwe.core"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_core
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_core
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.7.0'"
				maxVersion = "'1.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_core
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_core
				target = plugin_org_apache_commons_cli
			}
			exports += new Package package_org_eclipse_emf_mwe_core {
				__id = "org.eclipse.emf.mwe.core"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_ant {
				__id = "org.eclipse.emf.mwe.core.ant"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.ant"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_ao {
				__id = "org.eclipse.emf.mwe.core.ao"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.ao"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_config {
				__id = "org.eclipse.emf.mwe.core.config"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.config"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_container {
				__id = "org.eclipse.emf.mwe.core.container"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.container"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_customizer {
				__id = "org.eclipse.emf.mwe.core.customizer"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.customizer"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_debug_model {
				__id = "org.eclipse.emf.mwe.core.debug.model"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.debug.model"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_debug_processing {
				__id = "org.eclipse.emf.mwe.core.debug.processing"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.debug.processing"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_issues {
				__id = "org.eclipse.emf.mwe.core.issues"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.issues"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_lib {
				__id = "org.eclipse.emf.mwe.core.lib"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.lib"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_monitor {
				__id = "org.eclipse.emf.mwe.core.monitor"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.monitor"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_core_resources {
				__id = "org.eclipse.emf.mwe.core.resources"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.core.resources"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core {
				__id = "org.eclipse.emf.mwe.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_ast {
				__id = "org.eclipse.emf.mwe.internal.core.ast"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.ast"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_ast_parser {
				__id = "org.eclipse.emf.mwe.internal.core.ast.parser"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.ast.parser"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_ast_util {
				__id = "org.eclipse.emf.mwe.internal.core.ast.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.ast.util"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_ast_util_converter {
				__id = "org.eclipse.emf.mwe.internal.core.ast.util.converter"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.ast.util.converter"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_debug_communication {
				__id = "org.eclipse.emf.mwe.internal.core.debug.communication"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.debug.communication"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_debug_communication_packages {
				__id = "org.eclipse.emf.mwe.internal.core.debug.communication.packages"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.debug.communication.packages"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_debug_model {
				__id = "org.eclipse.emf.mwe.internal.core.debug.model"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.debug.model"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_debug_mwe {
				__id = "org.eclipse.emf.mwe.internal.core.debug.mwe"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.debug.mwe"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_debug_processing {
				__id = "org.eclipse.emf.mwe.internal.core.debug.processing"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.debug.processing"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_debug_processing_handlers {
				__id = "org.eclipse.emf.mwe.internal.core.debug.processing.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.debug.processing.handlers"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_core_util {
				__id = "org.eclipse.emf.mwe.internal.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.core.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_utils {
			__id = "org.eclipse.emf.mwe.utils"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.utils"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_utils
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_utils
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_utils
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			exports += new Package package_org_eclipse_emf_mwe_utils {
				__id = "org.eclipse.emf.mwe.utils"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.utils"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_commons_cli {
			__id = "org.apache.commons.cli"
			identifier = new PlatformID {
				value = "org.apache.commons.cli"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.v20080604-1500"
			}
			vendor = vendor_providerName
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_cli
				target = plugin_org_apache_commons_lang
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_cli
				target = plugin_org_apache_commons_logging
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_apache_commons_cli {
				__id = "org.apache.commons.cli"
				identifier = new PlatformID {
					value = "org.apache.commons.cli"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_commons_lang {
			__id = "org.apache.commons.lang"
			identifier = new PlatformID {
				value = "org.apache.commons.lang"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.3.0.v200803061910"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_lang {
				__id = "org.apache.commons.lang"
				identifier = new PlatformID {
					value = "org.apache.commons.lang"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_builder {
				__id = "org.apache.commons.lang.builder"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.builder"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_enum {
				__id = "org.apache.commons.lang.enum"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.enum"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_enums {
				__id = "org.apache.commons.lang.enums"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.enums"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_exception {
				__id = "org.apache.commons.lang.exception"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.exception"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_math {
				__id = "org.apache.commons.lang.math"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.math"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_mutable {
				__id = "org.apache.commons.lang.mutable"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.mutable"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_text {
				__id = "org.apache.commons.lang.text"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.text"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_time {
				__id = "org.apache.commons.lang.time"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.time"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_acceleo {
		__id = "org.eclipse.acceleo"
		identifier = new PlatformID {
			value = "org.eclipse.acceleo"
		}
		version = new Version {
			value = "0.8.1.v200909161003"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2008, 2009 Obeo. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "MOF models to text Transformation Language"
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_engine {
			__id = "org.eclipse.acceleo.engine"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.engine"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_engine
				target = plugin_org_eclipse_acceleo_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_engine
				target = plugin_org_eclipse_acceleo_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_engine
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_engine
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_engine
				target = plugin_org_eclipse_osgi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_engine
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			exports += new Package package_org_eclipse_acceleo_engine {
				__id = "org.eclipse.acceleo.engine"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.engine"
				}
			}
			exports += new Package package_org_eclipse_acceleo_engine_event {
				__id = "org.eclipse.acceleo.engine.event"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.engine.event"
				}
			}
			exports += new Package package_org_eclipse_acceleo_engine_generation {
				__id = "org.eclipse.acceleo.engine.generation"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.engine.generation"
				}
			}
			exports += new Package package_org_eclipse_acceleo_engine_internal_debug {
				__id = "org.eclipse.acceleo.engine.internal.debug"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.engine.internal.debug"
				}
			}
			exports += new Package package_org_eclipse_acceleo_engine_internal_environment {
				__id = "org.eclipse.acceleo.engine.internal.environment"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.engine.internal.environment"
				}
			}
			exports += new Package package_org_eclipse_acceleo_engine_internal_evaluation {
				__id = "org.eclipse.acceleo.engine.internal.evaluation"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.engine.internal.evaluation"
				}
			}
			exports += new Package package_org_eclipse_acceleo_engine_service {
				__id = "org.eclipse.acceleo.engine.service"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.engine.service"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_ide_ui {
			__id = "org.eclipse.acceleo.ide.ui"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.ide.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_acceleo_parser
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_acceleo_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_pde_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_acceleo_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_search
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_acceleo_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_emf_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_emf_ecore_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_jdt_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_jdt_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_search
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ide_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			exports += new Package package_org_eclipse_acceleo_ide_ui {
				__id = "org.eclipse.acceleo.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_acceleo_ide_ui_launching_strategy {
				__id = "org.eclipse.acceleo.ide.ui.launching.strategy"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.ide.ui.launching.strategy"
				}
			}
			exports += new Package package_org_eclipse_acceleo_ide_ui_natures {
				__id = "org.eclipse.acceleo.ide.ui.natures"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.ide.ui.natures"
				}
			}
			exports += new Package package_org_eclipse_acceleo_ide_ui_resources {
				__id = "org.eclipse.acceleo.ide.ui.resources"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.ide.ui.resources"
				}
			}
			exports += new Package package_org_eclipse_acceleo_ide_ui_wizards_newfile_example {
				__id = "org.eclipse.acceleo.ide.ui.wizards.newfile.example"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.ide.ui.wizards.newfile.example"
				}
			}
			exports += new Package package_org_eclipse_acceleo_internal_ide_ui_editors_template {
				__id = "org.eclipse.acceleo.internal.ide.ui.editors.template"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.internal.ide.ui.editors.template"
				}
			}
			exports += new Package package_org_eclipse_acceleo_internal_ide_ui_editors_template_rules {
				__id = "org.eclipse.acceleo.internal.ide.ui.editors.template.rules"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.internal.ide.ui.editors.template.rules"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_model {
			__id = "org.eclipse.acceleo.model"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_model
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_model
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_model
				target = plugin_org_eclipse_ocl_ecore
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_acceleo_mtl_0_8_0_ {
				__id = "_www_eclipse_org_acceleo_mtl_0_8_0_"
				identifier = new PlatformID {
					value = "_www_eclipse_org_acceleo_mtl_0_8_0_"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/acceleo/mtl/0.8.0/"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_acceleo_mtl_0_8_0_ {
					__id = "conformsTo__www_eclipse_org_acceleo_mtl_0_8_0_"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_acceleo_mtl_0_8_0_"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/acceleo/mtl/0.8.0/.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_acceleo_model_mtl {
				__id = "org.eclipse.acceleo.model.mtl"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.model.mtl"
				}
			}
			exports += new Package package_org_eclipse_acceleo_model_mtl_resource {
				__id = "org.eclipse.acceleo.model.mtl.resource"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.model.mtl.resource"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_parser {
			__id = "org.eclipse.acceleo.parser"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.parser"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_parser
				target = plugin_org_eclipse_acceleo_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_parser
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_parser
				target = plugin_org_eclipse_acceleo_common
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_acceleo_mtl_cst_0_8_0 {
				__id = "_www_eclipse_org_acceleo_mtl_cst_0_8_0"
				identifier = new PlatformID {
					value = "_www_eclipse_org_acceleo_mtl_cst_0_8_0"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/acceleo/mtl/cst/0.8.0"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_acceleo_mtl_cst_0_8_0 {
					__id = "conformsTo__www_eclipse_org_acceleo_mtl_cst_0_8_0"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_acceleo_mtl_cst_0_8_0"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/acceleo/mtl/cst/0.8.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_acceleo_parser_cst {
				__id = "org.eclipse.acceleo.parser.cst"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.parser.cst"
				}
			}
			exports += new Package package_org_eclipse_acceleo_parser {
				__id = "org.eclipse.acceleo.parser"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.parser"
				}
			}
			exports += new Package package_org_eclipse_acceleo_internal_parser_ast {
				__id = "org.eclipse.acceleo.internal.parser.ast"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.internal.parser.ast"
				}
			}
			exports += new Package package_org_eclipse_acceleo_internal_parser_ast_ocl {
				__id = "org.eclipse.acceleo.internal.parser.ast.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.internal.parser.ast.ocl"
				}
			}
			exports += new Package package_org_eclipse_acceleo_internal_parser_cst {
				__id = "org.eclipse.acceleo.internal.parser.cst"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.internal.parser.cst"
				}
			}
			exports += new Package package_org_eclipse_acceleo_internal_parser_cst_utils {
				__id = "org.eclipse.acceleo.internal.parser.cst.utils"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.internal.parser.cst.utils"
				}
			}
			exports += new Package package_org_eclipse_acceleo_ide_ui_tests_ {
				__id = "org.eclipse.acceleo.ide.ui.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.ide.ui.tests'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_common {
			__id = "org.eclipse.acceleo.common"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_common
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_common
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_common
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_common
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_common
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_common
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			exports += new Package package_org_eclipse_acceleo_common {
				__id = "org.eclipse.acceleo.common"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.common"
				}
			}
			exports += new Package package_org_eclipse_acceleo_common_internal_utils {
				__id = "org.eclipse.acceleo.common.internal.utils"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.common.internal.utils"
				}
			}
			exports += new Package package_org_eclipse_acceleo_common_internal_utils_workspace {
				__id = "org.eclipse.acceleo.common.internal.utils.workspace"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.common.internal.utils.workspace"
				}
			}
			exports += new Package package_org_eclipse_acceleo_common_library_connector {
				__id = "org.eclipse.acceleo.common.library.connector"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.common.library.connector"
				}
			}
			exports += new Package package_org_eclipse_acceleo_common_utils {
				__id = "org.eclipse.acceleo.common.utils"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.common.utils"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_doc {
			__id = "org.eclipse.acceleo.doc"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.acceleo.doc"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.acceleo.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_doc
				target = plugin_org_eclipse_help
			}
		}
		sites += site__download_eclipse_org_modeling_m2t_updates_site_xml
	}

	features += new Feature feature_org_eclipse_mylyn_feature {
		__id = "org.eclipse.mylyn_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn_feature"
		}
		version = new Version {
			value = "3.2.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Provides the Task List for task and time management."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn {
			__id = "org.eclipse.mylyn"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_context_core {
			__id = "org.eclipse.mylyn.context.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.context.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_core
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_core
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_context_core {
				__id = "org.eclipse.mylyn.context.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_core {
				__id = "org.eclipse.mylyn.internal.context.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_tasks_ui {
			__id = "org.eclipse.mylyn.tasks.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.tasks.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_core_net
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_search
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_ui_browser
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_mylyn_monitor_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_mylyn_commons_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = plugin_org_apache_commons_logging
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.4'"
				maxVersion = "'1.0.4'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_provisional_tasks_ui_wizards {
				__id = "org.eclipse.mylyn.internal.provisional.tasks.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.provisional.tasks.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui {
				__id = "org.eclipse.mylyn.internal.tasks.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_actions {
				__id = "org.eclipse.mylyn.internal.tasks.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_commands {
				__id = "org.eclipse.mylyn.internal.tasks.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_dialogs {
				__id = "org.eclipse.mylyn.internal.tasks.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_editors {
				__id = "org.eclipse.mylyn.internal.tasks.ui.editors"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.editors"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_notifications {
				__id = "org.eclipse.mylyn.internal.tasks.ui.notifications"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.notifications"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_preferences {
				__id = "org.eclipse.mylyn.internal.tasks.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_properties {
				__id = "org.eclipse.mylyn.internal.tasks.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_search {
				__id = "org.eclipse.mylyn.internal.tasks.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.search"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_util {
				__id = "org.eclipse.mylyn.internal.tasks.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_views {
				__id = "org.eclipse.mylyn.internal.tasks.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.views"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_wizards {
				__id = "org.eclipse.mylyn.internal.tasks.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_ui_workingsets {
				__id = "org.eclipse.mylyn.internal.tasks.ui.workingsets"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.ui.workingsets"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_ui {
				__id = "org.eclipse.mylyn.tasks.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_ui_editors {
				__id = "org.eclipse.mylyn.tasks.ui.editors"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.ui.editors"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_ui_wizards {
				__id = "org.eclipse.mylyn.tasks.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.ui.wizards"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_ui
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_monitor_ui {
			__id = "org.eclipse.mylyn.monitor.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.monitor.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_ui
				target = plugin_org_eclipse_ui_browser
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_monitor_ui {
				__id = "org.eclipse.mylyn.internal.monitor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.monitor.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_ui {
				__id = "org.eclipse.mylyn.monitor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_tasks_core {
			__id = "org.eclipse.mylyn.tasks.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.tasks.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_core
				target = plugin_org_eclipse_core_net
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_core
				target = plugin_org_eclipse_equinox_security
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_core
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_core
				target = plugin_org_eclipse_mylyn_commons_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_provisional_tasks_core {
				__id = "org.eclipse.mylyn.internal.provisional.tasks.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.provisional.tasks.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_core {
				__id = "org.eclipse.mylyn.internal.tasks.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_core_data {
				__id = "org.eclipse.mylyn.internal.tasks.core.data"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.core.data"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_core_externalization {
				__id = "org.eclipse.mylyn.internal.tasks.core.externalization"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.core.externalization"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_core_sync {
				__id = "org.eclipse.mylyn.internal.tasks.core.sync"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.core.sync"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_core {
				__id = "org.eclipse.mylyn.tasks.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_core_data {
				__id = "org.eclipse.mylyn.tasks.core.data"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.core.data"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_core_sync {
				__id = "org.eclipse.mylyn.tasks.core.sync"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.core.sync"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_monitor_core {
			__id = "org.eclipse.mylyn.monitor.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.monitor.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_monitor_core
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_monitor_core {
				__id = "org.eclipse.mylyn.internal.monitor.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.monitor.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_monitor_core_collection {
				__id = "org.eclipse.mylyn.internal.monitor.core.collection"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.monitor.core.collection"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_core {
				__id = "org.eclipse.mylyn.monitor.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_compatibility {
			__id = "org.eclipse.mylyn.compatibility"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.compatibility"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_compatibility
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_compatibility
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_eclipse_mylyn_internal_compatibility {
				__id = "org.eclipse.mylyn.internal.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.compatibility"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_commons_logging {
			__id = "org.apache.commons.logging"
			identifier = new PlatformID {
				value = "org.apache.commons.logging"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.1.v200904062255"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_logging {
				__id = "org.apache.commons.logging"
				identifier = new PlatformID {
					value = "org.apache.commons.logging"
				}
				version = new Version {
					value = "1.1.1"
				}
			}
			exports += new Package package_org_apache_commons_logging_impl {
				__id = "org.apache.commons.logging.impl"
				identifier = new PlatformID {
					value = "org.apache.commons.logging.impl"
				}
				version = new Version {
					value = "1.1.1"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_commons_codec {
			__id = "org.apache.commons.codec"
			identifier = new PlatformID {
				value = "org.apache.commons.codec"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.0.v20080530-1600"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_codec {
				__id = "org.apache.commons.codec"
				identifier = new PlatformID {
					value = "org.apache.commons.codec"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_binary {
				__id = "org.apache.commons.codec.binary"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.binary"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_digest {
				__id = "org.apache.commons.codec.digest"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.digest"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_language {
				__id = "org.apache.commons.codec.language"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.language"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_apache_commons_codec_net {
				__id = "org.apache.commons.codec.net"
				identifier = new PlatformID {
					value = "org.apache.commons.codec.net"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_commons_httpclient {
			__id = "org.apache.commons.httpclient"
			identifier = new PlatformID {
				value = "org.apache.commons.httpclient"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.1.0.v20080605-1935"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_httpclient {
				__id = "org.apache.commons.httpclient"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_auth {
				__id = "org.apache.commons.httpclient.auth"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.auth"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_cookie {
				__id = "org.apache.commons.httpclient.cookie"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.cookie"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_methods {
				__id = "org.apache.commons.httpclient.methods"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.methods"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_methods_multipart {
				__id = "org.apache.commons.httpclient.methods.multipart"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.methods.multipart"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_params {
				__id = "org.apache.commons.httpclient.params"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.params"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_protocol {
				__id = "org.apache.commons.httpclient.protocol"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.protocol"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_apache_commons_httpclient_util {
				__id = "org.apache.commons.httpclient.util"
				identifier = new PlatformID {
					value = "org.apache.commons.httpclient.util"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_crypto
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_crypto_spec
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_net
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_javax_net_ssl
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_codec
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.2.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_codec_binary
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.2.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_codec_net
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.2.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_commons_httpclient
				target = package_org_apache_commons_logging
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.4"
				maxVersion = "2.0.0"
			}
		}
		plugins += new Plugin plugin_org_apache_commons_lang {
			__id = "org.apache.commons.lang"
			identifier = new PlatformID {
				value = "org.apache.commons.lang"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.3.0.v200803061910"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_commons_lang {
				__id = "org.apache.commons.lang"
				identifier = new PlatformID {
					value = "org.apache.commons.lang"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_builder {
				__id = "org.apache.commons.lang.builder"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.builder"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_enum {
				__id = "org.apache.commons.lang.enum"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.enum"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_enums {
				__id = "org.apache.commons.lang.enums"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.enums"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_exception {
				__id = "org.apache.commons.lang.exception"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.exception"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_math {
				__id = "org.apache.commons.lang.math"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.math"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_mutable {
				__id = "org.apache.commons.lang.mutable"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.mutable"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_text {
				__id = "org.apache.commons.lang.text"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.text"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
			exports += new Package package_org_apache_commons_lang_time {
				__id = "org.apache.commons.lang.time"
				identifier = new PlatformID {
					value = "org.apache.commons.lang.time"
				}
				version = new Version {
					value = "2.3.0"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_commons_core {
			__id = "org.eclipse.mylyn.commons.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.commons.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_core
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_eclipse_mylyn_commons_core {
				__id = "org.eclipse.mylyn.commons.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_commons_core {
				__id = "org.eclipse.mylyn.internal.commons.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.commons.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_provisional_commons_core {
				__id = "org.eclipse.mylyn.internal.provisional.commons.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.provisional.commons.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_bugzilla_ide {
				__id = "org.eclipse.mylyn.bugzilla.ide"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.bugzilla.ide"
				}
			}
			exports += new Package package_org_eclipse_mylyn_bugzilla_tests {
				__id = "org.eclipse.mylyn.bugzilla.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.bugzilla.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_bugzilla_ui {
				__id = "org.eclipse.mylyn.bugzilla.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.bugzilla.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_core {
				__id = "org.eclipse.mylyn.commons.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_net {
				__id = "org.eclipse.mylyn.commons.net"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.net"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_tests {
				__id = "org.eclipse.mylyn.commons.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_ui {
				__id = "org.eclipse.mylyn.commons.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_compatibility {
				__id = "org.eclipse.mylyn.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.compatibility"
				}
			}
			exports += new Package package_org_eclipse_mylyn_context_core {
				__id = "org.eclipse.mylyn.context.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_context_tests {
				__id = "org.eclipse.mylyn.context.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_context_ui {
				__id = "org.eclipse.mylyn.context.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_help_ui {
				__id = "org.eclipse.mylyn.help.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.help.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_ide_ant {
				__id = "org.eclipse.mylyn.ide.ant"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ant"
				}
			}
			exports += new Package package_org_eclipse_mylyn_ide_tests {
				__id = "org.eclipse.mylyn.ide.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_ide_ui {
				__id = "org.eclipse.mylyn.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_java_tasks {
				__id = "org.eclipse.mylyn.java.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.java.tasks"
				}
			}
			exports += new Package package_org_eclipse_mylyn_java_tests {
				__id = "org.eclipse.mylyn.java.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.java.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_java_ui {
				__id = "org.eclipse.mylyn.java.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.java.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_jira_core {
				__id = "org.eclipse.mylyn.jira.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.jira.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_jira_tests {
				__id = "org.eclipse.mylyn.jira.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.jira.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_jira_ui {
				__id = "org.eclipse.mylyn.jira.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.jira.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_core {
				__id = "org.eclipse.mylyn.monitor.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_reports {
				__id = "org.eclipse.mylyn.monitor.reports"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.reports"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_tests {
				__id = "org.eclipse.mylyn.monitor.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_ui {
				__id = "org.eclipse.mylyn.monitor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_usage {
				__id = "org.eclipse.mylyn.monitor.usage"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.usage"
				}
			}
			exports += new Package package_org_eclipse_mylyn_pde_ui {
				__id = "org.eclipse.mylyn.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_resources_tests {
				__id = "org.eclipse.mylyn.resources.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.resources.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_resources_ui {
				__id = "org.eclipse.mylyn.resources.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.resources.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_sandbox_dev {
				__id = "org.eclipse.mylyn.sandbox.dev"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.sandbox.dev"
				}
			}
			exports += new Package package_org_eclipse_mylyn_sandbox_tests {
				__id = "org.eclipse.mylyn.sandbox.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.sandbox.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_sandbox_ui {
				__id = "org.eclipse.mylyn.sandbox.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.sandbox.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_bugs {
				__id = "org.eclipse.mylyn.tasks.bugs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.bugs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_core {
				__id = "org.eclipse.mylyn.tasks.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_tests {
				__id = "org.eclipse.mylyn.tasks.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_ui {
				__id = "org.eclipse.mylyn.tasks.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_cvs {
				__id = "org.eclipse.mylyn.team.cvs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.cvs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_tests {
				__id = "org.eclipse.mylyn.team.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_ui {
				__id = "org.eclipse.mylyn.team.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tests {
				__id = "org.eclipse.mylyn.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_core {
				__id = "org.eclipse.mylyn.trac.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_tests {
				__id = "org.eclipse.mylyn.trac.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_ui {
				__id = "org.eclipse.mylyn.trac.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_wiki {
				__id = "org.eclipse.mylyn.trac.wiki"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.wiki"
				}
			}
			exports += new Package package_org_eclipse_mylyn_web_tasks {
				__id = "org.eclipse.mylyn.web.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.web.tasks"
				}
			}
			exports += new Package package_org_eclipse_mylyn_web_ui {
				__id = "org.eclipse.mylyn.web.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.web.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_tracwiki_core {
				__id = "org.eclipse.mylyn.wikitext.tracwiki.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.tracwiki.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_tracwiki_ui {
				__id = "org.eclipse.mylyn.wikitext.tracwiki.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.tracwiki.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_twiki_core {
				__id = "org.eclipse.mylyn.wikitext.twiki.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.twiki.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_twiki_ui {
				__id = "org.eclipse.mylyn.wikitext.twiki.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.twiki.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_wikitext_ui {
				__id = "org.eclipse.mylyn.wikitext.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.wikitext.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_xplanner_core {
				__id = "org.eclipse.mylyn.xplanner.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.xplanner.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_xplanner_tests {
				__id = "org.eclipse.mylyn.xplanner.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.xplanner.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_xplanner_ui_ {
				__id = "org.eclipse.mylyn.xplanner.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.xplanner.ui'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_commons_ui {
			__id = "org.eclipse.mylyn.commons.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.commons.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_ui
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_ui
				target = plugin_org_eclipse_ui_browser
			}
			exports += new Package package_org_eclipse_mylyn_internal_commons_ui {
				__id = "org.eclipse.mylyn.internal.commons.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.commons.ui"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_jobs {
				__id = "org.eclipse.core.runtime.jobs"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.jobs"
				}
			}
			exports += new Package package_org_eclipse_ui_plugin {
				__id = "org.eclipse.ui.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.ui.plugin"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_osgi_framework {
				__id = "org.osgi.framework"
				identifier = new PlatformID {
					value = "org.osgi.framework"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets_ {
				__id = "org.eclipse.swt.widgets'"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets'"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_provisional_commons_ui {
				__id = "org.eclipse.mylyn.internal.provisional.commons.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.provisional.commons.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_bugzilla_ui {
				__id = "org.eclipse.mylyn.bugzilla.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.bugzilla.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_core {
				__id = "org.eclipse.mylyn.commons.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_ui {
				__id = "org.eclipse.mylyn.commons.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_compatibility {
				__id = "org.eclipse.mylyn.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.compatibility"
				}
			}
			exports += new Package package_org_eclipse_mylyn_context_core {
				__id = "org.eclipse.mylyn.context.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_context_ui {
				__id = "org.eclipse.mylyn.context.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_help_ui {
				__id = "org.eclipse.mylyn.help.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.help.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_ide_ant {
				__id = "org.eclipse.mylyn.ide.ant"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ant"
				}
			}
			exports += new Package package_org_eclipse_mylyn_ide_ui {
				__id = "org.eclipse.mylyn.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_java_ui {
				__id = "org.eclipse.mylyn.java.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.java.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_jira_core {
				__id = "org.eclipse.mylyn.jira.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.jira.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_jira_ui {
				__id = "org.eclipse.mylyn.jira.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.jira.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_core {
				__id = "org.eclipse.mylyn.monitor.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_reports {
				__id = "org.eclipse.mylyn.monitor.reports"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.reports"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_server {
				__id = "org.eclipse.mylyn.monitor.server"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.server"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_study {
				__id = "org.eclipse.mylyn.monitor.study"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.study"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_ui {
				__id = "org.eclipse.mylyn.monitor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_usage {
				__id = "org.eclipse.mylyn.monitor.usage"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.usage"
				}
			}
			exports += new Package package_org_eclipse_mylyn_pde_ui {
				__id = "org.eclipse.mylyn.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_resources_ui {
				__id = "org.eclipse.mylyn.resources.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.resources.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_sandbox_dev {
				__id = "org.eclipse.mylyn.sandbox.dev"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.sandbox.dev"
				}
			}
			exports += new Package package_org_eclipse_mylyn_sandbox_ui {
				__id = "org.eclipse.mylyn.sandbox.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.sandbox.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_bugs {
				__id = "org.eclipse.mylyn.tasks.bugs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.bugs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_core {
				__id = "org.eclipse.mylyn.tasks.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_ui {
				__id = "org.eclipse.mylyn.tasks.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_cvs {
				__id = "org.eclipse.mylyn.team.cvs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.cvs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_ui {
				__id = "org.eclipse.mylyn.team.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_core {
				__id = "org.eclipse.mylyn.trac.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_tests {
				__id = "org.eclipse.mylyn.trac.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_ui {
				__id = "org.eclipse.mylyn.trac.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_wiki {
				__id = "org.eclipse.mylyn.trac.wiki"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.wiki"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_net {
				__id = "org.eclipse.mylyn.commons.net"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.net"
				}
			}
			exports += new Package package_org_eclipse_mylyn_web_tasks {
				__id = "org.eclipse.mylyn.web.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.web.tasks"
				}
			}
			exports += new Package package_org_eclipse_mylyn_web_ui {
				__id = "org.eclipse.mylyn.web.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.web.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_xplanner_core {
				__id = "org.eclipse.mylyn.xplanner.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.xplanner.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_xplanner_ui_ {
				__id = "org.eclipse.mylyn.xplanner.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.xplanner.ui'"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_org_eclipse_swt_events {
				__id = "org.eclipse.swt.events"
				identifier = new PlatformID {
					value = "org.eclipse.swt.events"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_jobs {
				__id = "org.eclipse.core.runtime.jobs"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.jobs"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_jface_viewers {
				__id = "org.eclipse.jface.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.viewers"
				}
			}
			exports += new Package package_org_eclipse_ui_dialogs {
				__id = "org.eclipse.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_org_eclipse_jface_dialogs_ {
				__id = "org.eclipse.jface.dialogs'"
				identifier = new PlatformID {
					value = "org.eclipse.jface.dialogs'"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_provisional_commons_ui_editor {
				__id = "org.eclipse.mylyn.internal.provisional.commons.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.provisional.commons.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_mylyn_bugzilla_ui {
				__id = "org.eclipse.mylyn.bugzilla.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.bugzilla.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_core {
				__id = "org.eclipse.mylyn.commons.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_ui {
				__id = "org.eclipse.mylyn.commons.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_compatibility {
				__id = "org.eclipse.mylyn.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.compatibility"
				}
			}
			exports += new Package package_org_eclipse_mylyn_context_core {
				__id = "org.eclipse.mylyn.context.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_context_ui {
				__id = "org.eclipse.mylyn.context.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_help_ui {
				__id = "org.eclipse.mylyn.help.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.help.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_ide_ant {
				__id = "org.eclipse.mylyn.ide.ant"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ant"
				}
			}
			exports += new Package package_org_eclipse_mylyn_ide_ui {
				__id = "org.eclipse.mylyn.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_java_ui {
				__id = "org.eclipse.mylyn.java.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.java.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_jira_core {
				__id = "org.eclipse.mylyn.jira.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.jira.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_jira_ui {
				__id = "org.eclipse.mylyn.jira.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.jira.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_core {
				__id = "org.eclipse.mylyn.monitor.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_reports {
				__id = "org.eclipse.mylyn.monitor.reports"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.reports"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_server {
				__id = "org.eclipse.mylyn.monitor.server"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.server"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_study {
				__id = "org.eclipse.mylyn.monitor.study"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.study"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_ui {
				__id = "org.eclipse.mylyn.monitor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_monitor_usage {
				__id = "org.eclipse.mylyn.monitor.usage"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.monitor.usage"
				}
			}
			exports += new Package package_org_eclipse_mylyn_pde_ui {
				__id = "org.eclipse.mylyn.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_resources_ui {
				__id = "org.eclipse.mylyn.resources.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.resources.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_sandbox_dev {
				__id = "org.eclipse.mylyn.sandbox.dev"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.sandbox.dev"
				}
			}
			exports += new Package package_org_eclipse_mylyn_sandbox_ui {
				__id = "org.eclipse.mylyn.sandbox.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.sandbox.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_bugs {
				__id = "org.eclipse.mylyn.tasks.bugs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.bugs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_core {
				__id = "org.eclipse.mylyn.tasks.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_tasks_ui {
				__id = "org.eclipse.mylyn.tasks.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.tasks.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_cvs {
				__id = "org.eclipse.mylyn.team.cvs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.cvs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_ui {
				__id = "org.eclipse.mylyn.team.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_core {
				__id = "org.eclipse.mylyn.trac.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_tests {
				__id = "org.eclipse.mylyn.trac.tests"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.tests"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_ui {
				__id = "org.eclipse.mylyn.trac.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_trac_wiki {
				__id = "org.eclipse.mylyn.trac.wiki"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.trac.wiki"
				}
			}
			exports += new Package package_org_eclipse_mylyn_commons_net {
				__id = "org.eclipse.mylyn.commons.net"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.net"
				}
			}
			exports += new Package package_org_eclipse_mylyn_web_tasks {
				__id = "org.eclipse.mylyn.web.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.web.tasks"
				}
			}
			exports += new Package package_org_eclipse_mylyn_web_ui {
				__id = "org.eclipse.mylyn.web.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.web.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_xplanner_core {
				__id = "org.eclipse.mylyn.xplanner.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.xplanner.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_xplanner_ui_ {
				__id = "org.eclipse.mylyn.xplanner.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.xplanner.ui'"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_org_eclipse_swt_events {
				__id = "org.eclipse.swt.events"
				identifier = new PlatformID {
					value = "org.eclipse.swt.events"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_jobs {
				__id = "org.eclipse.core.runtime.jobs"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.jobs"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_jface_viewers {
				__id = "org.eclipse.jface.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.viewers"
				}
			}
			exports += new Package package_org_eclipse_ui_dialogs {
				__id = "org.eclipse.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_org_eclipse_jface_dialogs_ {
				__id = "org.eclipse.jface.dialogs'"
				identifier = new PlatformID {
					value = "org.eclipse.jface.dialogs'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_commons_net {
			__id = "org.eclipse.mylyn.commons.net"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.commons.net"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.0.v20090617-0100-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_net
				target = plugin_org_apache_commons_codec
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.3.0'"
				maxVersion = "'1.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_net
				target = plugin_org_apache_commons_httpclient
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.1.0'"
				maxVersion = "'3.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_net
				target = plugin_org_apache_commons_lang
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.3.0'"
				maxVersion = "'2.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_net
				target = plugin_org_apache_commons_logging
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.4'"
				maxVersion = "'1.0.4'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_net
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_commons_net
				target = plugin_org_eclipse_core_net
			}
			exports += new Package package_org_eclipse_mylyn_commons_net {
				__id = "org.eclipse.mylyn.commons.net"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.commons.net"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_commons_net {
				__id = "org.eclipse.mylyn.internal.commons.net"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.commons.net"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_discovery_core {
			__id = "org.eclipse.mylyn.discovery.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.discovery.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_core
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.1.0'"
				maxVersion = "'3.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_core
				target = plugin_org_eclipse_mylyn_commons_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.1.0'"
				maxVersion = "'3.1.0'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_discovery_core {
				__id = "org.eclipse.mylyn.internal.discovery.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.discovery.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_discovery_core_model {
				__id = "org.eclipse.mylyn.internal.discovery.core.model"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.discovery.core.model"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_discovery_core_util {
				__id = "org.eclipse.mylyn.internal.discovery.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.discovery.core.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_discovery_ui {
			__id = "org.eclipse.mylyn.discovery.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.discovery.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_mylyn_discovery_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.4'"
				maxVersion = "'1.0.4'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_equinox_p2_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.4'"
				maxVersion = "'1.0.4'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_equinox_p2_metadata
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_equinox_p2_metadata_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_equinox_p2_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_equinox_p2_engine
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = plugin_org_eclipse_equinox_p2_director
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_discovery_ui {
				__id = "org.eclipse.mylyn.internal.discovery.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.discovery.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_discovery_ui_commands {
				__id = "org.eclipse.mylyn.internal.discovery.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.discovery.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_discovery_ui_util {
				__id = "org.eclipse.mylyn.internal.discovery.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.discovery.ui.util"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_discovery_ui_wizards {
				__id = "org.eclipse.mylyn.internal.discovery.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.discovery.ui.wizards"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_discovery_ui
				target = package_com_ibm_icu_text
			}
		}
		sites += site__download_eclipse_org_tools_mylyn_update_extras
		sites += site__download_eclipse_org_tools_mylyn_update_e3_4
	}

	features += new Feature feature_org_eclipse_gmf_doc {
		__id = "org.eclipse.gmf.doc"
		identifier = new PlatformID {
			value = "org.eclipse.gmf.doc"
		}
		version = new Version {
			value = "1.3.0.v20090729-2029-35-8s733L3H7L1737L"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2005 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Graphical Modeling Framework documentation."
		}
		plugins += new Plugin plugin_org_eclipse_gmf_doc {
			__id = "org.eclipse.gmf.doc"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.gmf.doc"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.gmf.doc"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_doc_ui {
			__id = "org.eclipse.gmf.doc.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.doc.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_doc_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_doc_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_doc_ui
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_doc_ui
				target = plugin_org_eclipse_gmf_graphdef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_doc_ui
				target = plugin_org_eclipse_gmf_bridge_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_doc_ui
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_doc_ui
				target = plugin_org_eclipse_gmf_tooldef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_internal_doc_ui {
				__id = "org.eclipse.gmf.internal.doc.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.doc.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_doc_ui_actions {
				__id = "org.eclipse.gmf.internal.doc.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.doc.ui.actions"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_mwe_examples {
		__id = "org.eclipse.emf.mwe.examples"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mwe.examples"
		}
		version = new Version {
			value = "0.7.2.v200908120417"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Modeling Workflow Engine Examples (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_examples {
			__id = "org.eclipse.emf.mwe.examples"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.examples"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xtext_docs {
		__id = "org.eclipse.xtext.docs"
		identifier = new PlatformID {
			value = "org.eclipse.xtext.docs"
		}
		version = new Version {
			value = "0.7.2.v200908120607"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Xtext documentation"
		}
		plugins += new Plugin plugin_org_eclipse_xtext_doc {
			__id = "org.eclipse.xtext.doc"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.doc"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.xtext.doc"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.xtext.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_doc
				target = plugin_org_eclipse_help
			}
		}
	}

	features += new Feature feature_fr_irisa_triskell_kermeta {
		__id = "fr.irisa.triskell.kermeta"
		identifier = new PlatformID {
			value = "fr.irisa.triskell.kermeta"
		}
		version = new Version {
			value = "1.3.2"
		}
		provider = vendor_IRISA_INRIA
		license = license__www_kermeta_org_
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright : IRISA / INRIA / Universite de Rennes 1. All rights reserved. KerMeta workbench and most of its plugins are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html Special note: KerMeta TouchGraph plugin is distributed under the terms of the GPL license."
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "KerMeta workbench and most of its plugins are distributed under the terms of the EPL licence. Special note: KerMeta TouchGraph plugin is distributed under the terms of the GPL license."
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta {
			__id = "fr.irisa.triskell.kermeta"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_gymnast_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_kermeta_merger
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_kermeta_log4j_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta
				target = plugin_org_eclipse_ui_intro
			}
			exports += new Package package_fr_irisa_triskell_kermeta {
				__id = "fr.irisa.triskell.kermeta"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_plugin {
				__id = "fr.irisa.triskell.kermeta.plugin"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.plugin"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_popup_actions {
				__id = "fr.irisa.triskell.kermeta.popup.actions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.popup.actions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_resources {
				__id = "fr.irisa.triskell.kermeta.resources"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.resources"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_tools_wizards {
				__id = "fr.irisa.triskell.kermeta.tools.wizards"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.tools.wizards"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_tools_wizards_dialogs {
				__id = "fr.irisa.triskell.kermeta.tools.wizards.dialogs"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.tools.wizards.dialogs"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_tools_wizards_util {
				__id = "fr.irisa.triskell.kermeta.tools.wizards.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.tools.wizards.util"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_texteditor {
			__id = "fr.irisa.triskell.kermeta.texteditor"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.texteditor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_emf_ecore_editor
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_fr_irisa_triskell_kermeta_model_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_kermeta_merger
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_gymnast_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_antlr_antlr2
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.7.7-3.0.0)'"
				maxVersion = "'[2.7.7-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_texteditor
				target = plugin_org_kermeta_log4j_util
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor {
				__id = "fr.irisa.triskell.kermeta.texteditor"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor_icons {
				__id = "fr.irisa.triskell.kermeta.texteditor.icons"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor.icons"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor_icons_blue {
				__id = "fr.irisa.triskell.kermeta.texteditor.icons.blue"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor.icons.blue"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor_icons_green {
				__id = "fr.irisa.triskell.kermeta.texteditor.icons.green"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor.icons.green"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor_icons_red {
				__id = "fr.irisa.triskell.kermeta.texteditor.icons.red"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor.icons.red"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor_icons_redblue {
				__id = "fr.irisa.triskell.kermeta.texteditor.icons.redblue"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor.icons.redblue"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor_icons_yellow {
				__id = "fr.irisa.triskell.kermeta.texteditor.icons.yellow"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor.icons.yellow"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_texteditor_outline {
				__id = "fr.irisa.triskell.kermeta.texteditor.outline"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.texteditor.outline"
				}
			}
			exports += new Package package_org_kermeta_texteditor {
				__id = "org.kermeta.texteditor"
				identifier = new PlatformID {
					value = "org.kermeta.texteditor"
				}
			}
			exports += new Package package_org_kermeta_texteditor_completion {
				__id = "org.kermeta.texteditor.completion"
				identifier = new PlatformID {
					value = "org.kermeta.texteditor.completion"
				}
			}
			exports += new Package package_org_kermeta_texteditor_folding {
				__id = "org.kermeta.texteditor.folding"
				identifier = new PlatformID {
					value = "org.kermeta.texteditor.folding"
				}
			}
			exports += new Package package_org_kermeta_texteditor_formatting {
				__id = "org.kermeta.texteditor.formatting"
				identifier = new PlatformID {
					value = "org.kermeta.texteditor.formatting"
				}
			}
			exports += new Package package_org_kermeta_texteditor_preferences {
				__id = "org.kermeta.texteditor.preferences"
				identifier = new PlatformID {
					value = "org.kermeta.texteditor.preferences"
				}
			}
			exports += new Package package_org_kermeta_texteditor_scanners {
				__id = "org.kermeta.texteditor.scanners"
				identifier = new PlatformID {
					value = "org.kermeta.texteditor.scanners"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_model_edit {
			__id = "fr.irisa.triskell.kermeta.model.edit"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.model.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_edit
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_edit
				target = plugin_fr_irisa_triskell_kermeta_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_edit
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_behavior_provider {
				__id = "fr.irisa.triskell.kermeta.language.behavior.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.behavior.provider"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_provider {
				__id = "fr.irisa.triskell.kermeta.language.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.provider"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_structure_provider {
				__id = "fr.irisa.triskell.kermeta.language.structure.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.structure.provider"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_provider {
				__id = "fr.irisa.triskell.kermeta.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.provider"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_model_editor {
			__id = "fr.irisa.triskell.kermeta.model.editor"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.model.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_fr_irisa_triskell_kermeta_model_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_org_eclipse_emf_ecore_editor
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_fr_irisa_triskell_kermeta_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model_editor
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_behavior_presentation {
				__id = "fr.irisa.triskell.kermeta.language.behavior.presentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.behavior.presentation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_presentation {
				__id = "fr.irisa.triskell.kermeta.language.presentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.presentation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_structure_presentation {
				__id = "fr.irisa.triskell.kermeta.language.structure.presentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.structure.presentation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_presentation {
				__id = "fr.irisa.triskell.kermeta.presentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.presentation"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_kpm {
			__id = "fr.irisa.triskell.kermeta.kpm"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.kpm"
			}
			state = : "State.active"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_kermeta_interest
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_kermeta_merger
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm
				target = plugin_org_kermeta_log4j_util
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kpm {
				__id = "_www_kermeta_org_kpm"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kpm"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kpm"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kpm {
					__id = "conformsTo__www_kermeta_org_kpm"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kpm"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kpm.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_fr_irisa_triskell_kermeta_kpm {
				__id = "fr.irisa.triskell.kermeta.kpm"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.kpm"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_kpm_impl {
				__id = "fr.irisa.triskell.kermeta.kpm.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.kpm.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_kpm_util {
				__id = "fr.irisa.triskell.kermeta.kpm.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.kpm.util"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_kpm_validation {
				__id = "fr.irisa.triskell.kermeta.kpm.validation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.kpm.validation"
				}
			}
			exports += new Package package_org_kermeta_kpm {
				__id = "org.kermeta.kpm"
				identifier = new PlatformID {
					value = "org.kermeta.kpm"
				}
			}
			exports += new Package package_org_kermeta_kpm_internal {
				__id = "org.kermeta.kpm.internal"
				identifier = new PlatformID {
					value = "org.kermeta.kpm.internal"
				}
			}
			exports += new Package package_org_kermeta_kpm_internal_builder {
				__id = "org.kermeta.kpm.internal.builder"
				identifier = new PlatformID {
					value = "org.kermeta.kpm.internal.builder"
				}
			}
			exports += new Package package_org_kermeta_kpm_preferences {
				__id = "org.kermeta.kpm.preferences"
				identifier = new PlatformID {
					value = "org.kermeta.kpm.preferences"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_kpm_actions {
			__id = "fr.irisa.triskell.kermeta.kpm.actions"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.kpm.actions"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_org_apache_ant
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_actions
				target = plugin_org_kermeta_log4j_util
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_kpm_edit {
			__id = "fr.irisa.triskell.kermeta.kpm.edit"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.kpm.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_edit
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_fr_irisa_triskell_kermeta_kpm_provider {
				__id = "fr.irisa.triskell.kermeta.kpm.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.kpm.provider"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_kpm_editor {
			__id = "fr.irisa.triskell.kermeta.kpm.editor"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.kpm.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_editor
				target = plugin_fr_irisa_triskell_kermeta_kpm_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_kpm_editor
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_fr_irisa_triskell_kermeta_kpm_presentation {
				__id = "fr.irisa.triskell.kermeta.kpm.presentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.kpm.presentation"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_eclipse_util {
			__id = "fr.irisa.triskell.eclipse.util"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.eclipse.util"
			}
			state = : "State.active"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_ui_cheatsheets
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_eclipse_util
				target = plugin_org_eclipse_ui_editors
			}
			exports += new Package package_fr_irisa_triskell_eclipse_console {
				__id = "fr.irisa.triskell.eclipse.console"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.console"
				}
			}
			exports += new Package package_fr_irisa_triskell_eclipse_console_messages {
				__id = "fr.irisa.triskell.eclipse.console.messages"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.console.messages"
				}
			}
			exports += new Package package_fr_irisa_triskell_eclipse_ecore {
				__id = "fr.irisa.triskell.eclipse.ecore"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.ecore"
				}
			}
			exports += new Package package_fr_irisa_triskell_eclipse_emf {
				__id = "fr.irisa.triskell.eclipse.emf"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.emf"
				}
			}
			exports += new Package package_fr_irisa_triskell_eclipse_plugin {
				__id = "fr.irisa.triskell.eclipse.plugin"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.plugin"
				}
			}
			exports += new Package package_fr_irisa_triskell_eclipse_resources {
				__id = "fr.irisa.triskell.eclipse.resources"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.resources"
				}
			}
			exports += new Package package_fr_irisa_triskell_eclipse_util_handlers {
				__id = "fr.irisa.triskell.eclipse.util.handlers"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.util.handlers"
				}
			}
			exports += new Package package_fr_irisa_triskell_eclipse_wizard {
				__id = "fr.irisa.triskell.eclipse.wizard"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.eclipse.wizard"
				}
			}
			exports += new Package package_fr_irisa_triskell_string {
				__id = "fr.irisa.triskell.string"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.string"
				}
			}
			exports += new Package package_org_kermeta_core_helper {
				__id = "org.kermeta.core.helper"
				identifier = new PlatformID {
					value = "org.kermeta.core.helper"
				}
			}
			exports += new Package package_org_kermeta_customidentity {
				__id = "org.kermeta.customidentity"
				identifier = new PlatformID {
					value = "org.kermeta.customidentity"
				}
			}
			exports += new Package package_org_kermeta_ecore_internal_model_helper {
				__id = "org.kermeta.ecore.internal.model.helper"
				identifier = new PlatformID {
					value = "org.kermeta.ecore.internal.model.helper"
				}
			}
			exports += new Package package_org_kermeta_ecore_model_helper {
				__id = "org.kermeta.ecore.model.helper"
				identifier = new PlatformID {
					value = "org.kermeta.ecore.model.helper"
				}
			}
			exports += new Package package_org_kermeta_jface_preference {
				__id = "org.kermeta.jface.preference"
				identifier = new PlatformID {
					value = "org.kermeta.jface.preference"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_io {
			__id = "fr.irisa.triskell.kermeta.io"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.io"
			}
			state = : "State.active"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_fr_irisa_triskell_kermeta_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_gymnast_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_eclipse_emf_ecoretools_registration
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_antlr_antlr2
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_io
				target = plugin_org_kermeta_log4j_util
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_io {
				__id = "_www_kermeta_org_io"
				identifier = new PlatformID {
					value = "_www_kermeta_org_io"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/io"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_io {
					__id = "conformsTo__www_kermeta_org_io"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_io"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/io.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_fr_irisa_triskell_kermeta_ast_helper {
				__id = "fr.irisa.triskell.kermeta.ast.helper"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ast.helper"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_constraintchecker {
				__id = "fr.irisa.triskell.kermeta.constraintchecker"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.constraintchecker"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_directedgraph {
				__id = "fr.irisa.triskell.kermeta.directedgraph"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.directedgraph"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_exceptions {
				__id = "fr.irisa.triskell.kermeta.exceptions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.exceptions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_exporter_ecore {
				__id = "fr.irisa.triskell.kermeta.exporter.ecore"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.exporter.ecore"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_exporter_km {
				__id = "fr.irisa.triskell.kermeta.exporter.km"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.exporter.km"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_loader_ecore {
				__id = "fr.irisa.triskell.kermeta.loader.ecore"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.loader.ecore"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_loader_expression {
				__id = "fr.irisa.triskell.kermeta.loader.expression"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.loader.expression"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_loader_java {
				__id = "fr.irisa.triskell.kermeta.loader.java"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.loader.java"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_loader_km {
				__id = "fr.irisa.triskell.kermeta.loader.km"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.loader.km"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_loader_kmt {
				__id = "fr.irisa.triskell.kermeta.loader.kmt"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.loader.kmt"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_modelhelper {
				__id = "fr.irisa.triskell.kermeta.modelhelper"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.modelhelper"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_parser {
				__id = "fr.irisa.triskell.kermeta.parser"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.parser"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_parser_gen_ast {
				__id = "fr.irisa.triskell.kermeta.parser.gen.ast"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.parser.gen.ast"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_parser_gen_parser {
				__id = "fr.irisa.triskell.kermeta.parser.gen.parser"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.parser.gen.parser"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_parser_helper {
				__id = "fr.irisa.triskell.kermeta.parser.helper"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.parser.helper"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_typechecker {
				__id = "fr.irisa.triskell.kermeta.typechecker"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.typechecker"
				}
			}
			exports += new Package package_org_kermeta_io {
				__id = "org.kermeta.io"
				identifier = new PlatformID {
					value = "org.kermeta.io"
				}
			}
			exports += new Package package_org_kermeta_io_impl {
				__id = "org.kermeta.io.impl"
				identifier = new PlatformID {
					value = "org.kermeta.io.impl"
				}
			}
			exports += new Package package_org_kermeta_io_plugin {
				__id = "org.kermeta.io.plugin"
				identifier = new PlatformID {
					value = "org.kermeta.io.plugin"
				}
			}
			exports += new Package package_org_kermeta_io_printer {
				__id = "org.kermeta.io.printer"
				identifier = new PlatformID {
					value = "org.kermeta.io.printer"
				}
			}
			exports += new Package package_org_kermeta_io_util {
				__id = "org.kermeta.io.util"
				identifier = new PlatformID {
					value = "org.kermeta.io.util"
				}
			}
			exports += new Package package_org_kermeta_io_util2 {
				__id = "org.kermeta.io.util2"
				identifier = new PlatformID {
					value = "org.kermeta.io.util2"
				}
			}
			exports += new Package package_org_kermeta_io_validation {
				__id = "org.kermeta.io.validation"
				identifier = new PlatformID {
					value = "org.kermeta.io.validation"
				}
			}
			exports += new Package package_org_kermeta_loader {
				__id = "org.kermeta.loader"
				identifier = new PlatformID {
					value = "org.kermeta.loader"
				}
			}
			exports += new Package package_org_kermeta_loader_kmt_fixer {
				__id = "org.kermeta.loader.kmt.fixer"
				identifier = new PlatformID {
					value = "org.kermeta.loader.kmt.fixer"
				}
			}
			exports += new Package package_org_kermeta_model {
				__id = "org.kermeta.model"
				identifier = new PlatformID {
					value = "org.kermeta.model"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_model {
			__id = "fr.irisa.triskell.kermeta.model"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.model"
			}
			state = : "State.active"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_model
				target = plugin_org_kermeta_log4j_util
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_language {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_language"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_language"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_structure"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_structure"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/structure"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/structure.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_fr_irisa_triskell_kermeta {
				__id = "fr.irisa.triskell.kermeta"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_dev_model {
				__id = "fr.irisa.triskell.kermeta.dev.model"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.dev.model"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_error {
				__id = "fr.irisa.triskell.kermeta.error"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.error"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_impl {
				__id = "fr.irisa.triskell.kermeta.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language {
				__id = "fr.irisa.triskell.kermeta.language"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_behavior {
				__id = "fr.irisa.triskell.kermeta.language.behavior"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.behavior"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_behavior_impl {
				__id = "fr.irisa.triskell.kermeta.language.behavior.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.behavior.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_behavior_util {
				__id = "fr.irisa.triskell.kermeta.language.behavior.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.behavior.util"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_behavior_validation {
				__id = "fr.irisa.triskell.kermeta.language.behavior.validation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.behavior.validation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_impl {
				__id = "fr.irisa.triskell.kermeta.language.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_structure {
				__id = "fr.irisa.triskell.kermeta.language.structure"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.structure"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_structure_impl {
				__id = "fr.irisa.triskell.kermeta.language.structure.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.structure.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_structure_util {
				__id = "fr.irisa.triskell.kermeta.language.structure.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.structure.util"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_structure_validation {
				__id = "fr.irisa.triskell.kermeta.language.structure.validation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.structure.validation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_util {
				__id = "fr.irisa.triskell.kermeta.language.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.util"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_language_validation {
				__id = "fr.irisa.triskell.kermeta.language.validation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.language.validation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_model_plugin {
				__id = "fr.irisa.triskell.kermeta.model.plugin"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.model.plugin"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_util {
				__id = "fr.irisa.triskell.kermeta.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.util"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_validation {
				__id = "fr.irisa.triskell.kermeta.validation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.validation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_visitor {
				__id = "fr.irisa.triskell.kermeta.visitor"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.visitor"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_ui {
			__id = "fr.irisa.triskell.kermeta.ui"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_fr_irisa_triskell_kermeta_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_fr_irisa_triskell_kermeta_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ui
				target = plugin_org_kermeta_log4j_util
			}
			exports += new Package package_fr_irisa_triskell_kermeta_actions {
				__id = "fr.irisa.triskell.kermeta.actions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.actions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui {
				__id = "fr.irisa.triskell.kermeta.ui"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_impl {
				__id = "fr.irisa.triskell.kermeta.ui.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_perspective {
				__id = "fr.irisa.triskell.kermeta.ui.perspective"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.perspective"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_preferences {
				__id = "fr.irisa.triskell.kermeta.ui.preferences"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.preferences"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_provider {
				__id = "fr.irisa.triskell.kermeta.ui.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.provider"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_textPresentation {
				__id = "fr.irisa.triskell.kermeta.ui.textPresentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.textPresentation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_util {
				__id = "fr.irisa.triskell.kermeta.ui.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.util"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_validation {
				__id = "fr.irisa.triskell.kermeta.ui.validation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.validation"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ui_views {
				__id = "fr.irisa.triskell.kermeta.ui.views"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ui.views"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_wizards {
				__id = "fr.irisa.triskell.kermeta.wizards"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_merger {
			__id = "org.kermeta.merger"
			identifier = new PlatformID {
				value = "org.kermeta.merger"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_org_eclipse_gymnast_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_merger
				target = plugin_fr_irisa_triskell_traceability_model
			}
			exports += new Package package_org_kermeta_merger {
				__id = "org.kermeta.merger"
				identifier = new PlatformID {
					value = "org.kermeta.merger"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_interest {
			__id = "org.kermeta.interest"
			identifier = new PlatformID {
				value = "org.kermeta.interest"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_interest
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_interest
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__interest {
				__id = "_interest"
				identifier = new PlatformID {
					value = "_interest"
				}
				locator = new EFSLocator {
					value = "http://interest"
				}
			}
				ownedEntities += new Service service_conformsTo__interest {
					__id = "conformsTo__interest"
					identifier = new PlatformID {
						value = "conformsTo__interest"
					}
					locator = new EFSLocator {
						value = "http://interest.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_kermeta_interest {
				__id = "org.kermeta.interest"
				identifier = new PlatformID {
					value = "org.kermeta.interest"
				}
			}
			exports += new Package package_org_kermeta_interest_exception {
				__id = "org.kermeta.interest.exception"
				identifier = new PlatformID {
					value = "org.kermeta.interest.exception"
				}
			}
			exports += new Package package_org_kermeta_model_interest {
				__id = "org.kermeta.model.interest"
				identifier = new PlatformID {
					value = "org.kermeta.model.interest"
				}
			}
			exports += new Package package_org_kermeta_model_interest_impl {
				__id = "org.kermeta.model.interest.impl"
				identifier = new PlatformID {
					value = "org.kermeta.model.interest.impl"
				}
			}
			exports += new Package package_org_kermeta_model_interest_util {
				__id = "org.kermeta.model.interest.util"
				identifier = new PlatformID {
					value = "org.kermeta.model.interest.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_io_loader {
			__id = "org.kermeta.io.loader"
			identifier = new PlatformID {
				value = "org.kermeta.io.loader"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_org_eclipse_gymnast_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_org_antlr_antlr2
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_io_loader
				target = plugin_org_kermeta_log4j_util
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_Loader {
				__id = "_www_kermeta_org_Loader"
				identifier = new PlatformID {
					value = "_www_kermeta_org_Loader"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/Loader"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_Loader {
					__id = "conformsTo__www_kermeta_org_Loader"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_Loader"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/Loader.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_kermeta_io_checker {
				__id = "org.kermeta.io.checker"
				identifier = new PlatformID {
					value = "org.kermeta.io.checker"
				}
			}
			exports += new Package package_org_kermeta_io_loader {
				__id = "org.kermeta.io.loader"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader"
				}
			}
			exports += new Package package_org_kermeta_io_loader_action {
				__id = "org.kermeta.io.loader.action"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.action"
				}
			}
			exports += new Package package_org_kermeta_io_loader_core {
				__id = "org.kermeta.io.loader.core"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.core"
				}
			}
			exports += new Package package_org_kermeta_io_loader_datas {
				__id = "org.kermeta.io.loader.datas"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.datas"
				}
			}
			exports += new Package package_org_kermeta_io_loader_ecore {
				__id = "org.kermeta.io.loader.ecore"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.ecore"
				}
			}
			exports += new Package package_org_kermeta_io_loader_impl {
				__id = "org.kermeta.io.loader.impl"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.impl"
				}
			}
			exports += new Package package_org_kermeta_io_loader_km {
				__id = "org.kermeta.io.loader.km"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.km"
				}
			}
			exports += new Package package_org_kermeta_io_loader_kmt {
				__id = "org.kermeta.io.loader.kmt"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.kmt"
				}
			}
			exports += new Package package_org_kermeta_io_loader_plugin {
				__id = "org.kermeta.io.loader.plugin"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.plugin"
				}
			}
			exports += new Package package_org_kermeta_io_loader_util {
				__id = "org.kermeta.io.loader.util"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.util"
				}
			}
			exports += new Package package_org_kermeta_io_loader_validation {
				__id = "org.kermeta.io.loader.validation"
				identifier = new PlatformID {
					value = "org.kermeta.io.loader.validation"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_documentation {
			__id = "fr.irisa.triskell.kermeta.documentation"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.documentation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			ownedEntities += new Document {
				__id = "fr.irisa.triskell.kermeta.documentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.documentation"
				}
				locator = new EFSLocator {
					value = "fr.irisa.triskell.kermeta.documentation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_org_eclipse_core_runtime_compatibility
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_org_eclipse_help
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_documentation
				target = plugin_org_kermeta_log4j_util
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_touchnavigator {
			__id = "fr.irisa.triskell.kermeta.touchnavigator"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.touchnavigator"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_fr_irisa_triskell_kermeta_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_touchnavigator
				target = plugin_fr_irisa_triskell_kermeta_io
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_registration {
			__id = "org.eclipse.emf.ecoretools.registration"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.registration"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			exports += new Package package_org_eclipse_emf_ecoretools_registration {
				__id = "org.eclipse.emf.ecoretools.registration"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.registration"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_registration_exceptions {
				__id = "org.eclipse.emf.ecoretools.registration.exceptions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.registration.exceptions"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_registration_internal {
				__id = "org.eclipse.emf.ecoretools.registration.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.registration.internal"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_registration_ui {
			__id = "org.eclipse.emf.ecoretools.registration.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.registration.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration_ui
				target = plugin_org_eclipse_emf_ecoretools_registration
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration_ui
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_registration_ui
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			exports += new Package package_org_eclipse_emf_ecoretools_registration_popup_actions {
				__id = "org.eclipse.emf.ecoretools.registration.popup.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.registration.popup.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_registration_ui {
				__id = "org.eclipse.emf.ecoretools.registration.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.registration.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_registration_view {
				__id = "org.eclipse.emf.ecoretools.registration.view"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.registration.view"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_kpm_ui {
			__id = "org.kermeta.kpm.ui"
			identifier = new PlatformID {
				value = "org.kermeta.kpm.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kpm_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kpm_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kpm_ui
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kpm_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kpm_ui
				target = plugin_fr_irisa_triskell_kermeta_kpm_editor
			}
		}
		plugins += new Plugin plugin_org_antlr_antlr2 {
			__id = "org.antlr.antlr2"
			identifier = new PlatformID {
				value = "org.antlr.antlr2"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.7.7"
			}
			exports += new Package package_antlr {
				__id = "antlr"
				identifier = new PlatformID {
					value = "antlr"
				}
			}
			exports += new Package package_antlr_ASdebug {
				__id = "antlr.ASdebug"
				identifier = new PlatformID {
					value = "antlr.ASdebug"
				}
			}
			exports += new Package package_antlr_actions_cpp {
				__id = "antlr.actions.cpp"
				identifier = new PlatformID {
					value = "antlr.actions.cpp"
				}
			}
			exports += new Package package_antlr_actions_csharp {
				__id = "antlr.actions.csharp"
				identifier = new PlatformID {
					value = "antlr.actions.csharp"
				}
			}
			exports += new Package package_antlr_actions_java {
				__id = "antlr.actions.java"
				identifier = new PlatformID {
					value = "antlr.actions.java"
				}
			}
			exports += new Package package_antlr_actions_python {
				__id = "antlr.actions.python"
				identifier = new PlatformID {
					value = "antlr.actions.python"
				}
			}
			exports += new Package package_antlr_build {
				__id = "antlr.build"
				identifier = new PlatformID {
					value = "antlr.build"
				}
			}
			exports += new Package package_antlr_collections {
				__id = "antlr.collections"
				identifier = new PlatformID {
					value = "antlr.collections"
				}
			}
			exports += new Package package_antlr_collections_impl {
				__id = "antlr.collections.impl"
				identifier = new PlatformID {
					value = "antlr.collections.impl"
				}
			}
			exports += new Package package_antlr_debug {
				__id = "antlr.debug"
				identifier = new PlatformID {
					value = "antlr.debug"
				}
			}
			exports += new Package package_antlr_debug_misc {
				__id = "antlr.debug.misc"
				identifier = new PlatformID {
					value = "antlr.debug.misc"
				}
			}
			exports += new Package package_antlr_preprocessor {
				__id = "antlr.preprocessor"
				identifier = new PlatformID {
					value = "antlr.preprocessor"
				}
			}
			exports += new Package package_org_antlr_antlr2 {
				__id = "org.antlr.antlr2"
				identifier = new PlatformID {
					value = "org.antlr.antlr2"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_antlr_antlr2
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
		plugins += new Plugin plugin_org_kermeta_language_mdk {
			__id = "org.kermeta.language.mdk"
			identifier = new PlatformID {
				value = "org.kermeta.language.mdk"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_language_mdk
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_language_mdk
				target = plugin_fr_irisa_triskell_kermeta_interpreter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			exports += new Package package_org_kermeta_language_mdk_externs_math {
				__id = "org.kermeta.language.mdk.externs.math"
				identifier = new PlatformID {
					value = "org.kermeta.language.mdk.externs.math"
				}
			}
			exports += new Package package_org_kermeta_language_mdk_externs_random {
				__id = "org.kermeta.language.mdk.externs.random"
				identifier = new PlatformID {
					value = "org.kermeta.language.mdk.externs.random"
				}
			}
			exports += new Package package_org_kermeta_language_mdk_externs_time {
				__id = "org.kermeta.language.mdk.externs.time"
				identifier = new PlatformID {
					value = "org.kermeta.language.mdk.externs.time"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_runner {
			__id = "org.kermeta.runner"
			identifier = new PlatformID {
				value = "org.kermeta.runner"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_kermeta_merger
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner
				target = plugin_org_apache_commons_logging
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.4'"
				maxVersion = "'1.0.4'"
			}
			exports += new Package package_org_kermeta_runner {
				__id = "org.kermeta.runner"
				identifier = new PlatformID {
					value = "org.kermeta.runner"
				}
			}
			exports += new Package package_org_kermeta_runner_launching {
				__id = "org.kermeta.runner.launching"
				identifier = new PlatformID {
					value = "org.kermeta.runner.launching"
				}
			}
			exports += new Package package_org_kermeta_runner_model {
				__id = "org.kermeta.runner.model"
				identifier = new PlatformID {
					value = "org.kermeta.runner.model"
				}
			}
			exports += new Package package_org_kermeta_runner_model_variable {
				__id = "org.kermeta.runner.model.variable"
				identifier = new PlatformID {
					value = "org.kermeta.runner.model.variable"
				}
			}
			exports += new Package package_org_kermeta_runner_util {
				__id = "org.kermeta.runner.util"
				identifier = new PlatformID {
					value = "org.kermeta.runner.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_runner_ui {
			__id = "org.kermeta.runner.ui"
			identifier = new PlatformID {
				value = "org.kermeta.runner.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_kermeta_runner
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_jdt_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_fr_irisa_triskell_kermeta_model_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_runner_ui
				target = plugin_fr_irisa_triskell_kermeta_texteditor
			}
			exports += new Package package_org_kermeta_runner_dialogs {
				__id = "org.kermeta.runner.dialogs"
				identifier = new PlatformID {
					value = "org.kermeta.runner.dialogs"
				}
			}
			exports += new Package package_org_kermeta_runner_launching {
				__id = "org.kermeta.runner.launching"
				identifier = new PlatformID {
					value = "org.kermeta.runner.launching"
				}
			}
			exports += new Package package_org_kermeta_runner_ui {
				__id = "org.kermeta.runner.ui"
				identifier = new PlatformID {
					value = "org.kermeta.runner.ui"
				}
			}
			exports += new Package package_org_kermeta_runner_ui_actions {
				__id = "org.kermeta.runner.ui.actions"
				identifier = new PlatformID {
					value = "org.kermeta.runner.ui.actions"
				}
			}
			exports += new Package package_org_kermeta_runner_ui_model {
				__id = "org.kermeta.runner.ui.model"
				identifier = new PlatformID {
					value = "org.kermeta.runner.ui.model"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_interpreter {
			__id = "fr.irisa.triskell.kermeta.interpreter"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.interpreter"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_fr_irisa_triskell_kermeta_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_emf_validation
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_kermeta_merger
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_gymnast_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_eclipse_emf_ecoretools_registration
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.99-2.0.0)'"
				maxVersion = "'[1.0.99-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_kermeta_log4j_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_interpreter
				target = plugin_org_junit4
			}
			exports += new Package package_fr_irisa_triskell_kermeta_builder {
				__id = "fr.irisa.triskell.kermeta.builder"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.builder"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_dev_interpreter {
				__id = "fr.irisa.triskell.kermeta.dev.interpreter"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.dev.interpreter"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_error {
				__id = "fr.irisa.triskell.kermeta.error"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.error"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_interpreter {
				__id = "fr.irisa.triskell.kermeta.interpreter"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.interpreter"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_launcher {
				__id = "fr.irisa.triskell.kermeta.launcher"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.launcher"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_launcher_CommandLineOptions {
				__id = "fr.irisa.triskell.kermeta.launcher.CommandLineOptions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.launcher.CommandLineOptions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime {
				__id = "fr.irisa.triskell.kermeta.runtime"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_basetypes {
				__id = "fr.irisa.triskell.kermeta.runtime.basetypes"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.basetypes"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_factory {
				__id = "fr.irisa.triskell.kermeta.runtime.factory"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.factory"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_io {
				__id = "fr.irisa.triskell.kermeta.runtime.io"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.io"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_language {
				__id = "fr.irisa.triskell.kermeta.runtime.language"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.language"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_loader {
				__id = "fr.irisa.triskell.kermeta.runtime.loader"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.loader"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_loader_emf {
				__id = "fr.irisa.triskell.kermeta.runtime.loader.emf"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.loader.emf"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_rohelper {
				__id = "fr.irisa.triskell.kermeta.runtime.rohelper"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.rohelper"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_runtime_testing {
				__id = "fr.irisa.triskell.kermeta.runtime.testing"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.runtime.testing"
				}
			}
			exports += new Package package_fr_irisa_triskell_utils_argumentsreader {
				__id = "fr.irisa.triskell.utils.argumentsreader"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.utils.argumentsreader"
				}
			}
			exports += new Package package_org_kermeta_interpreter {
				__id = "org.kermeta.interpreter"
				identifier = new PlatformID {
					value = "org.kermeta.interpreter"
				}
			}
			exports += new Package package_org_kermeta_interpreter_api {
				__id = "org.kermeta.interpreter.api"
				identifier = new PlatformID {
					value = "org.kermeta.interpreter.api"
				}
			}
			exports += new Package package_org_kermeta_interpreter_exceptions {
				__id = "org.kermeta.interpreter.exceptions"
				identifier = new PlatformID {
					value = "org.kermeta.interpreter.exceptions"
				}
			}
			exports += new Package package_org_kermeta_interpreter_helper {
				__id = "org.kermeta.interpreter.helper"
				identifier = new PlatformID {
					value = "org.kermeta.interpreter.helper"
				}
			}
		}
		sites += site__www_kermeta_org_update
	}

	features += new Feature feature_org_eclipse_epp_package_modeling_feature {
		__id = "org.eclipse.epp.package.modeling.feature"
		identifier = new PlatformID {
			value = "org.eclipse.epp.package.modeling.feature"
		}
		version = new Version {
			value = "1.2.1.20090918-0703"
		}
		provider = vendor_Eclipse_org___EPP
		license = license_license_html
		description = new Description {
			name = "description"
			text = "This modeling package contains a collection of Eclipse Modeling Project components, including EMF, GMF, MDT XSD/OCL/UML2, M2M, M2T, and EMFT elements. It includes a complete SDK, developer tools and source code. Note that the Modeling package includes some incubating components, as indicated by feature numbers less than 1.0.0 on the feature list."
		}
		plugins += new Plugin plugin_org_eclipse_epp_package_modeling {
			__id = "org.eclipse.epp.package.modeling"
			identifier = new PlatformID {
				value = "org.eclipse.epp.package.modeling"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.1.20090812-1036"
			}
			vendor = vendor_Eclipse_org___EPP
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_package_modeling
				target = plugin_org_eclipse_platform
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_package_modeling
				target = plugin_org_eclipse_equinox_app
			}
		}
		sites += site__download_eclipse_org_releases_galileo_
		sites += site__download_eclipse_org_eclipse_updates_3_5
	}

	features += new Feature feature_org_eclipse_m2m_atl_doc {
		__id = "org.eclipse.m2m.atl.doc"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.atl.doc"
		}
		version = new Version {
			value = "3.0.1.v200909150941"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*    * Copyright (c) 2008, 2009 Obeo.  * All rights reserved. This program and the accompanying materials  * are made available under the terms of the Eclipse Public License v1.0  * which accompanies this distribution, and is available at  * http://www.eclipse.org/legal/epl-v10.html  *   */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Documentation for ATL."
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_doc {
			__id = "org.eclipse.m2m.atl.doc"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.m2m.atl.doc"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.m2m.atl.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_doc
				target = plugin_org_eclipse_help
			}
		}
	}

	features += new Feature feature_org_topcased_modeler_uml {
		__id = "org.topcased.modeler.uml"
		identifier = new PlatformID {
			value = "org.topcased.modeler.uml"
		}
		version = new Version {
			value = "3.2.0.v200911301720"
		}
		provider = vendor_Topcased
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Topcased UML Feature. This feature contains the UML Editor (with the Class Diagram, UseCase Diagram, Sequence Diagram, StateMachine Diagram, Activity Diagram, Component Diagram, Composite Structure Diagram and Deployment Diagram) and its dependencies."
		}
		plugins += new Plugin plugin_org_topcased_draw2d {
			__id = "org.topcased.draw2d"
			identifier = new PlatformID {
				value = "org.topcased.draw2d"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_draw2d
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_draw2d
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			exports += new Package package_org_topcased_draw2d_anchors {
				__id = "org.topcased.draw2d.anchors"
				identifier = new PlatformID {
					value = "org.topcased.draw2d.anchors"
				}
			}
			exports += new Package package_org_topcased_draw2d_figures {
				__id = "org.topcased.draw2d.figures"
				identifier = new PlatformID {
					value = "org.topcased.draw2d.figures"
				}
			}
			exports += new Package package_org_topcased_draw2d_gmffixing {
				__id = "org.topcased.draw2d.gmffixing"
				identifier = new PlatformID {
					value = "org.topcased.draw2d.gmffixing"
				}
			}
			exports += new Package package_org_topcased_draw2d_layout {
				__id = "org.topcased.draw2d.layout"
				identifier = new PlatformID {
					value = "org.topcased.draw2d.layout"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler {
			__id = "org.topcased.modeler"
			identifier = new PlatformID {
				value = "org.topcased.modeler"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_modeler_di
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_modeler_diagrams
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_model_management
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_facilities
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_gmf_runtime_gef_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_validation_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_validation_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_modeler_graphconf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_topcased_tabbedproperties
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_epf_richtext
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler
				target = plugin_org_eclipse_emf_converter
			}
			exports += new Package package_org_topcased_modeler {
				__id = "org.topcased.modeler"
				identifier = new PlatformID {
					value = "org.topcased.modeler"
				}
			}
			exports += new Package package_org_topcased_modeler_actions {
				__id = "org.topcased.modeler.actions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.actions"
				}
			}
			exports += new Package package_org_topcased_modeler_builders {
				__id = "org.topcased.modeler.builders"
				identifier = new PlatformID {
					value = "org.topcased.modeler.builders"
				}
			}
			exports += new Package package_org_topcased_modeler_commands {
				__id = "org.topcased.modeler.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_dialogs {
				__id = "org.topcased.modeler.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.dialogs"
				}
			}
			exports += new Package package_org_topcased_modeler_documentation {
				__id = "org.topcased.modeler.documentation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.documentation"
				}
			}
			exports += new Package package_org_topcased_modeler_edit {
				__id = "org.topcased.modeler.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_edit_dragtrackers {
				__id = "org.topcased.modeler.edit.dragtrackers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.edit.dragtrackers"
				}
			}
			exports += new Package package_org_topcased_modeler_edit_handles {
				__id = "org.topcased.modeler.edit.handles"
				identifier = new PlatformID {
					value = "org.topcased.modeler.edit.handles"
				}
			}
			exports += new Package package_org_topcased_modeler_edit_locators {
				__id = "org.topcased.modeler.edit.locators"
				identifier = new PlatformID {
					value = "org.topcased.modeler.edit.locators"
				}
			}
			exports += new Package package_org_topcased_modeler_edit_policies {
				__id = "org.topcased.modeler.edit.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.edit.policies"
				}
			}
			exports += new Package package_org_topcased_modeler_edit_requests {
				__id = "org.topcased.modeler.edit.requests"
				identifier = new PlatformID {
					value = "org.topcased.modeler.edit.requests"
				}
			}
			exports += new Package package_org_topcased_modeler_editor {
				__id = "org.topcased.modeler.editor"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_navigation {
				__id = "org.topcased.modeler.editor.navigation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.navigation"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_outline {
				__id = "org.topcased.modeler.editor.outline"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.outline"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_outline_filters {
				__id = "org.topcased.modeler.editor.outline.filters"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.outline.filters"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_outline_filters_actions {
				__id = "org.topcased.modeler.editor.outline.filters.actions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.outline.filters.actions"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_outline_filters_dialogs {
				__id = "org.topcased.modeler.editor.outline.filters.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.outline.filters.dialogs"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_outline_filters_files {
				__id = "org.topcased.modeler.editor.outline.filters.files"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.outline.filters.files"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_outline_sorters {
				__id = "org.topcased.modeler.editor.outline.sorters"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.outline.sorters"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_palette {
				__id = "org.topcased.modeler.editor.palette"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.palette"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_properties {
				__id = "org.topcased.modeler.editor.properties"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.properties"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_properties_filters {
				__id = "org.topcased.modeler.editor.properties.filters"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.properties.filters"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_properties_sections {
				__id = "org.topcased.modeler.editor.properties.sections"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.properties.sections"
				}
			}
			exports += new Package package_org_topcased_modeler_editor_properties_sections_graphics {
				__id = "org.topcased.modeler.editor.properties.sections.graphics"
				identifier = new PlatformID {
					value = "org.topcased.modeler.editor.properties.sections.graphics"
				}
			}
			exports += new Package package_org_topcased_modeler_evaluator {
				__id = "org.topcased.modeler.evaluator"
				identifier = new PlatformID {
					value = "org.topcased.modeler.evaluator"
				}
			}
			exports += new Package package_org_topcased_modeler_evaluator_extension {
				__id = "org.topcased.modeler.evaluator.extension"
				identifier = new PlatformID {
					value = "org.topcased.modeler.evaluator.extension"
				}
			}
			exports += new Package package_org_topcased_modeler_evaluator_ocl {
				__id = "org.topcased.modeler.evaluator.ocl"
				identifier = new PlatformID {
					value = "org.topcased.modeler.evaluator.ocl"
				}
			}
			exports += new Package package_org_topcased_modeler_exceptions {
				__id = "org.topcased.modeler.exceptions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.exceptions"
				}
			}
			exports += new Package package_org_topcased_modeler_extensions {
				__id = "org.topcased.modeler.extensions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.extensions"
				}
			}
			exports += new Package package_org_topcased_modeler_figures {
				__id = "org.topcased.modeler.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_internal {
				__id = "org.topcased.modeler.internal"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_actions {
				__id = "org.topcased.modeler.internal.actions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.actions"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_collaboration {
				__id = "org.topcased.modeler.internal.collaboration"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.collaboration"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_commands {
				__id = "org.topcased.modeler.internal.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_decorators {
				__id = "org.topcased.modeler.internal.decorators"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.decorators"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_dialogs {
				__id = "org.topcased.modeler.internal.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.dialogs"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_editor {
				__id = "org.topcased.modeler.internal.editor"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.editor"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_editor_palette {
				__id = "org.topcased.modeler.internal.editor.palette"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.editor.palette"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_exceptions {
				__id = "org.topcased.modeler.internal.exceptions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.exceptions"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_policies {
				__id = "org.topcased.modeler.internal.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.policies"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_preferences {
				__id = "org.topcased.modeler.internal.preferences"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.preferences"
				}
			}
			exports += new Package package_org_topcased_modeler_internal_requests {
				__id = "org.topcased.modeler.internal.requests"
				identifier = new PlatformID {
					value = "org.topcased.modeler.internal.requests"
				}
			}
			exports += new Package package_org_topcased_modeler_l10n {
				__id = "org.topcased.modeler.l10n"
				identifier = new PlatformID {
					value = "org.topcased.modeler.l10n"
				}
			}
			exports += new Package package_org_topcased_modeler_listeners {
				__id = "org.topcased.modeler.listeners"
				identifier = new PlatformID {
					value = "org.topcased.modeler.listeners"
				}
			}
			exports += new Package package_org_topcased_modeler_preferences {
				__id = "org.topcased.modeler.preferences"
				identifier = new PlatformID {
					value = "org.topcased.modeler.preferences"
				}
			}
			exports += new Package package_org_topcased_modeler_providers {
				__id = "org.topcased.modeler.providers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.providers"
				}
			}
			exports += new Package package_org_topcased_modeler_requests {
				__id = "org.topcased.modeler.requests"
				identifier = new PlatformID {
					value = "org.topcased.modeler.requests"
				}
			}
			exports += new Package package_org_topcased_modeler_tools {
				__id = "org.topcased.modeler.tools"
				identifier = new PlatformID {
					value = "org.topcased.modeler.tools"
				}
			}
			exports += new Package package_org_topcased_modeler_utils {
				__id = "org.topcased.modeler.utils"
				identifier = new PlatformID {
					value = "org.topcased.modeler.utils"
				}
			}
			exports += new Package package_org_topcased_modeler_wizards {
				__id = "org.topcased.modeler.wizards"
				identifier = new PlatformID {
					value = "org.topcased.modeler.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_di {
			__id = "org.topcased.modeler.di"
			identifier = new PlatformID {
				value = "org.topcased.modeler.di"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_gmf_runtime_notation
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_di
				target = plugin_org_eclipse_emf_ecore_edit
			}
			ownedEntities += new Metamodel metamodel__www_topcased_org_DI_1_0 {
				__id = "_www_topcased_org_DI_1_0"
				identifier = new PlatformID {
					value = "_www_topcased_org_DI_1_0"
				}
				locator = new EFSLocator {
					value = "http://www.topcased.org/DI/1.0"
				}
			}
				ownedEntities += new Service service_conformsTo__www_topcased_org_DI_1_0 {
					__id = "conformsTo__www_topcased_org_DI_1_0"
					identifier = new PlatformID {
						value = "conformsTo__www_topcased_org_DI_1_0"
					}
					locator = new EFSLocator {
						value = "http://www.topcased.org/DI/1.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__org_topcased_modeler_di_model {
				__id = "_org_topcased_modeler_di_model"
				identifier = new PlatformID {
					value = "_org_topcased_modeler_di_model"
				}
				locator = new EFSLocator {
					value = "http://org.topcased.modeler.di.model"
				}
			}
				ownedEntities += new Service service_conformsTo__org_topcased_modeler_di_model {
					__id = "conformsTo__org_topcased_modeler_di_model"
					identifier = new PlatformID {
						value = "conformsTo__org_topcased_modeler_di_model"
					}
					locator = new EFSLocator {
						value = "http://org.topcased.modeler.di.model.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_topcased_modeler_di_model {
				__id = "org.topcased.modeler.di.model"
				identifier = new PlatformID {
					value = "org.topcased.modeler.di.model"
				}
			}
			exports += new Package package_org_topcased_modeler_di_model_internal {
				__id = "org.topcased.modeler.di.model.internal"
				identifier = new PlatformID {
					value = "org.topcased.modeler.di.model.internal"
				}
			}
			exports += new Package package_org_topcased_modeler_di_model_internal_impl {
				__id = "org.topcased.modeler.di.model.internal.impl"
				identifier = new PlatformID {
					value = "org.topcased.modeler.di.model.internal.impl"
				}
			}
			exports += new Package package_org_topcased_modeler_di_model_internal_presentation {
				__id = "org.topcased.modeler.di.model.internal.presentation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.di.model.internal.presentation"
				}
			}
			exports += new Package package_org_topcased_modeler_di_model_provider {
				__id = "org.topcased.modeler.di.model.provider"
				identifier = new PlatformID {
					value = "org.topcased.modeler.di.model.provider"
				}
			}
			exports += new Package package_org_topcased_modeler_di_model_util {
				__id = "org.topcased.modeler.di.model.util"
				identifier = new PlatformID {
					value = "org.topcased.modeler.di.model.util"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_diagrams {
			__id = "org.topcased.modeler.diagrams"
			identifier = new PlatformID {
				value = "org.topcased.modeler.diagrams"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_topcased_modeler_di
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_diagrams
				target = plugin_org_eclipse_ui_ide
			}
			ownedEntities += new Metamodel metamodel__www_topcased_org_Diagrams_0_11 {
				__id = "_www_topcased_org_Diagrams_0_11"
				identifier = new PlatformID {
					value = "_www_topcased_org_Diagrams_0_11"
				}
				locator = new EFSLocator {
					value = "http://www.topcased.org/Diagrams/0.11"
				}
			}
				ownedEntities += new Service service_conformsTo__www_topcased_org_Diagrams_0_11 {
					__id = "conformsTo__www_topcased_org_Diagrams_0_11"
					identifier = new PlatformID {
						value = "conformsTo__www_topcased_org_Diagrams_0_11"
					}
					locator = new EFSLocator {
						value = "http://www.topcased.org/Diagrams/0.11.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_topcased_org_Diagrams_1_0 {
				__id = "_www_topcased_org_Diagrams_1_0"
				identifier = new PlatformID {
					value = "_www_topcased_org_Diagrams_1_0"
				}
				locator = new EFSLocator {
					value = "http://www.topcased.org/Diagrams/1.0"
				}
			}
				ownedEntities += new Service service_conformsTo__www_topcased_org_Diagrams_1_0 {
					__id = "conformsTo__www_topcased_org_Diagrams_1_0"
					identifier = new PlatformID {
						value = "conformsTo__www_topcased_org_Diagrams_1_0"
					}
					locator = new EFSLocator {
						value = "http://www.topcased.org/Diagrams/1.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__org_topcased_modeler_diagrams_model {
				__id = "_org_topcased_modeler_diagrams_model"
				identifier = new PlatformID {
					value = "_org_topcased_modeler_diagrams_model"
				}
				locator = new EFSLocator {
					value = "http://org.topcased.modeler.diagrams.model"
				}
			}
				ownedEntities += new Service service_conformsTo__org_topcased_modeler_diagrams_model {
					__id = "conformsTo__org_topcased_modeler_diagrams_model"
					identifier = new PlatformID {
						value = "conformsTo__org_topcased_modeler_diagrams_model"
					}
					locator = new EFSLocator {
						value = "http://org.topcased.modeler.diagrams.model.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_topcased_modeler_diagrams_model {
				__id = "org.topcased.modeler.diagrams.model"
				identifier = new PlatformID {
					value = "org.topcased.modeler.diagrams.model"
				}
			}
			exports += new Package package_org_topcased_modeler_diagrams_model_internal {
				__id = "org.topcased.modeler.diagrams.model.internal"
				identifier = new PlatformID {
					value = "org.topcased.modeler.diagrams.model.internal"
				}
			}
			exports += new Package package_org_topcased_modeler_diagrams_model_internal_impl {
				__id = "org.topcased.modeler.diagrams.model.internal.impl"
				identifier = new PlatformID {
					value = "org.topcased.modeler.diagrams.model.internal.impl"
				}
			}
			exports += new Package package_org_topcased_modeler_diagrams_model_internal_presentation {
				__id = "org.topcased.modeler.diagrams.model.internal.presentation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.diagrams.model.internal.presentation"
				}
			}
			exports += new Package package_org_topcased_modeler_diagrams_model_provider {
				__id = "org.topcased.modeler.diagrams.model.provider"
				identifier = new PlatformID {
					value = "org.topcased.modeler.diagrams.model.provider"
				}
			}
			exports += new Package package_org_topcased_modeler_diagrams_model_util {
				__id = "org.topcased.modeler.diagrams.model.util"
				identifier = new PlatformID {
					value = "org.topcased.modeler.diagrams.model.util"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_validation_core {
			__id = "org.topcased.validation.core"
			identifier = new PlatformID {
				value = "org.topcased.validation.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.7.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_validation_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_validation_core
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_validation_core
				target = plugin_org_topcased_facilities
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_validation_core
				target = plugin_org_eclipse_core_resources
			}
			exports += new Package package_org_topcased_validation_core {
				__id = "org.topcased.validation.core"
				identifier = new PlatformID {
					value = "org.topcased.validation.core"
				}
			}
			exports += new Package package_org_topcased_validation_core_extension {
				__id = "org.topcased.validation.core.extension"
				identifier = new PlatformID {
					value = "org.topcased.validation.core.extension"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_validation_ui {
			__id = "org.topcased.validation.ui"
			identifier = new PlatformID {
				value = "org.topcased.validation.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_validation_ui
				target = plugin_org_topcased_validation_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_validation_ui
				target = plugin_org_eclipse_emf_edit_ui
			}
			exports += new Package package_org_topcased_validation_ui_actions {
				__id = "org.topcased.validation.ui.actions"
				identifier = new PlatformID {
					value = "org.topcased.validation.ui.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_facilities {
			__id = "org.topcased.facilities"
			identifier = new PlatformID {
				value = "org.topcased.facilities"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_ui_workbench
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_facilities
				target = plugin_org_eclipse_ui
			}
			exports += new Package package_org_topcased_facilities_dialogs {
				__id = "org.topcased.facilities.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.facilities.dialogs"
				}
			}
			exports += new Package package_org_topcased_facilities_extensions {
				__id = "org.topcased.facilities.extensions"
				identifier = new PlatformID {
					value = "org.topcased.facilities.extensions"
				}
			}
			exports += new Package package_org_topcased_facilities_preferences {
				__id = "org.topcased.facilities.preferences"
				identifier = new PlatformID {
					value = "org.topcased.facilities.preferences"
				}
			}
			exports += new Package package_org_topcased_facilities_resources {
				__id = "org.topcased.facilities.resources"
				identifier = new PlatformID {
					value = "org.topcased.facilities.resources"
				}
			}
			exports += new Package package_org_topcased_facilities_util {
				__id = "org.topcased.facilities.util"
				identifier = new PlatformID {
					value = "org.topcased.facilities.util"
				}
			}
			exports += new Package package_org_topcased_facilities_widgets {
				__id = "org.topcased.facilities.widgets"
				identifier = new PlatformID {
					value = "org.topcased.facilities.widgets"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_model_management {
			__id = "org.topcased.model.management"
			identifier = new PlatformID {
				value = "org.topcased.model.management"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_model_management
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_model_management
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_model_management
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_model_management
				target = plugin_org_eclipse_ui_workbench
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_model_management
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_org_topcased_model_management {
				__id = "org.topcased.model.management"
				identifier = new PlatformID {
					value = "org.topcased.model.management"
				}
			}
			exports += new Package package_org_topcased_model_management_internal_actions {
				__id = "org.topcased.model.management.internal.actions"
				identifier = new PlatformID {
					value = "org.topcased.model.management.internal.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml {
			__id = "org.topcased.modeler.uml"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.5.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_uml2_common_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_uml2_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_topcased_validation_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_topcased_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml
				target = plugin_org_topcased_modeler_uml_oclinterpreter
			}
			exports += new Package package_org_topcased_modeler_uml {
				__id = "org.topcased.modeler.uml"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_actions {
				__id = "org.topcased.modeler.uml.actions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.actions"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_alldiagram {
				__id = "org.topcased.modeler.uml.alldiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.alldiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_alldiagram_commands {
				__id = "org.topcased.modeler.uml.alldiagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.alldiagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_alldiagram_edit {
				__id = "org.topcased.modeler.uml.alldiagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.alldiagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_alldiagram_figures {
				__id = "org.topcased.modeler.uml.alldiagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.alldiagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_alldiagram_policies {
				__id = "org.topcased.modeler.uml.alldiagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.alldiagram.policies"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_alldiagram_preferences {
				__id = "org.topcased.modeler.uml.alldiagram.preferences"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.alldiagram.preferences"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram {
				__id = "org.topcased.modeler.uml.classdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml {
				__id = "org.topcased.modeler.sysml"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_internalblockdiagram {
				__id = "org.topcased.modeler.sysml.internalblockdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.internalblockdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_parametricdiagram {
				__id = "org.topcased.modeler.sysml.parametricdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.parametricdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_profilediagram_ {
				__id = "org.topcased.modeler.sysml.profilediagram'"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.profilediagram'"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram_annotation {
				__id = "org.topcased.modeler.uml.classdiagram.annotation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram.annotation"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_internalblockdiagram {
				__id = "org.topcased.modeler.sysml.internalblockdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.internalblockdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_parametricdiagram {
				__id = "org.topcased.modeler.sysml.parametricdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.parametricdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_profilediagram {
				__id = "org.topcased.modeler.sysml.profilediagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.profilediagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_requirementdiagram_ {
				__id = "org.topcased.modeler.sysml.requirementdiagram'"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.requirementdiagram'"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram_commands {
				__id = "org.topcased.modeler.uml.classdiagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram_edit {
				__id = "org.topcased.modeler.uml.classdiagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram_figures {
				__id = "org.topcased.modeler.uml.classdiagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram_policies {
				__id = "org.topcased.modeler.uml.classdiagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram.policies"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram_preferences {
				__id = "org.topcased.modeler.uml.classdiagram.preferences"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram.preferences"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_requirementdiagram_ {
				__id = "org.topcased.modeler.sysml.requirementdiagram'"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.requirementdiagram'"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_classdiagram_util {
				__id = "org.topcased.modeler.uml.classdiagram.util"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.classdiagram.util"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_internalblockdiagram {
				__id = "org.topcased.modeler.sysml.internalblockdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.internalblockdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_parametricdiagram {
				__id = "org.topcased.modeler.sysml.parametricdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.parametricdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_profilediagram {
				__id = "org.topcased.modeler.sysml.profilediagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.profilediagram"
				}
			}
			exports += new Package package_org_topcased_modeler_sysml_requirementdiagram_ {
				__id = "org.topcased.modeler.sysml.requirementdiagram'"
				identifier = new PlatformID {
					value = "org.topcased.modeler.sysml.requirementdiagram'"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_commands {
				__id = "org.topcased.modeler.uml.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_editor {
				__id = "org.topcased.modeler.uml.editor"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.editor"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_editor_outline {
				__id = "org.topcased.modeler.uml.editor.outline"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.editor.outline"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_figure {
				__id = "org.topcased.modeler.uml.figure"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.figure"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_customchildmenu {
				__id = "org.topcased.modeler.uml.internal.customchildmenu"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.customchildmenu"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections {
				__id = "org.topcased.modeler.uml.internal.properties.sections"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_association {
				__id = "org.topcased.modeler.uml.internal.properties.sections.association"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.association"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_composites {
				__id = "org.topcased.modeler.uml.internal.properties.sections.composites"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.composites"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_feature {
				__id = "org.topcased.modeler.uml.internal.properties.sections.feature"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.feature"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_multiplicityelement {
				__id = "org.topcased.modeler.uml.internal.properties.sections.multiplicityelement"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.multiplicityelement"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_operation {
				__id = "org.topcased.modeler.uml.internal.properties.sections.operation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.operation"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_operation_behavior {
				__id = "org.topcased.modeler.uml.internal.properties.sections.operation.behavior"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.operation.behavior"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_property {
				__id = "org.topcased.modeler.uml.internal.properties.sections.property"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.property"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_slot {
				__id = "org.topcased.modeler.uml.internal.properties.sections.slot"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.slot"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_properties_sections_structuralfeature {
				__id = "org.topcased.modeler.uml.internal.properties.sections.structuralfeature"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.properties.sections.structuralfeature"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_internal_ui_navigator {
				__id = "org.topcased.modeler.uml.internal.ui.navigator"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.internal.ui.navigator"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_parentrule {
				__id = "org.topcased.modeler.uml.parentrule"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.parentrule"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_preferences {
				__id = "org.topcased.modeler.uml.preferences"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.preferences"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_profilediagram {
				__id = "org.topcased.modeler.uml.profilediagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.profilediagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_profilediagram_commands {
				__id = "org.topcased.modeler.uml.profilediagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.profilediagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_profilediagram_edit {
				__id = "org.topcased.modeler.uml.profilediagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.profilediagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_profilediagram_figures {
				__id = "org.topcased.modeler.uml.profilediagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.profilediagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_profilediagram_policies {
				__id = "org.topcased.modeler.uml.profilediagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.profilediagram.policies"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_profilediagram_preferences {
				__id = "org.topcased.modeler.uml.profilediagram.preferences"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.profilediagram.preferences"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_properties_sections {
				__id = "org.topcased.modeler.uml.properties.sections"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.properties.sections"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_providers {
				__id = "org.topcased.modeler.uml.providers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.providers"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram {
				__id = "org.topcased.modeler.uml.usecasediagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram_commands {
				__id = "org.topcased.modeler.uml.usecasediagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram_commands_update {
				__id = "org.topcased.modeler.uml.usecasediagram.commands.update"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram.commands.update"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram_dialogs {
				__id = "org.topcased.modeler.uml.usecasediagram.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram.dialogs"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram_edit {
				__id = "org.topcased.modeler.uml.usecasediagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram_figures {
				__id = "org.topcased.modeler.uml.usecasediagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram_policies {
				__id = "org.topcased.modeler.uml.usecasediagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram.policies"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_usecasediagram_preferences {
				__id = "org.topcased.modeler.uml.usecasediagram.preferences"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.usecasediagram.preferences"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_wizards {
				__id = "org.topcased.modeler.uml.wizards"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_sequencediagram {
			__id = "org.topcased.modeler.uml.sequencediagram"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.sequencediagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.2.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_uml2_common_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_uml2_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_topcased_modeler_graphconf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_sequencediagram
				target = plugin_org_topcased_modeler_uml
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram {
				__id = "org.topcased.modeler.uml.sequencediagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_anchors {
				__id = "org.topcased.modeler.uml.sequencediagram.anchors"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.anchors"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_commands {
				__id = "org.topcased.modeler.uml.sequencediagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_commands_creation {
				__id = "org.topcased.modeler.uml.sequencediagram.commands.creation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.commands.creation"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_commands_reconnect {
				__id = "org.topcased.modeler.uml.sequencediagram.commands.reconnect"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.commands.reconnect"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_commands_update {
				__id = "org.topcased.modeler.uml.sequencediagram.commands.update"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.commands.update"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_composites {
				__id = "org.topcased.modeler.uml.sequencediagram.composites"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.composites"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_dialogs {
				__id = "org.topcased.modeler.uml.sequencediagram.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.dialogs"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_edit {
				__id = "org.topcased.modeler.uml.sequencediagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_editingsupport {
				__id = "org.topcased.modeler.uml.sequencediagram.editingsupport"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.editingsupport"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_figures {
				__id = "org.topcased.modeler.uml.sequencediagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_figures_decorations {
				__id = "org.topcased.modeler.uml.sequencediagram.figures.decorations"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.figures.decorations"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_labelproviders {
				__id = "org.topcased.modeler.uml.sequencediagram.labelproviders"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.labelproviders"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_layouts {
				__id = "org.topcased.modeler.uml.sequencediagram.layouts"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.layouts"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_policies {
				__id = "org.topcased.modeler.uml.sequencediagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.policies"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_properties_filters {
				__id = "org.topcased.modeler.uml.sequencediagram.properties.filters"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.properties.filters"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_properties_sections {
				__id = "org.topcased.modeler.uml.sequencediagram.properties.sections"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.properties.sections"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_providers {
				__id = "org.topcased.modeler.uml.sequencediagram.providers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.providers"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_requests {
				__id = "org.topcased.modeler.uml.sequencediagram.requests"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.requests"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_routers {
				__id = "org.topcased.modeler.uml.sequencediagram.routers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.routers"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_trackers {
				__id = "org.topcased.modeler.uml.sequencediagram.trackers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.trackers"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_sequencediagram_util {
				__id = "org.topcased.modeler.uml.sequencediagram.util"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.sequencediagram.util"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_graphconf {
			__id = "org.topcased.modeler.graphconf"
			identifier = new PlatformID {
				value = "org.topcased.modeler.graphconf"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_graphconf
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_graphconf
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_graphconf
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_graphconf
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_graphconf
				target = plugin_org_eclipse_ui_ide
			}
			ownedEntities += new Metamodel metamodel__www_topcased_org_1_0_graphconf {
				__id = "_www_topcased_org_1_0_graphconf"
				identifier = new PlatformID {
					value = "_www_topcased_org_1_0_graphconf"
				}
				locator = new EFSLocator {
					value = "http://www.topcased.org/1.0/graphconf"
				}
			}
				ownedEntities += new Service service_conformsTo__www_topcased_org_1_0_graphconf {
					__id = "conformsTo__www_topcased_org_1_0_graphconf"
					identifier = new PlatformID {
						value = "conformsTo__www_topcased_org_1_0_graphconf"
					}
					locator = new EFSLocator {
						value = "http://www.topcased.org/1.0/graphconf.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_topcased_modeler_graphconf {
				__id = "org.topcased.modeler.graphconf"
				identifier = new PlatformID {
					value = "org.topcased.modeler.graphconf"
				}
			}
			exports += new Package package_org_topcased_modeler_graphconf_exceptions {
				__id = "org.topcased.modeler.graphconf.exceptions"
				identifier = new PlatformID {
					value = "org.topcased.modeler.graphconf.exceptions"
				}
			}
			exports += new Package package_org_topcased_modeler_graphconf_internal {
				__id = "org.topcased.modeler.graphconf.internal"
				identifier = new PlatformID {
					value = "org.topcased.modeler.graphconf.internal"
				}
			}
			exports += new Package package_org_topcased_modeler_graphconf_internal_impl {
				__id = "org.topcased.modeler.graphconf.internal.impl"
				identifier = new PlatformID {
					value = "org.topcased.modeler.graphconf.internal.impl"
				}
			}
			exports += new Package package_org_topcased_modeler_graphconf_internal_presentation {
				__id = "org.topcased.modeler.graphconf.internal.presentation"
				identifier = new PlatformID {
					value = "org.topcased.modeler.graphconf.internal.presentation"
				}
			}
			exports += new Package package_org_topcased_modeler_graphconf_provider {
				__id = "org.topcased.modeler.graphconf.provider"
				identifier = new PlatformID {
					value = "org.topcased.modeler.graphconf.provider"
				}
			}
			exports += new Package package_org_topcased_modeler_graphconf_util {
				__id = "org.topcased.modeler.graphconf.util"
				identifier = new PlatformID {
					value = "org.topcased.modeler.graphconf.util"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_activitydiagram {
			__id = "org.topcased.modeler.uml.activitydiagram"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.activitydiagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.1.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_uml2_common_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_uml2_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_topcased_modeler_graphconf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_topcased_modeler_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_activitydiagram
				target = plugin_org_eclipse_ui
			}
			exports += new Package package_org_topcased_modeler_uml_activitydiagram {
				__id = "org.topcased.modeler.uml.activitydiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.activitydiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_activitydiagram_commands {
				__id = "org.topcased.modeler.uml.activitydiagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.activitydiagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_activitydiagram_edit {
				__id = "org.topcased.modeler.uml.activitydiagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.activitydiagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_activitydiagram_figures {
				__id = "org.topcased.modeler.uml.activitydiagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.activitydiagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_activitydiagram_policies {
				__id = "org.topcased.modeler.uml.activitydiagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.activitydiagram.policies"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_statemachinediagram {
			__id = "org.topcased.modeler.uml.statemachinediagram"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.statemachinediagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.1.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_uml2_common_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_uml2_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_topcased_modeler_graphconf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_statemachinediagram
				target = plugin_org_topcased_modeler_uml
			}
			exports += new Package package_org_topcased_modeler_uml_statemachinediagram {
				__id = "org.topcased.modeler.uml.statemachinediagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.statemachinediagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_statemachinediagram_commands {
				__id = "org.topcased.modeler.uml.statemachinediagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.statemachinediagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_statemachinediagram_dialogs {
				__id = "org.topcased.modeler.uml.statemachinediagram.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.statemachinediagram.dialogs"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_statemachinediagram_edit {
				__id = "org.topcased.modeler.uml.statemachinediagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.statemachinediagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_statemachinediagram_figures {
				__id = "org.topcased.modeler.uml.statemachinediagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.statemachinediagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_statemachinediagram_policies {
				__id = "org.topcased.modeler.uml.statemachinediagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.statemachinediagram.policies"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_componentdiagram {
			__id = "org.topcased.modeler.uml.componentdiagram"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.componentdiagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.2.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_uml2_common_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_uml2_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_topcased_modeler_graphconf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_componentdiagram
				target = plugin_org_topcased_modeler_uml
			}
			exports += new Package package_org_topcased_modeler_uml_componentdiagram {
				__id = "org.topcased.modeler.uml.componentdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.componentdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_componentdiagram_commands {
				__id = "org.topcased.modeler.uml.componentdiagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.componentdiagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_componentdiagram_edit {
				__id = "org.topcased.modeler.uml.componentdiagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.componentdiagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_componentdiagram_figures {
				__id = "org.topcased.modeler.uml.componentdiagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.componentdiagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_componentdiagram_internal_figures {
				__id = "org.topcased.modeler.uml.componentdiagram.internal.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.componentdiagram.internal.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_componentdiagram_policies {
				__id = "org.topcased.modeler.uml.componentdiagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.componentdiagram.policies"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_deploymentdiagram {
			__id = "org.topcased.modeler.uml.deploymentdiagram"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.deploymentdiagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.1.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_uml2_common_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_uml2_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_topcased_modeler_graphconf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = plugin_org_topcased_modeler_uml
			}
			exports += new Package package_org_topcased_modeler_uml_deploymentdiagram {
				__id = "org.topcased.modeler.uml.deploymentdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.deploymentdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_deploymentdiagram_commands {
				__id = "org.topcased.modeler.uml.deploymentdiagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.deploymentdiagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_deploymentdiagram_edit {
				__id = "org.topcased.modeler.uml.deploymentdiagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.deploymentdiagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_deploymentdiagram_figures {
				__id = "org.topcased.modeler.uml.deploymentdiagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.deploymentdiagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_deploymentdiagram_policies {
				__id = "org.topcased.modeler.uml.deploymentdiagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.deploymentdiagram.policies"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_deploymentdiagram
				target = package_org_topcased_modeler_uml_componentdiagram_edit
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_export {
			__id = "org.topcased.modeler.export"
			identifier = new PlatformID {
				value = "org.topcased.modeler.export"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export
				target = plugin_org_apache_batik_svggen
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export
				target = plugin_org_apache_batik_ext_awt
			}
			exports += new Package package_org_topcased_modeler_export {
				__id = "org.topcased.modeler.export"
				identifier = new PlatformID {
					value = "org.topcased.modeler.export"
				}
			}
			exports += new Package package_org_topcased_modeler_exporter {
				__id = "org.topcased.modeler.exporter"
				identifier = new PlatformID {
					value = "org.topcased.modeler.exporter"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_tabbedproperties {
			__id = "org.topcased.tabbedproperties"
			identifier = new PlatformID {
				value = "org.topcased.tabbedproperties"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_tabbedproperties
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_tabbedproperties
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_tabbedproperties
				target = plugin_org_eclipse_emf_codegen_ecore_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_tabbedproperties
				target = plugin_org_topcased_facilities
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_tabbedproperties
				target = plugin_org_eclipse_core_resources
			}
			exports += new Package package_org_topcased_tabbedproperties {
				__id = "org.topcased.tabbedproperties"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties"
				}
			}
			exports += new Package package_org_topcased_tabbedproperties_internal_sections {
				__id = "org.topcased.tabbedproperties.internal.sections"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties.internal.sections"
				}
			}
			exports += new Package package_org_topcased_tabbedproperties_internal_sections_listeners {
				__id = "org.topcased.tabbedproperties.internal.sections.listeners"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties.internal.sections.listeners"
				}
			}
			exports += new Package package_org_topcased_tabbedproperties_internal_utils {
				__id = "org.topcased.tabbedproperties.internal.utils"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties.internal.utils"
				}
			}
			exports += new Package package_org_topcased_tabbedproperties_providers {
				__id = "org.topcased.tabbedproperties.providers"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties.providers"
				}
			}
			exports += new Package package_org_topcased_tabbedproperties_sections {
				__id = "org.topcased.tabbedproperties.sections"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties.sections"
				}
			}
			exports += new Package package_org_topcased_tabbedproperties_sections_widgets {
				__id = "org.topcased.tabbedproperties.sections.widgets"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties.sections.widgets"
				}
			}
			exports += new Package package_org_topcased_tabbedproperties_utils {
				__id = "org.topcased.tabbedproperties.utils"
				identifier = new PlatformID {
					value = "org.topcased.tabbedproperties.utils"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_doc_user {
			__id = "org.topcased.doc.user"
			identifier = new PlatformID {
				value = "org.topcased.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			ownedEntities += new Document {
				__id = "org.topcased.doc.user"
				identifier = new PlatformID {
					value = "org.topcased.doc.user"
				}
				locator = new EFSLocator {
					value = "org.topcased.doc.user"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_doc_user
				target = plugin_org_eclipse_help
			}
		}
		plugins += new Plugin plugin_org_topcased_doc_user_uml {
			__id = "org.topcased.doc.user.uml"
			identifier = new PlatformID {
				value = "org.topcased.doc.user.uml"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			ownedEntities += new Document {
				__id = "org.topcased.doc.user.uml"
				identifier = new PlatformID {
					value = "org.topcased.doc.user.uml"
				}
				locator = new EFSLocator {
					value = "org.topcased.doc.user.uml"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_doc_user_uml
				target = plugin_org_eclipse_help
			}
		}
		plugins += new Plugin plugin_org_topcased_core {
			__id = "org.topcased.core"
			identifier = new PlatformID {
				value = "org.topcased.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_core
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_core
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_core
				target = plugin_org_eclipse_ltk_core_refactoring
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_core
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_core
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_core
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			exports += new Package package_org_topcased_core_actions {
				__id = "org.topcased.core.actions"
				identifier = new PlatformID {
					value = "org.topcased.core.actions"
				}
			}
			exports += new Package package_org_topcased_core_nature {
				__id = "org.topcased.core.nature"
				identifier = new PlatformID {
					value = "org.topcased.core.nature"
				}
			}
			exports += new Package package_org_topcased_core_refactoring {
				__id = "org.topcased.core.refactoring"
				identifier = new PlatformID {
					value = "org.topcased.core.refactoring"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_compositestructuresdiagram {
			__id = "org.topcased.modeler.uml.compositestructuresdiagram"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.compositestructuresdiagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.1.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_compositestructuresdiagram
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_compositestructuresdiagram
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_compositestructuresdiagram
				target = plugin_org_topcased_modeler_uml
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram_commands {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram.commands"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram.commands"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram_common {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram.common"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram.common"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram_common_dialog {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram.common.dialog"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram.common.dialog"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram_common_util {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram.common.util"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram.common.util"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram_edit {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram.edit"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram.edit"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram_figures {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram.figures"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram.figures"
				}
			}
			exports += new Package package_org_topcased_modeler_uml_compositestructuresdiagram_policies {
				__id = "org.topcased.modeler.uml.compositestructuresdiagram.policies"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.compositestructuresdiagram.policies"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_ui {
			__id = "org.topcased.ui"
			identifier = new PlatformID {
				value = "org.topcased.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_ui
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_ui
				target = plugin_org_topcased_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_ui
				target = plugin_org_eclipse_ltk_ui_refactoring
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_ui
				target = plugin_org_eclipse_ltk_core_refactoring
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_ui
				target = plugin_org_eclipse_jdt_ui
			}
			exports += new Package package_org_topcased_ui_navigator {
				__id = "org.topcased.ui.navigator"
				identifier = new PlatformID {
					value = "org.topcased.ui.navigator"
				}
			}
			exports += new Package package_org_topcased_ui_refactoring {
				__id = "org.topcased.ui.refactoring"
				identifier = new PlatformID {
					value = "org.topcased.ui.refactoring"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_efs {
			__id = "org.topcased.modeler.efs"
			identifier = new PlatformID {
				value = "org.topcased.modeler.efs"
			}
			state = : "State.active"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = plugin_org_eclipse_core_filesystem
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = plugin_org_eclipse_ltk_core_refactoring
			}
			exports += new Package package_org_topcased_modeler_efs {
				__id = "org.topcased.modeler.efs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_editor {
				__id = "org.topcased.modeler.efs.editor"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.editor"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_handlers {
				__id = "org.topcased.modeler.efs.handlers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.handlers"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_internal {
				__id = "org.topcased.modeler.efs.internal"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.internal"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_internal_dialogs {
				__id = "org.topcased.modeler.efs.internal.dialogs"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.internal.dialogs"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_internal_propertytesters {
				__id = "org.topcased.modeler.efs.internal.propertytesters"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.internal.propertytesters"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_internal_refactoring {
				__id = "org.topcased.modeler.efs.internal.refactoring"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.internal.refactoring"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs
				target = package_org_apache_tools_tar
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_efs_uml {
			__id = "org.topcased.modeler.efs.uml"
			identifier = new PlatformID {
				value = "org.topcased.modeler.efs.uml"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs_uml
				target = plugin_org_topcased_modeler_efs
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs_uml
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs_uml
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs_uml
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_efs_uml
				target = plugin_org_topcased_modeler_uml
			}
			exports += new Package package_org_topcased_modeler_efs_uml_internal {
				__id = "org.topcased.modeler.efs.uml.internal"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.uml.internal"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_uml_internal_editor {
				__id = "org.topcased.modeler.efs.uml.internal.editor"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.uml.internal.editor"
				}
			}
			exports += new Package package_org_topcased_modeler_efs_uml_internal_handlers {
				__id = "org.topcased.modeler.efs.uml.internal.handlers"
				identifier = new PlatformID {
					value = "org.topcased.modeler.efs.uml.internal.handlers"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_oclinterpreter {
			__id = "org.topcased.modeler.uml.oclinterpreter"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.oclinterpreter"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclinterpreter
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclinterpreter
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclinterpreter
				target = plugin_org_eclipse_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclinterpreter
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclinterpreter
				target = plugin_org_eclipse_ocl_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclinterpreter
				target = plugin_org_eclipse_jface_text
			}
			exports += new Package package_org_topcased_modeler_uml_oclinterpreter {
				__id = "org.topcased.modeler.uml.oclinterpreter"
				identifier = new PlatformID {
					value = "org.topcased.modeler.uml.oclinterpreter"
				}
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_oclownedrule {
			__id = "org.topcased.modeler.uml.oclownedrule"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.oclownedrule"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclownedrule
				target = plugin_org_topcased_modeler_uml_oclinterpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclownedrule
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclownedrule
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclownedrule
				target = plugin_org_topcased_modeler_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_oclownedrule
				target = plugin_org_eclipse_uml2_uml_edit
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_uml_operation_language_ocl {
			__id = "org.topcased.modeler.uml.operation.language.ocl"
			identifier = new PlatformID {
				value = "org.topcased.modeler.uml.operation.language.ocl"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200911301720"
			}
			vendor = vendor_Topcased
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_operation_language_ocl
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_operation_language_ocl
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_operation_language_ocl
				target = plugin_org_topcased_modeler_uml_oclinterpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_operation_language_ocl
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_operation_language_ocl
				target = plugin_org_topcased_modeler_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_operation_language_ocl
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_uml_operation_language_ocl
				target = plugin_org_eclipse_jface_text
			}
		}
		plugins += new Plugin plugin_org_topcased_modeler_export_html {
			__id = "org.topcased.modeler.export.html"
			identifier = new PlatformID {
				value = "org.topcased.modeler.export.html"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.1.v200911301720"
			}
			vendor = vendor_Anyware_Technologies
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_topcased_modeler
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_topcased_modeler_di
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_topcased_modeler_export
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_eclipse_xpand
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_eclipse_emf_mwe_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_eclipse_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_topcased_modeler_export_html
				target = plugin_org_eclipse_xtend_typesystem_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_codegen_ecore {
		__id = "org.eclipse.emf.codegen.ecore"
		identifier = new PlatformID {
			value = "org.eclipse.emf.codegen.ecore"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF's generator model and tools for generating code from Ecore models."
		}
		plugins += new Plugin plugin_org_eclipse_emf_codegen_ecore {
			__id = "org.eclipse.emf.codegen.ecore"
			identifier = new PlatformID {
				value = "org.eclipse.emf.codegen.ecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2002_GenModel {
				__id = "_www_eclipse_org_emf_2002_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2002_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2002/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2002_GenModel {
					__id = "conformsTo__www_eclipse_org_emf_2002_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2002_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2002/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_codegen_ecore {
				__id = "org.eclipse.emf.codegen.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_generator {
				__id = "org.eclipse.emf.codegen.ecore.generator"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.generator"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_genmodel {
				__id = "org.eclipse.emf.codegen.ecore.genmodel"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.genmodel"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_genmodel_generator {
				__id = "org.eclipse.emf.codegen.ecore.genmodel.generator"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.genmodel.generator"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_genmodel_impl {
				__id = "org.eclipse.emf.codegen.ecore.genmodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.genmodel.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_genmodel_util {
				__id = "org.eclipse.emf.codegen.ecore.genmodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.genmodel.util"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_templates_edit {
				__id = "org.eclipse.emf.codegen.ecore.templates.edit"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.templates.edit"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_templates_editor {
				__id = "org.eclipse.emf.codegen.ecore.templates.editor"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.templates.editor"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_templates_model {
				__id = "org.eclipse.emf.codegen.ecore.templates.model"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.templates.model"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_templates_model_tests {
				__id = "org.eclipse.emf.codegen.ecore.templates.model.tests"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.templates.model.tests"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ant {
			__id = "org.eclipse.emf.ant"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ant"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.4.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ant
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ant
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.7.0-2.0.0)'"
				maxVersion = "'[1.7.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ant
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ant
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ant
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ant
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_ant {
				__id = "org.eclipse.emf.ant"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ant"
				}
			}
			exports += new Package package_org_eclipse_emf_ant_taskdefs {
				__id = "org.eclipse.emf.ant.taskdefs"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ant.taskdefs"
				}
			}
			exports += new Package package_org_eclipse_emf_ant_taskdefs_codegen {
				__id = "org.eclipse.emf.ant.taskdefs.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ant.taskdefs.codegen"
				}
			}
			exports += new Package package_org_eclipse_emf_ant_taskdefs_codegen_ecore {
				__id = "org.eclipse.emf.ant.taskdefs.codegen.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ant.taskdefs.codegen.ecore"
				}
			}
			exports += new Package package_org_eclipse_emf_ant_util {
				__id = "org.eclipse.emf.ant.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ant.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_uml2_diagram {
		__id = "org.eclipse.uml2.diagram"
		identifier = new PlatformID {
			value = "org.eclipse.uml2.diagram"
		}
		version = new Version {
			value = "0.9.0.v200906190654"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_copyrightURL"
			text = "%copyright"
			locator = new URLLocator {
				value = "%copyrightURL"
			}
		}
		description = new Description {
			name = "description"
			text = "UML2 Diagramming"
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram {
			__id = "org.eclipse.uml2.diagram"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_activity {
			__id = "org.eclipse.uml2.diagram.activity"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.activity"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_notation_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_emf_query_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_activity
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			exports += new Package package_org_eclipse_uml2_diagram_activity_edit_parts {
				__id = "org.eclipse.uml2.diagram.activity.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.activity.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_activity_part {
				__id = "org.eclipse.uml2.diagram.activity.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.activity.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_activity_providers {
				__id = "org.eclipse.uml2.diagram.activity.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.activity.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_activity_navigator {
				__id = "org.eclipse.uml2.diagram.activity.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.activity.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_csd {
			__id = "org.eclipse.uml2.diagram.csd"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.csd"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_csd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			exports += new Package package_org_eclipse_uml2_diagram_csd_edit_parts {
				__id = "org.eclipse.uml2.diagram.csd.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.csd.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_csd_part {
				__id = "org.eclipse.uml2.diagram.csd.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.csd.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_csd_providers {
				__id = "org.eclipse.uml2.diagram.csd.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.csd.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_csd_navigator {
				__id = "org.eclipse.uml2.diagram.csd.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.csd.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_clazz {
			__id = "org.eclipse.uml2.diagram.clazz"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.clazz"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_notation_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_emf_query_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_clazz
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_action {
				__id = "org.eclipse.uml2.diagram.clazz.action"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.action"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_conventions {
				__id = "org.eclipse.uml2.diagram.clazz.conventions"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.conventions"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_details {
				__id = "org.eclipse.uml2.diagram.clazz.details"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.details"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_edit_commands {
				__id = "org.eclipse.uml2.diagram.clazz.edit.commands"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.edit.commands"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_edit_parts {
				__id = "org.eclipse.uml2.diagram.clazz.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_navigator {
				__id = "org.eclipse.uml2.diagram.clazz.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.navigator"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_parser {
				__id = "org.eclipse.uml2.diagram.clazz.parser"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.parser"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_part {
				__id = "org.eclipse.uml2.diagram.clazz.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_clazz_providers {
				__id = "org.eclipse.uml2.diagram.clazz.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.clazz.providers"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_common {
			__id = "org.eclipse.uml2.diagram.common"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.common"
			}
			state = : "State.active"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_uml2_uml_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_emf_query_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_uml2_diagram_parser
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_uml2_diagram_common_notation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_ocl_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'4.0.0'"
				maxVersion = "'4.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_uml2_diagram_common {
				__id = "org.eclipse.uml2.diagram.common"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_actions {
				__id = "org.eclipse.uml2.diagram.common.actions"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.actions"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_async {
				__id = "org.eclipse.uml2.diagram.common.async"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.async"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_commands {
				__id = "org.eclipse.uml2.diagram.common.commands"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.commands"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_compartments {
				__id = "org.eclipse.uml2.diagram.common.compartments"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.compartments"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_constraint {
				__id = "org.eclipse.uml2.diagram.common.constraint"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.constraint"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_conventions {
				__id = "org.eclipse.uml2.diagram.common.conventions"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.conventions"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_details {
				__id = "org.eclipse.uml2.diagram.common.details"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.details"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_draw2d {
				__id = "org.eclipse.uml2.diagram.common.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.draw2d"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_draw2d_decoration {
				__id = "org.eclipse.uml2.diagram.common.draw2d.decoration"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.draw2d.decoration"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_editparts {
				__id = "org.eclipse.uml2.diagram.common.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.editparts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_editpolicies {
				__id = "org.eclipse.uml2.diagram.common.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_genapi {
				__id = "org.eclipse.uml2.diagram.common.genapi"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.genapi"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_layered {
				__id = "org.eclipse.uml2.diagram.common.layered"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.layered"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_links {
				__id = "org.eclipse.uml2.diagram.common.links"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.links"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parameter {
				__id = "org.eclipse.uml2.diagram.common.parameter"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parameter"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parameter_celleditors {
				__id = "org.eclipse.uml2.diagram.common.parameter.celleditors"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parameter.celleditors"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser {
				__id = "org.eclipse.uml2.diagram.common.parser"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_association {
				__id = "org.eclipse.uml2.diagram.common.parser.association"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.association"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_association_end {
				__id = "org.eclipse.uml2.diagram.common.parser.association.end"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.association.end"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_association_name {
				__id = "org.eclipse.uml2.diagram.common.parser.association.name"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.association.name"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_events {
				__id = "org.eclipse.uml2.diagram.common.parser.events"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.events"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_imports {
				__id = "org.eclipse.uml2.diagram.common.parser.imports"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.imports"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_instance {
				__id = "org.eclipse.uml2.diagram.common.parser.instance"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.instance"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_operation {
				__id = "org.eclipse.uml2.diagram.common.parser.operation"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.operation"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_port {
				__id = "org.eclipse.uml2.diagram.common.parser.port"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.port"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_csd_ {
				__id = "org.eclipse.uml2.diagram.csd'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.csd'"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_property {
				__id = "org.eclipse.uml2.diagram.common.parser.property"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.property"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_slot {
				__id = "org.eclipse.uml2.diagram.common.parser.slot"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.slot"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_stereotype {
				__id = "org.eclipse.uml2.diagram.common.parser.stereotype"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.stereotype"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_parser_valuespec {
				__id = "org.eclipse.uml2.diagram.common.parser.valuespec"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.parser.valuespec"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_part {
				__id = "org.eclipse.uml2.diagram.common.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_pathmap {
				__id = "org.eclipse.uml2.diagram.common.pathmap"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.pathmap"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_preferences {
				__id = "org.eclipse.uml2.diagram.common.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.preferences"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_providers {
				__id = "org.eclipse.uml2.diagram.common.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_sheet {
				__id = "org.eclipse.uml2.diagram.common.sheet"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.sheet"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_sheet_chooser {
				__id = "org.eclipse.uml2.diagram.common.sheet.chooser"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.sheet.chooser"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_stereo {
				__id = "org.eclipse.uml2.diagram.common.stereo"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.stereo"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_view {
				__id = "org.eclipse.uml2.diagram.common.view"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.view"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_common_notation {
			__id = "org.eclipse.uml2.diagram.common.notation"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.common.notation"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common_notation
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common_notation
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_common_notation
				target = plugin_org_eclipse_gmf_runtime_notation
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_mdt_uml2tools_gmf_notation_ext_2008 {
				__id = "_www_eclipse_org_mdt_uml2tools_gmf_notation_ext_2008"
				identifier = new PlatformID {
					value = "_www_eclipse_org_mdt_uml2tools_gmf_notation_ext_2008"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/mdt/uml2tools/gmf/notation/ext/2008"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_mdt_uml2tools_gmf_notation_ext_2008 {
					__id = "conformsTo__www_eclipse_org_mdt_uml2tools_gmf_notation_ext_2008"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_mdt_uml2tools_gmf_notation_ext_2008"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/mdt/uml2tools/gmf/notation/ext/2008.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_uml2_diagram_common_notation_u2tnotation {
				__id = "org.eclipse.uml2.diagram.common.notation.u2tnotation"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.notation.u2tnotation"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_notation_u2tnotation_impl {
				__id = "org.eclipse.uml2.diagram.common.notation.u2tnotation.impl"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.notation.u2tnotation.impl"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_common_notation_u2tnotation_util {
				__id = "org.eclipse.uml2.diagram.common.notation.u2tnotation.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.common.notation.u2tnotation.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_component {
			__id = "org.eclipse.uml2.diagram.component"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.component"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_notation_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_emf_query_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_component
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			exports += new Package package_org_eclipse_uml2_diagram_component_edit_parts {
				__id = "org.eclipse.uml2.diagram.component.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.component.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_component_part {
				__id = "org.eclipse.uml2.diagram.component.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.component.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_component_providers {
				__id = "org.eclipse.uml2.diagram.component.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.component.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_component_navigator {
				__id = "org.eclipse.uml2.diagram.component.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.component.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_parser {
			__id = "org.eclipse.uml2.diagram.parser"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.parser"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_emf_query_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_parser
				target = plugin_org_eclipse_emf_ocl
			}
			exports += new Package package_org_eclipse_uml2_diagram_parser {
				__id = "org.eclipse.uml2.diagram.parser"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.parser"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_parser_assist {
				__id = "org.eclipse.uml2.diagram.parser.assist"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.parser.assist"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_parser_lookup {
				__id = "org.eclipse.uml2.diagram.parser.lookup"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.parser.lookup"
				}
			}
			exports += new Package package_org_eclipse_uml2_internal_diagram_parser {
				__id = "org.eclipse.uml2.internal.diagram.parser"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.internal.diagram.parser"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_statemachine {
			__id = "org.eclipse.uml2.diagram.statemachine"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.statemachine"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_notation_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_emf_query_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_statemachine
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			exports += new Package package_org_eclipse_uml2_diagram_statemachine_edit_parts {
				__id = "org.eclipse.uml2.diagram.statemachine.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.statemachine.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_statemachine_part {
				__id = "org.eclipse.uml2.diagram.statemachine.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.statemachine.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_statemachine_providers {
				__id = "org.eclipse.uml2.diagram.statemachine.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.statemachine.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_statemachine_navigator {
				__id = "org.eclipse.uml2.diagram.statemachine.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.statemachine.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_profile {
			__id = "org.eclipse.uml2.diagram.profile"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.profile"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_notation_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_emf_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_emf_query_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_profile
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			exports += new Package package_org_eclipse_uml2_diagram_profile_edit_parts {
				__id = "org.eclipse.uml2.diagram.profile.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.profile.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_profile_part {
				__id = "org.eclipse.uml2.diagram.profile.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.profile.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_profile_providers {
				__id = "org.eclipse.uml2.diagram.profile.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.profile.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_profile_navigator {
				__id = "org.eclipse.uml2.diagram.profile.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.profile.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_deploy {
			__id = "org.eclipse.uml2.diagram.deploy"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.deploy"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_deploy
				target = plugin_org_eclipse_draw2d
			}
			exports += new Package package_org_eclipse_uml2_diagram_deploy_edit_parts {
				__id = "org.eclipse.uml2.diagram.deploy.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.deploy.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_deploy_part {
				__id = "org.eclipse.uml2.diagram.deploy.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.deploy.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_deploy_providers {
				__id = "org.eclipse.uml2.diagram.deploy.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.deploy.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_deploy_navigator {
				__id = "org.eclipse.uml2.diagram.deploy.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.deploy.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_usecase {
			__id = "org.eclipse.uml2.diagram.usecase"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.usecase"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_usecase
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			exports += new Package package_org_eclipse_uml2_diagram_usecase_draw2d {
				__id = "org.eclipse.uml2.diagram.usecase.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.usecase.draw2d"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_usecase_edit_parts {
				__id = "org.eclipse.uml2.diagram.usecase.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.usecase.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_usecase_part {
				__id = "org.eclipse.uml2.diagram.usecase.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.usecase.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_usecase_providers {
				__id = "org.eclipse.uml2.diagram.usecase.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.usecase.providers"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_usecase_navigator {
				__id = "org.eclipse.uml2.diagram.usecase.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.usecase.navigator"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_sequence {
			__id = "org.eclipse.uml2.diagram.sequence"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.sequence"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_uml2_diagram_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_org_eclipse_uml2_diagram_sequence_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence
				target = plugin_com_ibm_icu
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_edit_parts {
				__id = "org.eclipse.uml2.diagram.sequence.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_navigator {
				__id = "org.eclipse.uml2.diagram.sequence.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.navigator"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_part {
				__id = "org.eclipse.uml2.diagram.sequence.part"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.part"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_providers {
				__id = "org.eclipse.uml2.diagram.sequence.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.providers"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_sequence_model {
			__id = "org.eclipse.uml2.diagram.sequence.model"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.sequence.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence_model
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence_model
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence_model
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_sequence_model
				target = plugin_org_eclipse_gmf_runtime_notation
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_mdt_uml2tools_sequence_diagram_notation_2008 {
				__id = "_www_eclipse_org_mdt_uml2tools_sequence_diagram_notation_2008"
				identifier = new PlatformID {
					value = "_www_eclipse_org_mdt_uml2tools_sequence_diagram_notation_2008"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/mdt/uml2tools/sequence-diagram/notation/2008"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_mdt_uml2tools_sequence_diagram_notation_2008 {
					__id = "conformsTo__www_eclipse_org_mdt_uml2tools_sequence_diagram_notation_2008"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_mdt_uml2tools_sequence_diagram_notation_2008"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/mdt/uml2tools/sequence-diagram/notation/2008.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_mdt_uml2tools_sequence_diagram_1_0 {
				__id = "_www_eclipse_org_mdt_uml2tools_sequence_diagram_1_0"
				identifier = new PlatformID {
					value = "_www_eclipse_org_mdt_uml2tools_sequence_diagram_1_0"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/mdt/uml2tools/sequence-diagram/1.0"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_mdt_uml2tools_sequence_diagram_1_0 {
					__id = "conformsTo__www_eclipse_org_mdt_uml2tools_sequence_diagram_1_0"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_mdt_uml2tools_sequence_diagram_1_0"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/mdt/uml2tools/sequence-diagram/1.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_builder {
				__id = "org.eclipse.uml2.diagram.sequence.model.builder"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.builder"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_edit {
				__id = "org.eclipse.uml2.diagram.sequence.model.edit"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.edit"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_sdnotation {
				__id = "org.eclipse.uml2.diagram.sequence.model.sdnotation"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.sdnotation"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_sdnotation_impl {
				__id = "org.eclipse.uml2.diagram.sequence.model.sdnotation.impl"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.sdnotation.impl"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_sdnotation_util {
				__id = "org.eclipse.uml2.diagram.sequence.model.sdnotation.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.sdnotation.util"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_sequenced {
				__id = "org.eclipse.uml2.diagram.sequence.model.sequenced"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.sequenced"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_sequenced_impl {
				__id = "org.eclipse.uml2.diagram.sequence.model.sequenced.impl"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.sequenced.impl"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_sequence_model_sequenced_util {
				__id = "org.eclipse.uml2.diagram.sequence.model.sequenced.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.sequence.model.sequenced.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_ocl_uml {
		__id = "org.eclipse.ocl.uml"
		identifier = new PlatformID {
			value = "org.eclipse.ocl.uml"
		}
		version = new Version {
			value = "2.0.0.v200901271800-3--7w311A16382511"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Object Constraint Language (OCL) 2.0 binding for the UML metamodel."
		}
		plugins += new Plugin plugin_org_eclipse_ocl_uml {
			__id = "org.eclipse.ocl.uml"
			identifier = new PlatformID {
				value = "org.eclipse.ocl.uml"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v200905271400"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_uml
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_uml
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_uml
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-3.1.0)'"
				maxVersion = "'[3.0.0-3.1.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_uml
				target = plugin_org_eclipse_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_ocl_1_1_0_UML {
				__id = "_www_eclipse_org_ocl_1_1_0_UML"
				identifier = new PlatformID {
					value = "_www_eclipse_org_ocl_1_1_0_UML"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/ocl/1.1.0/UML"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_ocl_1_1_0_UML {
					__id = "conformsTo__www_eclipse_org_ocl_1_1_0_UML"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_ocl_1_1_0_UML"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/ocl/1.1.0/UML.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_ocl_uml {
				__id = "org.eclipse.ocl.uml"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.uml"
				}
			}
			exports += new Package package_org_eclipse_ocl_uml_options {
				__id = "org.eclipse.ocl.uml.options"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.uml.options"
				}
			}
			exports += new Package package_org_eclipse_ocl_uml_impl {
				__id = "org.eclipse.ocl.uml.impl"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.uml.impl"
				}
			}
			exports += new Package package_org_eclipse_ocl_uml_internal {
				__id = "org.eclipse.ocl.uml.internal"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.uml.internal"
				}
			}
			exports += new Package package_org_eclipse_ocl_uml_internal_operations {
				__id = "org.eclipse.ocl.uml.internal.operations"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.uml.internal.operations"
				}
			}
			exports += new Package package_org_eclipse_ocl_uml_util {
				__id = "org.eclipse.ocl.uml.util"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.uml.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_emf_databinding_edit {
		__id = "org.eclipse.emf.databinding.edit"
		identifier = new PlatformID {
			value = "org.eclipse.emf.databinding.edit"
		}
		version = new Version {
			value = "1.1.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Support for using EMF objects with JFace's data binding framework and integrating with EMF's editing framework."
		}
		plugins += new Plugin plugin_org_eclipse_emf_databinding_edit {
			__id = "org.eclipse.emf.databinding.edit"
			identifier = new PlatformID {
				value = "org.eclipse.emf.databinding.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding_edit
				target = plugin_org_eclipse_emf_databinding
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding_edit
				target = plugin_org_eclipse_core_databinding_property
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_databinding_edit {
				__id = "org.eclipse.emf.databinding.edit"
				identifier = new PlatformID {
					value = "org.eclipse.emf.databinding.edit"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_mylyn_ide_feature {
		__id = "org.eclipse.mylyn.ide_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn.ide_feature"
		}
		version = new Version {
			value = "3.2.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Mylyn Task-Focused UI extensions for the Eclipse IDE.  Provides focusing of common IDE views and editors."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_team_cvs {
			__id = "org.eclipse.mylyn.team.cvs"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.team.cvs"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_team_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_team_cvs_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_team_cvs_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_ui_workbench
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_mylyn_team_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_mylyn_resources_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_cvs
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_team_ccvs {
				__id = "org.eclipse.mylyn.internal.team.ccvs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.team.ccvs"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_bugzilla_ide {
			__id = "org.eclipse.mylyn.bugzilla.ide"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.bugzilla.ide"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ide
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_ide_ui {
			__id = "org.eclipse.mylyn.ide.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.ide.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_resources_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_ide_ui {
				__id = "org.eclipse.mylyn.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_ide_ui {
				__id = "org.eclipse.mylyn.internal.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_ide_ui_actions {
				__id = "org.eclipse.mylyn.internal.ide.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.ide.ui.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_tasks_bugs {
			__id = "org.eclipse.mylyn.tasks.bugs"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.tasks.bugs"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_ui_views_log
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_tasks_bugs
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_provisional_tasks_bugs {
				__id = "org.eclipse.mylyn.internal.provisional.tasks.bugs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.provisional.tasks.bugs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_bugs {
				__id = "org.eclipse.mylyn.internal.tasks.bugs"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.bugs"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_bugs_actions {
				__id = "org.eclipse.mylyn.internal.tasks.bugs.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.bugs.actions"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_tasks_bugs_wizards {
				__id = "org.eclipse.mylyn.internal.tasks.bugs.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.tasks.bugs.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_help_ui {
			__id = "org.eclipse.mylyn.help.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.help.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			ownedEntities += new Document {
				__id = "org.eclipse.mylyn.help.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.help.ui"
				}
				locator = new EFSLocator {
					value = "org.eclipse.mylyn.help.ui"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_help_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_help_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_help_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_help_ui
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_help_ui
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_help_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_help_ui
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.7.0'"
				maxVersion = "'1.7.0'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_help_ui_anttask {
				__id = "org.eclipse.mylyn.internal.help.ui.anttask"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.help.ui.anttask"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_doc {
		__id = "org.eclipse.emf.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.doc"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Documentation and tutorials for EMF."
		}
		plugins += new Plugin plugin_org_eclipse_emf_doc {
			__id = "org.eclipse.emf.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_cheatsheets {
			__id = "org.eclipse.emf.cheatsheets"
			identifier = new PlatformID {
				value = "org.eclipse.emf.cheatsheets"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_ui_workbench
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_emf_importer_java
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_cheatsheets
				target = plugin_org_eclipse_emf_importer_rose
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_cheatsheets {
				__id = "org.eclipse.emf.cheatsheets"
				identifier = new PlatformID {
					value = "org.eclipse.emf.cheatsheets"
				}
			}
			exports += new Package package_org_eclipse_emf_cheatsheets_actions {
				__id = "org.eclipse.emf.cheatsheets.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.cheatsheets.actions"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_codegen {
		__id = "org.eclipse.emf.codegen"
		identifier = new PlatformID {
			value = "org.eclipse.emf.codegen"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Generic code generation utilities, including Java Emitter Templates (JET) and mergers for Java and properties files."
		}
		plugins += new Plugin plugin_org_eclipse_emf_codegen {
			__id = "org.eclipse.emf.codegen"
			identifier = new PlatformID {
				value = "org.eclipse.emf.codegen"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_codegen {
				__id = "org.eclipse.emf.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_jet {
				__id = "org.eclipse.emf.codegen.jet"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.jet"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_jmerge {
				__id = "org.eclipse.emf.codegen.jmerge"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.jmerge"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_merge_java {
				__id = "org.eclipse.emf.codegen.merge.java"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.merge.java"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_merge_java_facade {
				__id = "org.eclipse.emf.codegen.merge.java.facade"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.merge.java.facade"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_merge_java_facade_ast {
				__id = "org.eclipse.emf.codegen.merge.java.facade.ast"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.merge.java.facade.ast"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_merge_java_facade_jdom {
				__id = "org.eclipse.emf.codegen.merge.java.facade.jdom"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.merge.java.facade.jdom"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_merge_properties {
				__id = "org.eclipse.emf.codegen.merge.properties"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.merge.properties"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_util {
				__id = "org.eclipse.emf.codegen.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_tigris_subversion_subclipse_graph_feature {
		__id = "org.tigris.subversion.subclipse.graph.feature"
		identifier = new PlatformID {
			value = "org.tigris.subversion.subclipse.graph.feature"
		}
		version = new Version {
			value = "1.0.7"
		}
		provider = vendor_tigris_org
		copyright = new Copyright {
			name = "_subclipse_tigris_org_"
			text = "http://subclipse.tigris.org/"
			locator = new URLLocator {
				value = "http://subclipse.tigris.org/"
			}
		}
		description = new Description {
			name = "description"
			text = "Subversion Revision Graph for Subclipse"
		}
		plugins += new Plugin plugin_org_tigris_subversion_subclipse_graph {
			__id = "org.tigris.subversion.subclipse.graph"
			identifier = new PlatformID {
				value = "org.tigris.subversion.subclipse.graph"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.7"
			}
			vendor = vendor_tigris_org
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_tigris_subversion_subclipse_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_team_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_tigris_subversion_subclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.4.6'"
				maxVersion = "'1.4.6'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_team_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_graph
				target = plugin_org_eclipse_ui_views
			}
			exports += new Package package_org_tigris_subversion_subclipse_graph_cache {
				__id = "org.tigris.subversion.subclipse.graph.cache"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.graph.cache"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.graph.cach"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_common {
		__id = "org.eclipse.emf.common"
		identifier = new PlatformID {
			value = "org.eclipse.emf.common"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Common platform-independent utilities used throughout EMF, including collection classes, notifiers, adapters, and commands."
		}
		plugins += new Plugin plugin_org_eclipse_emf_common {
			__id = "org.eclipse.emf.common"
			identifier = new PlatformID {
				value = "org.eclipse.emf.common"
			}
			state = : "State.active"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_common
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_common {
				__id = "org.eclipse.emf.common"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common"
				}
			}
			exports += new Package package_org_eclipse_emf_common_archive {
				__id = "org.eclipse.emf.common.archive"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.archive"
				}
			}
			exports += new Package package_org_eclipse_emf_common_command {
				__id = "org.eclipse.emf.common.command"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.command"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify {
				__id = "org.eclipse.emf.common.notify"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify_impl {
				__id = "org.eclipse.emf.common.notify.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_common_util {
				__id = "org.eclipse.emf.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_query {
		__id = "org.eclipse.emf.query"
		identifier = new PlatformID {
			value = "org.eclipse.emf.query"
		}
		version = new Version {
			value = "1.2.100.v200901271643-218Z7w311A142A1142"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2009 IBM Corporation, Zeligsoft Inc., and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Model Query."
		}
		plugins += new Plugin plugin_org_eclipse_emf_query {
			__id = "org.eclipse.emf.query"
			identifier = new PlatformID {
				value = "org.eclipse.emf.query"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.100.v200903190031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_query {
				__id = "org.eclipse.emf.query"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query"
				}
			}
			exports += new Package package_org_eclipse_emf_query_conditions {
				__id = "org.eclipse.emf.query.conditions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.conditions"
				}
			}
			exports += new Package package_org_eclipse_emf_query_conditions_booleans {
				__id = "org.eclipse.emf.query.conditions.booleans"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.conditions.booleans"
				}
			}
			exports += new Package package_org_eclipse_emf_query_conditions_eobjects {
				__id = "org.eclipse.emf.query.conditions.eobjects"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.conditions.eobjects"
				}
			}
			exports += new Package package_org_eclipse_emf_query_conditions_eobjects_structuralfeatures {
				__id = "org.eclipse.emf.query.conditions.eobjects.structuralfeatures"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.conditions.eobjects.structuralfeatures"
				}
			}
			exports += new Package package_org_eclipse_emf_query_conditions_numbers {
				__id = "org.eclipse.emf.query.conditions.numbers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.conditions.numbers"
				}
			}
			exports += new Package package_org_eclipse_emf_query_conditions_strings {
				__id = "org.eclipse.emf.query.conditions.strings"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.conditions.strings"
				}
			}
			exports += new Package package_org_eclipse_emf_query_handlers {
				__id = "org.eclipse.emf.query.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.handlers"
				}
			}
			exports += new Package package_org_eclipse_emf_query_internal {
				__id = "org.eclipse.emf.query.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_query_internal_l10n {
				__id = "org.eclipse.emf.query.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_query_internal_statements {
				__id = "org.eclipse.emf.query.internal.statements"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.internal.statements"
				}
			}
			exports += new Package package_org_eclipse_emf_query_internal_util {
				__id = "org.eclipse.emf.query.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.internal.util"
				}
			}
			exports += new Package package_org_eclipse_emf_query_statements {
				__id = "org.eclipse.emf.query.statements"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.statements"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_xsd {
		__id = "org.eclipse.xsd"
		identifier = new PlatformID {
			value = "org.eclipse.xsd"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "The XSD model for representing and manipulating XML Schemas."
		}
		plugins += new Plugin plugin_org_eclipse_xsd {
			__id = "org.eclipse.xsd"
			identifier = new PlatformID {
				value = "org.eclipse.xsd"
			}
			state = : "State.active"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_xsd_2002_XSD {
				__id = "_www_eclipse_org_xsd_2002_XSD"
				identifier = new PlatformID {
					value = "_www_eclipse_org_xsd_2002_XSD"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/xsd/2002/XSD"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_xsd_2002_XSD {
					__id = "conformsTo__www_eclipse_org_xsd_2002_XSD"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_xsd_2002_XSD"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/xsd/2002/XSD.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_xsd {
				__id = "org.eclipse.xsd"
				identifier = new PlatformID {
					value = "org.eclipse.xsd"
				}
			}
			exports += new Package package_org_eclipse_xsd_ecore {
				__id = "org.eclipse.xsd.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.ecore"
				}
			}
			exports += new Package package_org_eclipse_xsd_impl {
				__id = "org.eclipse.xsd.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.impl"
				}
			}
			exports += new Package package_org_eclipse_xsd_impl_type {
				__id = "org.eclipse.xsd.impl.type"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.impl.type"
				}
			}
			exports += new Package package_org_eclipse_xsd_util {
				__id = "org.eclipse.xsd.util"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_emf_mapping_ecore {
		__id = "org.eclipse.emf.mapping.ecore"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mapping.ecore"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Platform-independent support for mapping between Ecore models and to XML representations for instance data."
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_ecore {
			__id = "org.eclipse.emf.mapping.ecore"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.ecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_ecore2ecore {
			__id = "org.eclipse.emf.mapping.ecore2ecore"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.ecore2ecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore
				target = plugin_org_eclipse_emf_mapping
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2004_Ecore2Ecore {
				__id = "_www_eclipse_org_emf_2004_Ecore2Ecore"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2004_Ecore2Ecore"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2004/Ecore2Ecore"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2004_Ecore2Ecore {
					__id = "conformsTo__www_eclipse_org_emf_2004_Ecore2Ecore"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2004_Ecore2Ecore"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2004/Ecore2Ecore.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_mapping_ecore2ecore {
				__id = "org.eclipse.emf.mapping.ecore2ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2ecore"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2ecore_impl {
				__id = "org.eclipse.emf.mapping.ecore2ecore.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2ecore.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2ecore_provider {
				__id = "org.eclipse.emf.mapping.ecore2ecore.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2ecore.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2ecore_util {
				__id = "org.eclipse.emf.mapping.ecore2ecore.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2ecore.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_ecore2xml {
			__id = "org.eclipse.emf.mapping.ecore2xml"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.ecore2xml"
			}
			state = : "State.active"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2005_Ecore2XML {
				__id = "_www_eclipse_org_emf_2005_Ecore2XML"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2005_Ecore2XML"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2005/Ecore2XML"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2005_Ecore2XML {
					__id = "conformsTo__www_eclipse_org_emf_2005_Ecore2XML"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2005_Ecore2XML"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2005/Ecore2XML.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_mapping_ecore2xml {
				__id = "org.eclipse.emf.mapping.ecore2xml"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2xml"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2xml_impl {
				__id = "org.eclipse.emf.mapping.ecore2xml.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2xml.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2xml_util {
				__id = "org.eclipse.emf.mapping.ecore2xml.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2xml.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_m2m_qvt_oml_runtime {
		__id = "org.eclipse.m2m.qvt.oml.runtime"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.qvt.oml.runtime"
		}
		version = new Version {
			value = "2.0.0.v20090410-1820-79--AkF77g7RCR3BeK7"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Operational QVT runtime component "
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_project {
			__id = "org.eclipse.m2m.qvt.oml.project"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.project"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090410-1820"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_project
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_project
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_project
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_project
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_project
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_project
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_project
				target = plugin_org_eclipse_m2m_qvt_oml_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_project {
				__id = "org.eclipse.m2m.internal.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ui {
				__id = "org.eclipse.m2m.tests.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_project_builder {
				__id = "org.eclipse.m2m.internal.qvt.oml.project.builder"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.project.builder"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ui {
				__id = "org.eclipse.m2m.tests.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_project_model {
				__id = "org.eclipse.m2m.internal.qvt.oml.project.model"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.project.model"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_project_nature {
				__id = "org.eclipse.m2m.internal.qvt.oml.project.nature"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.project.nature"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_runtime {
			__id = "org.eclipse.m2m.qvt.oml.runtime"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.runtime"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090608-1830"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.7.1-2.0.0)'"
				maxVersion = "'[1.7.1-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_generator {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.generator"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.generator"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_launch {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.launch"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_project {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_project {
				__id = "org.eclipse.m2m.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_project_config {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.project.config"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.project.config"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_util {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.util"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime_util {
				__id = "org.eclipse.m2m.qvt.oml.runtime.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_runtime_ui {
			__id = "org.eclipse.m2m.qvt.oml.runtime.ui"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.runtime.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090526-1940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_m2m_qvt_oml_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_m2m_qvt_oml_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_m2m_qvt_oml_project
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_runtime_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_ui {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_ui_launch {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.ui.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.ui.launch"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_runtime_ui_trace_common {
				__id = "org.eclipse.m2m.internal.qvt.oml.runtime.ui.trace.common"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.runtime.ui.trace.common"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime_ui_wizards {
				__id = "org.eclipse.m2m.qvt.oml.runtime.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime.ui.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_trace_edit {
			__id = "org.eclipse.m2m.qvt.oml.trace.edit"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.trace.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090526-1940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_trace_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_trace_edit
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_trace_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_trace_provider {
				__id = "org.eclipse.m2m.internal.qvt.oml.trace.provider"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.trace.provider"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_xtend_ui_source {
		__id = "org.eclipse.xtend.ui.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.ui.source"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Xtend component.(Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xtend_ui_source {
			__id = "org.eclipse.xtend.ui.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.ui.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_xpand_ui_source {
		__id = "org.eclipse.xpand.ui.source"
		identifier = new PlatformID {
			value = "org.eclipse.xpand.ui.source"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for XPand's UI component.(Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xpand_ui_source {
			__id = "org.eclipse.xpand.ui.source"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.ui.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_validation_ocl {
		__id = "org.eclipse.emf.validation.ocl"
		identifier = new PlatformID {
			value = "org.eclipse.emf.validation.ocl"
		}
		version = new Version {
			value = "1.2.0.v200901271722-22-7w311A12382833"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Validation Framework OCL Integration."
		}
		plugins += new Plugin plugin_org_eclipse_emf_validation_ocl {
			__id = "org.eclipse.emf.validation.ocl"
			identifier = new PlatformID {
				value = "org.eclipse.emf.validation.ocl"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.0.v200901271722"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ocl
				target = plugin_org_eclipse_emf_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ocl
				target = plugin_org_eclipse_emf_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ocl
				target = plugin_org_eclipse_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ocl
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ocl
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_validation_internal_ocl {
				__id = "org.eclipse.emf.validation.internal.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.internal.ocl"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_ocl {
				__id = "org.eclipse.emf.validation.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ocl"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_emf_transaction {
		__id = "org.eclipse.emf.transaction"
		identifier = new PlatformID {
			value = "org.eclipse.emf.transaction"
		}
		version = new Version {
			value = "1.3.1.v20090819-1457-3508s733L3D4D26998"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Model Transaction API."
		}
		plugins += new Plugin plugin_org_eclipse_emf_transaction {
			__id = "org.eclipse.emf.transaction"
			identifier = new PlatformID {
				value = "org.eclipse.emf.transaction"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200902010221"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction
				target = plugin_org_eclipse_emf_ecore_change
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction
				target = plugin_org_eclipse_emf_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_transaction {
				__id = "org.eclipse.emf.transaction"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_impl {
				__id = "org.eclipse.emf.transaction.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_internal {
				__id = "org.eclipse.emf.transaction.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_internal_l10n {
				__id = "org.eclipse.emf.transaction.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_util {
				__id = "org.eclipse.emf.transaction.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_transaction_ui {
			__id = "org.eclipse.emf.transaction.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.transaction.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.1.v20090819-1457"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction_ui
				target = plugin_org_eclipse_emf_transaction
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_transaction_ui_internal {
				__id = "org.eclipse.emf.transaction.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_ui_internal_l10n {
				__id = "org.eclipse.emf.transaction.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_ui_provider {
				__id = "org.eclipse.emf.transaction.ui.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.ui.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_ui_view {
				__id = "org.eclipse.emf.transaction.ui.view"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.ui.view"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_buckminster_core_feature {
		__id = "org.eclipse.buckminster.core.feature"
		identifier = new PlatformID {
			value = "org.eclipse.buckminster.core.feature"
		}
		version = new Version {
			value = "1.1.350.r10643"
		}
		provider = vendor_Eclipse_org
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_buckminster_COPYRIGHT"
			text = "Copyright (c) 2006-2008, Cloudsmith Inc. The code, documentation and other materials contained herein have been licensed under the Eclipse Public License - v 1.0 by the copyright holder listed above, as the Initial Contributor under such license. The text of such license is available at www.eclipse.org."
			locator = new URLLocator {
				value = "http://www.eclipse.org/buckminster/COPYRIGHT"
			}
		}
		description = new Description {
			name = "description"
			text = "This is the UI core Buckminster feature.  Buckminster is a tool to help materialize components in a workspace. It also contains a simple build integration with Eclipse as well as a more advanced one for more complex scenarios."
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_ui {
			__id = "org.eclipse.buckminster.ui"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.350.r10637"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.350'"
				maxVersion = "'1.1.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_download
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_osgi_filter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui_intro
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui_intro_universal
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.300'"
				maxVersion = "'3.2.300'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_equinox_security
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_generic
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_generic_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_buckminster_opml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_ecf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			exports += new Package package_org_eclipse_buckminster_ui {
				__id = "org.eclipse.buckminster.ui"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.ui"
				}
			}
			exports += new Package package_org_eclipse_buckminster_ui_actions {
				__id = "org.eclipse.buckminster.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_buckminster_ui_editor {
				__id = "org.eclipse.buckminster.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.ui.editor"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_cmdline {
			__id = "org.eclipse.buckminster.cmdline"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.cmdline"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.350.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cmdline
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cmdline
				target = plugin_org_eclipse_core_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cmdline
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			exports += new Package package_org_eclipse_buckminster_cmdline {
				__id = "org.eclipse.buckminster.cmdline"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.cmdline"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_installer {
			__id = "org.eclipse.buckminster.installer"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.installer"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.350.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = plugin_org_eclipse_buckminster_cmdline
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.350'"
				maxVersion = "'1.0.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_p2_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_installer
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_runtime {
			__id = "org.eclipse.buckminster.runtime"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.runtime"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.r10546"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_runtime
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.100'"
				maxVersion = "'3.3.100'"
			}
			exports += new Package package_org_eclipse_buckminster_runtime {
				__id = "org.eclipse.buckminster.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.runtime"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_ant {
			__id = "org.eclipse.buckminster.ant"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.ant"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.350.r10567"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.350'"
				maxVersion = "'1.1.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_buckminster_cmdline
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.350'"
				maxVersion = "'1.0.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_buckminster_download
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_buckminster_osgi_filter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.100'"
				maxVersion = "'3.2.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.7.1'"
				maxVersion = "'1.7.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_com_jcraft_jsch
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.1.41'"
				maxVersion = "'0.1.41'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ant
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			exports += new Package package_org_eclipse_buckminster_ant {
				__id = "org.eclipse.buckminster.ant"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.ant"
				}
			}
			exports += new Package package_org_eclipse_buckminster_ant_actor {
				__id = "org.eclipse.buckminster.ant.actor"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.ant.actor"
				}
			}
			exports += new Package package_org_eclipse_buckminster_ant_tasks {
				__id = "org.eclipse.buckminster.ant.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.ant.tasks"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_core {
			__id = "org.eclipse.buckminster.core"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.350.r10633"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_buckminster_cmdline
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.350'"
				maxVersion = "'1.0.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_buckminster_download
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_buckminster_opml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_update_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.300'"
				maxVersion = "'3.2.300'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.200'"
				maxVersion = "'3.2.200'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_ecf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_buckminster_osgi_filter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			exports += new Package package_org_eclipse_buckminster_core {
				__id = "org.eclipse.buckminster.core"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_actor {
				__id = "org.eclipse.buckminster.core.actor"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.actor"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_build {
				__id = "org.eclipse.buckminster.core.build"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.build"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_commands {
				__id = "org.eclipse.buckminster.core.commands"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.commands"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_common_model {
				__id = "org.eclipse.buckminster.core.common.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.common.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_common_parser {
				__id = "org.eclipse.buckminster.core.common.parser"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.common.parser"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_cspec {
				__id = "org.eclipse.buckminster.core.cspec"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.cspec"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_cspec_builder {
				__id = "org.eclipse.buckminster.core.cspec.builder"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.cspec.builder"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_cspec_model {
				__id = "org.eclipse.buckminster.core.cspec.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.cspec.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_ctype {
				__id = "org.eclipse.buckminster.core.ctype"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.ctype"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_helpers {
				__id = "org.eclipse.buckminster.core.helpers"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.helpers"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_materializer {
				__id = "org.eclipse.buckminster.core.materializer"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.materializer"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_metadata {
				__id = "org.eclipse.buckminster.core.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.metadata"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_metadata_builder {
				__id = "org.eclipse.buckminster.core.metadata.builder"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.metadata.builder"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_metadata_model {
				__id = "org.eclipse.buckminster.core.metadata.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.metadata.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_mspec {
				__id = "org.eclipse.buckminster.core.mspec"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.mspec"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_mspec_builder {
				__id = "org.eclipse.buckminster.core.mspec.builder"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.mspec.builder"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_mspec_model {
				__id = "org.eclipse.buckminster.core.mspec.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.mspec.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_parser {
				__id = "org.eclipse.buckminster.core.parser"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.parser"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_prefedit {
				__id = "org.eclipse.buckminster.core.prefedit"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.prefedit"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_query {
				__id = "org.eclipse.buckminster.core.query"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.query"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_query_builder {
				__id = "org.eclipse.buckminster.core.query.builder"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.query.builder"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_query_model {
				__id = "org.eclipse.buckminster.core.query.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.query.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_reader {
				__id = "org.eclipse.buckminster.core.reader"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.reader"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_resolver {
				__id = "org.eclipse.buckminster.core.resolver"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.resolver"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_rmap_model {
				__id = "org.eclipse.buckminster.core.rmap.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.rmap.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_rmap_parser {
				__id = "org.eclipse.buckminster.core.rmap.parser"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.rmap.parser"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_site {
				__id = "org.eclipse.buckminster.core.site"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.site"
				}
			}
			exports += new Package package_org_eclipse_buckminster_core_version {
				__id = "org.eclipse.buckminster.core.version"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.core.version"
				}
				version = new Version {
					value = "org.eclipse.buckminster.core.versio"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_engine_phases
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_core
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_sax {
			__id = "org.eclipse.buckminster.sax"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.sax"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_sax
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_eclipse_buckminster_sax {
				__id = "org.eclipse.buckminster.sax"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.sax"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_download {
			__id = "org.eclipse.buckminster.download"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.download"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_download
				target = plugin_org_eclipse_ecf_provider_filetransfer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_download
				target = plugin_org_eclipse_ecf_filetransfer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_download
				target = plugin_org_eclipse_ecf_identity
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_download
				target = plugin_org_eclipse_ecf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_download
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_download
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_download
				target = plugin_org_eclipse_buckminster_cmdline
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_buckminster_download {
				__id = "org.eclipse.buckminster.download"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.download"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_opml {
			__id = "org.eclipse.buckminster.opml"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.opml"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_opml
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			exports += new Package package_org_eclipse_buckminster_opml {
				__id = "org.eclipse.buckminster.opml"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.opml"
				}
			}
			exports += new Package package_org_eclipse_buckminster_opml_builder {
				__id = "org.eclipse.buckminster.opml.builder"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.opml.builder"
				}
			}
			exports += new Package package_org_eclipse_buckminster_opml_model {
				__id = "org.eclipse.buckminster.opml.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.opml.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_opml_parser {
				__id = "org.eclipse.buckminster.opml.parser"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.opml.parser"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_generic {
			__id = "org.eclipse.buckminster.generic"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.generic"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic
				target = plugin_org_eclipse_core_filesystem
			}
			exports += new Package package_org_eclipse_buckminster_generic_model {
				__id = "org.eclipse.buckminster.generic.model"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.model"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_model_tree {
				__id = "org.eclipse.buckminster.generic.model.tree"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.model.tree"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_plugin {
				__id = "org.eclipse.buckminster.generic.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.plugin"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_properties {
				__id = "org.eclipse.buckminster.generic.properties"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.properties"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_utils {
				__id = "org.eclipse.buckminster.generic.utils"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.utils"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_generic_ui {
			__id = "org.eclipse.buckminster.generic.ui"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.generic.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic_ui
				target = plugin_org_eclipse_swt
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic_ui
				target = plugin_org_eclipse_buckminster_generic
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic_ui
				target = plugin_org_eclipse_platform
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic_ui
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_generic_ui
				target = plugin_org_eclipse_core_resources
			}
			exports += new Package package_org_eclipse_buckminster_generic_ui {
				__id = "org.eclipse.buckminster.generic.ui"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.ui"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_ui_actions {
				__id = "org.eclipse.buckminster.generic.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_ui_model_tree {
				__id = "org.eclipse.buckminster.generic.ui.model.tree"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.ui.model.tree"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_ui_providers {
				__id = "org.eclipse.buckminster.generic.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_buckminster_generic_ui_utils {
				__id = "org.eclipse.buckminster.generic.ui.utils"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.generic.ui.utils"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_executor {
			__id = "org.eclipse.buckminster.executor"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.executor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_executor
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_executor
				target = plugin_org_eclipse_buckminster_download
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_executor
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_executor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_fetcher {
			__id = "org.eclipse.buckminster.fetcher"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.fetcher"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = plugin_org_eclipse_buckminster_download
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = plugin_org_eclipse_buckminster_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = plugin_org_eclipse_ecf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = package_org_apache_tools_bzip2
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = package_org_apache_tools_tar
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_fetcher
				target = package_org_apache_tools_zip
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_osgi_filter {
			__id = "org.eclipse.buckminster.osgi.filter"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.osgi.filter"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.r10619"
			}
			vendor = vendor_The_Buckminster_project
			exports += new Package package_org_eclipse_buckminster_osgi_filter {
				__id = "org.eclipse.buckminster.osgi.filter"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.osgi.filter"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_osgi_filter
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_osgi_filter
				target = package_org_osgi_framework
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_ui_dependency_visualizer {
			__id = "org.eclipse.buckminster.ui.dependency.visualizer"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.ui.dependency.visualizer"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.r10539"
			}
			vendor = vendor_Eclipse_Buckminster_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_zest_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_zest_layouts
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_buckminster_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.350'"
				maxVersion = "'1.0.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.350'"
				maxVersion = "'1.1.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_ui_dependency_visualizer
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_zest_core {
			__id = "org.eclipse.zest.core"
			identifier = new PlatformID {
				value = "org.eclipse.zest.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v20090504-1850"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = plugin_org_eclipse_zest_layouts
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = plugin_org_eclipse_draw2d
			}
			exports += new Package package_org_eclipse_zest_core_viewers {
				__id = "org.eclipse.zest.core.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.zest.core.viewers"
				}
			}
			exports += new Package package_org_eclipse_zest_core_widgets {
				__id = "org.eclipse.zest.core.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.zest.core.widgets"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "3.8.1"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_zest_layouts {
			__id = "org.eclipse.zest.layouts"
			identifier = new PlatformID {
				value = "org.eclipse.zest.layouts"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v20090504-1850"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_swt
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_draw2d
			}
			exports += new Package package_org_eclipse_zest_layouts {
				__id = "org.eclipse.zest.layouts"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_algorithms {
				__id = "org.eclipse.zest.layouts.algorithms"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.algorithms"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_algorithms_internal {
				__id = "org.eclipse.zest.layouts.algorithms.internal"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.algorithms.internal"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_constraints {
				__id = "org.eclipse.zest.layouts.constraints"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.constraints"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_dataStructures {
				__id = "org.eclipse.zest.layouts.dataStructures"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.dataStructures"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_exampleStructures {
				__id = "org.eclipse.zest.layouts.exampleStructures"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.exampleStructures"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_exampleUses {
				__id = "org.eclipse.zest.layouts.exampleUses"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.exampleUses"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_progress {
				__id = "org.eclipse.zest.layouts.progress"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.progress"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_draw2d {
			__id = "org.eclipse.draw2d"
			identifier = new PlatformID {
				value = "org.eclipse.draw2d"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.1.v20090813-1341"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_draw2d
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_org_eclipse_draw2d_graph {
				__id = "org.eclipse.draw2d.graph"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.graph"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_org_eclipse_draw2d_images {
				__id = "org.eclipse.draw2d.images"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.images"
				}
			}
			exports += new Package package_org_eclipse_draw2d_internal {
				__id = "org.eclipse.draw2d.internal"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.internal"
				}
			}
			exports += new Package package_org_eclipse_draw2d_parts {
				__id = "org.eclipse.draw2d.parts"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.parts"
				}
			}
			exports += new Package package_org_eclipse_draw2d_text {
				__id = "org.eclipse.draw2d.text"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.text"
				}
			}
			exports += new Package package_org_eclipse_draw2d_widgets {
				__id = "org.eclipse.draw2d.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.widgets"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_draw2d
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "3.8.1"
				maxVersion = "5.0.0"
			}
		}
	}

	features += new Feature feature_org_eclipse_mylyn_context_feature {
		__id = "org.eclipse.mylyn.context_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn.context_feature"
		}
		version = new Version {
			value = "3.2.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Provides the Mylyn Task-Focused Interface."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_context_ui {
			__id = "org.eclipse.mylyn.context.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.context.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_mylyn_monitor_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_context_ui {
				__id = "org.eclipse.mylyn.context.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.context.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_ui {
				__id = "org.eclipse.mylyn.internal.context.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_ui_actions {
				__id = "org.eclipse.mylyn.internal.context.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_ui_commands {
				__id = "org.eclipse.mylyn.internal.context.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_ui_editors {
				__id = "org.eclipse.mylyn.internal.context.ui.editors"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.ui.editors"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_ui_preferences {
				__id = "org.eclipse.mylyn.internal.context.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_ui_views {
				__id = "org.eclipse.mylyn.internal.context.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.ui.views"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_context_ui_wizards {
				__id = "org.eclipse.mylyn.internal.context.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.context.ui.wizards"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_context_ui
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_resources_ui {
			__id = "org.eclipse.mylyn.resources.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.resources.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_mylyn_monitor_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_resources_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_resources_ui {
				__id = "org.eclipse.mylyn.internal.resources.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.resources.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_resources_ui_preferences {
				__id = "org.eclipse.mylyn.internal.resources.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.resources.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_mylyn_resources_ui {
				__id = "org.eclipse.mylyn.resources.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.resources.ui"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_mylyn_bugzilla_feature {
		__id = "org.eclipse.mylyn.bugzilla_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn.bugzilla_feature"
		}
		version = new Version {
			value = "3.2.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Provides Task List integration, offline support and rich editing for the open source Bugzilla bug tracker."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_bugzilla_core {
			__id = "org.eclipse.mylyn.bugzilla.core"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.bugzilla.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_core
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_core
				target = plugin_org_eclipse_mylyn_commons_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_core
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_core
				target = plugin_org_eclipse_core_net
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_core {
				__id = "org.eclipse.mylyn.internal.bugzilla.core"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.core"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_core_history {
				__id = "org.eclipse.mylyn.internal.bugzilla.core.history"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.core.history"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_bugzilla_ui {
			__id = "org.eclipse.mylyn.bugzilla.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.bugzilla.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_mylyn_bugzilla_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_bugzilla_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_ui {
				__id = "org.eclipse.mylyn.internal.bugzilla.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_ui_action {
				__id = "org.eclipse.mylyn.internal.bugzilla.ui.action"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.ui.action"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_ui_editor {
				__id = "org.eclipse.mylyn.internal.bugzilla.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_ui_search {
				__id = "org.eclipse.mylyn.internal.bugzilla.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.ui.search"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_ui_tasklist {
				__id = "org.eclipse.mylyn.internal.bugzilla.ui.tasklist"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.ui.tasklist"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_bugzilla_ui_wizard {
				__id = "org.eclipse.mylyn.internal.bugzilla.ui.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.bugzilla.ui.wizard"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_mylyn_java_feature {
		__id = "org.eclipse.mylyn.java_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn.java_feature"
		}
		version = new Version {
			value = "3.2.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Mylyn Task-Focused UI extensions for JDT.  Provides focusing of Java element views and editors."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_java_ui {
			__id = "org.eclipse.mylyn.java.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.java.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_jdt_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_jdt_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_jdt_junit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_search
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_monitor_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_resources_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_ui
				target = plugin_org_eclipse_mylyn_ide_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_java_ui {
				__id = "org.eclipse.mylyn.internal.java.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.java.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_java_ui_actions {
				__id = "org.eclipse.mylyn.internal.java.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.java.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_java_ui_editor {
				__id = "org.eclipse.mylyn.internal.java.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.java.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_java_ui_junit {
				__id = "org.eclipse.mylyn.internal.java.ui.junit"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.java.ui.junit"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_java_ui_search {
				__id = "org.eclipse.mylyn.internal.java.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.java.ui.search"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_java_tasks {
			__id = "org.eclipse.mylyn.java.tasks"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.java.tasks"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_jdt_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_jdt_junit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_java_tasks
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_java_tasks {
				__id = "org.eclipse.mylyn.internal.java.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.java.tasks"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_ide_ui {
			__id = "org.eclipse.mylyn.ide.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.ide.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_resources_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_ide_ui {
				__id = "org.eclipse.mylyn.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_ide_ui {
				__id = "org.eclipse.mylyn.internal.ide.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.ide.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_ide_ui_actions {
				__id = "org.eclipse.mylyn.internal.ide.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.ide.ui.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_ide_ant {
			__id = "org.eclipse.mylyn.ide.ant"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.ide.ant"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_ant_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_mylyn_monitor_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_mylyn_ide_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_ide_ant
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_ide_ant {
				__id = "org.eclipse.mylyn.internal.ide.ant"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.ide.ant"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_query_ocl {
		__id = "org.eclipse.emf.query.ocl"
		identifier = new PlatformID {
			value = "org.eclipse.emf.query.ocl"
		}
		version = new Version {
			value = "1.2.100.v200901271643-21-7w311A142A1142"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2009 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Model Query OCL Integration."
		}
		plugins += new Plugin plugin_org_eclipse_emf_query_ocl {
			__id = "org.eclipse.emf.query.ocl"
			identifier = new PlatformID {
				value = "org.eclipse.emf.query.ocl"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v200903190031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_ocl
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_ocl
				target = plugin_org_eclipse_emf_query
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_ocl
				target = plugin_org_eclipse_emf_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_ocl
				target = plugin_org_eclipse_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_query_ocl
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_query_ocl {
				__id = "org.eclipse.emf.query.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.ocl"
				}
			}
			exports += new Package package_org_eclipse_emf_query_ocl_conditions {
				__id = "org.eclipse.emf.query.ocl.conditions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.ocl.conditions"
				}
			}
			exports += new Package package_org_eclipse_emf_query_ocl_internal {
				__id = "org.eclipse.emf.query.ocl.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.query.ocl.internal"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_zest {
		__id = "org.eclipse.zest"
		identifier = new PlatformID {
			value = "org.eclipse.zest"
		}
		version = new Version {
			value = "1.1.1.v20090724-1146-6608yD5DH8G6N4GNJ53563"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Graphical Editing Framework Zest Visualization Toolkit"
		}
		plugins += new Plugin plugin_org_eclipse_zest_core {
			__id = "org.eclipse.zest.core"
			identifier = new PlatformID {
				value = "org.eclipse.zest.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v20090504-1850"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = plugin_org_eclipse_zest_layouts
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = plugin_org_eclipse_draw2d
			}
			exports += new Package package_org_eclipse_zest_core_viewers {
				__id = "org.eclipse.zest.core.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.zest.core.viewers"
				}
			}
			exports += new Package package_org_eclipse_zest_core_widgets {
				__id = "org.eclipse.zest.core.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.zest.core.widgets"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "3.8.1"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_zest_layouts {
			__id = "org.eclipse.zest.layouts"
			identifier = new PlatformID {
				value = "org.eclipse.zest.layouts"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v20090504-1850"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_swt
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_zest_layouts
				target = plugin_org_eclipse_draw2d
			}
			exports += new Package package_org_eclipse_zest_layouts {
				__id = "org.eclipse.zest.layouts"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_algorithms {
				__id = "org.eclipse.zest.layouts.algorithms"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.algorithms"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_algorithms_internal {
				__id = "org.eclipse.zest.layouts.algorithms.internal"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.algorithms.internal"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_constraints {
				__id = "org.eclipse.zest.layouts.constraints"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.constraints"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_dataStructures {
				__id = "org.eclipse.zest.layouts.dataStructures"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.dataStructures"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_exampleStructures {
				__id = "org.eclipse.zest.layouts.exampleStructures"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.exampleStructures"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_exampleUses {
				__id = "org.eclipse.zest.layouts.exampleUses"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.exampleUses"
				}
			}
			exports += new Package package_org_eclipse_zest_layouts_progress {
				__id = "org.eclipse.zest.layouts.progress"
				identifier = new PlatformID {
					value = "org.eclipse.zest.layouts.progress"
				}
			}
		}
		sites += site__download_eclipse_org_tools_gef_updates_releases_site_xml
	}

	features += new Feature feature_org_eclipse_emf_codegen_ecore_ui {
		__id = "org.eclipse.emf.codegen.ecore.ui"
		identifier = new PlatformID {
			value = "org.eclipse.emf.codegen.ecore.ui"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Generator UI for Ecore-based code generation in the IDE."
		}
		plugins += new Plugin plugin_org_eclipse_emf_codegen_ecore_ui {
			__id = "org.eclipse.emf.codegen.ecore.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.codegen.ecore.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore_ui
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ecore_ui
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_genmodel_action {
				__id = "org.eclipse.emf.codegen.ecore.genmodel.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.genmodel.action"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_genmodel_presentation {
				__id = "org.eclipse.emf.codegen.ecore.genmodel.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.genmodel.presentation"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_genmodel_provider {
				__id = "org.eclipse.emf.codegen.ecore.genmodel.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.genmodel.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_ecore_ui {
				__id = "org.eclipse.emf.codegen.ecore.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.ecore.ui"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xtend_ui {
		__id = "org.eclipse.xtend.ui"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.ui"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Xtend UI (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xtend_check_ui {
			__id = "org.eclipse.xtend.check.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.check.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_xtend_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_xtend_shared_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_check_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			exports += new Package package_org_eclipse_xtend_check_ui {
				__id = "org.eclipse.xtend.check.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check.ui"
				}
			}
			exports += new Package package_org_eclipse_xtend_check_ui_editor {
				__id = "org.eclipse.xtend.check.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_xtend_check_ui_editor_codeassist {
				__id = "org.eclipse.xtend.check.ui.editor.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check.ui.editor.codeassist"
				}
			}
			exports += new Package package_org_eclipse_xtend_check_ui_editor_color {
				__id = "org.eclipse.xtend.check.ui.editor.color"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check.ui.editor.color"
				}
			}
			exports += new Package package_org_eclipse_xtend_check_ui_editor_lang {
				__id = "org.eclipse.xtend.check.ui.editor.lang"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check.ui.editor.lang"
				}
			}
			exports += new Package package_org_eclipse_xtend_check_ui_editor_outline {
				__id = "org.eclipse.xtend.check.ui.editor.outline"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check.ui.editor.outline"
				}
			}
			exports += new Package package_org_eclipse_xtend_check_ui_editor_scanning {
				__id = "org.eclipse.xtend.check.ui.editor.scanning"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check.ui.editor.scanning"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtend_shared_ui {
			__id = "org.eclipse.xtend.shared.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.shared.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_xpand
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_search
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_org_eclipse_emf_mwe_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_shared_ui
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'4.0.1'"
				maxVersion = "'4.0.1'"
			}
			exports += new Package package_org_eclipse_xtend_shared_ui {
				__id = "org.eclipse.xtend.shared.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core {
				__id = "org.eclipse.xtend.shared.ui.core"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_action {
				__id = "org.eclipse.xtend.shared.ui.core.action"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.action"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_builder {
				__id = "org.eclipse.xtend.shared.ui.core.builder"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.builder"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_internal {
				__id = "org.eclipse.xtend.shared.ui.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.internal"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_metamodel {
				__id = "org.eclipse.xtend.shared.ui.core.metamodel"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.metamodel"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_metamodel_jdt {
				__id = "org.eclipse.xtend.shared.ui.core.metamodel.jdt"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.metamodel.jdt"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_metamodel_jdt_javabean {
				__id = "org.eclipse.xtend.shared.ui.core.metamodel.jdt.javabean"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.metamodel.jdt.javabean"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_metamodel_jdt_oaw {
				__id = "org.eclipse.xtend.shared.ui.core.metamodel.jdt.oaw"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.metamodel.jdt.oaw"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_preferences {
				__id = "org.eclipse.xtend.shared.ui.core.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.preferences"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_properties {
				__id = "org.eclipse.xtend.shared.ui.core.properties"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.properties"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_core_search {
				__id = "org.eclipse.xtend.shared.ui.core.search"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.core.search"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_editor {
				__id = "org.eclipse.xtend.shared.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_editor_outlineview {
				__id = "org.eclipse.xtend.shared.ui.editor.outlineview"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.editor.outlineview"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_expression {
				__id = "org.eclipse.xtend.shared.ui.expression"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.expression"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_expression_editor {
				__id = "org.eclipse.xtend.shared.ui.expression.editor"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.expression.editor"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_expression_editor_codeassist {
				__id = "org.eclipse.xtend.shared.ui.expression.editor.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.expression.editor.codeassist"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_internal {
				__id = "org.eclipse.xtend.shared.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_xtend_shared_ui_wizards {
				__id = "org.eclipse.xtend.shared.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.shared.ui.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtend_ui {
			__id = "org.eclipse.xtend.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_xpand
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_emf_mwe_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_ui
				target = plugin_org_eclipse_xtend_shared_ui
			}
			exports += new Package package_org_eclipse_xtend_ui {
				__id = "org.eclipse.xtend.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_core {
				__id = "org.eclipse.xtend.ui.core"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.core"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_debug {
				__id = "org.eclipse.xtend.ui.debug"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.debug"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_editor {
				__id = "org.eclipse.xtend.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_editor_codeassist {
				__id = "org.eclipse.xtend.ui.editor.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.editor.codeassist"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_editor_color {
				__id = "org.eclipse.xtend.ui.editor.color"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.editor.color"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_editor_lang {
				__id = "org.eclipse.xtend.ui.editor.lang"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.editor.lang"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_editor_outline {
				__id = "org.eclipse.xtend.ui.editor.outline"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.editor.outline"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_editor_scanning {
				__id = "org.eclipse.xtend.ui.editor.scanning"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.editor.scanning"
				}
			}
			exports += new Package package_org_eclipse_xtend_ui_wizard {
				__id = "org.eclipse.xtend.ui.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.ui.wizard"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xpand_activities {
			__id = "org.eclipse.xpand.activities"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.activities"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_activities
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_activities
				target = plugin_org_eclipse_core_runtime
			}
		}
	}

	features += new Feature feature_com_sun_jna {
		__id = "com.sun.jna"
		identifier = new PlatformID {
			value = "com.sun.jna"
		}
		version = new Version {
			value = "3.2.3"
		}
		provider = vendor_Timothy_Wall
		license = license__www_gnu_org_licenses_old_licenses_lgpl_2_1_html
		copyright = new Copyright {
			name = "_jna_dev_java_net_"
			text = "Copyright (c) 2008 Timothy Wall, All Rights Reserved"
			locator = new URLLocator {
				value = "http://jna.dev.java.net/"
			}
		}
		description = new Description {
			name = "description"
			text = "JNA provides Java programs easy access to native shared libraries (DLLs on Windows) without writing anything but Java code - no JNI or native code is required. This functionality is comparable to Windows&apos; Platform/Invoke and Python&apos;s ctypes. Access is dynamic at runtime without code generation."
		}
		plugins += new Plugin plugin_com_sun_jna {
			__id = "com.sun.jna"
			identifier = new PlatformID {
				value = "com.sun.jna"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.3"
			}
			vendor = vendor_Timothy_Wall
			exports += new Package package_com_sun_jna {
				__id = "com.sun.jna"
				identifier = new PlatformID {
					value = "com.sun.jna"
				}
			}
			exports += new Package package_com_sun_jna_win32 {
				__id = "com.sun.jna.win32"
				identifier = new PlatformID {
					value = "com.sun.jna.win32"
				}
			}
			exports += new Package package_com_sun_jna_ptr {
				__id = "com.sun.jna.ptr"
				identifier = new PlatformID {
					value = "com.sun.jna.ptr"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_gmf_sdk {
		__id = "org.eclipse.gmf.sdk"
		identifier = new PlatformID {
			value = "org.eclipse.gmf.sdk"
		}
		version = new Version {
			value = "2.2.1.v20090814-1000-7C7F1BLxlfAqjMDHunFV5S-_YY-Q"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 Borland Software Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Graphical Modeling Framework SDK"
		}
		plugins += new Plugin plugin_org_eclipse_gmf_sdk {
			__id = "org.eclipse.gmf.sdk"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.sdk"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090615-0700"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_net4j_doc {
		__id = "org.eclipse.net4j.doc"
		identifier = new PlatformID {
			value = "org.eclipse.net4j.doc"
		}
		version = new Version {
			value = "2.0.0.v200906160348"
		}
		provider = vendor_Eclipse_org
		copyright = new Copyright {
			name = "_copyrightURL"
			text = "%copyright"
			locator = new URLLocator {
				value = "%copyrightURL"
			}
		}
		description = new Description {
			name = "description"
			text = "Net4j Signalling Platform Documentation contains the documentation of the Net4j SDK."
		}
		plugins += new Plugin plugin_org_eclipse_net4j_doc {
			__id = "org.eclipse.net4j.doc"
			identifier = new PlatformID {
				value = "org.eclipse.net4j.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.1.v200610271244"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.net4j.doc"
				identifier = new PlatformID {
					value = "org.eclipse.net4j.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.net4j.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_net4j_doc
				target = plugin_org_eclipse_help
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_ecore_editor {
		__id = "org.eclipse.emf.ecore.editor"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ecore.editor"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Simple, tree-based Ecore model editor for the IDE."
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecore_editor {
			__id = "org.eclipse.emf.ecore.editor"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecore.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_editor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_editor
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_editor
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_editor
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_editor
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_editor
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_ecore_action {
				__id = "org.eclipse.emf.ecore.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.action"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_presentation {
				__id = "org.eclipse.emf.ecore.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.presentation"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_tmatesoft_svnkit {
		__id = "org.tmatesoft.svnkit"
		identifier = new PlatformID {
			value = "org.tmatesoft.svnkit"
		}
		version = new Version {
			value = "1.3.2.6267"
		}
		provider = vendor_TMate_Software
		license = license__svnkit_com_license_html
		copyright = new Copyright {
			name = "_tmatesoft_com_"
			text = "(c) 2004-2009, TMate Software Ltd."
			locator = new URLLocator {
				value = "http://tmatesoft.com/"
			}
		}
		description = new Description {
			name = "description"
			text = "SVNKit is a pure java Subversion client library that may be used through its own API or serve as a transparent replacement of native javahl bindings."
		}
		plugins += new Plugin plugin_org_tmatesoft_svnkit {
			__id = "org.tmatesoft.svnkit"
			identifier = new PlatformID {
				value = "org.tmatesoft.svnkit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2.6267"
			}
			vendor = vendor_TMate_Software
			dependencies += new VersionDependency {
				source = plugin_org_tmatesoft_svnkit
				target = plugin_com_sun_jna
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tmatesoft_svnkit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_com_trilead_ssh2 {
				__id = "com.trilead.ssh2"
				identifier = new PlatformID {
					value = "com.trilead.ssh2"
				}
			}
			exports += new Package package_com_trilead_ssh2_auth {
				__id = "com.trilead.ssh2.auth"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.auth"
				}
			}
			exports += new Package package_com_trilead_ssh2_channel {
				__id = "com.trilead.ssh2.channel"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.channel"
				}
			}
			exports += new Package package_com_trilead_ssh2_crypto {
				__id = "com.trilead.ssh2.crypto"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.crypto"
				}
			}
			exports += new Package package_com_trilead_ssh2_crypto_cipher {
				__id = "com.trilead.ssh2.crypto.cipher"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.crypto.cipher"
				}
			}
			exports += new Package package_com_trilead_ssh2_crypto_dh {
				__id = "com.trilead.ssh2.crypto.dh"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.crypto.dh"
				}
			}
			exports += new Package package_com_trilead_ssh2_crypto_digest {
				__id = "com.trilead.ssh2.crypto.digest"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.crypto.digest"
				}
			}
			exports += new Package package_com_trilead_ssh2_log {
				__id = "com.trilead.ssh2.log"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.log"
				}
			}
			exports += new Package package_com_trilead_ssh2_packets {
				__id = "com.trilead.ssh2.packets"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.packets"
				}
			}
			exports += new Package package_com_trilead_ssh2_sftp {
				__id = "com.trilead.ssh2.sftp"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.sftp"
				}
			}
			exports += new Package package_com_trilead_ssh2_signature {
				__id = "com.trilead.ssh2.signature"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.signature"
				}
			}
			exports += new Package package_com_trilead_ssh2_transport {
				__id = "com.trilead.ssh2.transport"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.transport"
				}
			}
			exports += new Package package_com_trilead_ssh2_util {
				__id = "com.trilead.ssh2.util"
				identifier = new PlatformID {
					value = "com.trilead.ssh2.util"
				}
			}
			exports += new Package package_de_regnis_q_sequence {
				__id = "de.regnis.q.sequence"
				identifier = new PlatformID {
					value = "de.regnis.q.sequence"
				}
			}
			exports += new Package package_de_regnis_q_sequence_core {
				__id = "de.regnis.q.sequence.core"
				identifier = new PlatformID {
					value = "de.regnis.q.sequence.core"
				}
			}
			exports += new Package package_de_regnis_q_sequence_line {
				__id = "de.regnis.q.sequence.line"
				identifier = new PlatformID {
					value = "de.regnis.q.sequence.line"
				}
			}
			exports += new Package package_de_regnis_q_sequence_line_diff {
				__id = "de.regnis.q.sequence.line.diff"
				identifier = new PlatformID {
					value = "de.regnis.q.sequence.line.diff"
				}
			}
			exports += new Package package_de_regnis_q_sequence_line_simplifier {
				__id = "de.regnis.q.sequence.line.simplifier"
				identifier = new PlatformID {
					value = "de.regnis.q.sequence.line.simplifier"
				}
			}
			exports += new Package package_de_regnis_q_sequence_media {
				__id = "de.regnis.q.sequence.media"
				identifier = new PlatformID {
					value = "de.regnis.q.sequence.media"
				}
			}
			exports += new Package package_org_tigris_subversion_javahl {
				__id = "org.tigris.subversion.javahl"
				identifier = new PlatformID {
					value = "org.tigris.subversion.javahl"
				}
				version = new Version {
					value = "org.tigris.subversion.javah"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core {
				__id = "org.tmatesoft.svn.core"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_auth {
				__id = "org.tmatesoft.svn.core.auth"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.auth"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_delta {
				__id = "org.tmatesoft.svn.core.internal.delta"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.delta"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_io_dav {
				__id = "org.tmatesoft.svn.core.internal.io.dav"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.io.dav"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_io_dav_handlers {
				__id = "org.tmatesoft.svn.core.internal.io.dav.handlers"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.io.dav.handlers"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_io_dav_http {
				__id = "org.tmatesoft.svn.core.internal.io.dav.http"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.io.dav.http"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_io_fs {
				__id = "org.tmatesoft.svn.core.internal.io.fs"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.io.fs"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_io_svn {
				__id = "org.tmatesoft.svn.core.internal.io.svn"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.io.svn"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_util {
				__id = "org.tmatesoft.svn.core.internal.util"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.util"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_util_jna {
				__id = "org.tmatesoft.svn.core.internal.util.jna"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.util.jna"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_wc {
				__id = "org.tmatesoft.svn.core.internal.wc"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.wc"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_internal_wc_admin {
				__id = "org.tmatesoft.svn.core.internal.wc.admin"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.internal.wc.admin"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_io {
				__id = "org.tmatesoft.svn.core.io"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.io"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_io_diff {
				__id = "org.tmatesoft.svn.core.io.diff"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.io.diff"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_javahl {
				__id = "org.tmatesoft.svn.core.javahl"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.javahl"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_replicator {
				__id = "org.tmatesoft.svn.core.replicator"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.replicator"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_wc {
				__id = "org.tmatesoft.svn.core.wc"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.wc"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_wc_admin {
				__id = "org.tmatesoft.svn.core.wc.admin"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.wc.admin"
				}
			}
			exports += new Package package_org_tmatesoft_svn_core_wc_xml {
				__id = "org.tmatesoft.svn.core.wc.xml"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.core.wc.xml"
				}
			}
			exports += new Package package_org_tmatesoft_svn_util {
				__id = "org.tmatesoft.svn.util"
				identifier = new PlatformID {
					value = "org.tmatesoft.svn.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_tmatesoft_svnkit
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tmatesoft_svnkit
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3"
				maxVersion = "1.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tmatesoft_svnkit
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.1"
				maxVersion = "1.3.1"
			}
		}
		sites += site__eclipse_svnkit_com_1_3_x_
	}

	features += new Feature feature_org_eclipse_gmf {
		__id = "org.eclipse.gmf"
		identifier = new PlatformID {
			value = "org.eclipse.gmf"
		}
		version = new Version {
			value = "1.2.1.v20090729-2029-7d8D7CFXwnKwGb_GGuSCBqELpPk0"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2006 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Graphical Modeling Framework runtime component."
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_core {
			__id = "org.eclipse.gmf.runtime.common.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_core
				target = plugin_org_eclipse_core_commands
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_core_command {
				__id = "org.eclipse.gmf.runtime.common.core.command"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.core.command"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_core_internal {
				__id = "org.eclipse.gmf.runtime.common.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.core.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_core_internal_command {
				__id = "org.eclipse.gmf.runtime.common.core.internal.command"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.core.internal.command"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_commands_core_ {
				__id = "org.eclipse.gmf.runtime.emf.commands.core'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.commands.core'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_core_internal_l10n {
				__id = "org.eclipse.gmf.runtime.common.core.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.core.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_core_resources {
				__id = "org.eclipse.gmf.runtime.common.core.resources"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.core.resources"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_core_service {
				__id = "org.eclipse.gmf.runtime.common.core.service"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.core.service"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_core_util {
				__id = "org.eclipse.gmf.runtime.common.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.core.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui {
			__id = "org.eclipse.gmf.runtime.common.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action {
				__id = "org.eclipse.gmf.runtime.common.ui.action"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_contentassist {
				__id = "org.eclipse.gmf.runtime.common.ui.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.contentassist"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_dialogs {
				__id = "org.eclipse.gmf.runtime.common.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_editors {
				__id = "org.eclipse.gmf.runtime.common.ui.editors"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.editors"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_internal_contentassist {
				__id = "org.eclipse.gmf.runtime.common.ui.internal.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.internal.contentassist"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_internal_dialogs {
				__id = "org.eclipse.gmf.runtime.common.ui.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_internal_l10n {
				__id = "org.eclipse.gmf.runtime.common.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_internal_resources {
				__id = "org.eclipse.gmf.runtime.common.ui.internal.resources"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.internal.resources"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_preferences {
				__id = "org.eclipse.gmf.runtime.common.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_resources {
				__id = "org.eclipse.gmf.runtime.common.ui.resources"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.resources"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_util {
				__id = "org.eclipse.gmf.runtime.common.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_viewers {
				__id = "org.eclipse.gmf.runtime.common.ui.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.viewers"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_action {
			__id = "org.eclipse.gmf.runtime.common.ui.action"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.action"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_actions {
				__id = "org.eclipse.gmf.runtime.common.ui.action.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_actions_global {
				__id = "org.eclipse.gmf.runtime.common.ui.action.actions.global"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.actions.global"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_global {
				__id = "org.eclipse.gmf.runtime.common.ui.action.global"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.global"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_global_providers {
				__id = "org.eclipse.gmf.runtime.common.ui.action.global.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.global.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.action.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_internal_actions_global {
				__id = "org.eclipse.gmf.runtime.common.ui.action.internal.actions.global"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.internal.actions.global"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_internal_global {
				__id = "org.eclipse.gmf.runtime.common.ui.action.internal.global"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.internal.global"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_internal_l10n {
				__id = "org.eclipse.gmf.runtime.common.ui.action.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_util {
				__id = "org.eclipse.gmf.runtime.common.ui.action.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_action_ide {
			__id = "org.eclipse.gmf.runtime.common.ui.action.ide"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.action.ide"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action_ide
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action_ide
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action_ide
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action_ide
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action_ide
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_action_ide
				target = plugin_org_eclipse_gmf_runtime_common_ui_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_ide_actions_global {
				__id = "org.eclipse.gmf.runtime.common.ui.action.ide.actions.global"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.ide.actions.global"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_ide_global {
				__id = "org.eclipse.gmf.runtime.common.ui.action.ide.global"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.ide.global"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_ide_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.action.ide.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.ide.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_action_ide_internal_l10n {
				__id = "org.eclipse.gmf.runtime.common.ui.action.ide.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.action.ide.internal.l10n"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_services {
			__id = "org.eclipse.gmf.runtime.common.ui.services"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.services"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_editor {
				__id = "org.eclipse.gmf.runtime.common.ui.services.editor"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.editor"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_elementselection {
				__id = "org.eclipse.gmf.runtime.common.ui.services.elementselection"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.elementselection"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_icon {
				__id = "org.eclipse.gmf.runtime.common.ui.services.icon"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.icon"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.services.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_internal_elementselection {
				__id = "org.eclipse.gmf.runtime.common.ui.services.internal.elementselection"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.internal.elementselection"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_internal_icon {
				__id = "org.eclipse.gmf.runtime.common.ui.services.internal.icon"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.internal.icon"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_internal_l10n {
				__id = "org.eclipse.gmf.runtime.common.ui.services.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_internal_marker {
				__id = "org.eclipse.gmf.runtime.common.ui.services.internal.marker"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.internal.marker"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_marker {
				__id = "org.eclipse.gmf.runtime.common.ui.services.marker"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.marker"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_parser {
				__id = "org.eclipse.gmf.runtime.common.ui.services.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.parser"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_statusline {
				__id = "org.eclipse.gmf.runtime.common.ui.services.statusline"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.statusline"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_util {
				__id = "org.eclipse.gmf.runtime.common.ui.services.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_services_action {
			__id = "org.eclipse.gmf.runtime.common.ui.services.action"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.services.action"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090825-1800"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				target = plugin_org_eclipse_gmf_runtime_common_ui_services
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_action_contributionitem {
				__id = "org.eclipse.gmf.runtime.common.ui.services.action.contributionitem"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.action.contributionitem"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_action_filter {
				__id = "org.eclipse.gmf.runtime.common.ui.services.action.filter"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.action.filter"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_action_global {
				__id = "org.eclipse.gmf.runtime.common.ui.services.action.global"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.action.global"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_action_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.services.action.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.action.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_action_internal_contributionitem {
				__id = "org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_action_internal_filter {
				__id = "org.eclipse.gmf.runtime.common.ui.services.action.internal.filter"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.action.internal.filter"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_services_dnd {
			__id = "org.eclipse.gmf.runtime.common.ui.services.dnd"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.services.dnd"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_core {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.core"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_drag {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.drag"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.drag"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_drop {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.drop"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.drop"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_internal_core {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_internal_l10n {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.internal.l10n"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_services_dnd_ide {
			__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd_ide
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd_ide
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd_ide
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd_ide
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_ide_core {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.core"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_ide_drag {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.drag"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.drag"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_ide_drop {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.drop"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.drop"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_ide_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_dnd_ide_internal_core {
				__id = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.dnd.ide.internal.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_services_properties {
			__id = "org.eclipse.gmf.runtime.common.ui.services.properties"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.services.properties"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_properties
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_services_properties
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_properties {
				__id = "org.eclipse.gmf.runtime.common.ui.services.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_properties_descriptors {
				__id = "org.eclipse.gmf.runtime.common.ui.services.properties.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.properties.descriptors"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_properties_extended {
				__id = "org.eclipse.gmf.runtime.common.ui.services.properties.extended"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.properties.extended"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_properties_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.services.properties.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.properties.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_services_properties_internal_l10n {
				__id = "org.eclipse.gmf.runtime.common.ui.services.properties.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.services.properties.internal.l10n"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_core {
			__id = "org.eclipse.gmf.runtime.diagram.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_core
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_core
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_core
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_core
				target = plugin_org_eclipse_gmf_runtime_emf_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_core
				target = plugin_org_eclipse_gmf_runtime_emf_type_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core {
				__id = "org.eclipse.gmf.runtime.diagram.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_commands {
				__id = "org.eclipse.gmf.runtime.diagram.core.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_edithelpers {
				__id = "org.eclipse.gmf.runtime.diagram.core.edithelpers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.edithelpers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_internal {
				__id = "org.eclipse.gmf.runtime.diagram.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_internal_commands {
				__id = "org.eclipse.gmf.runtime.diagram.core.internal.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.internal.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.core.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_internal_listener {
				__id = "org.eclipse.gmf.runtime.diagram.core.internal.listener"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.internal.listener"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_listener {
				__id = "org.eclipse.gmf.runtime.diagram.core.listener"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.listener"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_preferences {
				__id = "org.eclipse.gmf.runtime.diagram.core.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.preferences"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_providers {
				__id = "org.eclipse.gmf.runtime.diagram.core.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_services {
				__id = "org.eclipse.gmf.runtime.diagram.core.services"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.services"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_services_eventbroker {
				__id = "org.eclipse.gmf.runtime.diagram.core.services.eventbroker"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.services.eventbroker"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_services_view {
				__id = "org.eclipse.gmf.runtime.diagram.core.services.view"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.services.view"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_util {
				__id = "org.eclipse.gmf.runtime.diagram.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_core_view_factories {
				__id = "org.eclipse.gmf.runtime.diagram.core.view.factories"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.core.view.factories"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui {
			__id = "org.eclipse.gmf.runtime.diagram.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090825-1647"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_emf_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_emf_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_gef_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_common_ui_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_ui_views_properties_tabbed
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_diagram_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_commands {
				__id = "org.eclipse.gmf.runtime.diagram.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_dialogs_sortfilter {
				__id = "org.eclipse.gmf.runtime.diagram.ui.dialogs.sortfilter"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.dialogs.sortfilter"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_editparts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.editparts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_editpolicies {
				__id = "org.eclipse.gmf.runtime.diagram.ui.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_figures {
				__id = "org.eclipse.gmf.runtime.diagram.ui.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_handles {
				__id = "org.eclipse.gmf.runtime.diagram.ui.handles"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.handles"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_image {
				__id = "org.eclipse.gmf.runtime.diagram.ui.image"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.image"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_commands {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_dialogs {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_dialogs_sortfilter {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.dialogs.sortfilter"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.dialogs.sortfilter"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_editparts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.editparts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_editpolicies {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_figures {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_handles {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.handles"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.handles"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_pagesetup {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_parts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.parts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_requests {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.requests"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_resources {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.resources"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.resources"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_ruler {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.ruler"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.ruler"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_ruler_commands {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.ruler.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.ruler.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_services_decorator {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_services_editpart {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.services.editpart"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.services.editpart"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_services_editpolicy {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.services.editpolicy"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.services.editpolicy"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_services_layout {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.services.layout"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.services.layout"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_services_palette {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.services.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.services.palette"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_tools {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.tools"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_type {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.type"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.type"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_internal_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.internal.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_label {
				__id = "org.eclipse.gmf.runtime.diagram.ui.label"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.label"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_layout {
				__id = "org.eclipse.gmf.runtime.diagram.ui.layout"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.layout"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_menus {
				__id = "org.eclipse.gmf.runtime.diagram.ui.menus"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.menus"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_parts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_preferences {
				__id = "org.eclipse.gmf.runtime.diagram.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_requests {
				__id = "org.eclipse.gmf.runtime.diagram.ui.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.requests"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_services_decorator {
				__id = "org.eclipse.gmf.runtime.diagram.ui.services.decorator"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.services.decorator"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_services_editpart {
				__id = "org.eclipse.gmf.runtime.diagram.ui.services.editpart"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.services.editpart"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_services_editpolicy {
				__id = "org.eclipse.gmf.runtime.diagram.ui.services.editpolicy"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.services.editpolicy"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_services_layout {
				__id = "org.eclipse.gmf.runtime.diagram.ui.services.layout"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.services.layout"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_services_palette {
				__id = "org.eclipse.gmf.runtime.diagram.ui.services.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.services.palette"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_tools {
				__id = "org.eclipse.gmf.runtime.diagram.ui.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.tools"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_type {
				__id = "org.eclipse.gmf.runtime.diagram.ui.type"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.type"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_view_factories {
				__id = "org.eclipse.gmf.runtime.diagram.ui.view.factories"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.view.factories"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_view_factories_optimal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.view.factories.optimal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.view.factories.optimal"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_actions {
			__id = "org.eclipse.gmf.runtime.diagram.ui.actions"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.actions"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_actions
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_actions
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_actions
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_actions_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_dnd {
			__id = "org.eclipse.gmf.runtime.diagram.ui.dnd"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.dnd"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_dnd
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_dnd
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_dnd
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_dnd
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_dnd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_dnd
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_dnd_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.dnd.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.dnd.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_dnd_parts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.dnd.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.dnd.parts"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes {
			__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_actions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_emf_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_common_ui_services
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_geoshapes
				target = plugin_org_eclipse_gmf_runtime_gef_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_internal_draw2d_figures {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.draw2d.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.draw2d.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_internal_editparts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.editparts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_internal_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_internal_ui_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_internal_views_factories {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.views.factories"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.views.factories"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_geoshapes_type {
				__id = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.type"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.geoshapes.type"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_properties {
			__id = "org.eclipse.gmf.runtime.diagram.ui.properties"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.properties"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_ui_views_properties_tabbed
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_gmf_runtime_emf_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_properties
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_descriptors {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.descriptors"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_filters {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.filters"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.filters"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_sections {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.sections"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.sections"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_sections_appearance {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_sections_grid {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.sections.grid"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.sections.grid"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_properties_views {
				__id = "org.eclipse.gmf.runtime.diagram.ui.properties.views"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.properties.views"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_providers {
			__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.providers"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_actions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = plugin_org_eclipse_gmf_runtime_common_ui_services
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_internal_parsers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.internal.parsers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.internal.parsers"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide {
			__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
				target = plugin_org_eclipse_gmf_runtime_common_ui_action_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide_internal_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide.internal.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide.internal.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ide_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers.ide.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers.ide.providers"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_render {
			__id = "org.eclipse.gmf.runtime.diagram.ui.render"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.render"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_render
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_clipboard {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.clipboard"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.clipboard"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_editparts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.editparts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_internal_clipboard {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.internal.clipboard"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.internal.clipboard"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_internal_commands {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.internal.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.internal.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_internal_dialogs {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_internal_editparts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.internal.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.internal.editparts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_internal_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.internal.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.internal.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor {
			__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090526-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_gmf_runtime_emf_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_document {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.document"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.document"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_internal_notationprovider {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.notationprovider"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.notationprovider"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_internal_palette {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.palette"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_internal_ui_parts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_internal_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_parts {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide {
			__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_gmf_runtime_emf_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide_document {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide_editor {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide_wizards {
				__id = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_draw2d_ui {
			__id = "org.eclipse.gmf.runtime.draw2d.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.draw2d.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090825-1800"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_figures {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_geometry {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.geometry"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_graph {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.graph"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.graph"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_graphics {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.graphics"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui {
				__id = "org.eclipse.gmf.runtime.gef.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal_figures {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui {
				__id = "org.eclipse.gmf.runtime.gef.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal_graph {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal.graph"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal.graph"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui {
				__id = "org.eclipse.gmf.runtime.gef.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal_graphics {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal.graphics"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui {
				__id = "org.eclipse.gmf.runtime.gef.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_awt_ {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal_l10n {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui {
				__id = "org.eclipse.gmf.runtime.gef.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal_mapmode {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui {
				__id = "org.eclipse.gmf.runtime.gef.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal_parts {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal.parts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_internal_routers {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.internal.routers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.internal.routers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui {
				__id = "org.eclipse.gmf.runtime.gef.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_mapmode {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.mapmode"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.mapmode"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_text {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.text"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.text"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_draw2d_ui_render {
			__id = "org.eclipse.gmf.runtime.draw2d.ui.render"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.draw2d.ui.render"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_factory {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.factory"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.factory"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_figures {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_internal {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_internal_factory {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_internal_graphics {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_internal_image {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.internal.image"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.internal.image"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt {
			__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.1-4.0.0)'"
				maxVersion = "'[3.5.1-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_ext_awt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_transcoder
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_bridge
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_dom
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_dom_svg
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_svggen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_xml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_apache_batik_pdf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				target = plugin_org_w3c_dom_svg
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_awt_internal {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_awt_internal_graphics {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_awt_internal_image {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.image"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.image"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_awt_internal_svg {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_awt_internal_svg_export {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.export"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.export"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_draw2d_ui_render_awt_internal_svg_metafile {
				__id = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_emf_clipboard_core {
			__id = "org.eclipse.gmf.runtime.emf.clipboard.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.emf.clipboard.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_clipboard_core {
				__id = "org.eclipse.gmf.runtime.emf.clipboard.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.clipboard.core"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_clipboard_core_internal {
				__id = "org.eclipse.gmf.runtime.emf.clipboard.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.clipboard.core.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_clipboard_core_internal_l10n {
				__id = "org.eclipse.gmf.runtime.emf.clipboard.core.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.clipboard.core.internal.l10n"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_emf_commands_core {
			__id = "org.eclipse.gmf.runtime.emf.commands.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.emf.commands.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_commands_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_commands_core
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_commands_core
				target = plugin_org_eclipse_emf_workspace
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_commands_core
				target = plugin_org_eclipse_gmf_runtime_emf_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_commands_core_command {
				__id = "org.eclipse.gmf.runtime.emf.commands.core.command"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.commands.core.command"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_commands_core_commands {
				__id = "org.eclipse.gmf.runtime.emf.commands.core.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.commands.core.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_commands_core_internal {
				__id = "org.eclipse.gmf.runtime.emf.commands.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.commands.core.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_commands_core_internal_l10n {
				__id = "org.eclipse.gmf.runtime.emf.commands.core.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.commands.core.internal.l10n"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_emf_core {
			__id = "org.eclipse.gmf.runtime.emf.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.emf.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090422-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = plugin_org_eclipse_emf_workspace
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = plugin_org_eclipse_gmf_runtime_emf_clipboard_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core {
				__id = "org.eclipse.gmf.runtime.emf.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_clipboard {
				__id = "org.eclipse.gmf.runtime.emf.core.clipboard"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.clipboard"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_internal_l10n {
				__id = "org.eclipse.gmf.runtime.emf.core.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_internal_plugin {
				__id = "org.eclipse.gmf.runtime.emf.core.internal.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.internal.plugin"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_internal_resources {
				__id = "org.eclipse.gmf.runtime.emf.core.internal.resources"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.internal.resources"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_internal_util {
				__id = "org.eclipse.gmf.runtime.emf.core.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.internal.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_internal_validation {
				__id = "org.eclipse.gmf.runtime.emf.core.internal.validation"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.internal.validation"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_resources {
				__id = "org.eclipse.gmf.runtime.emf.core.resources"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.resources"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_core_util {
				__id = "org.eclipse.gmf.runtime.emf.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.core.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_emf_type_core {
			__id = "org.eclipse.gmf.runtime.emf.type.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.emf.type.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_core
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_core
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_core
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_core
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core {
				__id = "org.eclipse.gmf.runtime.emf.type.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core_commands {
				__id = "org.eclipse.gmf.runtime.emf.type.core.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core_edithelper {
				__id = "org.eclipse.gmf.runtime.emf.type.core.edithelper"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core.edithelper"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core_internal {
				__id = "org.eclipse.gmf.runtime.emf.type.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core_internal_descriptors {
				__id = "org.eclipse.gmf.runtime.emf.type.core.internal.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core.internal.descriptors"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core_internal_impl {
				__id = "org.eclipse.gmf.runtime.emf.type.core.internal.impl"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core.internal.impl"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core_internal_l10n {
				__id = "org.eclipse.gmf.runtime.emf.type.core.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_core_requests {
				__id = "org.eclipse.gmf.runtime.emf.type.core.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.core.requests"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_emf_type_ui {
			__id = "org.eclipse.gmf.runtime.emf.type.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.emf.type.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_ui
				target = plugin_org_eclipse_gmf_runtime_common_ui_services
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_type_ui
				target = plugin_org_eclipse_gmf_runtime_emf_type_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_ui {
				__id = "org.eclipse.gmf.runtime.emf.type.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_ui_internal {
				__id = "org.eclipse.gmf.runtime.emf.type.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_ui_internal_l10n {
				__id = "org.eclipse.gmf.runtime.emf.type.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_type_ui_internal_providers {
				__id = "org.eclipse.gmf.runtime.emf.type.ui.internal.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.type.ui.internal.providers"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_emf_ui {
			__id = "org.eclipse.gmf.runtime.emf.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.emf.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui
				target = plugin_org_eclipse_gmf_runtime_common_ui_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui
				target = plugin_org_eclipse_gmf_runtime_common_ui_services
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui
				target = plugin_org_eclipse_gmf_runtime_emf_type_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_action {
				__id = "org.eclipse.gmf.runtime.emf.ui.action"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.action"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_dialogs {
				__id = "org.eclipse.gmf.runtime.emf.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_internal {
				__id = "org.eclipse.gmf.runtime.emf.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_internal_l10n {
				__id = "org.eclipse.gmf.runtime.emf.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_preferences {
				__id = "org.eclipse.gmf.runtime.emf.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_providers_marker {
				__id = "org.eclipse.gmf.runtime.emf.ui.providers.marker"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.providers.marker"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_services_action {
				__id = "org.eclipse.gmf.runtime.emf.ui.services.action"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.services.action"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_services_modelingassistant {
				__id = "org.eclipse.gmf.runtime.emf.ui.services.modelingassistant"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.services.modelingassistant"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_services_parser {
				__id = "org.eclipse.gmf.runtime.emf.ui.services.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.services.parser"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_emf_ui_properties {
			__id = "org.eclipse.gmf.runtime.emf.ui.properties"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.emf.ui.properties"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090501-1750"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_properties
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = plugin_org_eclipse_gmf_runtime_emf_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = plugin_org_eclipse_gmf_runtime_emf_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_actions {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_commands {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.commands"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_descriptors {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.descriptors"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_internal {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_internal_l10n {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_providers {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_sections {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.sections"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.sections"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_emf_ui_properties_util {
				__id = "org.eclipse.gmf.runtime.emf.ui.properties.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.emf.ui.properties.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_emf_ui_properties
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_gef_ui {
			__id = "org.eclipse.gmf.runtime.gef.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.gef.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090520-1343"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_gef_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_gef_ui
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_gef_ui
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_gef_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_gef_ui
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_gef_ui
				target = plugin_org_eclipse_gmf_runtime_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_gef_ui
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_figures {
				__id = "org.eclipse.gmf.runtime.gef.ui.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_actions {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_editparts {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.editparts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_editpolicies {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_figures {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.figures"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.figures"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_handles {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.handles"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.handles"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_l10n {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_palette {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.palette"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_parts {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.parts"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_requests {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.requests"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_internal_tools {
				__id = "org.eclipse.gmf.runtime.gef.ui.internal.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.internal.tools"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui {
				__id = "org.eclipse.gmf.runtime.diagram.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_render {
				__id = "org.eclipse.gmf.runtime.diagram.ui.render"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.render"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_providers_ {
				__id = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.providers'"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_gef_ui_palette_customize {
				__id = "org.eclipse.gmf.runtime.gef.ui.palette.customize"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.gef.ui.palette.customize"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_notation_providers {
			__id = "org.eclipse.gmf.runtime.notation.providers"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.notation.providers"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_providers
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_providers
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_providers
				target = plugin_org_eclipse_gmf_runtime_emf_type_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_providers
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_providers
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_providers_internal_copypaste {
				__id = "org.eclipse.gmf.runtime.notation.providers.internal.copypaste"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.providers.internal.copypaste"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_providers_internal_l10n {
				__id = "org.eclipse.gmf.runtime.notation.providers.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.providers.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_providers_internal_util {
				__id = "org.eclipse.gmf.runtime.notation.providers.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.providers.internal.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf {
			__id = "org.eclipse.gmf"
			identifier = new PlatformID {
				value = "org.eclipse.gmf"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090615-0700"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_printing {
			__id = "org.eclipse.gmf.runtime.common.ui.printing"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.printing"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_printing
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_printing
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_printing {
				__id = "org.eclipse.gmf.runtime.common.ui.printing"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.printing"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_common_ui_printing_internal {
				__id = "org.eclipse.gmf.runtime.common.ui.printing.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.common.ui.printing.internal"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_common_ui_printing_win32 {
			__id = "org.eclipse.gmf.runtime.common.ui.printing.win32"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.common.ui.printing.win32"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.1.v20090909-1544"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_printing_win32
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_common_ui_printing_win32
				target = plugin_org_eclipse_gmf_runtime_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_printing {
			__id = "org.eclipse.gmf.runtime.diagram.ui.printing"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.printing"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_gmf_runtime_common_ui_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_gmf_runtime_common_ui_services_action
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_gmf_runtime_common_ui_printing
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_internal_l10n {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_internal_printpreview {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.internal.printpreview"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.internal.printpreview"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_internal_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.internal.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render {
			__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.diagram.ui.printing.render"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090729-2029"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_core_databinding
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_core_databinding_beans
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_jface_databinding
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_gmf_runtime_common_ui_printing
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui_render_awt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_actions {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render.actions"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_internal {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_internal_printpreview {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.printpreview"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.printpreview"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_providers {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render.providers"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_diagram_ui_printing_render_util {
				__id = "org.eclipse.gmf.runtime.diagram.ui.printing.render.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.diagram.ui.printing.render.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_index_source {
		__id = "org.eclipse.emf.index.source"
		identifier = new PlatformID {
			value = "org.eclipse.emf.index.source"
		}
		version = new Version {
			value = "0.7.0.v200908120607"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "EMF Index source code (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_index_source {
			__id = "org.eclipse.emf.index.source"
			identifier = new PlatformID {
				value = "org.eclipse.emf.index.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.0.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_com_cea_papyrus_feature {
		__id = "com.cea.papyrus.feature"
		identifier = new PlatformID {
			value = "com.cea.papyrus.feature"
		}
		version = new Version {
			value = "1.10.1"
		}
		provider = vendor_CEA_LIST
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Papyrus is a graphical editor of UML2 models."
		}
		plugins += new Plugin plugin_com_cea_papyrus_classdiagram_parsers {
			__id = "com.cea.papyrus.classdiagram.parsers"
			identifier = new PlatformID {
				value = "com.cea.papyrus.classdiagram.parsers"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_org_antlr
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_com_cea_papyrus_umlutils
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_classdiagram_parsers
				target = plugin_com_cea_papyrus_extensionpoints_editors
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers {
				__id = "com.cea.papyrus.classdiagram.parsers"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_antlr {
				__id = "com.cea.papyrus.classdiagram.parsers.antlr"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.antlr"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_editorconfiguration {
				__id = "com.cea.papyrus.classdiagram.parsers.editorconfiguration"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.editorconfiguration"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_editorconfiguration_opaquebehavior {
				__id = "com.cea.papyrus.classdiagram.parsers.editorconfiguration.opaquebehavior"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.editorconfiguration.opaquebehavior"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_editorconfiguration_opaqueexpression {
				__id = "com.cea.papyrus.classdiagram.parsers.editorconfiguration.opaqueexpression"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.editorconfiguration.opaqueexpression"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_messages {
				__id = "com.cea.papyrus.classdiagram.parsers.messages"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.messages"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_modelgenerator {
				__id = "com.cea.papyrus.classdiagram.parsers.modelgenerator"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.modelgenerator"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_preferences {
				__id = "com.cea.papyrus.classdiagram.parsers.preferences"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.preferences"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_texteditor {
				__id = "com.cea.papyrus.classdiagram.parsers.texteditor"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.texteditor"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_texteditor_completionproposals {
				__id = "com.cea.papyrus.classdiagram.parsers.texteditor.completionproposals"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.texteditor.completionproposals"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_texteditor_operationlabel {
				__id = "com.cea.papyrus.classdiagram.parsers.texteditor.operationlabel"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.texteditor.operationlabel"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_texteditor_parameterlabel {
				__id = "com.cea.papyrus.classdiagram.parsers.texteditor.parameterlabel"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.texteditor.parameterlabel"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_texteditor_portlabel {
				__id = "com.cea.papyrus.classdiagram.parsers.texteditor.portlabel"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.texteditor.portlabel"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_texteditor_propertylabel {
				__id = "com.cea.papyrus.classdiagram.parsers.texteditor.propertylabel"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.texteditor.propertylabel"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_texteditor_vsldatatypes {
				__id = "com.cea.papyrus.classdiagram.parsers.texteditor.vsldatatypes"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.texteditor.vsldatatypes"
				}
			}
			exports += new Package package_com_cea_papyrus_classdiagram_parsers_util {
				__id = "com.cea.papyrus.classdiagram.parsers.util"
				identifier = new PlatformID {
					value = "com.cea.papyrus.classdiagram.parsers.util"
				}
			}
			exports += new Package package_org_antlr {
				__id = "org.antlr"
				identifier = new PlatformID {
					value = "org.antlr"
				}
			}
			exports += new Package package_org_antlr_analysis {
				__id = "org.antlr.analysis"
				identifier = new PlatformID {
					value = "org.antlr.analysis"
				}
			}
			exports += new Package package_org_antlr_codegen {
				__id = "org.antlr.codegen"
				identifier = new PlatformID {
					value = "org.antlr.codegen"
				}
			}
			exports += new Package package_org_antlr_codegen_templates {
				__id = "org.antlr.codegen.templates"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_ActionScript {
				__id = "org.antlr.codegen.templates.ActionScript"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.ActionScript"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_C {
				__id = "org.antlr.codegen.templates.C"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.C"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_CSharp {
				__id = "org.antlr.codegen.templates.CSharp"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.CSharp"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_CSharp2 {
				__id = "org.antlr.codegen.templates.CSharp2"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.CSharp2"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Java {
				__id = "org.antlr.codegen.templates.Java"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Java"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_ObjC {
				__id = "org.antlr.codegen.templates.ObjC"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.ObjC"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Perl5 {
				__id = "org.antlr.codegen.templates.Perl5"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Perl5"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Python {
				__id = "org.antlr.codegen.templates.Python"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Python"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Ruby {
				__id = "org.antlr.codegen.templates.Ruby"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Ruby"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_cpp {
				__id = "org.antlr.codegen.templates.cpp"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.cpp"
				}
			}
			exports += new Package package_org_antlr_gunit {
				__id = "org.antlr.gunit"
				identifier = new PlatformID {
					value = "org.antlr.gunit"
				}
			}
			exports += new Package package_org_antlr_misc {
				__id = "org.antlr.misc"
				identifier = new PlatformID {
					value = "org.antlr.misc"
				}
			}
			exports += new Package package_org_antlr_runtime {
				__id = "org.antlr.runtime"
				identifier = new PlatformID {
					value = "org.antlr.runtime"
				}
			}
			exports += new Package package_org_antlr_runtime_debug {
				__id = "org.antlr.runtime.debug"
				identifier = new PlatformID {
					value = "org.antlr.runtime.debug"
				}
			}
			exports += new Package package_org_antlr_runtime_misc {
				__id = "org.antlr.runtime.misc"
				identifier = new PlatformID {
					value = "org.antlr.runtime.misc"
				}
			}
			exports += new Package package_org_antlr_runtime_tree {
				__id = "org.antlr.runtime.tree"
				identifier = new PlatformID {
					value = "org.antlr.runtime.tree"
				}
			}
			exports += new Package package_org_antlr_test {
				__id = "org.antlr.test"
				identifier = new PlatformID {
					value = "org.antlr.test"
				}
			}
			exports += new Package package_org_antlr_tool {
				__id = "org.antlr.tool"
				identifier = new PlatformID {
					value = "org.antlr.tool"
				}
			}
			exports += new Package package_org_antlr_tool_templates {
				__id = "org.antlr.tool.templates"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates"
				}
			}
			exports += new Package package_org_antlr_tool_templates_dot {
				__id = "org.antlr.tool.templates.dot"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates.dot"
				}
			}
			exports += new Package package_org_antlr_tool_templates_messages_formats {
				__id = "org.antlr.tool.templates.messages.formats"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates.messages.formats"
				}
			}
			exports += new Package package_org_antlr_tool_templates_messages_languages {
				__id = "org.antlr.tool.templates.messages.languages"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates.messages.languages"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagraminterchange2 {
			__id = "com.cea.papyrus.diagraminterchange2"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagraminterchange2"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2
				target = plugin_org_eclipse_uml2_uml
			}
			ownedEntities += new Metamodel metamodel_null {
				__id = "null"
				identifier = new PlatformID {
					value = "null"
				}
				locator = new EFSLocator {
					value = "null"
				}
			}
				ownedEntities += new Service service_conformsTo_null {
					__id = "conformsTo_null"
					identifier = new PlatformID {
						value = "conformsTo_null"
					}
					locator = new EFSLocator {
						value = "null.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2_impl {
				__id = "com.cea.papyrus.diagraminterchange2.di2.impl"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2.impl"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2_util {
				__id = "com.cea.papyrus.diagraminterchange2.di2.util"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2.util"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagraminterchange2_edit {
			__id = "com.cea.papyrus.diagraminterchange2.edit"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagraminterchange2.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_com_cea_papyrus_diagraminterchange2
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_edit
				target = plugin_org_eclipse_gef
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2_provider {
				__id = "com.cea.papyrus.diagraminterchange2.di2.provider"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2.provider"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagraminterchange2_editor {
			__id = "com.cea.papyrus.diagraminterchange2.editor"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagraminterchange2.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_com_cea_papyrus_diagraminterchange2_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_uml2_uml_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagraminterchange2_editor
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2_presentation {
				__id = "com.cea.papyrus.diagraminterchange2.di2.presentation"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2.presentation"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_doc {
			__id = "com.cea.papyrus.doc"
			identifier = new PlatformID {
				value = "com.cea.papyrus.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			ownedEntities += new Document {
				__id = "com.cea.papyrus.doc"
				identifier = new PlatformID {
					value = "com.cea.papyrus.doc"
				}
				locator = new EFSLocator {
					value = "com.cea.papyrus.doc"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_extensionpoints_uml2 {
			__id = "com.cea.papyrus.extensionpoints.uml2"
			identifier = new PlatformID {
				value = "com.cea.papyrus.extensionpoints.uml2"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_uml2
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_uml2
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_uml2
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_uml2
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_uml2
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_uml2
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_uml2
				target = plugin_org_eclipse_emf_mapping_ecore2xml
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_profile {
			__id = "com.cea.papyrus.profile"
			identifier = new PlatformID {
				value = "com.cea.papyrus.profile"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_com_cea_papyrus_classdiagram_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_org_eclipse_uml2_uml_editor
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_com_cea_papyrus_umlutils
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile
				target = plugin_com_cea_papyrus_extensionpoints_uml2
			}
			exports += new Package package_com_cea_papyrus_profile {
				__id = "com.cea.papyrus.profile"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_definition {
				__id = "com.cea.papyrus.profile.definition"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.definition"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_preference {
				__id = "com.cea.papyrus.profile.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.preference"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_tree {
				__id = "com.cea.papyrus.profile.tree"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.tree"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_tree_objects {
				__id = "com.cea.papyrus.profile.tree.objects"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.tree.objects"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_actions {
				__id = "com.cea.papyrus.profile.ui.actions"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.actions"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_composites {
				__id = "com.cea.papyrus.profile.ui.composites"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.composites"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_dialogs {
				__id = "com.cea.papyrus.profile.ui.dialogs"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.dialogs"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_items {
				__id = "com.cea.papyrus.profile.ui.items"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.items"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_listeners {
				__id = "com.cea.papyrus.profile.ui.listeners"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.listeners"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_panels {
				__id = "com.cea.papyrus.profile.ui.panels"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.panels"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_views {
				__id = "com.cea.papyrus.profile.ui.views"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.views"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_utils {
				__id = "com.cea.papyrus.profile.utils"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.utils"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_wizard {
				__id = "com.cea.papyrus.profile.wizard"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.wizard"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_extensionpoints_lang {
			__id = "com.cea.papyrus.extensionpoints.lang"
			identifier = new PlatformID {
				value = "com.cea.papyrus.extensionpoints.lang"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_lang
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_lang
				target = plugin_org_eclipse_ui
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_extensionpoints_transformation {
			__id = "com.cea.papyrus.extensionpoints.transformation"
			identifier = new PlatformID {
				value = "com.cea.papyrus.extensionpoints.transformation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_transformation
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_transformation
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_transformation
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_transformation
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_transformation
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_transformation
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_transformation {
				__id = "com.cea.papyrus.extensionpoints.transformation"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.transformation"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_transformation_definition {
				__id = "com.cea.papyrus.extensionpoints.transformation.definition"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.transformation.definition"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_transformation_dialog {
				__id = "com.cea.papyrus.extensionpoints.transformation.dialog"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.transformation.dialog"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_transformation_filter {
				__id = "com.cea.papyrus.extensionpoints.transformation.filter"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.transformation.filter"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_transformation_launch {
				__id = "com.cea.papyrus.extensionpoints.transformation.launch"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.transformation.launch"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_transformation_validator {
				__id = "com.cea.papyrus.extensionpoints.transformation.validator"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.transformation.validator"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_umlutils {
			__id = "com.cea.papyrus.umlutils"
			identifier = new PlatformID {
				value = "com.cea.papyrus.umlutils"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_umlutils
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_umlutils
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_umlutils
				target = plugin_org_eclipse_swt
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_umlutils
				target = plugin_org_eclipse_jface
			}
			exports += new Package package_com_cea_papyrus_umlutils {
				__id = "com.cea.papyrus.umlutils"
				identifier = new PlatformID {
					value = "com.cea.papyrus.umlutils"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_ocl_interpreter {
			__id = "com.cea.papyrus.ocl.interpreter"
			identifier = new PlatformID {
				value = "com.cea.papyrus.ocl.interpreter"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_ocl_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_interpreter
				target = plugin_com_cea_papyrus_umlutils
			}
			exports += new Package package_com_cea_papyrus_ocl_interpreter {
				__id = "com.cea.papyrus.ocl.interpreter"
				identifier = new PlatformID {
					value = "com.cea.papyrus.ocl.interpreter"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets_ {
				__id = "org.eclipse.swt.widgets'"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets'"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_core {
			__id = "com.cea.papyrus.core"
			identifier = new PlatformID {
				value = "com.cea.papyrus.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_ui_intro
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_umlutils
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_diagraminterchange2
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_diagraminterchange2_edit
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_extensionpoints_lang
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_extensionpoints_transformation
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_extensionpoints_uml2
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_profile
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_osgi
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_ui_cheatsheets
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_classdiagram_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_org_eclipse_ui_cheatsheets
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_extensionpoints_dnd
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_ocl_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_core
				target = plugin_com_cea_papyrus_extensionpoints_editors
			}
			exports += new Package package_com_cea_papyrus_core {
				__id = "com.cea.papyrus.core"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core"
				}
			}
			exports += new Package package_com_cea_papyrus_core_utils {
				__id = "com.cea.papyrus.core.utils"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.utils"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_osgi_framework {
				__id = "org.osgi.framework"
				identifier = new PlatformID {
					value = "org.osgi.framework"
				}
			}
			exports += new Package package_com_cea_papyrus_multidiagram_extension {
				__id = "com.cea.papyrus.multidiagram.extension"
				identifier = new PlatformID {
					value = "com.cea.papyrus.multidiagram.extension"
				}
			}
			exports += new Package package_org_eclipse_jface_action {
				__id = "org.eclipse.jface.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action"
				}
			}
			exports += new Package package_org_eclipse_osgi_util {
				__id = "org.eclipse.osgi.util"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.util"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_actions {
				__id = "org.eclipse.gef.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.actions"
				}
			}
			exports += new Package package_com_cea_papyrus_core_helper {
				__id = "com.cea.papyrus.core.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.helper"
				}
			}
			exports += new Package package_org_eclipse_ui_plugin {
				__id = "org.eclipse.ui.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.ui.plugin"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_actions {
				__id = "com.cea.papyrus.core.actions"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.actions"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_com_cea_papyrus_multidiagram_extension {
				__id = "com.cea.papyrus.multidiagram.extension"
				identifier = new PlatformID {
					value = "com.cea.papyrus.multidiagram.extension"
				}
			}
			exports += new Package package_org_eclipse_jface_action {
				__id = "org.eclipse.jface.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_emf_common_util {
				__id = "org.eclipse.emf.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.util"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_resource {
				__id = "org.eclipse.emf.ecore.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.resource"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_actions {
				__id = "org.eclipse.gef.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_domain {
				__id = "org.eclipse.emf.edit.domain"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.domain"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart {
				__id = "com.cea.papyrus.core.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_actions {
				__id = "com.cea.papyrus.profile.ui.actions"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_actions {
				__id = "org.eclipse.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.actions"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands {
				__id = "com.cea.papyrus.core.commands"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands"
				}
			}
			exports += new Package package_org_eclipse_gef_requests {
				__id = "org.eclipse.gef.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gef.requests"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_actions_create {
				__id = "com.cea.papyrus.core.actions.create"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.actions.create"
				}
			}
			exports += new Package package_com_cea_papyrus_core_actions_delete {
				__id = "com.cea.papyrus.core.actions.delete"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.actions.delete"
				}
			}
			exports += new Package package_com_cea_papyrus_core_actions_imports {
				__id = "com.cea.papyrus.core.actions.imports"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.actions.imports"
				}
			}
			exports += new Package package_com_cea_papyrus_core_actions_profile {
				__id = "com.cea.papyrus.core.actions.profile"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.actions.profile"
				}
			}
			exports += new Package package_com_cea_papyrus_core_actions_selectcopypaste {
				__id = "com.cea.papyrus.core.actions.selectcopypaste"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.actions.selectcopypaste"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands {
				__id = "com.cea.papyrus.core.commands"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_connection {
				__id = "com.cea.papyrus.core.commands.connection"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.connection"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_domain {
				__id = "org.eclipse.emf.edit.domain"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.domain"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart {
				__id = "com.cea.papyrus.core.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_core_directedit {
				__id = "com.cea.papyrus.core.directedit"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.directedit"
				}
			}
			exports += new Package package_com_cea_papyrus_core_helper {
				__id = "com.cea.papyrus.core.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_core_pseudoelement {
				__id = "com.cea.papyrus.core.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.pseudoelement"
				}
			}
			exports += new Package package_org_eclipse_gef_requests {
				__id = "org.eclipse.gef.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gef.requests"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore {
				__id = "org.eclipse.emf.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_association {
				__id = "com.cea.papyrus.core.commands.association"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.association"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands {
				__id = "com.cea.papyrus.core.commands"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_connection {
				__id = "com.cea.papyrus.core.commands.connection"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.connection"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_copypaste {
				__id = "com.cea.papyrus.core.commands.copypaste"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.copypaste"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_diagram {
				__id = "com.cea.papyrus.core.commands.diagram"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.diagram"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_extension {
				__id = "com.cea.papyrus.core.commands.extension"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.extension"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands {
				__id = "com.cea.papyrus.core.commands"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_association {
				__id = "com.cea.papyrus.core.commands.association"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.association"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_factories {
				__id = "com.cea.papyrus.core.commands.factories"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.factories"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands_template {
				__id = "com.cea.papyrus.core.commands.template"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands.template"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commonbehavior_factory {
				__id = "com.cea.papyrus.core.commonbehavior.factory"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commonbehavior.factory"
				}
			}
			exports += new Package package_com_cea_papyrus_core_directedit {
				__id = "com.cea.papyrus.core.directedit"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.directedit"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_gef_tools {
				__id = "org.eclipse.gef.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gef.tools"
				}
			}
			exports += new Package package_org_eclipse_gef_editpolicies {
				__id = "org.eclipse.gef.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gef.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_org_eclipse_gef_requests_ {
				__id = "org.eclipse.gef.requests'"
				identifier = new PlatformID {
					value = "org.eclipse.gef.requests'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_dnd {
				__id = "com.cea.papyrus.core.dnd"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.dnd"
				}
			}
			exports += new Package package_org_eclipse_gef_dnd {
				__id = "org.eclipse.gef.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.gef.dnd"
				}
			}
			exports += new Package package_org_eclipse_gef_ {
				__id = "org.eclipse.gef'"
				identifier = new PlatformID {
					value = "org.eclipse.gef'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editor {
				__id = "com.cea.papyrus.core.editor"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editor"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify {
				__id = "org.eclipse.emf.common.notify"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify"
				}
			}
			exports += new Package package_com_cea_papyrus_multidiagram_extension {
				__id = "com.cea.papyrus.multidiagram.extension"
				identifier = new PlatformID {
					value = "com.cea.papyrus.multidiagram.extension"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_provider {
				__id = "org.eclipse.emf.edit.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.provider"
				}
			}
			exports += new Package package_org_eclipse_core_resources {
				__id = "org.eclipse.core.resources"
				identifier = new PlatformID {
					value = "org.eclipse.core.resources"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_jface_action {
				__id = "org.eclipse.jface.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_actions {
				__id = "org.eclipse.gef.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editor_abstracteditor {
				__id = "com.cea.papyrus.core.editor.abstracteditor"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editor.abstracteditor"
				}
			}
			exports += new Package package_org_eclipse_swt_events {
				__id = "org.eclipse.swt.events"
				identifier = new PlatformID {
					value = "org.eclipse.swt.events"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_palette {
				__id = "org.eclipse.gef.ui.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.palette"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties_tabbed {
				__id = "org.eclipse.ui.views.properties.tabbed"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties.tabbed"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_com_cea_papyrus_core_actions {
				__id = "com.cea.papyrus.core.actions"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.actions"
				}
			}
			exports += new Package package_org_eclipse_jface_action {
				__id = "org.eclipse.jface.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_actions {
				__id = "org.eclipse.gef.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_part {
				__id = "org.eclipse.ui.part"
				identifier = new PlatformID {
					value = "org.eclipse.ui.part"
				}
			}
			exports += new Package package_org_eclipse_ui_actions {
				__id = "org.eclipse.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_parts {
				__id = "org.eclipse.gef.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editor_mouseoveraction {
				__id = "com.cea.papyrus.core.editor.mouseoveraction"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editor.mouseoveraction"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_gef_tools {
				__id = "org.eclipse.gef.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gef.tools"
				}
			}
			exports += new Package package_org_eclipse_gef_editpolicies {
				__id = "org.eclipse.gef.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gef.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_gef_palette {
				__id = "org.eclipse.gef.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gef.palette"
				}
			}
			exports += new Package package_org_eclipse_gef_handles {
				__id = "org.eclipse.gef.handles"
				identifier = new PlatformID {
					value = "org.eclipse.gef.handles"
				}
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_org_eclipse_gef_requests_ {
				__id = "org.eclipse.gef.requests'"
				identifier = new PlatformID {
					value = "org.eclipse.gef.requests'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart {
				__id = "com.cea.papyrus.core.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties {
				__id = "org.eclipse.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify {
				__id = "org.eclipse.emf.common.notify"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_com_cea_papyrus_core_listener {
				__id = "com.cea.papyrus.core.listener"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.listener"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart_connection {
				__id = "com.cea.papyrus.core.editpart.connection"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart.connection"
				}
			}
			exports += new Package package_org_eclipse_gef_tools {
				__id = "org.eclipse.gef.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gef.tools"
				}
			}
			exports += new Package package_org_eclipse_gef_editpolicies {
				__id = "org.eclipse.gef.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gef.editpolicies"
				}
			}
			exports += new Package package_com_cea_papyrus_core_figures {
				__id = "com.cea.papyrus.core.figures"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.figures"
				}
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_com_cea_papyrus_core_commands {
				__id = "com.cea.papyrus.core.commands"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.commands"
				}
			}
			exports += new Package package_org_eclipse_gef_requests {
				__id = "org.eclipse.gef.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gef.requests"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart_connection {
				__id = "com.cea.papyrus.core.editpart.connection"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart.connection"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify {
				__id = "org.eclipse.emf.common.notify"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart {
				__id = "com.cea.papyrus.core.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart"
				}
			}
			exports += new Package package_org_eclipse_gef_editpolicies {
				__id = "org.eclipse.gef.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.gef.editpolicies"
				}
			}
			exports += new Package package_com_cea_papyrus_core_figures {
				__id = "com.cea.papyrus.core.figures"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.figures"
				}
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_extensionpoints {
				__id = "com.cea.papyrus.core.extensionpoints"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.extensionpoints"
				}
			}
			exports += new Package package_com_cea_papyrus_core_extensionpoints_nestededitor {
				__id = "com.cea.papyrus.core.extensionpoints.nestededitor"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.extensionpoints.nestededitor"
				}
			}
			exports += new Package package_com_cea_papyrus_core_extensionpoints_palette {
				__id = "com.cea.papyrus.core.extensionpoints.palette"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.extensionpoints.palette"
				}
			}
			exports += new Package package_com_cea_papyrus_core_extensionpoints {
				__id = "com.cea.papyrus.core.extensionpoints"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.extensionpoints"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_org_eclipse_emf_common_util {
				__id = "org.eclipse.emf.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.util"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_external_commands {
				__id = "com.cea.papyrus.core.external.commands"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.external.commands"
				}
			}
			exports += new Package package_com_cea_papyrus_core_figures {
				__id = "com.cea.papyrus.core.figures"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.figures"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_com_cea_papyrus_core_figures_connection {
				__id = "com.cea.papyrus.core.figures.connection"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.figures.connection"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_figures_connection {
				__id = "com.cea.papyrus.core.figures.connection"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.figures.connection"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_com_cea_papyrus_core_figures {
				__id = "com.cea.papyrus.core.figures"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.figures"
				}
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_filters {
				__id = "com.cea.papyrus.core.filters"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.filters"
				}
			}
			exports += new Package package_com_cea_papyrus_core_helper {
				__id = "com.cea.papyrus.core.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.helper"
				}
			}
			exports += new Package package_org_eclipse_emf_common_util {
				__id = "org.eclipse.emf.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.util"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_listener {
				__id = "com.cea.papyrus.core.listener"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.listener"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart {
				__id = "com.cea.papyrus.core.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify {
				__id = "org.eclipse.emf.common.notify"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_util {
				__id = "org.eclipse.emf.ecore.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.util"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_preference {
				__id = "com.cea.papyrus.core.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.preference"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_ui_ {
				__id = "org.eclipse.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.ui'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_presentation {
				__id = "com.cea.papyrus.core.presentation"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.presentation"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_ui_provider_ {
				__id = "org.eclipse.emf.edit.ui.provider'"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui.provider'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_presentation_providers {
				__id = "com.cea.papyrus.core.presentation.providers"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.presentation.providers"
				}
			}
			exports += new Package package_com_cea_papyrus_core_presentation_sorters {
				__id = "com.cea.papyrus.core.presentation.sorters"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.presentation.sorters"
				}
			}
			exports += new Package package_com_cea_papyrus_core_profiles {
				__id = "com.cea.papyrus.core.profiles"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.profiles"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties_tabbed {
				__id = "org.eclipse.ui.views.properties.tabbed"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties.tabbed"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_tree {
				__id = "com.cea.papyrus.profile.tree"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.tree"
				}
			}
			exports += new Package package_org_eclipse_emf_common_util {
				__id = "org.eclipse.emf.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.util"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_composites {
				__id = "com.cea.papyrus.profile.ui.composites"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.composites"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_listeners {
				__id = "com.cea.papyrus.profile.ui.listeners"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.listeners"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_pseudoelement {
				__id = "com.cea.papyrus.core.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.pseudoelement"
				}
			}
			exports += new Package package_org_eclipse_gef_requests {
				__id = "org.eclipse.gef.requests"
				identifier = new PlatformID {
					value = "org.eclipse.gef.requests"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ {
				__id = "org.eclipse.uml2.uml'"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_tabbedproperties {
				__id = "com.cea.papyrus.core.tabbedproperties"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.tabbedproperties"
				}
			}
			exports += new Package package_com_cea_papyrus_core_tabbedproperties_composite {
				__id = "com.cea.papyrus.core.tabbedproperties.composite"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.tabbedproperties.composite"
				}
			}
			exports += new Package package_com_cea_papyrus_core_treeeditpart {
				__id = "com.cea.papyrus.core.treeeditpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.treeeditpart"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties_tabbed {
				__id = "org.eclipse.ui.views.properties.tabbed"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties.tabbed"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_org_eclipse_jface_action {
				__id = "org.eclipse.jface.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_com_cea_papyrus_core_presentation_sorters {
				__id = "com.cea.papyrus.core.presentation.sorters"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.presentation.sorters"
				}
			}
			exports += new Package package_org_eclipse_jface_util {
				__id = "org.eclipse.jface.util"
				identifier = new PlatformID {
					value = "org.eclipse.jface.util"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editor_abstracteditor {
				__id = "com.cea.papyrus.core.editor.abstracteditor"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editor.abstracteditor"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties {
				__id = "org.eclipse.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify {
				__id = "org.eclipse.emf.common.notify"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_actions {
				__id = "org.eclipse.gef.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_part {
				__id = "org.eclipse.ui.part"
				identifier = new PlatformID {
					value = "org.eclipse.ui.part"
				}
			}
			exports += new Package package_org_eclipse_jface_preference {
				__id = "org.eclipse.jface.preference"
				identifier = new PlatformID {
					value = "org.eclipse.jface.preference"
				}
			}
			exports += new Package package_com_cea_papyrus_core_editpart {
				__id = "com.cea.papyrus.core.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.editpart"
				}
			}
			exports += new Package package_org_eclipse_gef_tools {
				__id = "org.eclipse.gef.tools"
				identifier = new PlatformID {
					value = "org.eclipse.gef.tools"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_treeeditpart_pseudoelement {
				__id = "com.cea.papyrus.core.common.treeeditpart.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common.treeeditpart.pseudoelement"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_parts {
				__id = "org.eclipse.gef.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.parts"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_treeeditpart_diagramview {
				__id = "com.cea.papyrus.core.treeeditpart.diagramview"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.treeeditpart.diagramview"
				}
			}
			exports += new Package package_com_cea_papyrus_diagraminterchange2_di2 {
				__id = "com.cea.papyrus.diagraminterchange2.di2"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagraminterchange2.di2"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties {
				__id = "org.eclipse.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_resource {
				__id = "org.eclipse.emf.ecore.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.resource"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common_ {
				__id = "com.cea.papyrus.core.common'"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_treeeditpart_pseudoelement {
				__id = "com.cea.papyrus.core.treeeditpart.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.treeeditpart.pseudoelement"
				}
			}
			exports += new Package package_com_cea_papyrus_core_ui_dialogs {
				__id = "com.cea.papyrus.core.ui.dialogs"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_jface_viewers {
				__id = "org.eclipse.jface.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.viewers"
				}
			}
			exports += new Package package_org_eclipse_swt_events {
				__id = "org.eclipse.swt.events"
				identifier = new PlatformID {
					value = "org.eclipse.swt.events"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_core_commands_common {
				__id = "org.eclipse.core.commands.common"
				identifier = new PlatformID {
					value = "org.eclipse.core.commands.common"
				}
			}
			exports += new Package package_com_cea_papyrus_umlutils {
				__id = "com.cea.papyrus.umlutils"
				identifier = new PlatformID {
					value = "com.cea.papyrus.umlutils"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_jface_text_source {
				__id = "org.eclipse.jface.text.source"
				identifier = new PlatformID {
					value = "org.eclipse.jface.text.source"
				}
			}
			exports += new Package package_org_eclipse_jface_fieldassist {
				__id = "org.eclipse.jface.fieldassist"
				identifier = new PlatformID {
					value = "org.eclipse.jface.fieldassist"
				}
			}
			exports += new Package package_com_cea_papyrus_profile_ui_dialogs {
				__id = "com.cea.papyrus.profile.ui.dialogs"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profile.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common {
				__id = "com.cea.papyrus.core.common"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_ {
				__id = "org.eclipse.emf.ecore'"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_ui_properties_advanced {
				__id = "com.cea.papyrus.core.ui.properties.advanced"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.ui.properties.advanced"
				}
			}
			exports += new Package package_org_eclipse_ui_views_properties {
				__id = "org.eclipse.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.properties"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_ {
				__id = "org.eclipse.emf.ecore'"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_ui_thumbnail {
				__id = "com.cea.papyrus.core.ui.thumbnail"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.ui.thumbnail"
				}
			}
			exports += new Package package_org_eclipse_jface_viewers {
				__id = "org.eclipse.jface.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.viewers"
				}
			}
			exports += new Package package_org_eclipse_ui_views_contentoutline {
				__id = "org.eclipse.ui.views.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views.contentoutline"
				}
			}
			exports += new Package package_org_eclipse_gef_ui_parts {
				__id = "org.eclipse.gef.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gef.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_org_eclipse_ui_ {
				__id = "org.eclipse.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.ui'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_ui_wizards {
				__id = "com.cea.papyrus.core.ui.wizards"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_ui_ {
				__id = "org.eclipse.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.ui'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_utils {
				__id = "com.cea.papyrus.core.utils"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.utils"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_emf_common_notify {
				__id = "org.eclipse.emf.common.notify"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.notify"
				}
			}
			exports += new Package package_org_eclipse_core_resources {
				__id = "org.eclipse.core.resources"
				identifier = new PlatformID {
					value = "org.eclipse.core.resources"
				}
			}
			exports += new Package package_org_eclipse_gef {
				__id = "org.eclipse.gef"
				identifier = new PlatformID {
					value = "org.eclipse.gef"
				}
			}
			exports += new Package package_org_eclipse_emf_common_util {
				__id = "org.eclipse.emf.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.util"
				}
			}
			exports += new Package package_org_eclipse_gef_commands {
				__id = "org.eclipse.gef.commands"
				identifier = new PlatformID {
					value = "org.eclipse.gef.commands"
				}
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_resource {
				__id = "org.eclipse.emf.ecore.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.resource"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_domain {
				__id = "org.eclipse.emf.edit.domain"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.domain"
				}
			}
			exports += new Package package_org_eclipse_gef_palette {
				__id = "org.eclipse.gef.palette"
				identifier = new PlatformID {
					value = "org.eclipse.gef.palette"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_util {
				__id = "org.eclipse.uml2.uml.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.util"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_ {
				__id = "org.eclipse.emf.ecore'"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore'"
				}
			}
			exports += new Package package_com_cea_papyrus_core_utils_validation {
				__id = "com.cea.papyrus.core.utils.validation"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.utils.validation"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_util {
				__id = "org.eclipse.emf.ecore.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.util"
				}
			}
			exports += new Package package_com_cea_papyrus_core_common {
				__id = "com.cea.papyrus.core.common"
				identifier = new PlatformID {
					value = "com.cea.papyrus.core.common"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_ {
				__id = "org.eclipse.emf.ecore'"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore'"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_activity {
			__id = "com.cea.papyrus.diagram.activity"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.activity"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_activity
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_activity
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_activity
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_activity
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_activity
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_activity
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_activity
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			exports += new Package package_com_cea_papyrus_diagram_activity {
				__id = "com.cea.papyrus.diagram.activity"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.activity"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_activity_action {
				__id = "com.cea.papyrus.diagram.activity.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.activity.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_activity_command {
				__id = "com.cea.papyrus.diagram.activity.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.activity.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_activity_editpart {
				__id = "com.cea.papyrus.diagram.activity.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.activity.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_activity_figure {
				__id = "com.cea.papyrus.diagram.activity.figure"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.activity.figure"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_activity_helper {
				__id = "com.cea.papyrus.diagram.activity.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.activity.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_activity_preference {
				__id = "com.cea.papyrus.diagram.activity.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.activity.preference"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_classdiagram {
			__id = "com.cea.papyrus.diagram.classdiagram"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.classdiagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_emf_common_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_com_cea_papyrus_classdiagram_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_com_cea_papyrus_profile
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_com_cea_papyrus_extensionpoints_lang
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_com_cea_papyrus_extensionpoints_editors
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_classdiagram
				target = plugin_org_eclipse_emf_edit_ui
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram {
				__id = "com.cea.papyrus.diagram.classdiagram"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_action {
				__id = "com.cea.papyrus.diagram.classdiagram.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_commands {
				__id = "com.cea.papyrus.diagram.classdiagram.commands"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.commands"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_editpart {
				__id = "com.cea.papyrus.diagram.classdiagram.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_figures {
				__id = "com.cea.papyrus.diagram.classdiagram.figures"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.figures"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_helper {
				__id = "com.cea.papyrus.diagram.classdiagram.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_preference {
				__id = "com.cea.papyrus.diagram.classdiagram.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.preference"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_pseudoelement {
				__id = "com.cea.papyrus.diagram.classdiagram.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.pseudoelement"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_tabbedproperties_composite {
				__id = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.composite"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.composite"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_tabbedproperties_filters {
				__id = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.filters"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.filters"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_tabbedproperties_filters_appearance {
				__id = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.filters.appearance"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.filters.appearance"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_tabbedproperties_section {
				__id = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.section"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.section"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_classdiagram_tabbedproperties_section_appearence {
				__id = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.section.appearence"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.classdiagram.tabbedproperties.section.appearence"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_component {
			__id = "com.cea.papyrus.diagram.component"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.component"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_com_cea_papyrus_diagram_composite
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_com_cea_papyrus_classdiagram_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_com_cea_papyrus_extensionpoints_dnd
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_component
				target = plugin_com_cea_papyrus_diagram_deployment
			}
			exports += new Package package_com_cea_papyrus_diagram_component {
				__id = "com.cea.papyrus.diagram.component"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_action {
				__id = "com.cea.papyrus.diagram.component.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_command {
				__id = "com.cea.papyrus.diagram.component.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_dnd {
				__id = "com.cea.papyrus.diagram.component.dnd"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.dnd"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_editpart {
				__id = "com.cea.papyrus.diagram.component.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_figure {
				__id = "com.cea.papyrus.diagram.component.figure"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.figure"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_helper {
				__id = "com.cea.papyrus.diagram.component.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_listener {
				__id = "com.cea.papyrus.diagram.component.listener"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.listener"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_component_preference {
				__id = "com.cea.papyrus.diagram.component.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.component.preference"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_composite {
			__id = "com.cea.papyrus.diagram.composite"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.composite"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_com_cea_papyrus_classdiagram_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_com_cea_papyrus_extensionpoints_dnd
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_composite
				target = plugin_com_cea_papyrus_multidiagram
			}
			exports += new Package package_com_cea_papyrus_diagram_composite {
				__id = "com.cea.papyrus.diagram.composite"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_action {
				__id = "com.cea.papyrus.diagram.composite.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_command {
				__id = "com.cea.papyrus.diagram.composite.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_dnd {
				__id = "com.cea.papyrus.diagram.composite.dnd"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.dnd"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_editpart {
				__id = "com.cea.papyrus.diagram.composite.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_figure {
				__id = "com.cea.papyrus.diagram.composite.figure"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.figure"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_helper {
				__id = "com.cea.papyrus.diagram.composite.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_listener {
				__id = "com.cea.papyrus.diagram.composite.listener"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.listener"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_preference {
				__id = "com.cea.papyrus.diagram.composite.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.preference"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_composite_pseudoelement {
				__id = "com.cea.papyrus.diagram.composite.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.composite.pseudoelement"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_deployment {
			__id = "com.cea.papyrus.diagram.deployment"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.deployment"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_deployment
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_deployment
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_deployment
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_deployment
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_deployment
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_deployment
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_deployment
				target = plugin_com_cea_papyrus_multidiagram
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment {
				__id = "com.cea.papyrus.diagram.deployment"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment_action {
				__id = "com.cea.papyrus.diagram.deployment.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment_command {
				__id = "com.cea.papyrus.diagram.deployment.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment_editpart {
				__id = "com.cea.papyrus.diagram.deployment.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment_figure {
				__id = "com.cea.papyrus.diagram.deployment.figure"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment.figure"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment_helper {
				__id = "com.cea.papyrus.diagram.deployment.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment_preference {
				__id = "com.cea.papyrus.diagram.deployment.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment.preference"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_deployment_tabbedproperties_filters {
				__id = "com.cea.papyrus.diagram.deployment.tabbedproperties.filters"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.deployment.tabbedproperties.filters"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_sequence {
			__id = "com.cea.papyrus.diagram.sequence"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.sequence"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_com_cea_papyrus_tabbedproperties
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_com_cea_papyrus_extensionpoints_editors
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_com_cea_papyrus_classdiagram_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_sequence
				target = plugin_com_cea_papyrus_umlutils
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence {
				__id = "com.cea.papyrus.diagram.sequence"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_action {
				__id = "com.cea.papyrus.diagram.sequence.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_directedit_interactionconstraint {
				__id = "com.cea.papyrus.diagram.sequence.directedit.interactionconstraint"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.directedit.interactionconstraint"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_directedit_message {
				__id = "com.cea.papyrus.diagram.sequence.directedit.message"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.directedit.message"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_helper {
				__id = "com.cea.papyrus.diagram.sequence.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_listener {
				__id = "com.cea.papyrus.diagram.sequence.listener"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.listener"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_parsers_antlr {
				__id = "com.cea.papyrus.diagram.sequence.parsers.antlr"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.parsers.antlr"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_preference {
				__id = "com.cea.papyrus.diagram.sequence.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.preference"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_pseudoelement {
				__id = "com.cea.papyrus.diagram.sequence.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.pseudoelement"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_action {
				__id = "com.cea.papyrus.diagram.sequence.sedi.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_edit {
				__id = "com.cea.papyrus.diagram.sequence.sedi.edit"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.edit"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_edit_analysis {
				__id = "com.cea.papyrus.diagram.sequence.sedi.edit.analysis"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.edit.analysis"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_edit_command {
				__id = "com.cea.papyrus.diagram.sequence.sedi.edit.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.edit.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_edit_handlers {
				__id = "com.cea.papyrus.diagram.sequence.sedi.edit.handlers"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.edit.handlers"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_edit_manager {
				__id = "com.cea.papyrus.diagram.sequence.sedi.edit.manager"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.edit.manager"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_edit_policy {
				__id = "com.cea.papyrus.diagram.sequence.sedi.edit.policy"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.edit.policy"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_editor {
				__id = "com.cea.papyrus.diagram.sequence.sedi.editor"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.editor"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_editor_message {
				__id = "com.cea.papyrus.diagram.sequence.sedi.editor.message"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.editor.message"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_figures {
				__id = "com.cea.papyrus.diagram.sequence.sedi.figures"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.figures"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_model_command {
				__id = "com.cea.papyrus.diagram.sequence.sedi.model.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.model.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_model_command_diagram {
				__id = "com.cea.papyrus.diagram.sequence.sedi.model.command.diagram"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.model.command.diagram"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_sedi_model_util {
				__id = "com.cea.papyrus.diagram.sequence.sedi.model.util"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.sedi.model.util"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_ui_composites {
				__id = "com.cea.papyrus.diagram.sequence.ui.composites"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.ui.composites"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_ui_dialogs {
				__id = "com.cea.papyrus.diagram.sequence.ui.dialogs"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.ui.dialogs"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_ui_filters {
				__id = "com.cea.papyrus.diagram.sequence.ui.filters"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.ui.filters"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_ui_properties_tabbed {
				__id = "com.cea.papyrus.diagram.sequence.ui.properties.tabbed"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.ui.properties.tabbed"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_ui_properties_tabbed_sectionfilter {
				__id = "com.cea.papyrus.diagram.sequence.ui.properties.tabbed.sectionfilter"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.ui.properties.tabbed.sectionfilter"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_sequence_ui_validators {
				__id = "com.cea.papyrus.diagram.sequence.ui.validators"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.sequence.ui.validators"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_statemachine {
			__id = "com.cea.papyrus.diagram.statemachine"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.statemachine"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_com_cea_papyrus_extensionpoints_dnd
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_statemachine
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine {
				__id = "com.cea.papyrus.diagram.statemachine"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_action {
				__id = "com.cea.papyrus.diagram.statemachine.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_command {
				__id = "com.cea.papyrus.diagram.statemachine.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_dnd {
				__id = "com.cea.papyrus.diagram.statemachine.dnd"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.dnd"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_editpart {
				__id = "com.cea.papyrus.diagram.statemachine.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_figure {
				__id = "com.cea.papyrus.diagram.statemachine.figure"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.figure"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_helper {
				__id = "com.cea.papyrus.diagram.statemachine.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_preference {
				__id = "com.cea.papyrus.diagram.statemachine.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.preference"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_statemachine_pseudoelement {
				__id = "com.cea.papyrus.diagram.statemachine.pseudoelement"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.statemachine.pseudoelement"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_diagram_usecase {
			__id = "com.cea.papyrus.diagram.usecase"
			identifier = new PlatformID {
				value = "com.cea.papyrus.diagram.usecase"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_uml2
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_com_cea_papyrus_diagram_composite
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_diagram_usecase
				target = plugin_com_cea_papyrus_multidiagram
			}
			exports += new Package package_com_cea_papyrus_diagram_usecase {
				__id = "com.cea.papyrus.diagram.usecase"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.usecase"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_usecase_action {
				__id = "com.cea.papyrus.diagram.usecase.action"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.usecase.action"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_usecase_command {
				__id = "com.cea.papyrus.diagram.usecase.command"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.usecase.command"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_usecase_editpart {
				__id = "com.cea.papyrus.diagram.usecase.editpart"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.usecase.editpart"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_usecase_figure {
				__id = "com.cea.papyrus.diagram.usecase.figure"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.usecase.figure"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_usecase_helper {
				__id = "com.cea.papyrus.diagram.usecase.helper"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.usecase.helper"
				}
			}
			exports += new Package package_com_cea_papyrus_diagram_usecase_preference {
				__id = "com.cea.papyrus.diagram.usecase.preference"
				identifier = new PlatformID {
					value = "com.cea.papyrus.diagram.usecase.preference"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_extensionpoints_dnd {
			__id = "com.cea.papyrus.extensionpoints.dnd"
			identifier = new PlatformID {
				value = "com.cea.papyrus.extensionpoints.dnd"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_dnd
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_dnd
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_dnd
				target = plugin_org_eclipse_gef
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_dnd {
				__id = "com.cea.papyrus.extensionpoints.dnd"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.dnd"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_dnd_parsing {
				__id = "com.cea.papyrus.extensionpoints.dnd.parsing"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.dnd.parsing"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_dnd_utils {
				__id = "com.cea.papyrus.extensionpoints.dnd.utils"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.dnd.utils"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_multidiagram {
			__id = "com.cea.papyrus.multidiagram"
			identifier = new PlatformID {
				value = "com.cea.papyrus.multidiagram"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_multidiagram
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_multidiagram
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_multidiagram
				target = plugin_org_eclipse_gef
			}
			exports += new Package package_com_cea_papyrus_multidiagram {
				__id = "com.cea.papyrus.multidiagram"
				identifier = new PlatformID {
					value = "com.cea.papyrus.multidiagram"
				}
			}
			exports += new Package package_com_cea_papyrus_multidiagram_actions {
				__id = "com.cea.papyrus.multidiagram.actions"
				identifier = new PlatformID {
					value = "com.cea.papyrus.multidiagram.actions"
				}
			}
			exports += new Package package_com_cea_papyrus_multidiagram_extension {
				__id = "com.cea.papyrus.multidiagram.extension"
				identifier = new PlatformID {
					value = "com.cea.papyrus.multidiagram.extension"
				}
			}
			exports += new Package package_com_cea_papyrus_multidiagram_gef {
				__id = "com.cea.papyrus.multidiagram.gef"
				identifier = new PlatformID {
					value = "com.cea.papyrus.multidiagram.gef"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_tabbedproperties {
			__id = "com.cea.papyrus.tabbedproperties"
			identifier = new PlatformID {
				value = "com.cea.papyrus.tabbedproperties"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_diagram_composite
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_diagram_usecase
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_profile
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_diagram_statemachine
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_ocl_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_org_eclipse_ui_cheatsheets
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_diagram_component
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_classdiagram_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_extensionpoints_lang
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_diagram_activity
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_tabbedproperties
				target = plugin_com_cea_papyrus_extensionpoints_editors
			}
			exports += new Package package_com_cea_papyrus_activitydiagram_tabbedproperties_composite {
				__id = "com.cea.papyrus.activitydiagram.tabbedproperties.composite"
				identifier = new PlatformID {
					value = "com.cea.papyrus.activitydiagram.tabbedproperties.composite"
				}
			}
			exports += new Package package_com_cea_papyrus_activitydiagram_tabbedproperties_filter {
				__id = "com.cea.papyrus.activitydiagram.tabbedproperties.filter"
				identifier = new PlatformID {
					value = "com.cea.papyrus.activitydiagram.tabbedproperties.filter"
				}
			}
			exports += new Package package_com_cea_papyrus_activitydiagram_tabbedproperties_section {
				__id = "com.cea.papyrus.activitydiagram.tabbedproperties.section"
				identifier = new PlatformID {
					value = "com.cea.papyrus.activitydiagram.tabbedproperties.section"
				}
			}
			exports += new Package package_com_cea_papyrus_tabbedproperties {
				__id = "com.cea.papyrus.tabbedproperties"
				identifier = new PlatformID {
					value = "com.cea.papyrus.tabbedproperties"
				}
			}
			exports += new Package package_com_cea_papyrus_tabbedproperties_composites {
				__id = "com.cea.papyrus.tabbedproperties.composites"
				identifier = new PlatformID {
					value = "com.cea.papyrus.tabbedproperties.composites"
				}
			}
			exports += new Package package_com_cea_papyrus_tabbedproperties_section {
				__id = "com.cea.papyrus.tabbedproperties.section"
				identifier = new PlatformID {
					value = "com.cea.papyrus.tabbedproperties.section"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_ocl_validator {
			__id = "com.cea.papyrus.ocl.validator"
			identifier = new PlatformID {
				value = "com.cea.papyrus.ocl.validator"
			}
			state = : "State.active"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_emf_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.100-4.0.0)'"
				maxVersion = "'[3.1.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_emf_validation_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_uml2_uml_editor
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_emf_validation_ocl
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_ocl_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_com_cea_papyrus_multidiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_ocl_validator
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_extensionpoints_editors {
			__id = "com.cea.papyrus.extensionpoints.editors"
			identifier = new PlatformID {
				value = "com.cea.papyrus.extensionpoints.editors"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_editors
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_editors
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_extensionpoints_editors
				target = plugin_org_eclipse_jface_text
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_editors {
				__id = "com.cea.papyrus.extensionpoints.editors"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.editors"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_editors_configuration {
				__id = "com.cea.papyrus.extensionpoints.editors.configuration"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.editors.configuration"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_editors_definition {
				__id = "com.cea.papyrus.extensionpoints.editors.definition"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.editors.definition"
				}
			}
			exports += new Package package_com_cea_papyrus_extensionpoints_editors_utils {
				__id = "com.cea.papyrus.extensionpoints.editors.utils"
				identifier = new PlatformID {
					value = "com.cea.papyrus.extensionpoints.editors.utils"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_profiles_standard {
			__id = "com.cea.papyrus.profiles.standard"
			identifier = new PlatformID {
				value = "com.cea.papyrus.profiles.standard"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profiles_standard
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profiles_standard
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profiles_standard
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profiles_standard
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profiles_standard
				target = plugin_org_eclipse_emf
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_uml2_schemas_Standard_1 {
				__id = "_www_eclipse_org_uml2_schemas_Standard_1"
				identifier = new PlatformID {
					value = "_www_eclipse_org_uml2_schemas_Standard_1"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/uml2/schemas/Standard/1"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_uml2_schemas_Standard_1 {
					__id = "conformsTo__www_eclipse_org_uml2_schemas_Standard_1"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_uml2_schemas_Standard_1"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/uml2/schemas/Standard/1.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_com_cea_papyrus_profiles_standard {
				__id = "com.cea.papyrus.profiles.standard"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profiles.standard"
				}
			}
			exports += new Package package_com_cea_papyrus_profiles_standard_impl {
				__id = "com.cea.papyrus.profiles.standard.impl"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profiles.standard.impl"
				}
			}
			exports += new Package package_com_cea_papyrus_profiles_standard_util {
				__id = "com.cea.papyrus.profiles.standard.util"
				identifier = new PlatformID {
					value = "com.cea.papyrus.profiles.standard.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf {
		__id = "org.eclipse.emf"
		identifier = new PlatformID {
			value = "org.eclipse.emf"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "The runtime and tools for EMF, without source or documentation."
		}
		plugins += new Plugin plugin_org_eclipse_emf {
			__id = "org.eclipse.emf"
			identifier = new PlatformID {
				value = "org.eclipse.emf"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_mint_doc {
		__id = "org.eclipse.emf.mint.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mint.doc"
		}
		version = new Version {
			value = "0.8.0.v200906161513"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Eclipse Modeling Framework Technologies (EMFT) - Mint Developer Guide (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mint_doc {
			__id = "org.eclipse.emf.mint.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mint.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906161513"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.mint.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.mint.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xtext_ui_source {
		__id = "org.eclipse.xtext.ui.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtext.ui.source"
		}
		version = new Version {
			value = "0.7.2.v200908120607"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Xtext UI Source (Incubation) Feature"
		}
		plugins += new Plugin plugin_org_eclipse_xtext_ui_source {
			__id = "org.eclipse.xtext.ui.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.ui.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_ocl_doc {
		__id = "org.eclipse.emf.ocl.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ocl.doc"
		}
		version = new Version {
			value = "1.2.1.v200901271800-208_7w311A17262341"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Object Constraint Language (OCL) 2.0 Compatibility API (documentation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_ocl_doc {
			__id = "org.eclipse.emf.ocl.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ocl.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.101.v200906151230"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.ocl.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.ocl.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl_doc
				target = plugin_org_eclipse_ocl_doc
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_xtend {
		__id = "org.eclipse.xtend"
		identifier = new PlatformID {
			value = "org.eclipse.xtend"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Xtend (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xtend {
			__id = "org.eclipse.xtend"
			identifier = new PlatformID {
				value = "org.eclipse.xtend"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend
				target = plugin_org_antlr_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'4.0.1'"
				maxVersion = "'4.0.1'"
			}
			exports += new Package package_org_eclipse_internal_xtend_check_codeassist {
				__id = "org.eclipse.internal.xtend.check.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.check.codeassist"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_expression_ast {
				__id = "org.eclipse.internal.xtend.expression.ast"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.expression.ast"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_expression_codeassist {
				__id = "org.eclipse.internal.xtend.expression.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.expression.codeassist"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_expression_debug {
				__id = "org.eclipse.internal.xtend.expression.debug"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.expression.debug"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_expression_parser {
				__id = "org.eclipse.internal.xtend.expression.parser"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.expression.parser"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_type_baseimpl {
				__id = "org.eclipse.internal.xtend.type.baseimpl"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.type.baseimpl"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_type_baseimpl_types {
				__id = "org.eclipse.internal.xtend.type.baseimpl.types"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.type.baseimpl.types"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_type_impl_java {
				__id = "org.eclipse.internal.xtend.type.impl.java"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.type.impl.java"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_type_impl_java_beans {
				__id = "org.eclipse.internal.xtend.type.impl.java.beans"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.type.impl.java.beans"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_type_impl_oawclassic {
				__id = "org.eclipse.internal.xtend.type.impl.oawclassic"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.type.impl.oawclassic"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_util {
				__id = "org.eclipse.internal.xtend.util"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.util"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_util_internal_icu {
				__id = "org.eclipse.internal.xtend.util.internal.icu"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.util.internal.icu"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_xtend {
				__id = "org.eclipse.internal.xtend.xtend"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.xtend"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_xtend_ast {
				__id = "org.eclipse.internal.xtend.xtend.ast"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.xtend.ast"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_xtend_codeassist {
				__id = "org.eclipse.internal.xtend.xtend.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.xtend.codeassist"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_xtend_parser {
				__id = "org.eclipse.internal.xtend.xtend.parser"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.xtend.parser"
				}
			}
			exports += new Package package_org_eclipse_internal_xtend_xtend_types {
				__id = "org.eclipse.internal.xtend.xtend.types"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xtend.xtend.types"
				}
			}
			exports += new Package package_org_eclipse_xtend {
				__id = "org.eclipse.xtend"
				identifier = new PlatformID {
					value = "org.eclipse.xtend"
				}
			}
			exports += new Package package_org_eclipse_xtend_check {
				__id = "org.eclipse.xtend.check"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.check"
				}
			}
			exports += new Package package_org_eclipse_xtend_expression {
				__id = "org.eclipse.xtend.expression"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.expression"
				}
			}
			exports += new Package package_org_eclipse_xtend_typesystem {
				__id = "org.eclipse.xtend.typesystem"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_converter {
		__id = "org.eclipse.emf.converter"
		identifier = new PlatformID {
			value = "org.eclipse.emf.converter"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Import/export framework and tools for converting between Ecore and other model forms."
		}
		plugins += new Plugin plugin_org_eclipse_emf_converter {
			__id = "org.eclipse.emf.converter"
			identifier = new PlatformID {
				value = "org.eclipse.emf.converter"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_converter
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_converter
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_converter
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_converter
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_converter {
				__id = "org.eclipse.emf.converter"
				identifier = new PlatformID {
					value = "org.eclipse.emf.converter"
				}
			}
			exports += new Package package_org_eclipse_emf_converter_ui {
				__id = "org.eclipse.emf.converter.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.converter.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_converter_ui_contribution {
				__id = "org.eclipse.emf.converter.ui.contribution"
				identifier = new PlatformID {
					value = "org.eclipse.emf.converter.ui.contribution"
				}
			}
			exports += new Package package_org_eclipse_emf_converter_ui_contribution_base {
				__id = "org.eclipse.emf.converter.ui.contribution.base"
				identifier = new PlatformID {
					value = "org.eclipse.emf.converter.ui.contribution.base"
				}
			}
			exports += new Package package_org_eclipse_emf_converter_util {
				__id = "org.eclipse.emf.converter.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.converter.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_importer {
			__id = "org.eclipse.emf.importer"
			identifier = new PlatformID {
				value = "org.eclipse.emf.importer"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer
				target = plugin_org_eclipse_emf_converter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_importer {
				__id = "org.eclipse.emf.importer"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_ui {
				__id = "org.eclipse.emf.importer.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_ui_contribution {
				__id = "org.eclipse.emf.importer.ui.contribution"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.ui.contribution"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_ui_contribution_base {
				__id = "org.eclipse.emf.importer.ui.contribution.base"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.ui.contribution.base"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_util {
				__id = "org.eclipse.emf.importer.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_exporter {
			__id = "org.eclipse.emf.exporter"
			identifier = new PlatformID {
				value = "org.eclipse.emf.exporter"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_exporter
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_exporter
				target = plugin_org_eclipse_emf_converter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_exporter
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_exporter
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_exporter {
				__id = "org.eclipse.emf.exporter"
				identifier = new PlatformID {
					value = "org.eclipse.emf.exporter"
				}
			}
			exports += new Package package_org_eclipse_emf_exporter_ui {
				__id = "org.eclipse.emf.exporter.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.exporter.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_exporter_ui_contribution {
				__id = "org.eclipse.emf.exporter.ui.contribution"
				identifier = new PlatformID {
					value = "org.eclipse.emf.exporter.ui.contribution"
				}
			}
			exports += new Package package_org_eclipse_emf_exporter_ui_contribution_base {
				__id = "org.eclipse.emf.exporter.ui.contribution.base"
				identifier = new PlatformID {
					value = "org.eclipse.emf.exporter.ui.contribution.base"
				}
			}
			exports += new Package package_org_eclipse_emf_exporter_util {
				__id = "org.eclipse.emf.exporter.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.exporter.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_importer_ecore {
			__id = "org.eclipse.emf.importer.ecore"
			identifier = new PlatformID {
				value = "org.eclipse.emf.importer.ecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.4.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_ecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_ecore
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_ecore
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_ecore
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_ecore
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.7.0-2.0.0)'"
				maxVersion = "'[1.7.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_ecore
				target = plugin_org_eclipse_emf_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_importer_ecore {
				__id = "org.eclipse.emf.importer.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.ecore"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_ecore_taskdefs {
				__id = "org.eclipse.emf.importer.ecore.taskdefs"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.ecore.taskdefs"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_ecore_ui {
				__id = "org.eclipse.emf.importer.ecore.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.ecore.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_importer_java {
			__id = "org.eclipse.emf.importer.java"
			identifier = new PlatformID {
				value = "org.eclipse.emf.importer.java"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_java
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_java
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_java
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_java
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_java
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_java
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.7.0-2.0.0)'"
				maxVersion = "'[1.7.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_java
				target = plugin_org_eclipse_emf_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_importer_java {
				__id = "org.eclipse.emf.importer.java"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.java"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_java_builder {
				__id = "org.eclipse.emf.importer.java.builder"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.java.builder"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_java_taskdefs {
				__id = "org.eclipse.emf.importer.java.taskdefs"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.java.taskdefs"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_java_ui {
				__id = "org.eclipse.emf.importer.java.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.java.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_importer_rose {
			__id = "org.eclipse.emf.importer.rose"
			identifier = new PlatformID {
				value = "org.eclipse.emf.importer.rose"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_rose
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_rose
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_rose
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_rose
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_rose
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.7.0-2.0.0)'"
				maxVersion = "'[1.7.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_importer_rose
				target = plugin_org_eclipse_emf_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_importer_rose {
				__id = "org.eclipse.emf.importer.rose"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.rose"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_rose_builder {
				__id = "org.eclipse.emf.importer.rose.builder"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.rose.builder"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_rose_parser {
				__id = "org.eclipse.emf.importer.rose.parser"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.rose.parser"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_rose_taskdefs {
				__id = "org.eclipse.emf.importer.rose.taskdefs"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.rose.taskdefs"
				}
			}
			exports += new Package package_org_eclipse_emf_importer_rose_ui {
				__id = "org.eclipse.emf.importer.rose.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.importer.rose.ui"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_teneo {
		__id = "org.eclipse.emf.teneo"
		identifier = new PlatformID {
			value = "org.eclipse.emf.teneo"
		}
		version = new Version {
			value = "1.1.1.v200909151729-7862DZRDEBEBKlKz-SB"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2006 Springsite BV (Netherlands) and others. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Hibernate Object Relational Persistence"
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo {
			__id = "org.eclipse.emf.teneo"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.1.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = plugin_org_eclipse_emf_teneo_annotations
			}
			exports += new Package package_org_eclipse_emf_teneo {
				__id = "org.eclipse.emf.teneo"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations {
				__id = "org.eclipse.emf.teneo.annotations"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_mapper {
				__id = "org.eclipse.emf.teneo.annotations.mapper"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.mapper"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_parser {
				__id = "org.eclipse.emf.teneo.annotations.parser"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.parser"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_xml {
				__id = "org.eclipse.emf.teneo.annotations.xml"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.xml"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_classloader {
				__id = "org.eclipse.emf.teneo.classloader"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.classloader"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_ecore {
				__id = "org.eclipse.emf.teneo.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.ecore"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_extension {
				__id = "org.eclipse.emf.teneo.extension"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.extension"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_mapping_elist {
				__id = "org.eclipse.emf.teneo.mapping.elist"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.mapping.elist"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_mapping_strategy {
				__id = "org.eclipse.emf.teneo.mapping.strategy"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.mapping.strategy"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_mapping_strategy_impl {
				__id = "org.eclipse.emf.teneo.mapping.strategy.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.mapping.strategy.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_resource {
				__id = "org.eclipse.emf.teneo.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.resource"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_simpledom {
				__id = "org.eclipse.emf.teneo.simpledom"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.simpledom"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_type {
				__id = "org.eclipse.emf.teneo.type"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.type"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_util {
				__id = "org.eclipse.emf.teneo.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo
				target = package_org_apache_commons_logging
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_annotations {
			__id = "org.eclipse.emf.teneo.annotations"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.annotations"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200909151729"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_annotations
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_annotations
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_annotations
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_teneo_elver_2005_pamodel {
				__id = "_www_eclipse_org_emf_teneo_elver_2005_pamodel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_teneo_elver_2005_pamodel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/teneo/elver/2005/pamodel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_teneo_elver_2005_pamodel {
					__id = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_pamodel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_pamodel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/teneo/elver/2005/pamodel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_teneo_elver_2005_PAnnotation {
				__id = "_www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/teneo/elver/2005/PAnnotation"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_teneo_elver_2005_PAnnotation {
					__id = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_teneo_elver_2005_PAnnotation"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/teneo/elver/2005/PAnnotation.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pamodel {
				__id = "org.eclipse.emf.teneo.annotations.pamodel"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pamodel"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pamodel_impl {
				__id = "org.eclipse.emf.teneo.annotations.pamodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pamodel.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pamodel_util {
				__id = "org.eclipse.emf.teneo.annotations.pamodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pamodel.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pannotation {
				__id = "org.eclipse.emf.teneo.annotations.pannotation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pannotation"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pannotation_impl {
				__id = "org.eclipse.emf.teneo.annotations.pannotation.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pannotation.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_annotations_pannotation_util {
				__id = "org.eclipse.emf.teneo.annotations.pannotation.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.annotations.pannotation.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_hibernate {
			__id = "org.eclipse.emf.teneo.hibernate"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.hibernate"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.1.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate
				target = plugin_org_eclipse_emf_teneo
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate
				target = plugin_org_eclipse_emf_teneo_annotations
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate
				target = plugin_org_eclipse_emf_teneo_hibernate_mapper
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate {
				__id = "org.eclipse.emf.teneo.hibernate"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapping {
				__id = "org.eclipse.emf.teneo.hibernate.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapping"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapping_eav {
				__id = "org.eclipse.emf.teneo.hibernate.mapping.eav"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapping.eav"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapping_econtainer {
				__id = "org.eclipse.emf.teneo.hibernate.mapping.econtainer"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapping.econtainer"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapping_elist {
				__id = "org.eclipse.emf.teneo.hibernate.mapping.elist"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapping.elist"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapping_identifier {
				__id = "org.eclipse.emf.teneo.hibernate.mapping.identifier"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapping.identifier"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapping_internal {
				__id = "org.eclipse.emf.teneo.hibernate.mapping.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapping.internal"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapping_property {
				__id = "org.eclipse.emf.teneo.hibernate.mapping.property"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapping.property"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_resource {
				__id = "org.eclipse.emf.teneo.hibernate.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.resource"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_tuplizer {
				__id = "org.eclipse.emf.teneo.hibernate.tuplizer"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.tuplizer"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate
				target = package_org_apache_commons_logging
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_eclipse {
			__id = "org.eclipse.emf.teneo.eclipse"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.eclipse"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_jdt
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_emf_teneo
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = plugin_org_eclipse_emf_teneo
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipse {
				__id = "org.eclipse.emf.teneo.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipse"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipse_genxml {
				__id = "org.eclipse.emf.teneo.eclipse.genxml"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipse.genxml"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_eclipse_resourcehandler {
				__id = "org.eclipse.emf.teneo.eclipse.resourcehandler"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.eclipse.resourcehandler"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_eclipse
				target = package_org_apache_commons_logging
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_hibernate_eclipse {
			__id = "org.eclipse.emf.teneo.hibernate.eclipse"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.hibernate.eclipse"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_emf_teneo
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_emf_teneo_annotations
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_emf_teneo_hibernate
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_emf_teneo_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_eclipse
				target = plugin_org_eclipse_emf_teneo_hibernate_mapper
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_hibernate_mapper {
			__id = "org.eclipse.emf.teneo.hibernate.mapper"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.hibernate.mapper"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.1.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_mapper
				target = plugin_org_eclipse_emf_teneo
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_mapper
				target = plugin_org_eclipse_emf_teneo_annotations
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_mapper
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_teneo_2006_HbAnnotation {
				__id = "_www_eclipse_org_emf_teneo_2006_HbAnnotation"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_teneo_2006_HbAnnotation"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/teneo/2006/HbAnnotation"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_teneo_2006_HbAnnotation {
					__id = "conformsTo__www_eclipse_org_emf_teneo_2006_HbAnnotation"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_teneo_2006_HbAnnotation"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/teneo/2006/HbAnnotation.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_teneo_2006_HbModel {
				__id = "_www_eclipse_org_emf_teneo_2006_HbModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_teneo_2006_HbModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/teneo/2006/HbModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_teneo_2006_HbModel {
					__id = "conformsTo__www_eclipse_org_emf_teneo_2006_HbModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_teneo_2006_HbModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/teneo/2006/HbModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_teneo_hibernate {
				__id = "org.eclipse.emf.teneo.hibernate"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_annotations {
				__id = "org.eclipse.emf.teneo.hibernate.annotations"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.annotations"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_cdo {
				__id = "org.eclipse.emf.teneo.hibernate.cdo"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.cdo"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbannotation {
				__id = "org.eclipse.emf.teneo.hibernate.hbannotation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbannotation"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbannotation_impl {
				__id = "org.eclipse.emf.teneo.hibernate.hbannotation.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbannotation.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbannotation_util {
				__id = "org.eclipse.emf.teneo.hibernate.hbannotation.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbannotation.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbannotation_validation {
				__id = "org.eclipse.emf.teneo.hibernate.hbannotation.validation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbannotation.validation"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbmodel {
				__id = "org.eclipse.emf.teneo.hibernate.hbmodel"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbmodel"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbmodel_impl {
				__id = "org.eclipse.emf.teneo.hibernate.hbmodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbmodel.impl"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbmodel_util {
				__id = "org.eclipse.emf.teneo.hibernate.hbmodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbmodel.util"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_hbmodel_validation {
				__id = "org.eclipse.emf.teneo.hibernate.hbmodel.validation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.hbmodel.validation"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapper {
				__id = "org.eclipse.emf.teneo.hibernate.mapper"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapper"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_eclipse_emf_teneo_hibernate_mapper_classic {
				__id = "org.eclipse.emf.teneo.hibernate.mapper.classic"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.hibernate.mapper.classic"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_hibernate_mapper
				target = package_org_apache_commons_logging
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_ui_capabilities {
			__id = "org.eclipse.emf.teneo.ui.capabilities"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.ui.capabilities"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_mwe_ui {
		__id = "org.eclipse.emf.mwe.ui"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mwe.ui"
		}
		version = new Version {
			value = "0.7.2.v200908120417"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Modeling Workflow Engine UI (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_ui {
			__id = "org.eclipse.emf.mwe.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_jdt_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui
				target = plugin_org_eclipse_core_expressions
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_debug_breakpoint_actions {
				__id = "org.eclipse.emf.mwe.internal.ui.debug.breakpoint.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.debug.breakpoint.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_debug_launching_ui {
				__id = "org.eclipse.emf.mwe.internal.ui.debug.launching.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.debug.launching.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_debug_model {
				__id = "org.eclipse.emf.mwe.internal.ui.debug.model"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.debug.model"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_debug_model_ui {
				__id = "org.eclipse.emf.mwe.internal.ui.debug.model.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.debug.model.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_debug_processing {
				__id = "org.eclipse.emf.mwe.internal.ui.debug.processing"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.debug.processing"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_debug_processing_handlers {
				__id = "org.eclipse.emf.mwe.internal.ui.debug.processing.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.debug.processing.handlers"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_debug_sourcelookup {
				__id = "org.eclipse.emf.mwe.internal.ui.debug.sourcelookup"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.debug.sourcelookup"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_eclipse_launch {
				__id = "org.eclipse.emf.mwe.internal.ui.eclipse.launch"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.eclipse.launch"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_wizard {
				__id = "org.eclipse.emf.mwe.internal.ui.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.wizard"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_workflow {
				__id = "org.eclipse.emf.mwe.internal.ui.workflow"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.workflow"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_internal_ui_workflow_debug {
				__id = "org.eclipse.emf.mwe.internal.ui.workflow.debug"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.internal.ui.workflow.debug"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_ui_debug_model {
				__id = "org.eclipse.emf.mwe.ui.debug.model"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.ui.debug.model"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_ui_debug_processing {
				__id = "org.eclipse.emf.mwe.ui.debug.processing"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.ui.debug.processing"
				}
			}
			exports += new Package package_org_eclipse_emf_mwe_ui_workflow_util {
				__id = "org.eclipse.emf.mwe.ui.workflow.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.ui.workflow.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_activities {
			__id = "org.eclipse.emf.mwe.activities"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.activities"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_activities
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_ui_simpleEditor {
			__id = "org.eclipse.emf.mwe.ui.simpleEditor"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.ui.simpleEditor"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.0.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui_simpleEditor
				target = plugin_org_eclipse_emf_mwe_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui_simpleEditor
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui_simpleEditor
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui_simpleEditor
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui_simpleEditor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_ui_simpleEditor
				target = plugin_org_eclipse_ui_views
			}
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_teneo_doc {
		__id = "org.eclipse.emf.teneo.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.teneo.doc"
		}
		version = new Version {
			value = "1.1.0.v200909151729-20-7w311A1A26283A"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 Springsite BV (The Netherlands) and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Eclipse Modeling Framework Teneo (documentation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_teneo_doc {
			__id = "org.eclipse.emf.teneo.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.teneo.doc"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200909151729"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.teneo.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.teneo.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.teneo.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_teneo_doc
				target = plugin_org_eclipse_help
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_tigris_subversion_clientadapter_svnkit_feature {
		__id = "org.tigris.subversion.clientadapter.svnkit.feature"
		identifier = new PlatformID {
			value = "org.tigris.subversion.clientadapter.svnkit.feature"
		}
		version = new Version {
			value = "1.6.6"
		}
		provider = vendor_tigris_org
		copyright = new Copyright {
			name = "_subclipse_tigris_org_"
			text = "http://subclipse.tigris.org/"
			locator = new URLLocator {
				value = "http://subclipse.tigris.org/"
			}
		}
		description = new Description {
			name = "description"
			text = "Subversion Client Adapter implementation using the pure Java SVNKit library."
		}
		plugins += new Plugin plugin_org_tigris_subversion_clientadapter_svnkit {
			__id = "org.tigris.subversion.clientadapter.svnkit"
			identifier = new PlatformID {
				value = "org.tigris.subversion.clientadapter.svnkit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.6.6"
			}
			vendor = vendor_tigris_org
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_clientadapter_svnkit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_clientadapter_svnkit
				target = plugin_org_tigris_subversion_clientadapter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.6-1.7.0)'"
				maxVersion = "'[1.6.6-1.7.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_clientadapter_svnkit
				target = plugin_org_tmatesoft_svnkit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-1.4.0)'"
				maxVersion = "'[1.3.0-1.4.0)'"
			}
		}
	}

	features += new Feature feature_org_eclipse_acceleo_doc {
		__id = "org.eclipse.acceleo.doc"
		identifier = new PlatformID {
			value = "org.eclipse.acceleo.doc"
		}
		version = new Version {
			value = "0.8.1.v200909161003"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2008 Obeo and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Acceleo Documentation"
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_doc {
			__id = "org.eclipse.acceleo.doc"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.acceleo.doc"
				identifier = new PlatformID {
					value = "org.eclipse.acceleo.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.acceleo.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_doc
				target = plugin_org_eclipse_help
			}
		}
	}

	features += new Feature feature_org_eclipse_xtext_sdk {
		__id = "org.eclipse.xtext.sdk"
		identifier = new PlatformID {
			value = "org.eclipse.xtext.sdk"
		}
		version = new Version {
			value = "0.7.2.v200908120607"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Xtext SDK (Incubation) Feature"
		}
		plugins += new Plugin plugin_org_eclipse_xtext_bootstrap {
			__id = "org.eclipse.xtext.bootstrap"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.bootstrap"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_xpand
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_xtend_util_stdlib
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_antlr_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_de_itemis_xtext_antlr
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_com_google_guice
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_com_google_collect
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.8.0'"
				maxVersion = "'0.8.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_xtext_ui_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_xtext_ui_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_bootstrap
				target = plugin_org_eclipse_emf_mwe_utils
			}
		}
	}

	features += new Feature feature_org_eclipse_xpand_ui {
		__id = "org.eclipse.xpand.ui"
		identifier = new PlatformID {
			value = "org.eclipse.xpand.ui"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Xpand UI (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xpand_ui {
			__id = "org.eclipse.xpand.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_xtend_shared_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_xpand
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_xtend_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_ltk_core_refactoring
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_ltk_ui_refactoring
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_org_eclipse_emf_mwe_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_ui
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'4.0.1'"
				maxVersion = "'4.0.1'"
			}
			exports += new Package package_org_eclipse_xpand_ui {
				__id = "org.eclipse.xpand.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_core {
				__id = "org.eclipse.xpand.ui.core"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.core"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_editor {
				__id = "org.eclipse.xpand.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_editor_actions {
				__id = "org.eclipse.xpand.ui.editor.actions"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.editor.actions"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_editor_codeassist {
				__id = "org.eclipse.xpand.ui.editor.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.editor.codeassist"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_editor_color {
				__id = "org.eclipse.xpand.ui.editor.color"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.editor.color"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_editor_outline {
				__id = "org.eclipse.xpand.ui.editor.outline"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.editor.outline"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_editor_scanning {
				__id = "org.eclipse.xpand.ui.editor.scanning"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.editor.scanning"
				}
			}
			exports += new Package package_org_eclipse_xpand_ui_wizard {
				__id = "org.eclipse.xpand.ui.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.ui.wizard"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xpand_activities {
			__id = "org.eclipse.xpand.activities"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.activities"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_activities
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand_activities
				target = plugin_org_eclipse_core_runtime
			}
		}
	}

	features += new Feature feature_org_eclipse_mylyn_team_feature {
		__id = "org.eclipse.mylyn.team_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn.team_feature"
		}
		version = new Version {
			value = "3.2.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Mylyn Task-Focused UI extensions for Team version control."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_team_ui {
			__id = "org.eclipse.mylyn.team.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.team.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_team_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_team_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_ui_navigator_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_resources_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_tasks_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_tasks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_commons_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_team_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_team_ui {
				__id = "org.eclipse.mylyn.internal.team.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.team.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_team_ui_actions {
				__id = "org.eclipse.mylyn.internal.team.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.team.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_team_ui_preferences {
				__id = "org.eclipse.mylyn.internal.team.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.team.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_team_ui_properties {
				__id = "org.eclipse.mylyn.internal.team.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.team.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_team_ui_templates {
				__id = "org.eclipse.mylyn.internal.team.ui.templates"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.team.ui.templates"
				}
			}
			exports += new Package package_org_eclipse_mylyn_team_ui {
				__id = "org.eclipse.mylyn.team.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.team.ui"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_validation {
		__id = "org.eclipse.emf.validation"
		identifier = new PlatformID {
			value = "org.eclipse.emf.validation"
		}
		version = new Version {
			value = "1.3.0.v200902052232-478-9oB55W58BQ8QBB"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2009 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Validation Framework."
		}
		plugins += new Plugin plugin_org_eclipse_emf_validation {
			__id = "org.eclipse.emf.validation"
			identifier = new PlatformID {
				value = "org.eclipse.emf.validation"
			}
			state = : "State.active"
			version = new Version {
				value = "1.3.0.v200901271722"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_validation {
				__id = "org.eclipse.emf.validation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_internal {
				__id = "org.eclipse.emf.validation.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_internal_emfadapter {
				__id = "org.eclipse.emf.validation.internal.emfadapter"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.internal.emfadapter"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_internal_l10n {
				__id = "org.eclipse.emf.validation.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_internal_service {
				__id = "org.eclipse.emf.validation.internal.service"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.internal.service"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_internal_util {
				__id = "org.eclipse.emf.validation.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.internal.util"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_marker {
				__id = "org.eclipse.emf.validation.marker"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.marker"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_model {
				__id = "org.eclipse.emf.validation.model"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.model"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_preferences {
				__id = "org.eclipse.emf.validation.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.preferences"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_service {
				__id = "org.eclipse.emf.validation.service"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.service"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_util {
				__id = "org.eclipse.emf.validation.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.util"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_xml {
				__id = "org.eclipse.emf.validation.xml"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.xml"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = package_com_ibm_icu_lang
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_validation_ui {
			__id = "org.eclipse.emf.validation.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.validation.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271722"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui
				target = plugin_org_eclipse_emf_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.100-4.0.0)'"
				maxVersion = "'[3.1.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_validation_ui_internal {
				__id = "org.eclipse.emf.validation.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_ui_internal_console {
				__id = "org.eclipse.emf.validation.ui.internal.console"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.internal.console"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_ui_internal_l10n {
				__id = "org.eclipse.emf.validation.ui.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_ui_internal_preferences {
				__id = "org.eclipse.emf.validation.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_ui_preferences {
				__id = "org.eclipse.emf.validation.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.preferences"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_validation_ui_ide {
			__id = "org.eclipse.emf.validation.ui.ide"
			identifier = new PlatformID {
				value = "org.eclipse.emf.validation.ui.ide"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271722"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui_ide
				target = plugin_org_eclipse_emf_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui_ide
				target = plugin_org_eclipse_emf_validation_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui_ide
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui_ide
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui_ide
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_validation_ui_ide
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_validation_ui_ide_internal {
				__id = "org.eclipse.emf.validation.ui.ide.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.ide.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_ui_ide_internal_l10n {
				__id = "org.eclipse.emf.validation.ui.ide.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.ide.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_validation_ui_ide_quickfix {
				__id = "org.eclipse.emf.validation.ui.ide.quickfix"
				identifier = new PlatformID {
					value = "org.eclipse.emf.validation.ui.ide.quickfix"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_m2m_atl_examples {
		__id = "org.eclipse.m2m.atl.examples"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.atl.examples"
		}
		version = new Version {
			value = "3.0.1.v200909150941"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*    * Copyright (c) 2008, 2009 Obeo.  * All rights reserved. This program and the accompanying materials  * are made available under the terms of the Eclipse Public License v1.0  * which accompanies this distribution, and is available at  * http://www.eclipse.org/legal/epl-v10.html  *   */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Example illustrating how to use ATL."
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_examples {
			__id = "org.eclipse.m2m.atl.examples"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.1.v200909150941"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_examples
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_examples
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_examples
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_examples
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_org_eclipse_m2m_atl_examples {
				__id = "org.eclipse.m2m.atl.examples"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.examples"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_epf_richtext_feature {
		__id = "org.eclipse.epf.richtext.feature"
		identifier = new PlatformID {
			value = "org.eclipse.epf.richtext.feature"
		}
		version = new Version {
			value = "1.5.0.v20080820-1636-37D-9oA55S5M9H28O9O"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "EPF Richtext Feature."
		}
		plugins += new Plugin plugin_org_eclipse_epf_richtext {
			__id = "org.eclipse.epf.richtext"
			identifier = new PlatformID {
				value = "org.eclipse.epf.richtext"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.5.0.v20080714-1745"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_richtext
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_richtext
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_richtext
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_richtext
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_richtext
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_richtext
				target = plugin_org_eclipse_epf_common_ui
			}
			exports += new Package package_org_eclipse_epf_richtext {
				__id = "org.eclipse.epf.richtext"
				identifier = new PlatformID {
					value = "org.eclipse.epf.richtext"
				}
			}
			exports += new Package package_org_eclipse_epf_richtext_actions {
				__id = "org.eclipse.epf.richtext.actions"
				identifier = new PlatformID {
					value = "org.eclipse.epf.richtext.actions"
				}
			}
			exports += new Package package_org_eclipse_epf_richtext_dialogs {
				__id = "org.eclipse.epf.richtext.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.epf.richtext.dialogs"
				}
			}
			exports += new Package package_org_eclipse_epf_richtext_html {
				__id = "org.eclipse.epf.richtext.html"
				identifier = new PlatformID {
					value = "org.eclipse.epf.richtext.html"
				}
			}
			exports += new Package package_org_eclipse_epf_richtext_preferences {
				__id = "org.eclipse.epf.richtext.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.epf.richtext.preferences"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_epf_common {
			__id = "org.eclipse.epf.common"
			identifier = new PlatformID {
				value = "org.eclipse.epf.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.5.0.v20080709-1606"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_common
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_common
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_common
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_common
				target = plugin_org_apache_ant
			}
			exports += new Package package_org_eclipse_epf_common {
				__id = "org.eclipse.epf.common"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common"
				}
			}
			exports += new Package package_org_eclipse_epf_common_html {
				__id = "org.eclipse.epf.common.html"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.html"
				}
			}
			exports += new Package package_org_eclipse_epf_common_preferences {
				__id = "org.eclipse.epf.common.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.preferences"
				}
			}
			exports += new Package package_org_eclipse_epf_common_serviceability {
				__id = "org.eclipse.epf.common.serviceability"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.serviceability"
				}
			}
			exports += new Package package_org_eclipse_epf_common_utils {
				__id = "org.eclipse.epf.common.utils"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.utils"
				}
			}
			exports += new Package package_org_eclipse_epf_common_xml {
				__id = "org.eclipse.epf.common.xml"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.xml"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_epf_common_ui {
			__id = "org.eclipse.epf.common.ui"
			identifier = new PlatformID {
				value = "org.eclipse.epf.common.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.5.0.v20080430-1709"
			}
			vendor = vendor_providerName
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_common_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_common_ui
				target = plugin_org_eclipse_epf_common
			}
			exports += new Package package_org_eclipse_epf_common_ui {
				__id = "org.eclipse.epf.common.ui"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.ui"
				}
			}
			exports += new Package package_org_eclipse_epf_common_ui_actions {
				__id = "org.eclipse.epf.common.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_epf_common_ui_util {
				__id = "org.eclipse.epf.common.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.epf.common.ui.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epf_common_ui
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
	}

	features += new Feature feature_org_eclipse_jet {
		__id = "org.eclipse.jet"
		identifier = new PlatformID {
			value = "org.eclipse.jet"
		}
		version = new Version {
			value = "1.0.2.v201001281539-508cAkF78Y7VCLASCK"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Java Emitter Templates (JET)"
		}
		plugins += new Plugin plugin_org_eclipse_jet {
			__id = "org.eclipse.jet"
			identifier = new PlatformID {
				value = "org.eclipse.jet"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200909041702"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.100-4.0.0)'"
				maxVersion = "'[3.1.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.5-2.0.0)'"
				maxVersion = "'[1.6.5-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet
				target = plugin_org_eclipse_jet_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_jet {
				__id = "org.eclipse.jet"
				identifier = new PlatformID {
					value = "org.eclipse.jet"
				}
			}
			exports += new Package package_org_eclipse_jet_compiler {
				__id = "org.eclipse.jet.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.jet.compiler"
				}
			}
			exports += new Package package_org_eclipse_jet_internal {
				__id = "org.eclipse.jet.internal"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_builder {
				__id = "org.eclipse.jet.internal.builder"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.builder"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_compiler {
				__id = "org.eclipse.jet.internal.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.compiler"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_compiler_templates {
				__id = "org.eclipse.jet.internal.compiler.templates"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.compiler.templates"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_exceptions {
				__id = "org.eclipse.jet.internal.exceptions"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.exceptions"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_extensionpoints {
				__id = "org.eclipse.jet.internal.extensionpoints"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.extensionpoints"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_l10n {
				__id = "org.eclipse.jet.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_launch {
				__id = "org.eclipse.jet.internal.launch"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.launch"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_parser {
				__id = "org.eclipse.jet.internal.parser"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.parser"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_parser_resources {
				__id = "org.eclipse.jet.internal.parser.resources"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.parser.resources"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_runtime {
				__id = "org.eclipse.jet.internal.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.runtime"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_runtime_model {
				__id = "org.eclipse.jet.internal.runtime.model"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.runtime.model"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_taglib {
				__id = "org.eclipse.jet.internal.taglib"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.taglib"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_taglib_control {
				__id = "org.eclipse.jet.internal.taglib.control"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.taglib.control"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_taglib_format {
				__id = "org.eclipse.jet.internal.taglib.format"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.taglib.format"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_taglib_java {
				__id = "org.eclipse.jet.internal.taglib.java"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.taglib.java"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_taglib_workspace {
				__id = "org.eclipse.jet.internal.taglib.workspace"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.taglib.workspace"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_xpath {
				__id = "org.eclipse.jet.internal.xpath"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.xpath"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_xpath_ast {
				__id = "org.eclipse.jet.internal.xpath.ast"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.xpath.ast"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_xpath_functions {
				__id = "org.eclipse.jet.internal.xpath.functions"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.xpath.functions"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_xpath_functions_extras {
				__id = "org.eclipse.jet.internal.xpath.functions.extras"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.xpath.functions.extras"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_xpath_inspectors {
				__id = "org.eclipse.jet.internal.xpath.inspectors"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.xpath.inspectors"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_xpath_parser {
				__id = "org.eclipse.jet.internal.xpath.parser"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.xpath.parser"
				}
			}
			exports += new Package package_org_eclipse_jet_runtime_model {
				__id = "org.eclipse.jet.runtime.model"
				identifier = new PlatformID {
					value = "org.eclipse.jet.runtime.model"
				}
			}
			exports += new Package package_org_eclipse_jet_taglib {
				__id = "org.eclipse.jet.taglib"
				identifier = new PlatformID {
					value = "org.eclipse.jet.taglib"
				}
			}
			exports += new Package package_org_eclipse_jet_taglib_java {
				__id = "org.eclipse.jet.taglib.java"
				identifier = new PlatformID {
					value = "org.eclipse.jet.taglib.java"
				}
			}
			exports += new Package package_org_eclipse_jet_taglib_workspace {
				__id = "org.eclipse.jet.taglib.workspace"
				identifier = new PlatformID {
					value = "org.eclipse.jet.taglib.workspace"
				}
			}
			exports += new Package package_org_eclipse_jet_transform {
				__id = "org.eclipse.jet.transform"
				identifier = new PlatformID {
					value = "org.eclipse.jet.transform"
				}
			}
			exports += new Package package_org_eclipse_jet_xpath {
				__id = "org.eclipse.jet.xpath"
				identifier = new PlatformID {
					value = "org.eclipse.jet.xpath"
				}
			}
			exports += new Package package_org_eclipse_jet_xpath_inspector {
				__id = "org.eclipse.jet.xpath.inspector"
				identifier = new PlatformID {
					value = "org.eclipse.jet.xpath.inspector"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jet_ui {
			__id = "org.eclipse.jet.ui"
			identifier = new PlatformID {
				value = "org.eclipse.jet.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.0.v200906120900"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_jet
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[0.7.0-2.0.0)'"
				maxVersion = "'[0.7.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jet_internal_ui_filters {
				__id = "org.eclipse.jet.internal.ui.filters"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.ui.filters"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_ui_l10n {
				__id = "org.eclipse.jet.internal.ui.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.ui.l10n"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_ui_launch {
				__id = "org.eclipse.jet.internal.ui.launch"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.ui.launch"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_ui_popup_actions {
				__id = "org.eclipse.jet.internal.ui.popup.actions"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.ui.popup.actions"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_ui_prefs {
				__id = "org.eclipse.jet.internal.ui.prefs"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.ui.prefs"
				}
			}
			exports += new Package package_org_eclipse_jet_ui {
				__id = "org.eclipse.jet.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jet.ui"
				}
			}
			exports += new Package package_org_eclipse_jet_ui_newproject {
				__id = "org.eclipse.jet.ui.newproject"
				identifier = new PlatformID {
					value = "org.eclipse.jet.ui.newproject"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jet_core {
			__id = "org.eclipse.jet.core"
			identifier = new PlatformID {
				value = "org.eclipse.jet.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.101.v200908201022"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_core
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jet {
				__id = "org.eclipse.jet"
				identifier = new PlatformID {
					value = "org.eclipse.jet"
				}
			}
			exports += new Package package_org_eclipse_jet_core_compiler {
				__id = "org.eclipse.jet.core.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.jet.core.compiler"
				}
			}
			exports += new Package package_org_eclipse_jet_core_expressions {
				__id = "org.eclipse.jet.core.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.jet.core.expressions"
				}
			}
			exports += new Package package_org_eclipse_jet_core_parser {
				__id = "org.eclipse.jet.core.parser"
				identifier = new PlatformID {
					value = "org.eclipse.jet.core.parser"
				}
			}
			exports += new Package package_org_eclipse_jet_core_parser_ast {
				__id = "org.eclipse.jet.core.parser.ast"
				identifier = new PlatformID {
					value = "org.eclipse.jet.core.parser.ast"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_core {
				__id = "org.eclipse.jet.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.core"
				}
			}
			exports += new Package package_org_eclipse_jet_tests_core_ {
				__id = "org.eclipse.jet.tests.core'"
				identifier = new PlatformID {
					value = "org.eclipse.jet.tests.core'"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_core_compiler {
				__id = "org.eclipse.jet.internal.core.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.core.compiler"
				}
			}
			exports += new Package package_org_eclipse_jet_tests_core_ {
				__id = "org.eclipse.jet.tests.core'"
				identifier = new PlatformID {
					value = "org.eclipse.jet.tests.core'"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_core_expressions {
				__id = "org.eclipse.jet.internal.core.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.core.expressions"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_core_parser {
				__id = "org.eclipse.jet.internal.core.parser"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.core.parser"
				}
			}
			exports += new Package package_org_eclipse_jet_tests_core_ {
				__id = "org.eclipse.jet.tests.core'"
				identifier = new PlatformID {
					value = "org.eclipse.jet.tests.core'"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_core_parser_jasper {
				__id = "org.eclipse.jet.internal.core.parser.jasper"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.core.parser.jasper"
				}
			}
			exports += new Package package_org_eclipse_jet_tests_core_ {
				__id = "org.eclipse.jet.tests.core'"
				identifier = new PlatformID {
					value = "org.eclipse.jet.tests.core'"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_core_url {
				__id = "org.eclipse.jet.internal.core.url"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.core.url"
				}
			}
			exports += new Package package_org_eclipse_jet_tests {
				__id = "org.eclipse.jet.tests"
				identifier = new PlatformID {
					value = "org.eclipse.jet.tests"
				}
			}
			exports += new Package package_org_eclipse_jet_tests_core {
				__id = "org.eclipse.jet.tests.core"
				identifier = new PlatformID {
					value = "org.eclipse.jet.tests.core"
				}
			}
			exports += new Package package_org_eclipse_jet_ui_ {
				__id = "org.eclipse.jet.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.jet.ui'"
				}
			}
			exports += new Package package_org_eclipse_jet_internal_taglib {
				__id = "org.eclipse.jet.internal.taglib"
				identifier = new PlatformID {
					value = "org.eclipse.jet.internal.taglib"
				}
			}
			exports += new Package package_org_eclipse_jet_taglib {
				__id = "org.eclipse.jet.taglib"
				identifier = new PlatformID {
					value = "org.eclipse.jet.taglib"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jet_uml2 {
			__id = "org.eclipse.jet.uml2"
			identifier = new PlatformID {
				value = "org.eclipse.jet.uml2"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.1.v200909041702"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jet_uml2
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.1.0-4.0.0)'"
				maxVersion = "'[2.1.0-4.0.0)'"
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_workspace_doc {
		__id = "org.eclipse.emf.workspace.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.workspace.doc"
		}
		version = new Version {
			value = "1.3.0.v200901271819-22-7w311A1238292A"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Model Transaction Workbench Integration API (documentation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_workspace_doc {
			__id = "org.eclipse.emf.workspace.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.workspace.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271819"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.workspace.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.workspace.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_workspace_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_emf_workspace {
		__id = "org.eclipse.emf.workspace"
		identifier = new PlatformID {
			value = "org.eclipse.emf.workspace"
		}
		version = new Version {
			value = "1.3.0.v200901271819-35-8s733L366A4F6E"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Model Transaction Workbench Integration API."
		}
		plugins += new Plugin plugin_org_eclipse_emf_workspace {
			__id = "org.eclipse.emf.workspace"
			identifier = new PlatformID {
				value = "org.eclipse.emf.workspace"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200902100422"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_workspace
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_workspace
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_workspace
				target = plugin_org_eclipse_core_commands
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_workspace
				target = plugin_org_eclipse_emf_transaction
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_workspace {
				__id = "org.eclipse.emf.workspace"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace"
				}
			}
			exports += new Package package_org_eclipse_emf_workspace_impl {
				__id = "org.eclipse.emf.workspace.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_workspace_internal {
				__id = "org.eclipse.emf.workspace.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_workspace_internal_l10n {
				__id = "org.eclipse.emf.workspace.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_workspace_util {
				__id = "org.eclipse.emf.workspace.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_workspace_ui {
			__id = "org.eclipse.emf.workspace.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.workspace.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271819"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_workspace_ui
				target = plugin_org_eclipse_emf_workspace
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_workspace_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_workspace_ui_actions {
				__id = "org.eclipse.emf.workspace.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_workspace_ui_internal {
				__id = "org.eclipse.emf.workspace.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.workspace.ui.internal"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_emf_transaction_doc {
		__id = "org.eclipse.emf.transaction.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.transaction.doc"
		}
		version = new Version {
			value = "1.3.0.v200901271819-348Z8s733L357H5J5L"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Model Transaction API (documentation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_transaction_doc {
			__id = "org.eclipse.emf.transaction.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.transaction.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271819"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.transaction.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.transaction.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_transaction_examples {
			__id = "org.eclipse.emf.transaction.examples"
			identifier = new PlatformID {
				value = "org.eclipse.emf.transaction.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.100.v200901271819"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction_examples
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction_examples
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction_examples
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_transaction_examples
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_transaction_examples_internal {
				__id = "org.eclipse.emf.transaction.examples.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.examples.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_examples_internal_l10n {
				__id = "org.eclipse.emf.transaction.examples.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.examples.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_emf_transaction_examples_internal_wizard {
				__id = "org.eclipse.emf.transaction.examples.internal.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.emf.transaction.examples.internal.wizard"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
	}

	features += new Feature feature_org_eclipse_emf_ecore_edit {
		__id = "org.eclipse.emf.ecore.edit"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ecore.edit"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Platform-independent support for viewing and editing Ecore models."
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecore_edit {
			__id = "org.eclipse.emf.ecore.edit"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecore.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_edit
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_ecore_provider {
				__id = "org.eclipse.emf.ecore.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecore_change_edit {
			__id = "org.eclipse.emf.ecore.change.edit"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecore.change.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_change_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_change_edit
				target = plugin_org_eclipse_emf_ecore_change
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_change_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_change_edit
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_change_edit
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_ecore_change_provider {
				__id = "org.eclipse.emf.ecore.change.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.change.provider"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_pde {
		__id = "org.eclipse.pde"
		identifier = new PlatformID {
			value = "org.eclipse.pde"
		}
		version = new Version {
			value = "3.5.1.R35x_v20090811-7Z7_F9zFDX-aT6Ywvh8_S93"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "Eclipse plug-in development environment."
		}
		plugins += new Plugin plugin_org_eclipse_pde {
			__id = "org.eclipse.pde"
			identifier = new PlatformID {
				value = "org.eclipse.pde"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.100.v200909170800"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_pde_build {
			__id = "org.eclipse.pde.build"
			identifier = new PlatformID {
				value = "org.eclipse.pde.build"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.1.R35x_20090820"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.100-4.0.0)'"
				maxVersion = "'[3.1.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_core_runtime_compatibility
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.100-4.0.0)'"
				maxVersion = "'[3.1.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_equinox_p2_metadata_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_equinox_p2_jarprocessor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.1-2.0.0)'"
				maxVersion = "'[1.0.1-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_equinox_p2_publisher
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = plugin_org_eclipse_equinox_p2_repository_tools
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_build {
				__id = "org.eclipse.pde.build"
				identifier = new PlatformID {
					value = "org.eclipse.pde.build"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build {
				__id = "org.eclipse.pde.internal.build"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build_ant {
				__id = "org.eclipse.pde.internal.build.ant"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build.ant"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build_builder {
				__id = "org.eclipse.pde.internal.build.builder"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build.builder"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build_fetch {
				__id = "org.eclipse.pde.internal.build.fetch"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build.fetch"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build_packager {
				__id = "org.eclipse.pde.internal.build.packager"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build.packager"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build_properties {
				__id = "org.eclipse.pde.internal.build.properties"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build.properties"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build_site {
				__id = "org.eclipse.pde.internal.build.site"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build.site"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_build_site_compatibility {
				__id = "org.eclipse.pde.internal.build.site.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.build.site.compatibility"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_swt_tools {
				__id = "org.eclipse.pde.internal.swt.tools"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.swt.tools"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_com_ibm_icu_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_p2_updatesite
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_frameworkadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_engine_phases
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_build
				target = package_org_eclipse_equinox_internal_provisional_simpleconfigurator_manipulator
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_core {
			__id = "org.eclipse.pde.core"
			identifier = new PlatformID {
				value = "org.eclipse.pde.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.100.v20090821"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_update_configurator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_pde_build
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.1.0)'"
				maxVersion = "'[3.2.0-4.1.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_frameworkadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_engine
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_metadata
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_director
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_artifact_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_metadata_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = plugin_org_eclipse_equinox_p2_garbagecollector
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_core {
				__id = "org.eclipse.pde.core"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core"
				}
			}
			exports += new Package package_org_eclipse_pde_core_build {
				__id = "org.eclipse.pde.core.build"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core.build"
				}
			}
			exports += new Package package_org_eclipse_pde_core_plugin {
				__id = "org.eclipse.pde.core.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core.plugin"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core {
				__id = "org.eclipse.pde.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_build {
				__id = "org.eclipse.pde.internal.core.build"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.build"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_builders {
				__id = "org.eclipse.pde.internal.core.builders"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.builders"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_bundle {
				__id = "org.eclipse.pde.internal.core.bundle"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.bundle"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_content {
				__id = "org.eclipse.pde.internal.core.content"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.content"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_converter {
				__id = "org.eclipse.pde.internal.core.converter"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.converter"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_exports {
				__id = "org.eclipse.pde.internal.core.exports"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.exports"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_feature {
				__id = "org.eclipse.pde.internal.core.feature"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.feature"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_ibundle {
				__id = "org.eclipse.pde.internal.core.ibundle"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.ibundle"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_ifeature {
				__id = "org.eclipse.pde.internal.core.ifeature"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.ifeature"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_iproduct {
				__id = "org.eclipse.pde.internal.core.iproduct"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.iproduct"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_ischema {
				__id = "org.eclipse.pde.internal.core.ischema"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.ischema"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_isite {
				__id = "org.eclipse.pde.internal.core.isite"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.isite"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_natures {
				__id = "org.eclipse.pde.internal.core.natures"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.natures"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_plugin {
				__id = "org.eclipse.pde.internal.core.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.plugin"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_product {
				__id = "org.eclipse.pde.internal.core.product"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.product"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_schema {
				__id = "org.eclipse.pde.internal.core.schema"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.schema"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_search {
				__id = "org.eclipse.pde.internal.core.search"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.search"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_site {
				__id = "org.eclipse.pde.internal.core.site"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.site"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_target {
				__id = "org.eclipse.pde.internal.core.target"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.target"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_target_provisional {
				__id = "org.eclipse.pde.internal.core.target.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.target.provisional"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_text {
				__id = "org.eclipse.pde.internal.core.text"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.text"
				}
			}
			exports += new Package package_org_eclipse_pde_ua_core {
				__id = "org.eclipse.pde.ua.core"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ua.core"
				}
			}
			exports += new Package package_org_eclipse_pde_ds_ui {
				__id = "org.eclipse.pde.ds.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ds.ui"
				}
			}
			exports += new Package package_org_eclipse_pde_ua_ui_ {
				__id = "org.eclipse.pde.ua.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ua.ui'"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_text_build {
				__id = "org.eclipse.pde.internal.core.text.build"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.text.build"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_text_bundle {
				__id = "org.eclipse.pde.internal.core.text.bundle"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.text.bundle"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_text_plugin {
				__id = "org.eclipse.pde.internal.core.text.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.text.plugin"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_util {
				__id = "org.eclipse.pde.internal.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.util"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_core_variables {
				__id = "org.eclipse.pde.internal.core.variables"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.core.variables"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_core
				target = package_com_ibm_icu_util
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_junit_runtime {
			__id = "org.eclipse.pde.junit.runtime"
			identifier = new PlatformID {
				value = "org.eclipse.pde.junit.runtime"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.4.0.v20090527"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_junit_runtime
				target = plugin_org_eclipse_jdt_junit_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_junit_runtime
				target = plugin_org_junit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.8.1-3.9)'"
				maxVersion = "'[3.8.1-3.9)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_junit_runtime
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_junit_runtime
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_junit_runtime {
				__id = "org.eclipse.pde.internal.junit.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.junit.runtime"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_runtime {
			__id = "org.eclipse.pde.runtime"
			identifier = new PlatformID {
				value = "org.eclipse.pde.runtime"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.100.v20090731"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_runtime
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_runtime {
				__id = "org.eclipse.pde.internal.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.runtime"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_runtime_registry {
				__id = "org.eclipse.pde.internal.runtime.registry"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.runtime.registry"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_runtime_registry_model {
				__id = "org.eclipse.pde.internal.runtime.registry.model"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.runtime.registry.model"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_runtime_spy {
				__id = "org.eclipse.pde.internal.runtime.spy"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.runtime.spy"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_runtime_spy_dialogs {
				__id = "org.eclipse.pde.internal.runtime.spy.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.runtime.spy.dialogs"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_runtime_spy_handlers {
				__id = "org.eclipse.pde.internal.runtime.spy.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.runtime.spy.handlers"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_runtime_spy_sections {
				__id = "org.eclipse.pde.internal.runtime.spy.sections"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.runtime.spy.sections"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_ui {
			__id = "org.eclipse.pde.ui"
			identifier = new PlatformID {
				value = "org.eclipse.pde.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.v20090821"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_jdt_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_pde_build
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_update_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ant_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_jdt_junit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_intro
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_update_configurator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_views_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_compare
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ltk_ui_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_ui_navigator_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.100-4.0.0)'"
				maxVersion = "'[3.3.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_metadata
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_engine
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_director
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_artifact_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_metadata_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_frameworkadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_frameworkadmin_equinox
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = plugin_org_eclipse_equinox_p2_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_ui {
				__id = "org.eclipse.pde.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_build {
				__id = "org.eclipse.pde.internal.ui.build"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.build"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_commands {
				__id = "org.eclipse.pde.internal.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_compare {
				__id = "org.eclipse.pde.internal.ui.compare"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.compare"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_correction {
				__id = "org.eclipse.pde.internal.ui.correction"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.correction"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_correction_java {
				__id = "org.eclipse.pde.internal.ui.correction.java"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.correction.java"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_dialogs {
				__id = "org.eclipse.pde.internal.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor {
				__id = "org.eclipse.pde.internal.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_actions {
				__id = "org.eclipse.pde.internal.ui.editor.actions"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.actions"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_build {
				__id = "org.eclipse.pde.internal.ui.editor.build"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.build"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_category {
				__id = "org.eclipse.pde.internal.ui.editor.category"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.category"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_contentassist {
				__id = "org.eclipse.pde.internal.ui.editor.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.contentassist"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_contentassist_display {
				__id = "org.eclipse.pde.internal.ui.editor.contentassist.display"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.contentassist.display"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_context {
				__id = "org.eclipse.pde.internal.ui.editor.context"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.context"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_feature {
				__id = "org.eclipse.pde.internal.ui.editor.feature"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.feature"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_outline {
				__id = "org.eclipse.pde.internal.ui.editor.outline"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.outline"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_plugin {
				__id = "org.eclipse.pde.internal.ui.editor.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.plugin"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_plugin_rows {
				__id = "org.eclipse.pde.internal.ui.editor.plugin.rows"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.plugin.rows"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_product {
				__id = "org.eclipse.pde.internal.ui.editor.product"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.product"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_schema {
				__id = "org.eclipse.pde.internal.ui.editor.schema"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.schema"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_site {
				__id = "org.eclipse.pde.internal.ui.editor.site"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.site"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_targetdefinition {
				__id = "org.eclipse.pde.internal.ui.editor.targetdefinition"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.targetdefinition"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_text {
				__id = "org.eclipse.pde.internal.ui.editor.text"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.text"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_editor_validation {
				__id = "org.eclipse.pde.internal.ui.editor.validation"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.editor.validation"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_elements {
				__id = "org.eclipse.pde.internal.ui.elements"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.elements"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_launcher {
				__id = "org.eclipse.pde.internal.ui.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.launcher"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_nls {
				__id = "org.eclipse.pde.internal.ui.nls"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.nls"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_parts {
				__id = "org.eclipse.pde.internal.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_preferences {
				__id = "org.eclipse.pde.internal.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_properties {
				__id = "org.eclipse.pde.internal.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_refactoring {
				__id = "org.eclipse.pde.internal.ui.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.refactoring"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_samples {
				__id = "org.eclipse.pde.internal.ui.samples"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.samples"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_search {
				__id = "org.eclipse.pde.internal.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.search"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_search_dependencies {
				__id = "org.eclipse.pde.internal.ui.search.dependencies"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.search.dependencies"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_search_dialogs {
				__id = "org.eclipse.pde.internal.ui.search.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.search.dialogs"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_shared_target {
				__id = "org.eclipse.pde.internal.ui.shared.target"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.shared.target"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_util {
				__id = "org.eclipse.pde.internal.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.util"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_views_dependencies {
				__id = "org.eclipse.pde.internal.ui.views.dependencies"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.views.dependencies"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_views_plugins {
				__id = "org.eclipse.pde.internal.ui.views.plugins"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.views.plugins"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_views_target {
				__id = "org.eclipse.pde.internal.ui.views.target"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.views.target"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards {
				__id = "org.eclipse.pde.internal.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_category {
				__id = "org.eclipse.pde.internal.ui.wizards.category"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.category"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_exports {
				__id = "org.eclipse.pde.internal.ui.wizards.exports"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.exports"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_extension {
				__id = "org.eclipse.pde.internal.ui.wizards.extension"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.extension"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_feature {
				__id = "org.eclipse.pde.internal.ui.wizards.feature"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.feature"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_imports {
				__id = "org.eclipse.pde.internal.ui.wizards.imports"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.imports"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_plugin {
				__id = "org.eclipse.pde.internal.ui.wizards.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.plugin"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_product {
				__id = "org.eclipse.pde.internal.ui.wizards.product"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.product"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_site {
				__id = "org.eclipse.pde.internal.ui.wizards.site"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.site"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_target {
				__id = "org.eclipse.pde.internal.ui.wizards.target"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.target"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_templates {
				__id = "org.eclipse.pde.internal.ui.wizards.templates"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.templates"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_wizards_tools {
				__id = "org.eclipse.pde.internal.ui.wizards.tools"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.wizards.tools"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_launcher {
				__id = "org.eclipse.pde.ui.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui.launcher"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_templates {
				__id = "org.eclipse.pde.ui.templates"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui.templates"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui
				target = package_org_eclipse_jdt_debug_core
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_doc_user {
			__id = "org.eclipse.pde.doc.user"
			identifier = new PlatformID {
				value = "org.eclipse.pde.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.0.v20090818"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.pde.doc.user"
				identifier = new PlatformID {
					value = "org.eclipse.pde.doc.user"
				}
				locator = new EFSLocator {
					value = "org.eclipse.pde.doc.user"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_ui_templates {
			__id = "org.eclipse.pde.ui.templates"
			identifier = new PlatformID {
				value = "org.eclipse.pde.ui.templates"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.100.v20090527"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui_templates
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui_templates
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ui_templates
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_ui_templates {
				__id = "org.eclipse.pde.internal.ui.templates"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.templates"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_templates_ide {
				__id = "org.eclipse.pde.internal.ui.templates.ide"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.templates.ide"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_templates_osgi {
				__id = "org.eclipse.pde.internal.ui.templates.osgi"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.templates.osgi"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ui_templates_rcp {
				__id = "org.eclipse.pde.internal.ui.templates.rcp"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ui.templates.rcp"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_views_log {
			__id = "org.eclipse.ui.views.log"
			identifier = new PlatformID {
				value = "org.eclipse.ui.views.log"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090731"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_log
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_log
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_log
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_log
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal_views_log {
				__id = "org.eclipse.ui.internal.views.log"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.views.log"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_views_log
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_objectweb_asm {
			__id = "org.objectweb.asm"
			identifier = new PlatformID {
				value = "org.objectweb.asm"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.1.0.v200803061910"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_objectweb_asm {
				__id = "org.objectweb.asm"
				identifier = new PlatformID {
					value = "org.objectweb.asm"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_objectweb_asm_commons {
				__id = "org.objectweb.asm.commons"
				identifier = new PlatformID {
					value = "org.objectweb.asm.commons"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_objectweb_asm_signature {
				__id = "org.objectweb.asm.signature"
				identifier = new PlatformID {
					value = "org.objectweb.asm.signature"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_objectweb_asm_tree {
				__id = "org.objectweb.asm.tree"
				identifier = new PlatformID {
					value = "org.objectweb.asm.tree"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_objectweb_asm_tree_analysis {
				__id = "org.objectweb.asm.tree.analysis"
				identifier = new PlatformID {
					value = "org.objectweb.asm.tree.analysis"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_objectweb_asm_util {
				__id = "org.objectweb.asm.util"
				identifier = new PlatformID {
					value = "org.objectweb.asm.util"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
			exports += new Package package_org_objectweb_asm_xml {
				__id = "org.objectweb.asm.xml"
				identifier = new PlatformID {
					value = "org.objectweb.asm.xml"
				}
				version = new Version {
					value = "3.1.0"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_api_tools {
			__id = "org.eclipse.pde.api.tools"
			identifier = new PlatformID {
				value = "org.eclipse.pde.api.tools"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.101.v20090714"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.102-4.0.0)'"
				maxVersion = "'[3.3.102-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.300-4.0.0)'"
				maxVersion = "'[3.1.300-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_objectweb_asm
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal {
				__id = "org.eclipse.pde.api.tools.internal"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_builder {
				__id = "org.eclipse.pde.api.tools.internal.builder"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.builder"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_comparator {
				__id = "org.eclipse.pde.api.tools.internal.comparator"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.comparator"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_descriptors {
				__id = "org.eclipse.pde.api.tools.internal.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.descriptors"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_model {
				__id = "org.eclipse.pde.api.tools.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.model"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_natures {
				__id = "org.eclipse.pde.api.tools.internal.natures"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.natures"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_problems {
				__id = "org.eclipse.pde.api.tools.internal.problems"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.problems"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional {
				__id = "org.eclipse.pde.api.tools.internal.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional_builder {
				__id = "org.eclipse.pde.api.tools.internal.provisional.builder"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional.builder"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional_comparator {
				__id = "org.eclipse.pde.api.tools.internal.provisional.comparator"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional.comparator"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional_descriptors {
				__id = "org.eclipse.pde.api.tools.internal.provisional.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional.descriptors"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional_model {
				__id = "org.eclipse.pde.api.tools.internal.provisional.model"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional.model"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional_problems {
				__id = "org.eclipse.pde.api.tools.internal.provisional.problems"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional.problems"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional_scanner {
				__id = "org.eclipse.pde.api.tools.internal.provisional.scanner"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional.scanner"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_provisional_search {
				__id = "org.eclipse.pde.api.tools.internal.provisional.search"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.provisional.search"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_search {
				__id = "org.eclipse.pde.api.tools.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.search"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_tasks {
				__id = "org.eclipse.pde.api.tools.internal.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.tasks"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_util {
				__id = "org.eclipse.pde.api.tools.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.util"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_internal_util_profiles {
				__id = "org.eclipse.pde.api.tools.internal.util.profiles"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.internal.util.profiles"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_api_tools_ui {
			__id = "org.eclipse.pde.api.tools.ui"
			identifier = new PlatformID {
				value = "org.eclipse.pde.api.tools.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.101.v20090820"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_pde_api_tools
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.100-4.0.0)'"
				maxVersion = "'[3.3.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_ltk_ui_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = plugin_org_eclipse_equinox_frameworkadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal {
				__id = "org.eclipse.pde.api.tools.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_actions {
				__id = "org.eclipse.pde.api.tools.ui.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_completion {
				__id = "org.eclipse.pde.api.tools.ui.internal.completion"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.completion"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_markers {
				__id = "org.eclipse.pde.api.tools.ui.internal.markers"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.markers"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_preferences {
				__id = "org.eclipse.pde.api.tools.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_properties {
				__id = "org.eclipse.pde.api.tools.ui.internal.properties"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.properties"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_refactoring {
				__id = "org.eclipse.pde.api.tools.ui.internal.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.refactoring"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_views {
				__id = "org.eclipse.pde.api.tools.ui.internal.views"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.views"
				}
			}
			exports += new Package package_org_eclipse_pde_api_tools_ui_internal_wizards {
				__id = "org.eclipse.pde.api.tools.ui.internal.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.pde.api.tools.ui.internal.wizards"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_api_tools_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.6.1"
				maxVersion = "3.6.1"
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_ds_core {
			__id = "org.eclipse.pde.ds.core"
			identifier = new PlatformID {
				value = "org.eclipse.pde.ds.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090429-1800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_core
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_core
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_core
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_core
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_ds_core {
				__id = "org.eclipse.pde.internal.ds.core"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.core"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_core_builders {
				__id = "org.eclipse.pde.internal.ds.core.builders"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.core.builders"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_core_text {
				__id = "org.eclipse.pde.internal.ds.core.text"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.core.text"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_ds_ui {
			__id = "org.eclipse.pde.ds.ui"
			identifier = new PlatformID {
				value = "org.eclipse.pde.ds.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090527"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_pde_ds_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ds_ui
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_ds_ui {
				__id = "org.eclipse.pde.internal.ds.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.ui"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_ui_editor {
				__id = "org.eclipse.pde.internal.ds.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_ui_editor_contentassist {
				__id = "org.eclipse.pde.internal.ds.ui.editor.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.ui.editor.contentassist"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_ui_editor_dialogs {
				__id = "org.eclipse.pde.internal.ds.ui.editor.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.ui.editor.dialogs"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_ui_editor_sections {
				__id = "org.eclipse.pde.internal.ds.ui.editor.sections"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.ui.editor.sections"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_ui_parts {
				__id = "org.eclipse.pde.internal.ds.ui.parts"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.ui.parts"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ds_ui_wizards {
				__id = "org.eclipse.pde.internal.ds.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ds.ui.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_ua_core {
			__id = "org.eclipse.pde.ua.core"
			identifier = new PlatformID {
				value = "org.eclipse.pde.ua.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090429-1800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_core
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_core
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core {
				__id = "org.eclipse.pde.internal.ua.core"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_cheatsheet_comp {
				__id = "org.eclipse.pde.internal.ua.core.cheatsheet.comp"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.cheatsheet.comp"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_cheatsheet_simple {
				__id = "org.eclipse.pde.internal.ua.core.cheatsheet.simple"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.cheatsheet.simple"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_cheatsheet_simple_text {
				__id = "org.eclipse.pde.internal.ua.core.cheatsheet.simple.text"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.cheatsheet.simple.text"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_ctxhelp {
				__id = "org.eclipse.pde.internal.ua.core.ctxhelp"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.ctxhelp"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_ctxhelp_text {
				__id = "org.eclipse.pde.internal.ua.core.ctxhelp.text"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.ctxhelp.text"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_icheatsheet {
				__id = "org.eclipse.pde.internal.ua.core.icheatsheet"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.icheatsheet"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_icheatsheet_comp {
				__id = "org.eclipse.pde.internal.ua.core.icheatsheet.comp"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.icheatsheet.comp"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_toc {
				__id = "org.eclipse.pde.internal.ua.core.toc"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.toc"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_core_toc_text {
				__id = "org.eclipse.pde.internal.ua.core.toc.text"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.core.toc.text"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_ua_ui {
			__id = "org.eclipse.pde.ua.ui"
			identifier = new PlatformID {
				value = "org.eclipse.pde.ua.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090511"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_pde_ua_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_ua_ui
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui {
				__id = "org.eclipse.pde.internal.ua.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_cheatsheet {
				__id = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_cheatsheet_comp {
				__id = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_cheatsheet_comp_actions {
				__id = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp.actions"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp.actions"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_cheatsheet_comp_details {
				__id = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp.details"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp.details"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_cheatsheet_simple {
				__id = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_cheatsheet_simple_actions {
				__id = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple.actions"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple.actions"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_cheatsheet_simple_details {
				__id = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple.details"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple.details"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_ctxhelp {
				__id = "org.eclipse.pde.internal.ua.ui.editor.ctxhelp"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.ctxhelp"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_ctxhelp_details {
				__id = "org.eclipse.pde.internal.ua.ui.editor.ctxhelp.details"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.ctxhelp.details"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_toc {
				__id = "org.eclipse.pde.internal.ua.ui.editor.toc"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.toc"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_toc_actions {
				__id = "org.eclipse.pde.internal.ua.ui.editor.toc.actions"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.toc.actions"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_editor_toc_details {
				__id = "org.eclipse.pde.internal.ua.ui.editor.toc.details"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.editor.toc.details"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_wizards_cheatsheet {
				__id = "org.eclipse.pde.internal.ua.ui.wizards.cheatsheet"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.wizards.cheatsheet"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_wizards_ctxhelp {
				__id = "org.eclipse.pde.internal.ua.ui.wizards.ctxhelp"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.wizards.ctxhelp"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_ua_ui_wizards_toc {
				__id = "org.eclipse.pde.internal.ua.ui.wizards.toc"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.ua.ui.wizards.toc"
				}
			}
		}
		sites += site__download_eclipse_org_eclipse_updates_3_5
		sites += site__download_eclipse_org_releases_galileo
	}

	features += new Feature feature_org_eclipse_emf_mwe_doc {
		__id = "org.eclipse.emf.mwe.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mwe.doc"
		}
		version = new Version {
			value = "0.7.2.v200908120417"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Modeling Workflow Engine Documentation (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_doc {
			__id = "org.eclipse.emf.mwe.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.mwe.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mwe.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.mwe.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mwe_doc
				target = plugin_org_eclipse_help
			}
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_jdt {
		__id = "org.eclipse.jdt"
		identifier = new PlatformID {
			value = "org.eclipse.jdt"
		}
		version = new Version {
			value = "3.5.1.r351_v20090810-0600-7r88FEoFI0WTo6Az-1qFRHm37ChJ"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "Eclipse Java development tools. (Binary runtime and user documentation.)"
		}
		plugins += new Plugin plugin_org_eclipse_jdt {
			__id = "org.eclipse.jdt"
			identifier = new PlatformID {
				value = "org.eclipse.jdt"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.v200909170800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt
				target = plugin_org_eclipse_ui_intro
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_ant_ui {
			__id = "org.eclipse.ant.ui"
			identifier = new PlatformID {
				value = "org.eclipse.ant.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.1.v20090901_r351"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.7.0'"
				maxVersion = "'1.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ui_externaltools
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_jdt_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = plugin_org_eclipse_jdt_junit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			exports += new Package package_org_eclipse_ant_internal_ui {
				__id = "org.eclipse.ant.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_console {
				__id = "org.eclipse.ant.internal.ui.console"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.console"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_datatransfer {
				__id = "org.eclipse.ant.internal.ui.datatransfer"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.datatransfer"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_debug {
				__id = "org.eclipse.ant.internal.ui.debug"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.debug"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_debug_model {
				__id = "org.eclipse.ant.internal.ui.debug.model"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.debug.model"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_dtd {
				__id = "org.eclipse.ant.internal.ui.dtd"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.dtd"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_dtd_schema {
				__id = "org.eclipse.ant.internal.ui.dtd.schema"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.dtd.schema"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_dtd_util {
				__id = "org.eclipse.ant.internal.ui.dtd.util"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.dtd.util"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_editor {
				__id = "org.eclipse.ant.internal.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_editor_actions {
				__id = "org.eclipse.ant.internal.ui.editor.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.editor.actions"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_editor_formatter {
				__id = "org.eclipse.ant.internal.ui.editor.formatter"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.editor.formatter"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_editor_outline {
				__id = "org.eclipse.ant.internal.ui.editor.outline"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.editor.outline"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_editor_templates {
				__id = "org.eclipse.ant.internal.ui.editor.templates"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.editor.templates"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_editor_text {
				__id = "org.eclipse.ant.internal.ui.editor.text"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.editor.text"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_editor_utils {
				__id = "org.eclipse.ant.internal.ui.editor.utils"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.editor.utils"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_launchConfigurations {
				__id = "org.eclipse.ant.internal.ui.launchConfigurations"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.launchConfigurations"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_model {
				__id = "org.eclipse.ant.internal.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.model"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_preferences {
				__id = "org.eclipse.ant.internal.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_refactoring {
				__id = "org.eclipse.ant.internal.ui.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.refactoring"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_views {
				__id = "org.eclipse.ant.internal.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.views"
				}
			}
			exports += new Package package_org_eclipse_ant_internal_ui_views_actions {
				__id = "org.eclipse.ant.internal.ui.views.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ant.internal.ui.views.actions"
				}
			}
			exports += new Package package_org_eclipse_ant_ui_launching {
				__id = "org.eclipse.ant.ui.launching"
				identifier = new PlatformID {
					value = "org.eclipse.ant.ui.launching"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ant_ui
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_apt_core {
			__id = "org.eclipse.jdt.apt.core"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.apt.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.3.201.R35x_v20090818-0235"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_core
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_core
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.5-1.8)'"
				maxVersion = "'[1.6.5-1.8)'"
			}
			exports += new Package package_com_sun_mirror_apt {
				__id = "com.sun.mirror.apt"
				identifier = new PlatformID {
					value = "com.sun.mirror.apt"
				}
			}
			exports += new Package package_com_sun_mirror_declaration {
				__id = "com.sun.mirror.declaration"
				identifier = new PlatformID {
					value = "com.sun.mirror.declaration"
				}
			}
			exports += new Package package_com_sun_mirror_type {
				__id = "com.sun.mirror.type"
				identifier = new PlatformID {
					value = "com.sun.mirror.type"
				}
			}
			exports += new Package package_com_sun_mirror_util {
				__id = "com.sun.mirror.util"
				identifier = new PlatformID {
					value = "com.sun.mirror.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_build {
				__id = "org.eclipse.jdt.apt.core.build"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.build"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_env {
				__id = "org.eclipse.jdt.apt.core.env"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.env"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_internal {
				__id = "org.eclipse.jdt.apt.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.internal"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui {
				__id = "org.eclipse.jdt.apt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_pluggable_tests_ {
				__id = "org.eclipse.jdt.apt.pluggable.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.pluggable.tests'"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_internal_build {
				__id = "org.eclipse.jdt.apt.core.internal.build"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.internal.build"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui {
				__id = "org.eclipse.jdt.apt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_pluggable_tests_ {
				__id = "org.eclipse.jdt.apt.pluggable.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.pluggable.tests'"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_internal_declaration {
				__id = "org.eclipse.jdt.apt.core.internal.declaration"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.internal.declaration"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui {
				__id = "org.eclipse.jdt.apt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_pluggable_tests_ {
				__id = "org.eclipse.jdt.apt.pluggable.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.pluggable.tests'"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_internal_env {
				__id = "org.eclipse.jdt.apt.core.internal.env"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.internal.env"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui {
				__id = "org.eclipse.jdt.apt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_pluggable_tests_ {
				__id = "org.eclipse.jdt.apt.pluggable.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.pluggable.tests'"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_internal_generatedfile {
				__id = "org.eclipse.jdt.apt.core.internal.generatedfile"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.internal.generatedfile"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui {
				__id = "org.eclipse.jdt.apt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_pluggable_tests_ {
				__id = "org.eclipse.jdt.apt.pluggable.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.pluggable.tests'"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_internal_type {
				__id = "org.eclipse.jdt.apt.core.internal.type"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.internal.type"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui {
				__id = "org.eclipse.jdt.apt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_pluggable_tests_ {
				__id = "org.eclipse.jdt.apt.pluggable.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.pluggable.tests'"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_internal_util {
				__id = "org.eclipse.jdt.apt.core.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.internal.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui {
				__id = "org.eclipse.jdt.apt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_pluggable_tests_ {
				__id = "org.eclipse.jdt.apt.pluggable.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.pluggable.tests'"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_core_util {
				__id = "org.eclipse.jdt.apt.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.core.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_apt_ui {
			__id = "org.eclipse.jdt.apt.ui"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.apt.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.3.200.v20090528-1135"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_ui
				target = plugin_org_eclipse_jdt_apt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jdt_apt_ui_internal {
				__id = "org.eclipse.jdt.apt.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui_internal_preferences {
				__id = "org.eclipse.jdt.apt.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_jdt_apt_ui_internal_util {
				__id = "org.eclipse.jdt.apt.ui.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.apt.ui.internal.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_apt_pluggable_core {
			__id = "org.eclipse.jdt.apt.pluggable.core"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.apt.pluggable.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.201.R35x_v20090818-0225"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = plugin_org_eclipse_jdt_apt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = plugin_org_eclipse_core_resources
			}
			exports += new Package package_org_eclipse_jdt_internal_apt_pluggable_core {
				__id = "org.eclipse.jdt.internal.apt.pluggable.core"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.apt.pluggable.core"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_apt_pluggable_core_dispatch {
				__id = "org.eclipse.jdt.internal.apt.pluggable.core.dispatch"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.apt.pluggable.core.dispatch"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_apt_pluggable_core_filer {
				__id = "org.eclipse.jdt.internal.apt.pluggable.core.filer"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.apt.pluggable.core.filer"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = package_org_eclipse_jdt_internal_compiler_tool
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = package_org_eclipse_jdt_internal_compiler_apt_dispatch
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = package_org_eclipse_jdt_internal_compiler_apt_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_apt_pluggable_core
				target = package_org_eclipse_jdt_internal_compiler_apt_util
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_compiler_apt {
			__id = "org.eclipse.jdt.compiler.apt"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.compiler.apt"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.201.R35x_v20090825-1530"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_eclipse_jdt_internal_compiler_apt_dispatch {
				__id = "org.eclipse.jdt.internal.compiler.apt.dispatch"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.apt.dispatch"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_apt_model {
				__id = "org.eclipse.jdt.internal.compiler.apt.model"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.apt.model"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_apt_util {
				__id = "org.eclipse.jdt.internal.compiler.apt.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.apt.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_compiler_apt
				target = package_org_eclipse_jdt_internal_compiler_tool
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_compiler_tool {
			__id = "org.eclipse.jdt.compiler.tool"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.compiler.tool"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.100.v_972_R35x"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_META_INF_services {
				__id = "META-INF.services"
				identifier = new PlatformID {
					value = "META-INF.services"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_tool {
				__id = "org.eclipse.jdt.internal.compiler.tool"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.tool"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_core {
			__id = "org.eclipse.jdt.core"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.v_972_R35x"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jdt_core {
				__id = "org.eclipse.jdt.core"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_compiler {
				__id = "org.eclipse.jdt.core.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.compiler"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_compiler_batch {
				__id = "org.eclipse.jdt.core.compiler.batch"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.compiler.batch"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_dom {
				__id = "org.eclipse.jdt.core.dom"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.dom"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_dom_rewrite {
				__id = "org.eclipse.jdt.core.dom.rewrite"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.dom.rewrite"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_eval {
				__id = "org.eclipse.jdt.core.eval"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.eval"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_formatter {
				__id = "org.eclipse.jdt.core.formatter"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.formatter"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_jdom {
				__id = "org.eclipse.jdt.core.jdom"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.jdom"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_search {
				__id = "org.eclipse.jdt.core.search"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.search"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_util {
				__id = "org.eclipse.jdt.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_codeassist {
				__id = "org.eclipse.jdt.internal.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.codeassist"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_codeassist_complete {
				__id = "org.eclipse.jdt.internal.codeassist.complete"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.codeassist.complete"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_codeassist_impl {
				__id = "org.eclipse.jdt.internal.codeassist.impl"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.codeassist.impl"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_codeassist_select {
				__id = "org.eclipse.jdt.internal.codeassist.select"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.codeassist.select"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler {
				__id = "org.eclipse.jdt.internal.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_ast {
				__id = "org.eclipse.jdt.internal.compiler.ast"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.ast"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_batch {
				__id = "org.eclipse.jdt.internal.compiler.batch"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.batch"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_classfmt {
				__id = "org.eclipse.jdt.internal.compiler.classfmt"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.classfmt"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_codegen {
				__id = "org.eclipse.jdt.internal.compiler.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.codegen"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_env {
				__id = "org.eclipse.jdt.internal.compiler.env"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.env"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_flow {
				__id = "org.eclipse.jdt.internal.compiler.flow"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.flow"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_impl {
				__id = "org.eclipse.jdt.internal.compiler.impl"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.impl"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_lookup {
				__id = "org.eclipse.jdt.internal.compiler.lookup"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.lookup"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_parser {
				__id = "org.eclipse.jdt.internal.compiler.parser"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.parser"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_parser_diagnose {
				__id = "org.eclipse.jdt.internal.compiler.parser.diagnose"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.parser.diagnose"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_problem {
				__id = "org.eclipse.jdt.internal.compiler.problem"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.problem"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_compiler_util {
				__id = "org.eclipse.jdt.internal.compiler.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.compiler.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core {
				__id = "org.eclipse.jdt.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_builder {
				__id = "org.eclipse.jdt.internal.core.builder"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.builder"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_dom {
				__id = "org.eclipse.jdt.internal.core.dom"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.dom"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_dom_rewrite {
				__id = "org.eclipse.jdt.internal.core.dom.rewrite"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.dom.rewrite"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_eval {
				__id = "org.eclipse.jdt.internal.core.eval"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.eval"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_hierarchy {
				__id = "org.eclipse.jdt.internal.core.hierarchy"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.hierarchy"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_index {
				__id = "org.eclipse.jdt.internal.core.index"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.index"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_jdom {
				__id = "org.eclipse.jdt.internal.core.jdom"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.jdom"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_search {
				__id = "org.eclipse.jdt.internal.core.search"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.search"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_search_indexing {
				__id = "org.eclipse.jdt.internal.core.search.indexing"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.search.indexing"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_search_matching {
				__id = "org.eclipse.jdt.internal.core.search.matching"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.search.matching"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_search_processing {
				__id = "org.eclipse.jdt.internal.core.search.processing"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.search.processing"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_util {
				__id = "org.eclipse.jdt.internal.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_eval {
				__id = "org.eclipse.jdt.internal.eval"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.eval"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_formatter {
				__id = "org.eclipse.jdt.internal.formatter"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.formatter"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_formatter_align {
				__id = "org.eclipse.jdt.internal.formatter.align"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.formatter.align"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_formatter_comment {
				__id = "org.eclipse.jdt.internal.formatter.comment"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.formatter.comment"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_formatter_old {
				__id = "org.eclipse.jdt.internal.formatter.old"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.formatter.old"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_core_manipulation {
			__id = "org.eclipse.jdt.core.manipulation"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.core.manipulation"
			}
			state = : "State.active"
			version = new Version {
				value = "1.3.0.v20090603"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core_manipulation
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core_manipulation
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core_manipulation
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core_manipulation
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core_manipulation
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core_manipulation
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jdt_core_manipulation {
				__id = "org.eclipse.jdt.core.manipulation"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.manipulation"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_refactoring {
				__id = "org.eclipse.jdt.core.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.refactoring"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_refactoring_descriptors {
				__id = "org.eclipse.jdt.core.refactoring.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.refactoring.descriptors"
				}
			}
			exports += new Package package_org_eclipse_jdt_core_refactoring_participants {
				__id = "org.eclipse.jdt.core.refactoring.participants"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.core.refactoring.participants"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_manipulation {
				__id = "org.eclipse.jdt.internal.core.manipulation"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.manipulation"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_core_refactoring_descriptors {
				__id = "org.eclipse.jdt.internal.core.refactoring.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.core.refactoring.descriptors"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_core_manipulation
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_debug_ui {
			__id = "org.eclipse.jdt.debug.ui"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.debug.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.4.1.v20090811_r351"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_jdt_debug
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_jdt_core_manipulation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_com_ibm_icu
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jdt_debug_ui {
				__id = "org.eclipse.jdt.debug.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.debug.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_debug_ui_actions {
				__id = "org.eclipse.jdt.debug.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.debug.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_jdt_debug_ui_launchConfigurations {
				__id = "org.eclipse.jdt.debug.ui.launchConfigurations"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.debug.ui.launchConfigurations"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_core_refactoring {
				__id = "org.eclipse.jdt.internal.debug.core.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.core.refactoring"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui {
				__id = "org.eclipse.jdt.internal.debug.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_actions {
				__id = "org.eclipse.jdt.internal.debug.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_breakpoints {
				__id = "org.eclipse.jdt.internal.debug.ui.breakpoints"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.breakpoints"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_classpath {
				__id = "org.eclipse.jdt.internal.debug.ui.classpath"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.classpath"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_console {
				__id = "org.eclipse.jdt.internal.debug.ui.console"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.console"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_contentassist {
				__id = "org.eclipse.jdt.internal.debug.ui.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.contentassist"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_display {
				__id = "org.eclipse.jdt.internal.debug.ui.display"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.display"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_heapwalking {
				__id = "org.eclipse.jdt.internal.debug.ui.heapwalking"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.heapwalking"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_jres {
				__id = "org.eclipse.jdt.internal.debug.ui.jres"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.jres"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_launcher {
				__id = "org.eclipse.jdt.internal.debug.ui.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.launcher"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_monitors {
				__id = "org.eclipse.jdt.internal.debug.ui.monitors"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.monitors"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_propertypages {
				__id = "org.eclipse.jdt.internal.debug.ui.propertypages"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.propertypages"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_search {
				__id = "org.eclipse.jdt.internal.debug.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.search"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_snippeteditor {
				__id = "org.eclipse.jdt.internal.debug.ui.snippeteditor"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.snippeteditor"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_sourcelookup {
				__id = "org.eclipse.jdt.internal.debug.ui.sourcelookup"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.sourcelookup"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_threadgroups {
				__id = "org.eclipse.jdt.internal.debug.ui.threadgroups"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.threadgroups"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_ui_variables {
				__id = "org.eclipse.jdt.internal.debug.ui.variables"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.ui.variables"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_debug {
			__id = "org.eclipse.jdt.debug"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.debug"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.v20090526"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_com_sun_jdi {
				__id = "com.sun.jdi"
				identifier = new PlatformID {
					value = "com.sun.jdi"
				}
			}
			exports += new Package package_com_sun_jdi_connect {
				__id = "com.sun.jdi.connect"
				identifier = new PlatformID {
					value = "com.sun.jdi.connect"
				}
			}
			exports += new Package package_com_sun_jdi_connect_spi {
				__id = "com.sun.jdi.connect.spi"
				identifier = new PlatformID {
					value = "com.sun.jdi.connect.spi"
				}
			}
			exports += new Package package_com_sun_jdi_event {
				__id = "com.sun.jdi.event"
				identifier = new PlatformID {
					value = "com.sun.jdi.event"
				}
			}
			exports += new Package package_com_sun_jdi_request {
				__id = "com.sun.jdi.request"
				identifier = new PlatformID {
					value = "com.sun.jdi.request"
				}
			}
			exports += new Package package_org_eclipse_jdi {
				__id = "org.eclipse.jdi"
				identifier = new PlatformID {
					value = "org.eclipse.jdi"
				}
			}
			exports += new Package package_org_eclipse_jdi_hcr {
				__id = "org.eclipse.jdi.hcr"
				identifier = new PlatformID {
					value = "org.eclipse.jdi.hcr"
				}
			}
			exports += new Package package_org_eclipse_jdi_internal {
				__id = "org.eclipse.jdi.internal"
				identifier = new PlatformID {
					value = "org.eclipse.jdi.internal"
				}
			}
			exports += new Package package_org_eclipse_jdi_internal_connect {
				__id = "org.eclipse.jdi.internal.connect"
				identifier = new PlatformID {
					value = "org.eclipse.jdi.internal.connect"
				}
			}
			exports += new Package package_org_eclipse_jdi_internal_event {
				__id = "org.eclipse.jdi.internal.event"
				identifier = new PlatformID {
					value = "org.eclipse.jdi.internal.event"
				}
			}
			exports += new Package package_org_eclipse_jdi_internal_jdwp {
				__id = "org.eclipse.jdi.internal.jdwp"
				identifier = new PlatformID {
					value = "org.eclipse.jdi.internal.jdwp"
				}
			}
			exports += new Package package_org_eclipse_jdi_internal_request {
				__id = "org.eclipse.jdi.internal.request"
				identifier = new PlatformID {
					value = "org.eclipse.jdi.internal.request"
				}
			}
			exports += new Package package_org_eclipse_jdi_internal_spy {
				__id = "org.eclipse.jdi.internal.spy"
				identifier = new PlatformID {
					value = "org.eclipse.jdi.internal.spy"
				}
			}
			exports += new Package package_org_eclipse_jdt_debug_core {
				__id = "org.eclipse.jdt.debug.core"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.debug.core"
				}
			}
			exports += new Package package_org_eclipse_jdt_debug_eval {
				__id = "org.eclipse.jdt.debug.eval"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.debug.eval"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_core {
				__id = "org.eclipse.jdt.internal.debug.core"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.core"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_core_breakpoints {
				__id = "org.eclipse.jdt.internal.debug.core.breakpoints"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.core.breakpoints"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_core_hcr {
				__id = "org.eclipse.jdt.internal.debug.core.hcr"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.core.hcr"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_core_logicalstructures {
				__id = "org.eclipse.jdt.internal.debug.core.logicalstructures"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.core.logicalstructures"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_core_model {
				__id = "org.eclipse.jdt.internal.debug.core.model"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.core.model"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_eval {
				__id = "org.eclipse.jdt.internal.debug.eval"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.eval"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_eval_ast_engine {
				__id = "org.eclipse.jdt.internal.debug.eval.ast.engine"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.eval.ast.engine"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_debug_eval_ast_instructions {
				__id = "org.eclipse.jdt.internal.debug.eval.ast.instructions"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.debug.eval.ast.instructions"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_debug
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_junit {
			__id = "org.eclipse.jdt.junit"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.junit"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.1.r351_v20090708-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.100-4.0.0)'"
				maxVersion = "'[3.3.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_jdt_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_jdt_junit_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_compare
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.200-4.0.0)'"
				maxVersion = "'[3.2.200-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_ltk_ui_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit
				target = plugin_org_eclipse_equinox_frameworkadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.100-2.0.0)'"
				maxVersion = "'[1.0.100-2.0.0)'"
			}
			exports += new Package package_org_eclipse_jdt_internal_junit {
				__id = "org.eclipse.jdt.internal.junit"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_buildpath {
				__id = "org.eclipse.jdt.internal.junit.buildpath"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.buildpath"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_launcher {
				__id = "org.eclipse.jdt.internal.junit.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.launcher"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_model {
				__id = "org.eclipse.jdt.internal.junit.model"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.model"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_refactoring {
				__id = "org.eclipse.jdt.internal.junit.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.refactoring"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_ui {
				__id = "org.eclipse.jdt.internal.junit.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_util {
				__id = "org.eclipse.jdt.internal.junit.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_wizards {
				__id = "org.eclipse.jdt.internal.junit.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.wizards"
				}
			}
			exports += new Package package_org_eclipse_jdt_junit {
				__id = "org.eclipse.jdt.junit"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.junit"
				}
			}
			exports += new Package package_org_eclipse_jdt_junit_launcher {
				__id = "org.eclipse.jdt.junit.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.junit.launcher"
				}
			}
			exports += new Package package_org_eclipse_jdt_junit_model {
				__id = "org.eclipse.jdt.junit.model"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.junit.model"
				}
			}
			exports += new Package package_org_eclipse_jdt_junit_wizards {
				__id = "org.eclipse.jdt.junit.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.junit.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_junit_runtime {
			__id = "org.eclipse.jdt.junit.runtime"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.junit.runtime"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.4.100.v20090513-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit_runtime
				target = plugin_org_junit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.8.2-3.9)'"
				maxVersion = "'[3.8.2-3.9)'"
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_runner {
				__id = "org.eclipse.jdt.internal.junit.runner"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.runner"
				}
			}
			exports += new Package package_org_eclipse_pde_junit_runtime_ {
				__id = "org.eclipse.pde.junit.runtime'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.junit.runtime'"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_junit_runner_junit3 {
				__id = "org.eclipse.jdt.internal.junit.runner.junit3"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit.runner.junit3"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_junit4_runtime {
			__id = "org.eclipse.jdt.junit4.runtime"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.junit4.runtime"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v20090513-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit4_runtime
				target = plugin_org_junit4
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[4.4.0-5.0.0)'"
				maxVersion = "'[4.4.0-5.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_junit4_runtime
				target = plugin_org_eclipse_jdt_junit_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jdt_internal_junit4_runner {
				__id = "org.eclipse.jdt.internal.junit4.runner"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.junit4.runner"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_launching {
			__id = "org.eclipse.jdt.launching"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.launching"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.v20090527"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = plugin_org_eclipse_jdt_debug
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jdt_internal_launching {
				__id = "org.eclipse.jdt.internal.launching"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.launching"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_launching_environments {
				__id = "org.eclipse.jdt.internal.launching.environments"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.launching.environments"
				}
			}
			exports += new Package package_org_eclipse_jdt_launching {
				__id = "org.eclipse.jdt.launching"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.launching"
				}
			}
			exports += new Package package_org_eclipse_jdt_launching_environments {
				__id = "org.eclipse.jdt.launching.environments"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.launching.environments"
				}
			}
			exports += new Package package_org_eclipse_jdt_launching_sourcelookup {
				__id = "org.eclipse.jdt.launching.sourcelookup"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.launching.sourcelookup"
				}
			}
			exports += new Package package_org_eclipse_jdt_launching_sourcelookup_containers {
				__id = "org.eclipse.jdt.launching.sourcelookup.containers"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.launching.sourcelookup.containers"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_launching
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_ui {
			__id = "org.eclipse.jdt.ui"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.r351_v20090821-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_core_variables
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.200-4.0.0)'"
				maxVersion = "'[3.2.200-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_compare
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_team_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.100-4.0.0)'"
				maxVersion = "'[3.3.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ltk_ui_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_navigator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.200-4.0.0)'"
				maxVersion = "'[3.3.200-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_ui_navigator_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_org_eclipse_jdt_core_manipulation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jdt_ui
				target = plugin_com_ibm_icu
			}
			exports += new Package package_org_eclipse_jdt_internal_corext {
				__id = "org.eclipse.jdt.internal.corext"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_buildpath {
				__id = "org.eclipse.jdt.internal.corext.buildpath"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.buildpath"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_callhierarchy {
				__id = "org.eclipse.jdt.internal.corext.callhierarchy"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.callhierarchy"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_codemanipulation {
				__id = "org.eclipse.jdt.internal.corext.codemanipulation"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.codemanipulation"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_codemanipulation_tostringgeneration {
				__id = "org.eclipse.jdt.internal.corext.codemanipulation.tostringgeneration"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.codemanipulation.tostringgeneration"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_dom {
				__id = "org.eclipse.jdt.internal.corext.dom"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.dom"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_dom_fragments {
				__id = "org.eclipse.jdt.internal.corext.dom.fragments"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.dom.fragments"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_fix {
				__id = "org.eclipse.jdt.internal.corext.fix"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.fix"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_javadoc {
				__id = "org.eclipse.jdt.internal.corext.javadoc"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.javadoc"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring {
				__id = "org.eclipse.jdt.internal.corext.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_base {
				__id = "org.eclipse.jdt.internal.corext.refactoring.base"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.base"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_binary {
				__id = "org.eclipse.jdt.internal.corext.refactoring.binary"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.binary"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_changes {
				__id = "org.eclipse.jdt.internal.corext.refactoring.changes"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.changes"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_code {
				__id = "org.eclipse.jdt.internal.corext.refactoring.code"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.code"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_code_flow {
				__id = "org.eclipse.jdt.internal.corext.refactoring.code.flow"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.code.flow"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_delegates {
				__id = "org.eclipse.jdt.internal.corext.refactoring.delegates"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.delegates"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_generics {
				__id = "org.eclipse.jdt.internal.corext.refactoring.generics"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.generics"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_nls {
				__id = "org.eclipse.jdt.internal.corext.refactoring.nls"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.nls"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_nls_changes {
				__id = "org.eclipse.jdt.internal.corext.refactoring.nls.changes"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.nls.changes"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_participants {
				__id = "org.eclipse.jdt.internal.corext.refactoring.participants"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.participants"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_rename {
				__id = "org.eclipse.jdt.internal.corext.refactoring.rename"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.rename"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_reorg {
				__id = "org.eclipse.jdt.internal.corext.refactoring.reorg"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.reorg"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_scripting {
				__id = "org.eclipse.jdt.internal.corext.refactoring.scripting"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.scripting"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_sef {
				__id = "org.eclipse.jdt.internal.corext.refactoring.sef"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.sef"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_structure {
				__id = "org.eclipse.jdt.internal.corext.refactoring.structure"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.structure"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_structure_constraints {
				__id = "org.eclipse.jdt.internal.corext.refactoring.structure.constraints"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.structure.constraints"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_surround {
				__id = "org.eclipse.jdt.internal.corext.refactoring.surround"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.surround"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_tagging {
				__id = "org.eclipse.jdt.internal.corext.refactoring.tagging"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.tagging"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_typeconstraints {
				__id = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_typeconstraints_types {
				__id = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints.types"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints.types"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_typeconstraints_typesets {
				__id = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_typeconstraints2 {
				__id = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints2"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.typeconstraints2"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_refactoring_util {
				__id = "org.eclipse.jdt.internal.corext.refactoring.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.refactoring.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_template_java {
				__id = "org.eclipse.jdt.internal.corext.template.java"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.template.java"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_corext_util {
				__id = "org.eclipse.jdt.internal.corext.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.corext.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui {
				__id = "org.eclipse.jdt.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_actions {
				__id = "org.eclipse.jdt.internal.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_browsing {
				__id = "org.eclipse.jdt.internal.ui.browsing"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.browsing"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_callhierarchy {
				__id = "org.eclipse.jdt.internal.ui.callhierarchy"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.callhierarchy"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_commands {
				__id = "org.eclipse.jdt.internal.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_compare {
				__id = "org.eclipse.jdt.internal.ui.compare"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.compare"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_dialogs {
				__id = "org.eclipse.jdt.internal.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_dnd {
				__id = "org.eclipse.jdt.internal.ui.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.dnd"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_filters {
				__id = "org.eclipse.jdt.internal.ui.filters"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.filters"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_fix {
				__id = "org.eclipse.jdt.internal.ui.fix"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.fix"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_infoviews {
				__id = "org.eclipse.jdt.internal.ui.infoviews"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.infoviews"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_jarimport {
				__id = "org.eclipse.jdt.internal.ui.jarimport"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.jarimport"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_jarpackager {
				__id = "org.eclipse.jdt.internal.ui.jarpackager"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.jarpackager"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_jarpackagerfat {
				__id = "org.eclipse.jdt.internal.ui.jarpackagerfat"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.jarpackagerfat"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_javadocexport {
				__id = "org.eclipse.jdt.internal.ui.javadocexport"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.javadocexport"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_javaeditor {
				__id = "org.eclipse.jdt.internal.ui.javaeditor"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.javaeditor"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_javaeditor_breadcrumb {
				__id = "org.eclipse.jdt.internal.ui.javaeditor.breadcrumb"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.javaeditor.breadcrumb"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_javaeditor_saveparticipant {
				__id = "org.eclipse.jdt.internal.ui.javaeditor.saveparticipant"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.javaeditor.saveparticipant"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_javaeditor_selectionactions {
				__id = "org.eclipse.jdt.internal.ui.javaeditor.selectionactions"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.javaeditor.selectionactions"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_model {
				__id = "org.eclipse.jdt.internal.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.model"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_navigator {
				__id = "org.eclipse.jdt.internal.ui.navigator"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.navigator"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_packageview {
				__id = "org.eclipse.jdt.internal.ui.packageview"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.packageview"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_preferences {
				__id = "org.eclipse.jdt.internal.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_preferences_cleanup {
				__id = "org.eclipse.jdt.internal.ui.preferences.cleanup"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.preferences.cleanup"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_preferences_formatter {
				__id = "org.eclipse.jdt.internal.ui.preferences.formatter"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.preferences.formatter"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_propertiesfileeditor {
				__id = "org.eclipse.jdt.internal.ui.propertiesfileeditor"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.propertiesfileeditor"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring {
				__id = "org.eclipse.jdt.internal.ui.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_actions {
				__id = "org.eclipse.jdt.internal.ui.refactoring.actions"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.actions"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_binary {
				__id = "org.eclipse.jdt.internal.ui.refactoring.binary"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.binary"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_code {
				__id = "org.eclipse.jdt.internal.ui.refactoring.code"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.code"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_contentassist {
				__id = "org.eclipse.jdt.internal.ui.refactoring.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.contentassist"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_nls {
				__id = "org.eclipse.jdt.internal.ui.refactoring.nls"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.nls"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_nls_search {
				__id = "org.eclipse.jdt.internal.ui.refactoring.nls.search"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.nls.search"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_reorg {
				__id = "org.eclipse.jdt.internal.ui.refactoring.reorg"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.reorg"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_refactoring_sef {
				__id = "org.eclipse.jdt.internal.ui.refactoring.sef"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.refactoring.sef"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_search {
				__id = "org.eclipse.jdt.internal.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.search"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text {
				__id = "org.eclipse.jdt.internal.ui.text"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_correction {
				__id = "org.eclipse.jdt.internal.ui.text.correction"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.correction"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_correction_proposals {
				__id = "org.eclipse.jdt.internal.ui.text.correction.proposals"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.correction.proposals"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_folding {
				__id = "org.eclipse.jdt.internal.ui.text.folding"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.folding"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_java {
				__id = "org.eclipse.jdt.internal.ui.text.java"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.java"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_java_hover {
				__id = "org.eclipse.jdt.internal.ui.text.java.hover"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.java.hover"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_javadoc {
				__id = "org.eclipse.jdt.internal.ui.text.javadoc"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.javadoc"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_spelling {
				__id = "org.eclipse.jdt.internal.ui.text.spelling"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.spelling"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_spelling_engine {
				__id = "org.eclipse.jdt.internal.ui.text.spelling.engine"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.spelling.engine"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_template_contentassist {
				__id = "org.eclipse.jdt.internal.ui.text.template.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.template.contentassist"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_text_template_preferences {
				__id = "org.eclipse.jdt.internal.ui.text.template.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.text.template.preferences"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_typehierarchy {
				__id = "org.eclipse.jdt.internal.ui.typehierarchy"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.typehierarchy"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_util {
				__id = "org.eclipse.jdt.internal.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.util"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_viewsupport {
				__id = "org.eclipse.jdt.internal.ui.viewsupport"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.viewsupport"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_wizards {
				__id = "org.eclipse.jdt.internal.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_wizards_buildpaths {
				__id = "org.eclipse.jdt.internal.ui.wizards.buildpaths"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.wizards.buildpaths"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_wizards_buildpaths_newsourcepage {
				__id = "org.eclipse.jdt.internal.ui.wizards.buildpaths.newsourcepage"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.wizards.buildpaths.newsourcepage"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_wizards_dialogfields {
				__id = "org.eclipse.jdt.internal.ui.wizards.dialogfields"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.wizards.dialogfields"
				}
			}
			exports += new Package package_org_eclipse_jdt_internal_ui_workingsets {
				__id = "org.eclipse.jdt.internal.ui.workingsets"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.internal.ui.workingsets"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui {
				__id = "org.eclipse.jdt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_actions {
				__id = "org.eclipse.jdt.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_cleanup {
				__id = "org.eclipse.jdt.ui.cleanup"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.cleanup"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_dialogs {
				__id = "org.eclipse.jdt.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_jarpackager {
				__id = "org.eclipse.jdt.ui.jarpackager"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.jarpackager"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_refactoring {
				__id = "org.eclipse.jdt.ui.refactoring"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.refactoring"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_search {
				__id = "org.eclipse.jdt.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.search"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_text {
				__id = "org.eclipse.jdt.ui.text"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.text"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_text_folding {
				__id = "org.eclipse.jdt.ui.text.folding"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.text.folding"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_text_java {
				__id = "org.eclipse.jdt.ui.text.java"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.text.java"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_text_java_hover {
				__id = "org.eclipse.jdt.ui.text.java.hover"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.text.java.hover"
				}
			}
			exports += new Package package_org_eclipse_jdt_ui_wizards {
				__id = "org.eclipse.jdt.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.ui.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_junit {
			__id = "org.junit"
			identifier = new PlatformID {
				value = "org.junit"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.8.2.v20090203-1005"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_junit_awtui {
				__id = "junit.awtui"
				identifier = new PlatformID {
					value = "junit.awtui"
				}
				version = new Version {
					value = "3.8.2"
				}
			}
			exports += new Package package_junit_extensions {
				__id = "junit.extensions"
				identifier = new PlatformID {
					value = "junit.extensions"
				}
				version = new Version {
					value = "3.8.2"
				}
			}
			exports += new Package package_junit_framework {
				__id = "junit.framework"
				identifier = new PlatformID {
					value = "junit.framework"
				}
				version = new Version {
					value = "3.8.2"
				}
			}
			exports += new Package package_junit_runner {
				__id = "junit.runner"
				identifier = new PlatformID {
					value = "junit.runner"
				}
				version = new Version {
					value = "3.8.2"
				}
			}
			exports += new Package package_junit_swingui {
				__id = "junit.swingui"
				identifier = new PlatformID {
					value = "junit.swingui"
				}
				version = new Version {
					value = "3.8.2"
				}
			}
			exports += new Package package_junit_swingui_icons {
				__id = "junit.swingui.icons"
				identifier = new PlatformID {
					value = "junit.swingui.icons"
				}
				version = new Version {
					value = "3.8.2"
				}
			}
			exports += new Package package_junit_textui {
				__id = "junit.textui"
				identifier = new PlatformID {
					value = "junit.textui"
				}
				version = new Version {
					value = "3.8.2"
				}
			}
		}
		plugins += new Plugin plugin_org_junit4 {
			__id = "org.junit4"
			identifier = new PlatformID {
				value = "org.junit4"
			}
			state = : "State.resolved"
			version = new Version {
				value = "4.5.0.v20090824"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_junit4
				target = plugin_org_hamcrest_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			exports += new Package package_junit_extensions {
				__id = "junit.extensions"
				identifier = new PlatformID {
					value = "junit.extensions"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_junit_framework {
				__id = "junit.framework"
				identifier = new PlatformID {
					value = "junit.framework"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_junit_runner {
				__id = "junit.runner"
				identifier = new PlatformID {
					value = "junit.runner"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_junit_textui {
				__id = "junit.textui"
				identifier = new PlatformID {
					value = "junit.textui"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit {
				__id = "org.junit"
				identifier = new PlatformID {
					value = "org.junit"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_experimental_results {
				__id = "org.junit.experimental.results"
				identifier = new PlatformID {
					value = "org.junit.experimental.results"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_experimental_runners {
				__id = "org.junit.experimental.runners"
				identifier = new PlatformID {
					value = "org.junit.experimental.runners"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_experimental_theories {
				__id = "org.junit.experimental.theories"
				identifier = new PlatformID {
					value = "org.junit.experimental.theories"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_experimental_theories_internal {
				__id = "org.junit.experimental.theories.internal"
				identifier = new PlatformID {
					value = "org.junit.experimental.theories.internal"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_experimental_theories_suppliers {
				__id = "org.junit.experimental.theories.suppliers"
				identifier = new PlatformID {
					value = "org.junit.experimental.theories.suppliers"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_internal {
				__id = "org.junit.internal"
				identifier = new PlatformID {
					value = "org.junit.internal"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_internal_builders {
				__id = "org.junit.internal.builders"
				identifier = new PlatformID {
					value = "org.junit.internal.builders"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_internal_matchers {
				__id = "org.junit.internal.matchers"
				identifier = new PlatformID {
					value = "org.junit.internal.matchers"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_internal_requests {
				__id = "org.junit.internal.requests"
				identifier = new PlatformID {
					value = "org.junit.internal.requests"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_internal_runners {
				__id = "org.junit.internal.runners"
				identifier = new PlatformID {
					value = "org.junit.internal.runners"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_internal_runners_model {
				__id = "org.junit.internal.runners.model"
				identifier = new PlatformID {
					value = "org.junit.internal.runners.model"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_internal_runners_statements {
				__id = "org.junit.internal.runners.statements"
				identifier = new PlatformID {
					value = "org.junit.internal.runners.statements"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_matchers {
				__id = "org.junit.matchers"
				identifier = new PlatformID {
					value = "org.junit.matchers"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_runner {
				__id = "org.junit.runner"
				identifier = new PlatformID {
					value = "org.junit.runner"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_runner_manipulation {
				__id = "org.junit.runner.manipulation"
				identifier = new PlatformID {
					value = "org.junit.runner.manipulation"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_runner_notification {
				__id = "org.junit.runner.notification"
				identifier = new PlatformID {
					value = "org.junit.runner.notification"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_runners {
				__id = "org.junit.runners"
				identifier = new PlatformID {
					value = "org.junit.runners"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
			exports += new Package package_org_junit_runners_model {
				__id = "org.junit.runners.model"
				identifier = new PlatformID {
					value = "org.junit.runners.model"
				}
				version = new Version {
					value = "4.5.0"
				}
			}
		}
		plugins += new Plugin plugin_org_hamcrest_core {
			__id = "org.hamcrest.core"
			identifier = new PlatformID {
				value = "org.hamcrest.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v20090501071000"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_hamcrest {
				__id = "org.hamcrest"
				identifier = new PlatformID {
					value = "org.hamcrest"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_hamcrest_core {
				__id = "org.hamcrest.core"
				identifier = new PlatformID {
					value = "org.hamcrest.core"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			exports += new Package package_org_hamcrest_internal {
				__id = "org.hamcrest.internal"
				identifier = new PlatformID {
					value = "org.hamcrest.internal"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_doc_user {
			__id = "org.eclipse.jdt.doc.user"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.r351_v20090821-0800"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.jdt.doc.user"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.doc.user"
				}
				locator = new EFSLocator {
					value = "org.eclipse.jdt.doc.user"
				}
			}
		}
		sites += site__download_eclipse_org_eclipse_updates_3_5
	}

	features += new Feature feature_org_emftext_language_java {
		__id = "org.emftext.language.java"
		identifier = new PlatformID {
			value = "org.emftext.language.java"
		}
		version = new Version {
			value = "1.1.0.v200912111721"
		}
		provider = vendor_Software_Technology_Group___TU_Dresden_Germany
		license = license_EPL
		description = new Description {
			name = "description"
			text = "JaMoPP: Java Model Parser and Printer (EMFText-based Java support for EMF modelling tools)."
		}
		plugins += new Plugin plugin_org_emftext_language_java {
			__id = "org.emftext.language.java"
			identifier = new PlatformID {
				value = "org.emftext.language.java"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200912111721"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java {
				__id = "_www_emftext_org_java"
				identifier = new PlatformID {
					value = "_www_emftext_org_java"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java {
					__id = "conformsTo__www_emftext_org_java"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_annotations {
				__id = "_www_emftext_org_java_annotations"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_annotations"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/annotations"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_annotations {
					__id = "conformsTo__www_emftext_org_java_annotations"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_annotations"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/annotations.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_imports {
				__id = "_www_emftext_org_java_imports"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_imports"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/imports"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_imports {
					__id = "conformsTo__www_emftext_org_java_imports"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_imports"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/imports.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_references {
				__id = "_www_emftext_org_java_references"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_references"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/references"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_references {
					__id = "conformsTo__www_emftext_org_java_references"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_references"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/references.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_generics {
				__id = "_www_emftext_org_java_generics"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_generics"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/generics"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_generics {
					__id = "conformsTo__www_emftext_org_java_generics"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_generics"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/generics.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_arrays {
				__id = "_www_emftext_org_java_arrays"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_arrays"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/arrays"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_arrays {
					__id = "conformsTo__www_emftext_org_java_arrays"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_arrays"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/arrays.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_classifiers {
				__id = "_www_emftext_org_java_classifiers"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_classifiers"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/classifiers"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_classifiers {
					__id = "conformsTo__www_emftext_org_java_classifiers"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_classifiers"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/classifiers.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_containers {
				__id = "_www_emftext_org_java_containers"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_containers"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/containers"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_containers {
					__id = "conformsTo__www_emftext_org_java_containers"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_containers"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/containers.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_instantiations {
				__id = "_www_emftext_org_java_instantiations"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_instantiations"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/instantiations"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_instantiations {
					__id = "conformsTo__www_emftext_org_java_instantiations"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_instantiations"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/instantiations.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_parameters {
				__id = "_www_emftext_org_java_parameters"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_parameters"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/parameters"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_parameters {
					__id = "conformsTo__www_emftext_org_java_parameters"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_parameters"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/parameters.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_variables {
				__id = "_www_emftext_org_java_variables"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_variables"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/variables"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_variables {
					__id = "conformsTo__www_emftext_org_java_variables"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_variables"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/variables.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_members {
				__id = "_www_emftext_org_java_members"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_members"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/members"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_members {
					__id = "conformsTo__www_emftext_org_java_members"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_members"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/members.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_commons {
				__id = "_www_emftext_org_java_commons"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_commons"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/commons"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_commons {
					__id = "conformsTo__www_emftext_org_java_commons"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_commons"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/commons.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_expressions {
				__id = "_www_emftext_org_java_expressions"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_expressions"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/expressions"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_expressions {
					__id = "conformsTo__www_emftext_org_java_expressions"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_expressions"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/expressions.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_operators {
				__id = "_www_emftext_org_java_operators"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_operators"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/operators"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_operators {
					__id = "conformsTo__www_emftext_org_java_operators"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_operators"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/operators.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_literals {
				__id = "_www_emftext_org_java_literals"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_literals"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/literals"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_literals {
					__id = "conformsTo__www_emftext_org_java_literals"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_literals"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/literals.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_modifiers {
				__id = "_www_emftext_org_java_modifiers"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_modifiers"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/modifiers"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_modifiers {
					__id = "conformsTo__www_emftext_org_java_modifiers"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_modifiers"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/modifiers.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_statements {
				__id = "_www_emftext_org_java_statements"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_statements"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/statements"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_statements {
					__id = "conformsTo__www_emftext_org_java_statements"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_statements"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/statements.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_emftext_org_java_types {
				__id = "_www_emftext_org_java_types"
				identifier = new PlatformID {
					value = "_www_emftext_org_java_types"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/java/types"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_java_types {
					__id = "conformsTo__www_emftext_org_java_types"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_java_types"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/java/types.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_emftext_language_java {
				__id = "org.emftext.language.java"
				identifier = new PlatformID {
					value = "org.emftext.language.java"
				}
			}
			exports += new Package package_org_emftext_language_java_annotations {
				__id = "org.emftext.language.java.annotations"
				identifier = new PlatformID {
					value = "org.emftext.language.java.annotations"
				}
			}
			exports += new Package package_org_emftext_language_java_annotations_impl {
				__id = "org.emftext.language.java.annotations.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.annotations.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_annotations_util {
				__id = "org.emftext.language.java.annotations.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.annotations.util"
				}
			}
			exports += new Package package_org_emftext_language_java_arrays {
				__id = "org.emftext.language.java.arrays"
				identifier = new PlatformID {
					value = "org.emftext.language.java.arrays"
				}
			}
			exports += new Package package_org_emftext_language_java_arrays_impl {
				__id = "org.emftext.language.java.arrays.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.arrays.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_arrays_util {
				__id = "org.emftext.language.java.arrays.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.arrays.util"
				}
			}
			exports += new Package package_org_emftext_language_java_classifiers {
				__id = "org.emftext.language.java.classifiers"
				identifier = new PlatformID {
					value = "org.emftext.language.java.classifiers"
				}
			}
			exports += new Package package_org_emftext_language_java_classifiers_impl {
				__id = "org.emftext.language.java.classifiers.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.classifiers.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_classifiers_util {
				__id = "org.emftext.language.java.classifiers.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.classifiers.util"
				}
			}
			exports += new Package package_org_emftext_language_java_commons {
				__id = "org.emftext.language.java.commons"
				identifier = new PlatformID {
					value = "org.emftext.language.java.commons"
				}
			}
			exports += new Package package_org_emftext_language_java_commons_impl {
				__id = "org.emftext.language.java.commons.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.commons.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_commons_util {
				__id = "org.emftext.language.java.commons.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.commons.util"
				}
			}
			exports += new Package package_org_emftext_language_java_containers {
				__id = "org.emftext.language.java.containers"
				identifier = new PlatformID {
					value = "org.emftext.language.java.containers"
				}
			}
			exports += new Package package_org_emftext_language_java_containers_impl {
				__id = "org.emftext.language.java.containers.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.containers.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_containers_util {
				__id = "org.emftext.language.java.containers.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.containers.util"
				}
			}
			exports += new Package package_org_emftext_language_java_expressions {
				__id = "org.emftext.language.java.expressions"
				identifier = new PlatformID {
					value = "org.emftext.language.java.expressions"
				}
			}
			exports += new Package package_org_emftext_language_java_expressions_impl {
				__id = "org.emftext.language.java.expressions.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.expressions.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_expressions_util {
				__id = "org.emftext.language.java.expressions.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.expressions.util"
				}
			}
			exports += new Package package_org_emftext_language_java_generics {
				__id = "org.emftext.language.java.generics"
				identifier = new PlatformID {
					value = "org.emftext.language.java.generics"
				}
			}
			exports += new Package package_org_emftext_language_java_generics_impl {
				__id = "org.emftext.language.java.generics.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.generics.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_generics_util {
				__id = "org.emftext.language.java.generics.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.generics.util"
				}
			}
			exports += new Package package_org_emftext_language_java_impl {
				__id = "org.emftext.language.java.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_imports {
				__id = "org.emftext.language.java.imports"
				identifier = new PlatformID {
					value = "org.emftext.language.java.imports"
				}
			}
			exports += new Package package_org_emftext_language_java_imports_impl {
				__id = "org.emftext.language.java.imports.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.imports.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_imports_util {
				__id = "org.emftext.language.java.imports.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.imports.util"
				}
			}
			exports += new Package package_org_emftext_language_java_instantiations {
				__id = "org.emftext.language.java.instantiations"
				identifier = new PlatformID {
					value = "org.emftext.language.java.instantiations"
				}
			}
			exports += new Package package_org_emftext_language_java_instantiations_impl {
				__id = "org.emftext.language.java.instantiations.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.instantiations.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_instantiations_util {
				__id = "org.emftext.language.java.instantiations.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.instantiations.util"
				}
			}
			exports += new Package package_org_emftext_language_java_literals {
				__id = "org.emftext.language.java.literals"
				identifier = new PlatformID {
					value = "org.emftext.language.java.literals"
				}
			}
			exports += new Package package_org_emftext_language_java_literals_impl {
				__id = "org.emftext.language.java.literals.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.literals.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_literals_util {
				__id = "org.emftext.language.java.literals.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.literals.util"
				}
			}
			exports += new Package package_org_emftext_language_java_members {
				__id = "org.emftext.language.java.members"
				identifier = new PlatformID {
					value = "org.emftext.language.java.members"
				}
			}
			exports += new Package package_org_emftext_language_java_members_impl {
				__id = "org.emftext.language.java.members.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.members.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_members_util {
				__id = "org.emftext.language.java.members.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.members.util"
				}
			}
			exports += new Package package_org_emftext_language_java_modifiers {
				__id = "org.emftext.language.java.modifiers"
				identifier = new PlatformID {
					value = "org.emftext.language.java.modifiers"
				}
			}
			exports += new Package package_org_emftext_language_java_modifiers_impl {
				__id = "org.emftext.language.java.modifiers.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.modifiers.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_modifiers_util {
				__id = "org.emftext.language.java.modifiers.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.modifiers.util"
				}
			}
			exports += new Package package_org_emftext_language_java_operators {
				__id = "org.emftext.language.java.operators"
				identifier = new PlatformID {
					value = "org.emftext.language.java.operators"
				}
			}
			exports += new Package package_org_emftext_language_java_operators_impl {
				__id = "org.emftext.language.java.operators.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.operators.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_operators_util {
				__id = "org.emftext.language.java.operators.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.operators.util"
				}
			}
			exports += new Package package_org_emftext_language_java_parameters {
				__id = "org.emftext.language.java.parameters"
				identifier = new PlatformID {
					value = "org.emftext.language.java.parameters"
				}
			}
			exports += new Package package_org_emftext_language_java_parameters_impl {
				__id = "org.emftext.language.java.parameters.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.parameters.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_parameters_util {
				__id = "org.emftext.language.java.parameters.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.parameters.util"
				}
			}
			exports += new Package package_org_emftext_language_java_references {
				__id = "org.emftext.language.java.references"
				identifier = new PlatformID {
					value = "org.emftext.language.java.references"
				}
			}
			exports += new Package package_org_emftext_language_java_references_impl {
				__id = "org.emftext.language.java.references.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.references.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_references_util {
				__id = "org.emftext.language.java.references.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.references.util"
				}
			}
			exports += new Package package_org_emftext_language_java_statements {
				__id = "org.emftext.language.java.statements"
				identifier = new PlatformID {
					value = "org.emftext.language.java.statements"
				}
			}
			exports += new Package package_org_emftext_language_java_statements_impl {
				__id = "org.emftext.language.java.statements.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.statements.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_statements_util {
				__id = "org.emftext.language.java.statements.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.statements.util"
				}
			}
			exports += new Package package_org_emftext_language_java_types {
				__id = "org.emftext.language.java.types"
				identifier = new PlatformID {
					value = "org.emftext.language.java.types"
				}
			}
			exports += new Package package_org_emftext_language_java_types_impl {
				__id = "org.emftext.language.java.types.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.types.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_types_util {
				__id = "org.emftext.language.java.types.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.types.util"
				}
			}
			exports += new Package package_org_emftext_language_java_util {
				__id = "org.emftext.language.java.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.util"
				}
			}
			exports += new Package package_org_emftext_language_java_variables {
				__id = "org.emftext.language.java.variables"
				identifier = new PlatformID {
					value = "org.emftext.language.java.variables"
				}
			}
			exports += new Package package_org_emftext_language_java_variables_impl {
				__id = "org.emftext.language.java.variables.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.java.variables.impl"
				}
			}
			exports += new Package package_org_emftext_language_java_variables_util {
				__id = "org.emftext.language.java.variables.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.variables.util"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_java_edit {
			__id = "org.emftext.language.java.edit"
			identifier = new PlatformID {
				value = "org.emftext.language.java.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200912111721"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_edit
				target = plugin_org_emftext_language_java
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_org_emftext_language_java_annotations_provider {
				__id = "org.emftext.language.java.annotations.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.annotations.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_arrays_provider {
				__id = "org.emftext.language.java.arrays.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.arrays.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_classifiers_provider {
				__id = "org.emftext.language.java.classifiers.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.classifiers.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_commons_provider {
				__id = "org.emftext.language.java.commons.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.commons.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_containers_provider {
				__id = "org.emftext.language.java.containers.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.containers.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_expressions_provider {
				__id = "org.emftext.language.java.expressions.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.expressions.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_generics_provider {
				__id = "org.emftext.language.java.generics.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.generics.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_imports_provider {
				__id = "org.emftext.language.java.imports.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.imports.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_instantiations_provider {
				__id = "org.emftext.language.java.instantiations.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.instantiations.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_literals_provider {
				__id = "org.emftext.language.java.literals.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.literals.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_members_provider {
				__id = "org.emftext.language.java.members.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.members.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_modifiers_provider {
				__id = "org.emftext.language.java.modifiers.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.modifiers.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_operators_provider {
				__id = "org.emftext.language.java.operators.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.operators.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_parameters_provider {
				__id = "org.emftext.language.java.parameters.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.parameters.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_references_provider {
				__id = "org.emftext.language.java.references.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.references.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_statements_provider {
				__id = "org.emftext.language.java.statements.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.statements.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_types_provider {
				__id = "org.emftext.language.java.types.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.types.provider"
				}
			}
			exports += new Package package_org_emftext_language_java_variables_provider {
				__id = "org.emftext.language.java.variables.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.java.variables.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_java_resource_java {
			__id = "org.emftext.language.java.resource.java"
			identifier = new PlatformID {
				value = "org.emftext.language.java.resource.java"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200912111721"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_emftext_access
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_emf_workspace
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_emftext_commons_antlr3_1_1
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource_java
				target = plugin_org_emftext_language_java
			}
			exports += new Package package_org_emftext_language_java_resource_java {
				__id = "org.emftext.language.java.resource.java"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource.java"
				}
			}
			exports += new Package package_org_emftext_language_java_resource_java_mopp {
				__id = "org.emftext.language.java.resource.java.mopp"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource.java.mopp"
				}
			}
			exports += new Package package_org_emftext_language_java_resource_java_ui {
				__id = "org.emftext.language.java.resource.java.ui"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource.java.ui"
				}
			}
			exports += new Package package_org_emftext_language_java_resource_java_util {
				__id = "org.emftext.language.java.resource.java.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource.java.util"
				}
			}
			exports += new Package package_org_emftext_language_java_resource_java_analysis {
				__id = "org.emftext.language.java.resource.java.analysis"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource.java.analysis"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_java_resource {
			__id = "org.emftext.language.java.resource"
			identifier = new PlatformID {
				value = "org.emftext.language.java.resource"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200912111721"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource
				target = plugin_org_emftext_language_java
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource
				target = plugin_org_emftext_language_java_resource_java
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource
				target = plugin_org_eclipse_emf_workspace
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_java_resource
				target = plugin_org_eclipse_emf_common_ui
			}
			exports += new Package package_org_apache_bcel {
				__id = "org.apache.bcel"
				identifier = new PlatformID {
					value = "org.apache.bcel"
				}
			}
			exports += new Package package_org_apache_bcel_classfile {
				__id = "org.apache.bcel.classfile"
				identifier = new PlatformID {
					value = "org.apache.bcel.classfile"
				}
			}
			exports += new Package package_org_apache_bcel_generic {
				__id = "org.apache.bcel.generic"
				identifier = new PlatformID {
					value = "org.apache.bcel.generic"
				}
			}
			exports += new Package package_org_apache_bcel_util {
				__id = "org.apache.bcel.util"
				identifier = new PlatformID {
					value = "org.apache.bcel.util"
				}
			}
			exports += new Package package_org_emftext_language_java_resource {
				__id = "org.emftext.language.java.resource"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource"
				}
			}
			exports += new Package package_org_emftext_language_java_resource_register {
				__id = "org.emftext.language.java.resource.register"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource.register"
				}
			}
			exports += new Package package_org_emftext_language_java_resource_util {
				__id = "org.emftext.language.java.resource.util"
				identifier = new PlatformID {
					value = "org.emftext.language.java.resource.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_ocl {
		__id = "org.eclipse.emf.ocl"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ocl"
		}
		version = new Version {
			value = "1.1.101.v200901271800-208_7w311A12382911"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Object Constraint Language (OCL) 2.0 Compatibility API."
		}
		plugins += new Plugin plugin_org_eclipse_emf_ocl {
			__id = "org.eclipse.emf.ocl"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ocl"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.101.v200901271800"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl
				target = plugin_org_eclipse_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_OCL2_1_0_0_ocl_expressions {
				__id = "_www_eclipse_org_OCL2_1_0_0_ocl_expressions"
				identifier = new PlatformID {
					value = "_www_eclipse_org_OCL2_1_0_0_ocl_expressions"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/OCL2/1.0.0/ocl/expressions"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_expressions {
					__id = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_expressions"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_expressions"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/OCL2/1.0.0/ocl/expressions.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_OCL2_1_0_0_ocl_types {
				__id = "_www_eclipse_org_OCL2_1_0_0_ocl_types"
				identifier = new PlatformID {
					value = "_www_eclipse_org_OCL2_1_0_0_ocl_types"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/OCL2/1.0.0/ocl/types"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_types {
					__id = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_types"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_types"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/OCL2/1.0.0/ocl/types.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_OCL2_1_0_0_ocl_uml {
				__id = "_www_eclipse_org_OCL2_1_0_0_ocl_uml"
				identifier = new PlatformID {
					value = "_www_eclipse_org_OCL2_1_0_0_ocl_uml"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/OCL2/1.0.0/ocl/uml"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_uml {
					__id = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_uml"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_uml"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/OCL2/1.0.0/ocl/uml.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_OCL2_1_0_0_ocl_utilities {
				__id = "_www_eclipse_org_OCL2_1_0_0_ocl_utilities"
				identifier = new PlatformID {
					value = "_www_eclipse_org_OCL2_1_0_0_ocl_utilities"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/OCL2/1.0.0/ocl/utilities"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_utilities {
					__id = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_utilities"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_utilities"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/OCL2/1.0.0/ocl/utilities.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_OCL2_1_0_0_ocl_query {
				__id = "_www_eclipse_org_OCL2_1_0_0_ocl_query"
				identifier = new PlatformID {
					value = "_www_eclipse_org_OCL2_1_0_0_ocl_query"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/OCL2/1.0.0/ocl/query"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_query {
					__id = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_query"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_OCL2_1_0_0_ocl_query"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/OCL2/1.0.0/ocl/query.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_ocl_expressions {
				__id = "org.eclipse.emf.ocl.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.expressions"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_expressions_impl {
				__id = "org.eclipse.emf.ocl.expressions.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.expressions.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_expressions_util {
				__id = "org.eclipse.emf.ocl.expressions.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.expressions.util"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_helper {
				__id = "org.eclipse.emf.ocl.helper"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.helper"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_internal {
				__id = "org.eclipse.emf.ocl.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_internal_parser {
				__id = "org.eclipse.emf.ocl.internal.parser"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.internal.parser"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_parser {
				__id = "org.eclipse.emf.ocl.parser"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.parser"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_query {
				__id = "org.eclipse.emf.ocl.query"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.query"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_query_impl {
				__id = "org.eclipse.emf.ocl.query.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.query.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_query_util {
				__id = "org.eclipse.emf.ocl.query.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.query.util"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_types {
				__id = "org.eclipse.emf.ocl.types"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.types"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_types_impl {
				__id = "org.eclipse.emf.ocl.types.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.types.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_types_util {
				__id = "org.eclipse.emf.ocl.types.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.types.util"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_uml {
				__id = "org.eclipse.emf.ocl.uml"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.uml"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_uml_impl {
				__id = "org.eclipse.emf.ocl.uml.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.uml.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_uml_util {
				__id = "org.eclipse.emf.ocl.uml.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.uml.util"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_utilities {
				__id = "org.eclipse.emf.ocl.utilities"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.utilities"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_utilities_impl {
				__id = "org.eclipse.emf.ocl.utilities.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.utilities.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ocl_utilities_util {
				__id = "org.eclipse.emf.ocl.utilities.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.utilities.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl
				target = package_lpg_lpgjavaruntime
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "1.2.0"
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_rcp {
		__id = "org.eclipse.rcp"
		identifier = new PlatformID {
			value = "org.eclipse.rcp"
		}
		version = new Version {
			value = "3.5.1.R35x_v20090811-9SA0FxVFqE70OL1ARMrfcO6e7BA6"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "Rich Client Platform"
		}
		plugins += new Plugin plugin_com_ibm_icu {
			__id = "com.ibm.icu"
			identifier = new PlatformID {
				value = "com.ibm.icu"
			}
			state = : "State.active"
			version = new Version {
				value = "4.0.1.v20090822"
			}
			vendor = vendor_IBM_Corporation
			exports += new Package package_com_ibm_icu_lang {
				__id = "com.ibm.icu.lang"
				identifier = new PlatformID {
					value = "com.ibm.icu.lang"
				}
				version = new Version {
					value = "4.0.1.1"
				}
			}
			exports += new Package package_com_ibm_icu_math {
				__id = "com.ibm.icu.math"
				identifier = new PlatformID {
					value = "com.ibm.icu.math"
				}
				version = new Version {
					value = "4.0.1.1"
				}
			}
			exports += new Package package_com_ibm_icu_text {
				__id = "com.ibm.icu.text"
				identifier = new PlatformID {
					value = "com.ibm.icu.text"
				}
				version = new Version {
					value = "4.0.1.1"
				}
			}
			exports += new Package package_com_ibm_icu_util {
				__id = "com.ibm.icu.util"
				identifier = new PlatformID {
					value = "com.ibm.icu.util"
				}
				version = new Version {
					value = "4.0.1.1"
				}
			}
			exports += new Package package_com_ibm_icu_impl {
				__id = "com.ibm.icu.impl"
				identifier = new PlatformID {
					value = "com.ibm.icu.impl"
				}
			}
			exports += new Package package_com_ibm_icu_impl_data {
				__id = "com.ibm.icu.impl.data"
				identifier = new PlatformID {
					value = "com.ibm.icu.impl.data"
				}
			}
			exports += new Package package_com_ibm_icu_impl_data_icudt40b {
				__id = "com.ibm.icu.impl.data.icudt40b"
				identifier = new PlatformID {
					value = "com.ibm.icu.impl.data.icudt40b"
				}
			}
			exports += new Package package_com_ibm_icu_impl_data_icudt40b_brkitr {
				__id = "com.ibm.icu.impl.data.icudt40b.brkitr"
				identifier = new PlatformID {
					value = "com.ibm.icu.impl.data.icudt40b.brkitr"
				}
			}
			exports += new Package package_com_ibm_icu_impl_data_icudt40b_coll {
				__id = "com.ibm.icu.impl.data.icudt40b.coll"
				identifier = new PlatformID {
					value = "com.ibm.icu.impl.data.icudt40b.coll"
				}
			}
			exports += new Package package_com_ibm_icu_impl_data_icudt40b_rbnf {
				__id = "com.ibm.icu.impl.data.icudt40b.rbnf"
				identifier = new PlatformID {
					value = "com.ibm.icu.impl.data.icudt40b.rbnf"
				}
			}
			exports += new Package package_com_ibm_icu_impl_data_icudt40b_translit {
				__id = "com.ibm.icu.impl.data.icudt40b.translit"
				identifier = new PlatformID {
					value = "com.ibm.icu.impl.data.icudt40b.translit"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_commands {
			__id = "org.eclipse.core.commands"
			identifier = new PlatformID {
				value = "org.eclipse.core.commands"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.0.I20090525-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_commands
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_commands {
				__id = "org.eclipse.core.commands"
				identifier = new PlatformID {
					value = "org.eclipse.core.commands"
				}
			}
			exports += new Package package_org_eclipse_core_commands_common {
				__id = "org.eclipse.core.commands.common"
				identifier = new PlatformID {
					value = "org.eclipse.core.commands.common"
				}
			}
			exports += new Package package_org_eclipse_core_commands_contexts {
				__id = "org.eclipse.core.commands.contexts"
				identifier = new PlatformID {
					value = "org.eclipse.core.commands.contexts"
				}
			}
			exports += new Package package_org_eclipse_core_commands_operations {
				__id = "org.eclipse.core.commands.operations"
				identifier = new PlatformID {
					value = "org.eclipse.core.commands.operations"
				}
			}
			exports += new Package package_org_eclipse_core_commands_util {
				__id = "org.eclipse.core.commands.util"
				identifier = new PlatformID {
					value = "org.eclipse.core.commands.util"
				}
			}
			exports += new Package package_org_eclipse_core_internal_commands_operations {
				__id = "org.eclipse.core.internal.commands.operations"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.commands.operations"
				}
			}
			exports += new Package package_org_eclipse_core_internal_commands_util {
				__id = "org.eclipse.core.internal.commands.util"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.commands.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_databinding {
			__id = "org.eclipse.core.databinding"
			identifier = new PlatformID {
				value = "org.eclipse.core.databinding"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.M20090819-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = plugin_org_eclipse_core_databinding_observable
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = plugin_org_eclipse_core_databinding_property
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_core_databinding {
				__id = "org.eclipse.core.databinding"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_conversion {
				__id = "org.eclipse.core.databinding.conversion"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.conversion"
				}
				version = new Version {
					value = "org.eclipse.core.databinding.conversio"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_validation {
				__id = "org.eclipse.core.databinding.validation"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.validation"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding {
				__id = "org.eclipse.core.internal.databinding"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_conversion {
				__id = "org.eclipse.core.internal.databinding.conversion"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.conversion"
				}
				version = new Version {
					value = "org.eclipse.core.internal.databinding.conversio"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_validation {
				__id = "org.eclipse.core.internal.databinding.validation"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.validation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = package_com_ibm_icu_math
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.4.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.3.3"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding
				target = package_org_eclipse_osgi_framework_log
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_databinding_observable {
			__id = "org.eclipse.core.databinding.observable"
			identifier = new PlatformID {
				value = "org.eclipse.core.databinding.observable"
			}
			state = : "State.active"
			version = new Version {
				value = "1.2.0.M20090902-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_observable
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_databinding_observable {
				__id = "org.eclipse.core.databinding.observable"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.observable"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_observable_list {
				__id = "org.eclipse.core.databinding.observable.list"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.observable.list"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_observable_map {
				__id = "org.eclipse.core.databinding.observable.map"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.observable.map"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_observable_masterdetail {
				__id = "org.eclipse.core.databinding.observable.masterdetail"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.observable.masterdetail"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_observable_set {
				__id = "org.eclipse.core.databinding.observable.set"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.observable.set"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_observable_value {
				__id = "org.eclipse.core.databinding.observable.value"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.observable.value"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_util {
				__id = "org.eclipse.core.databinding.util"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.util"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_identity {
				__id = "org.eclipse.core.internal.databinding.identity"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.identity"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_observable {
				__id = "org.eclipse.core.internal.databinding.observable"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.observable"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_observable_masterdetail {
				__id = "org.eclipse.core.internal.databinding.observable.masterdetail"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.observable.masterdetail"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_observable
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.4.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_observable
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.3.3"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_observable
				target = package_org_eclipse_osgi_framework_log
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_databinding_property {
			__id = "org.eclipse.core.databinding.property"
			identifier = new PlatformID {
				value = "org.eclipse.core.databinding.property"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.M20090819-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_property
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_property
				target = plugin_org_eclipse_core_databinding_observable
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_core_databinding_property {
				__id = "org.eclipse.core.databinding.property"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.property"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_property_list {
				__id = "org.eclipse.core.databinding.property.list"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.property.list"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_property_map {
				__id = "org.eclipse.core.databinding.property.map"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.property.map"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_property_set {
				__id = "org.eclipse.core.databinding.property.set"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.property.set"
				}
			}
			exports += new Package package_org_eclipse_core_databinding_property_value {
				__id = "org.eclipse.core.databinding.property.value"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.property.value"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_property {
				__id = "org.eclipse.core.internal.databinding.property"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.property"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_property_list {
				__id = "org.eclipse.core.internal.databinding.property.list"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.property.list"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_property_map {
				__id = "org.eclipse.core.internal.databinding.property.map"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.property.map"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_property_set {
				__id = "org.eclipse.core.internal.databinding.property.set"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.property.set"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_property_value {
				__id = "org.eclipse.core.internal.databinding.property.value"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.property.value"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_databinding_beans {
			__id = "org.eclipse.core.databinding.beans"
			identifier = new PlatformID {
				value = "org.eclipse.core.databinding.beans"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.I20090525-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_beans
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_beans
				target = plugin_org_eclipse_core_databinding_observable
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_databinding_beans
				target = plugin_org_eclipse_core_databinding_property
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_core_databinding_beans {
				__id = "org.eclipse.core.databinding.beans"
				identifier = new PlatformID {
					value = "org.eclipse.core.databinding.beans"
				}
			}
			exports += new Package package_org_eclipse_core_internal_databinding_beans {
				__id = "org.eclipse.core.internal.databinding.beans"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.databinding.beans"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_jobs {
			__id = "org.eclipse.core.jobs"
			identifier = new PlatformID {
				value = "org.eclipse.core.jobs"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.100.v20090429-1800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_jobs
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_jobs {
				__id = "org.eclipse.core.internal.jobs"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.jobs"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_jobs {
				__id = "org.eclipse.core.runtime.jobs"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.jobs"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_jobs
				target = package_org_eclipse_osgi_service_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_jobs
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_jobs
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_jobs
				target = package_org_osgi_service_packageadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_jobs
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_expressions {
			__id = "org.eclipse.core.expressions"
			identifier = new PlatformID {
				value = "org.eclipse.core.expressions"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.100.v20090429-1800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_expressions
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_expressions {
				__id = "org.eclipse.core.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.core.expressions"
				}
			}
			exports += new Package package_org_eclipse_core_internal_expressions {
				__id = "org.eclipse.core.internal.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.expressions"
				}
			}
			exports += new Package package_org_eclipse_core_internal_expressions_propertytester {
				__id = "org.eclipse.core.internal.expressions.propertytester"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.expressions.propertytester"
				}
			}
			exports += new Package package_org_eclipse_core_internal_expressions_util {
				__id = "org.eclipse.core.internal.expressions.util"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.expressions.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_expressions
				target = package_org_w3c_dom
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_runtime {
			__id = "org.eclipse.core.runtime"
			identifier = new PlatformID {
				value = "org.eclipse.core.runtime"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.0.v20090525"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_core_jobs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_equinox_preferences
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_core_contenttype
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_core_runtime_compatibility_auth
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime
				target = plugin_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_preferences_legacy {
				__id = "org.eclipse.core.internal.preferences.legacy"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.preferences.legacy"
				}
			}
			exports += new Package package_org_eclipse_core_internal_runtime {
				__id = "org.eclipse.core.internal.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.runtime"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
				version = new Version {
					value = "3.4.0"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_core_runtime_compatibility_auth {
			__id = "org.eclipse.core.runtime.compatibility.auth"
			identifier = new PlatformID {
				value = "org.eclipse.core.runtime.compatibility.auth"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.100.v20090413"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility_auth
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_runtime_auth {
				__id = "org.eclipse.core.internal.runtime.auth"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.runtime.auth"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility_auth
				target = package_org_eclipse_osgi_framework_log
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility_auth
				target = package_org_eclipse_osgi_service_datalocation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility_auth
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility_auth
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_runtime_compatibility_auth
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_org_eclipse_osgi {
			__id = "org.eclipse.osgi"
			identifier = new PlatformID {
				value = "org.eclipse.osgi"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.R35x_v20090827"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_osgi_event {
				__id = "org.eclipse.osgi.event"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.event"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_console {
				__id = "org.eclipse.osgi.framework.console"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.console"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_eventmgr {
				__id = "org.eclipse.osgi.framework.eventmgr"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.eventmgr"
				}
				version = new Version {
					value = "1.2"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_log {
				__id = "org.eclipse.osgi.framework.log"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.log"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_launch {
				__id = "org.eclipse.osgi.launch"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.launch"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_datalocation {
				__id = "org.eclipse.osgi.service.datalocation"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.datalocation"
				}
				version = new Version {
					value = "1.2"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_debug {
				__id = "org.eclipse.osgi.service.debug"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.debug"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_environment {
				__id = "org.eclipse.osgi.service.environment"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.environment"
				}
				version = new Version {
					value = "1.2"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_localization {
				__id = "org.eclipse.osgi.service.localization"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.localization"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_pluginconversion {
				__id = "org.eclipse.osgi.service.pluginconversion"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.pluginconversion"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_resolver {
				__id = "org.eclipse.osgi.service.resolver"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.resolver"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_runnable {
				__id = "org.eclipse.osgi.service.runnable"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.runnable"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_security {
				__id = "org.eclipse.osgi.service.security"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.security"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_urlconversion {
				__id = "org.eclipse.osgi.service.urlconversion"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.urlconversion"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_signedcontent {
				__id = "org.eclipse.osgi.signedcontent"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.signedcontent"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_storagemanager {
				__id = "org.eclipse.osgi.storagemanager"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.storagemanager"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_util {
				__id = "org.eclipse.osgi.util"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.util"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_framework {
				__id = "org.osgi.framework"
				identifier = new PlatformID {
					value = "org.osgi.framework"
				}
				version = new Version {
					value = "1.5"
				}
			}
			exports += new Package package_org_osgi_framework_launch {
				__id = "org.osgi.framework.launch"
				identifier = new PlatformID {
					value = "org.osgi.framework.launch"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_osgi_framework_hooks_service {
				__id = "org.osgi.framework.hooks.service"
				identifier = new PlatformID {
					value = "org.osgi.framework.hooks.service"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_osgi_service_condpermadmin {
				__id = "org.osgi.service.condpermadmin"
				identifier = new PlatformID {
					value = "org.osgi.service.condpermadmin"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_service_framework {
				__id = "org.osgi.service.framework"
				identifier = new PlatformID {
					value = "org.osgi.service.framework"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_osgi_service_packageadmin {
				__id = "org.osgi.service.packageadmin"
				identifier = new PlatformID {
					value = "org.osgi.service.packageadmin"
				}
				version = new Version {
					value = "1.2"
				}
			}
			exports += new Package package_org_osgi_service_permissionadmin {
				__id = "org.osgi.service.permissionadmin"
				identifier = new PlatformID {
					value = "org.osgi.service.permissionadmin"
				}
				version = new Version {
					value = "1.2"
				}
			}
			exports += new Package package_org_osgi_service_startlevel {
				__id = "org.osgi.service.startlevel"
				identifier = new PlatformID {
					value = "org.osgi.service.startlevel"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_service_url {
				__id = "org.osgi.service.url"
				identifier = new PlatformID {
					value = "org.osgi.service.url"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_osgi_util_tracker {
				__id = "org.osgi.util.tracker"
				identifier = new PlatformID {
					value = "org.osgi.util.tracker"
				}
				version = new Version {
					value = "1.4.0"
				}
			}
			exports += new Package package_org_osgi_util_tracker {
				__id = "org.osgi.util.tracker"
				identifier = new PlatformID {
					value = "org.osgi.util.tracker"
				}
				version = new Version {
					value = "1.4.2"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_adaptor {
				__id = "org.eclipse.core.runtime.adaptor"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.adaptor"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_internal_adaptor {
				__id = "org.eclipse.core.runtime.internal.adaptor"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.internal.adaptor"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_internal_stats {
				__id = "org.eclipse.core.runtime.internal.stats"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.internal.stats"
				}
			}
			exports += new Package package_org_eclipse_osgi_baseadaptor {
				__id = "org.eclipse.osgi.baseadaptor"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.baseadaptor"
				}
			}
			exports += new Package package_org_eclipse_osgi_baseadaptor_bundlefile {
				__id = "org.eclipse.osgi.baseadaptor.bundlefile"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.baseadaptor.bundlefile"
				}
			}
			exports += new Package package_org_eclipse_osgi_baseadaptor_hooks {
				__id = "org.eclipse.osgi.baseadaptor.hooks"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.baseadaptor.hooks"
				}
			}
			exports += new Package package_org_eclipse_osgi_baseadaptor_loader {
				__id = "org.eclipse.osgi.baseadaptor.loader"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.baseadaptor.loader"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_adaptor {
				__id = "org.eclipse.osgi.framework.adaptor"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.adaptor"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_debug {
				__id = "org.eclipse.osgi.framework.debug"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.debug"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_internal_core {
				__id = "org.eclipse.osgi.framework.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.internal.core"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_internal_protocol {
				__id = "org.eclipse.osgi.framework.internal.protocol"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.internal.protocol"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_internal_protocol_bundleentry {
				__id = "org.eclipse.osgi.framework.internal.protocol.bundleentry"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.internal.protocol.bundleentry"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_internal_protocol_bundleresource {
				__id = "org.eclipse.osgi.framework.internal.protocol.bundleresource"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.internal.protocol.bundleresource"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_internal_protocol_reference {
				__id = "org.eclipse.osgi.framework.internal.protocol.reference"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.internal.protocol.reference"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_internal_reliablefile {
				__id = "org.eclipse.osgi.framework.internal.reliablefile"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.internal.reliablefile"
				}
			}
			exports += new Package package_org_eclipse_osgi_framework_util {
				__id = "org.eclipse.osgi.framework.util"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.framework.util"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_baseadaptor {
				__id = "org.eclipse.osgi.internal.baseadaptor"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.baseadaptor"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_composite {
				__id = "org.eclipse.osgi.internal.composite"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.composite"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_loader {
				__id = "org.eclipse.osgi.internal.loader"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.loader"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_loader_buddy {
				__id = "org.eclipse.osgi.internal.loader.buddy"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.loader.buddy"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_module {
				__id = "org.eclipse.osgi.internal.module"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.module"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_profile {
				__id = "org.eclipse.osgi.internal.profile"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.profile"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_resolver {
				__id = "org.eclipse.osgi.internal.resolver"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.resolver"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_serviceregistry {
				__id = "org.eclipse.osgi.internal.serviceregistry"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.serviceregistry"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_permadmin {
				__id = "org.eclipse.osgi.internal.permadmin"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.permadmin"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_provisional_service_security {
				__id = "org.eclipse.osgi.internal.provisional.service.security"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.provisional.service.security"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_provisional_verifier {
				__id = "org.eclipse.osgi.internal.provisional.verifier"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.provisional.verifier"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository_ {
				__id = "org.eclipse.equinox.p2.artifact.repository'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository'"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_service_security {
				__id = "org.eclipse.osgi.internal.service.security"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.service.security"
				}
			}
			exports += new Package package_org_eclipse_osgi_internal_signedcontent {
				__id = "org.eclipse.osgi.internal.signedcontent"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.internal.signedcontent"
				}
			}
			exports += new Package package_org_eclipse_osgi_service_internal_composite {
				__id = "org.eclipse.osgi.service.internal.composite"
				identifier = new PlatformID {
					value = "org.eclipse.osgi.service.internal.composite"
				}
			}
			exports += new Package package_javax_accessibility {
				__id = "javax.accessibility"
				identifier = new PlatformID {
					value = "javax.accessibility"
				}
			}
			exports += new Package package_javax_activation {
				__id = "javax.activation"
				identifier = new PlatformID {
					value = "javax.activation"
				}
			}
			exports += new Package package_javax_activity {
				__id = "javax.activity"
				identifier = new PlatformID {
					value = "javax.activity"
				}
			}
			exports += new Package package_javax_annotation {
				__id = "javax.annotation"
				identifier = new PlatformID {
					value = "javax.annotation"
				}
			}
			exports += new Package package_javax_annotation_processing {
				__id = "javax.annotation.processing"
				identifier = new PlatformID {
					value = "javax.annotation.processing"
				}
			}
			exports += new Package package_javax_crypto {
				__id = "javax.crypto"
				identifier = new PlatformID {
					value = "javax.crypto"
				}
			}
			exports += new Package package_javax_crypto_interfaces {
				__id = "javax.crypto.interfaces"
				identifier = new PlatformID {
					value = "javax.crypto.interfaces"
				}
			}
			exports += new Package package_javax_crypto_spec {
				__id = "javax.crypto.spec"
				identifier = new PlatformID {
					value = "javax.crypto.spec"
				}
			}
			exports += new Package package_javax_imageio {
				__id = "javax.imageio"
				identifier = new PlatformID {
					value = "javax.imageio"
				}
			}
			exports += new Package package_javax_imageio_event {
				__id = "javax.imageio.event"
				identifier = new PlatformID {
					value = "javax.imageio.event"
				}
			}
			exports += new Package package_javax_imageio_metadata {
				__id = "javax.imageio.metadata"
				identifier = new PlatformID {
					value = "javax.imageio.metadata"
				}
			}
			exports += new Package package_javax_imageio_plugins_bmp {
				__id = "javax.imageio.plugins.bmp"
				identifier = new PlatformID {
					value = "javax.imageio.plugins.bmp"
				}
			}
			exports += new Package package_javax_imageio_plugins_jpeg {
				__id = "javax.imageio.plugins.jpeg"
				identifier = new PlatformID {
					value = "javax.imageio.plugins.jpeg"
				}
			}
			exports += new Package package_javax_imageio_spi {
				__id = "javax.imageio.spi"
				identifier = new PlatformID {
					value = "javax.imageio.spi"
				}
			}
			exports += new Package package_javax_imageio_stream {
				__id = "javax.imageio.stream"
				identifier = new PlatformID {
					value = "javax.imageio.stream"
				}
			}
			exports += new Package package_javax_jws {
				__id = "javax.jws"
				identifier = new PlatformID {
					value = "javax.jws"
				}
			}
			exports += new Package package_javax_jws_soap {
				__id = "javax.jws.soap"
				identifier = new PlatformID {
					value = "javax.jws.soap"
				}
			}
			exports += new Package package_javax_lang_model {
				__id = "javax.lang.model"
				identifier = new PlatformID {
					value = "javax.lang.model"
				}
			}
			exports += new Package package_javax_lang_model_element {
				__id = "javax.lang.model.element"
				identifier = new PlatformID {
					value = "javax.lang.model.element"
				}
			}
			exports += new Package package_javax_lang_model_type {
				__id = "javax.lang.model.type"
				identifier = new PlatformID {
					value = "javax.lang.model.type"
				}
			}
			exports += new Package package_javax_lang_model_util {
				__id = "javax.lang.model.util"
				identifier = new PlatformID {
					value = "javax.lang.model.util"
				}
			}
			exports += new Package package_javax_management {
				__id = "javax.management"
				identifier = new PlatformID {
					value = "javax.management"
				}
			}
			exports += new Package package_javax_management_loading {
				__id = "javax.management.loading"
				identifier = new PlatformID {
					value = "javax.management.loading"
				}
			}
			exports += new Package package_javax_management_modelmbean {
				__id = "javax.management.modelmbean"
				identifier = new PlatformID {
					value = "javax.management.modelmbean"
				}
			}
			exports += new Package package_javax_management_monitor {
				__id = "javax.management.monitor"
				identifier = new PlatformID {
					value = "javax.management.monitor"
				}
			}
			exports += new Package package_javax_management_openmbean {
				__id = "javax.management.openmbean"
				identifier = new PlatformID {
					value = "javax.management.openmbean"
				}
			}
			exports += new Package package_javax_management_relation {
				__id = "javax.management.relation"
				identifier = new PlatformID {
					value = "javax.management.relation"
				}
			}
			exports += new Package package_javax_management_remote {
				__id = "javax.management.remote"
				identifier = new PlatformID {
					value = "javax.management.remote"
				}
			}
			exports += new Package package_javax_management_remote_rmi {
				__id = "javax.management.remote.rmi"
				identifier = new PlatformID {
					value = "javax.management.remote.rmi"
				}
			}
			exports += new Package package_javax_management_timer {
				__id = "javax.management.timer"
				identifier = new PlatformID {
					value = "javax.management.timer"
				}
			}
			exports += new Package package_javax_naming {
				__id = "javax.naming"
				identifier = new PlatformID {
					value = "javax.naming"
				}
			}
			exports += new Package package_javax_naming_directory {
				__id = "javax.naming.directory"
				identifier = new PlatformID {
					value = "javax.naming.directory"
				}
			}
			exports += new Package package_javax_naming_event {
				__id = "javax.naming.event"
				identifier = new PlatformID {
					value = "javax.naming.event"
				}
			}
			exports += new Package package_javax_naming_ldap {
				__id = "javax.naming.ldap"
				identifier = new PlatformID {
					value = "javax.naming.ldap"
				}
			}
			exports += new Package package_javax_naming_spi {
				__id = "javax.naming.spi"
				identifier = new PlatformID {
					value = "javax.naming.spi"
				}
			}
			exports += new Package package_javax_net {
				__id = "javax.net"
				identifier = new PlatformID {
					value = "javax.net"
				}
			}
			exports += new Package package_javax_net_ssl {
				__id = "javax.net.ssl"
				identifier = new PlatformID {
					value = "javax.net.ssl"
				}
			}
			exports += new Package package_javax_print {
				__id = "javax.print"
				identifier = new PlatformID {
					value = "javax.print"
				}
			}
			exports += new Package package_javax_print_attribute {
				__id = "javax.print.attribute"
				identifier = new PlatformID {
					value = "javax.print.attribute"
				}
			}
			exports += new Package package_javax_print_attribute_standard {
				__id = "javax.print.attribute.standard"
				identifier = new PlatformID {
					value = "javax.print.attribute.standard"
				}
			}
			exports += new Package package_javax_print_event {
				__id = "javax.print.event"
				identifier = new PlatformID {
					value = "javax.print.event"
				}
			}
			exports += new Package package_javax_rmi {
				__id = "javax.rmi"
				identifier = new PlatformID {
					value = "javax.rmi"
				}
			}
			exports += new Package package_javax_rmi_CORBA {
				__id = "javax.rmi.CORBA"
				identifier = new PlatformID {
					value = "javax.rmi.CORBA"
				}
			}
			exports += new Package package_javax_rmi_ssl {
				__id = "javax.rmi.ssl"
				identifier = new PlatformID {
					value = "javax.rmi.ssl"
				}
			}
			exports += new Package package_javax_script {
				__id = "javax.script"
				identifier = new PlatformID {
					value = "javax.script"
				}
			}
			exports += new Package package_javax_security_auth {
				__id = "javax.security.auth"
				identifier = new PlatformID {
					value = "javax.security.auth"
				}
			}
			exports += new Package package_javax_security_auth_callback {
				__id = "javax.security.auth.callback"
				identifier = new PlatformID {
					value = "javax.security.auth.callback"
				}
			}
			exports += new Package package_javax_security_auth_kerberos {
				__id = "javax.security.auth.kerberos"
				identifier = new PlatformID {
					value = "javax.security.auth.kerberos"
				}
			}
			exports += new Package package_javax_security_auth_login {
				__id = "javax.security.auth.login"
				identifier = new PlatformID {
					value = "javax.security.auth.login"
				}
			}
			exports += new Package package_javax_security_auth_spi {
				__id = "javax.security.auth.spi"
				identifier = new PlatformID {
					value = "javax.security.auth.spi"
				}
			}
			exports += new Package package_javax_security_auth_x500 {
				__id = "javax.security.auth.x500"
				identifier = new PlatformID {
					value = "javax.security.auth.x500"
				}
			}
			exports += new Package package_javax_security_cert {
				__id = "javax.security.cert"
				identifier = new PlatformID {
					value = "javax.security.cert"
				}
			}
			exports += new Package package_javax_security_sasl {
				__id = "javax.security.sasl"
				identifier = new PlatformID {
					value = "javax.security.sasl"
				}
			}
			exports += new Package package_javax_sound_midi {
				__id = "javax.sound.midi"
				identifier = new PlatformID {
					value = "javax.sound.midi"
				}
			}
			exports += new Package package_javax_sound_midi_spi {
				__id = "javax.sound.midi.spi"
				identifier = new PlatformID {
					value = "javax.sound.midi.spi"
				}
			}
			exports += new Package package_javax_sound_sampled {
				__id = "javax.sound.sampled"
				identifier = new PlatformID {
					value = "javax.sound.sampled"
				}
			}
			exports += new Package package_javax_sound_sampled_spi {
				__id = "javax.sound.sampled.spi"
				identifier = new PlatformID {
					value = "javax.sound.sampled.spi"
				}
			}
			exports += new Package package_javax_sql {
				__id = "javax.sql"
				identifier = new PlatformID {
					value = "javax.sql"
				}
			}
			exports += new Package package_javax_sql_rowset {
				__id = "javax.sql.rowset"
				identifier = new PlatformID {
					value = "javax.sql.rowset"
				}
			}
			exports += new Package package_javax_sql_rowset_serial {
				__id = "javax.sql.rowset.serial"
				identifier = new PlatformID {
					value = "javax.sql.rowset.serial"
				}
			}
			exports += new Package package_javax_sql_rowset_spi {
				__id = "javax.sql.rowset.spi"
				identifier = new PlatformID {
					value = "javax.sql.rowset.spi"
				}
			}
			exports += new Package package_javax_swing {
				__id = "javax.swing"
				identifier = new PlatformID {
					value = "javax.swing"
				}
			}
			exports += new Package package_javax_swing_border {
				__id = "javax.swing.border"
				identifier = new PlatformID {
					value = "javax.swing.border"
				}
			}
			exports += new Package package_javax_swing_colorchooser {
				__id = "javax.swing.colorchooser"
				identifier = new PlatformID {
					value = "javax.swing.colorchooser"
				}
			}
			exports += new Package package_javax_swing_event {
				__id = "javax.swing.event"
				identifier = new PlatformID {
					value = "javax.swing.event"
				}
			}
			exports += new Package package_javax_swing_filechooser {
				__id = "javax.swing.filechooser"
				identifier = new PlatformID {
					value = "javax.swing.filechooser"
				}
			}
			exports += new Package package_javax_swing_plaf {
				__id = "javax.swing.plaf"
				identifier = new PlatformID {
					value = "javax.swing.plaf"
				}
			}
			exports += new Package package_javax_swing_plaf_basic {
				__id = "javax.swing.plaf.basic"
				identifier = new PlatformID {
					value = "javax.swing.plaf.basic"
				}
			}
			exports += new Package package_javax_swing_plaf_metal {
				__id = "javax.swing.plaf.metal"
				identifier = new PlatformID {
					value = "javax.swing.plaf.metal"
				}
			}
			exports += new Package package_javax_swing_plaf_multi {
				__id = "javax.swing.plaf.multi"
				identifier = new PlatformID {
					value = "javax.swing.plaf.multi"
				}
			}
			exports += new Package package_javax_swing_plaf_synth {
				__id = "javax.swing.plaf.synth"
				identifier = new PlatformID {
					value = "javax.swing.plaf.synth"
				}
			}
			exports += new Package package_javax_swing_table {
				__id = "javax.swing.table"
				identifier = new PlatformID {
					value = "javax.swing.table"
				}
			}
			exports += new Package package_javax_swing_text {
				__id = "javax.swing.text"
				identifier = new PlatformID {
					value = "javax.swing.text"
				}
			}
			exports += new Package package_javax_swing_text_html {
				__id = "javax.swing.text.html"
				identifier = new PlatformID {
					value = "javax.swing.text.html"
				}
			}
			exports += new Package package_javax_swing_text_html_parser {
				__id = "javax.swing.text.html.parser"
				identifier = new PlatformID {
					value = "javax.swing.text.html.parser"
				}
			}
			exports += new Package package_javax_swing_text_rtf {
				__id = "javax.swing.text.rtf"
				identifier = new PlatformID {
					value = "javax.swing.text.rtf"
				}
			}
			exports += new Package package_javax_swing_tree {
				__id = "javax.swing.tree"
				identifier = new PlatformID {
					value = "javax.swing.tree"
				}
			}
			exports += new Package package_javax_swing_undo {
				__id = "javax.swing.undo"
				identifier = new PlatformID {
					value = "javax.swing.undo"
				}
			}
			exports += new Package package_javax_tools {
				__id = "javax.tools"
				identifier = new PlatformID {
					value = "javax.tools"
				}
			}
			exports += new Package package_javax_transaction {
				__id = "javax.transaction"
				identifier = new PlatformID {
					value = "javax.transaction"
				}
			}
			exports += new Package package_javax_transaction_xa {
				__id = "javax.transaction.xa"
				identifier = new PlatformID {
					value = "javax.transaction.xa"
				}
			}
			exports += new Package package_javax_xml {
				__id = "javax.xml"
				identifier = new PlatformID {
					value = "javax.xml"
				}
			}
			exports += new Package package_javax_xml_bind {
				__id = "javax.xml.bind"
				identifier = new PlatformID {
					value = "javax.xml.bind"
				}
			}
			exports += new Package package_javax_xml_bind_annotation {
				__id = "javax.xml.bind.annotation"
				identifier = new PlatformID {
					value = "javax.xml.bind.annotation"
				}
			}
			exports += new Package package_javax_xml_bind_annotation_adapters {
				__id = "javax.xml.bind.annotation.adapters"
				identifier = new PlatformID {
					value = "javax.xml.bind.annotation.adapters"
				}
			}
			exports += new Package package_javax_xml_bind_attachment {
				__id = "javax.xml.bind.attachment"
				identifier = new PlatformID {
					value = "javax.xml.bind.attachment"
				}
			}
			exports += new Package package_javax_xml_bind_helpers {
				__id = "javax.xml.bind.helpers"
				identifier = new PlatformID {
					value = "javax.xml.bind.helpers"
				}
			}
			exports += new Package package_javax_xml_bind_util {
				__id = "javax.xml.bind.util"
				identifier = new PlatformID {
					value = "javax.xml.bind.util"
				}
			}
			exports += new Package package_javax_xml_crypto {
				__id = "javax.xml.crypto"
				identifier = new PlatformID {
					value = "javax.xml.crypto"
				}
			}
			exports += new Package package_javax_xml_crypto_dom {
				__id = "javax.xml.crypto.dom"
				identifier = new PlatformID {
					value = "javax.xml.crypto.dom"
				}
			}
			exports += new Package package_javax_xml_crypto_dsig {
				__id = "javax.xml.crypto.dsig"
				identifier = new PlatformID {
					value = "javax.xml.crypto.dsig"
				}
			}
			exports += new Package package_javax_xml_crypto_dsig_dom {
				__id = "javax.xml.crypto.dsig.dom"
				identifier = new PlatformID {
					value = "javax.xml.crypto.dsig.dom"
				}
			}
			exports += new Package package_javax_xml_crypto_dsig_keyinfo {
				__id = "javax.xml.crypto.dsig.keyinfo"
				identifier = new PlatformID {
					value = "javax.xml.crypto.dsig.keyinfo"
				}
			}
			exports += new Package package_javax_xml_crypto_dsig_spec {
				__id = "javax.xml.crypto.dsig.spec"
				identifier = new PlatformID {
					value = "javax.xml.crypto.dsig.spec"
				}
			}
			exports += new Package package_javax_xml_datatype {
				__id = "javax.xml.datatype"
				identifier = new PlatformID {
					value = "javax.xml.datatype"
				}
			}
			exports += new Package package_javax_xml_namespace {
				__id = "javax.xml.namespace"
				identifier = new PlatformID {
					value = "javax.xml.namespace"
				}
			}
			exports += new Package package_javax_xml_parsers {
				__id = "javax.xml.parsers"
				identifier = new PlatformID {
					value = "javax.xml.parsers"
				}
			}
			exports += new Package package_javax_xml_soap {
				__id = "javax.xml.soap"
				identifier = new PlatformID {
					value = "javax.xml.soap"
				}
			}
			exports += new Package package_javax_xml_stream {
				__id = "javax.xml.stream"
				identifier = new PlatformID {
					value = "javax.xml.stream"
				}
			}
			exports += new Package package_javax_xml_stream_events {
				__id = "javax.xml.stream.events"
				identifier = new PlatformID {
					value = "javax.xml.stream.events"
				}
			}
			exports += new Package package_javax_xml_stream_util {
				__id = "javax.xml.stream.util"
				identifier = new PlatformID {
					value = "javax.xml.stream.util"
				}
			}
			exports += new Package package_javax_xml_transform {
				__id = "javax.xml.transform"
				identifier = new PlatformID {
					value = "javax.xml.transform"
				}
			}
			exports += new Package package_javax_xml_transform_dom {
				__id = "javax.xml.transform.dom"
				identifier = new PlatformID {
					value = "javax.xml.transform.dom"
				}
			}
			exports += new Package package_javax_xml_transform_sax {
				__id = "javax.xml.transform.sax"
				identifier = new PlatformID {
					value = "javax.xml.transform.sax"
				}
			}
			exports += new Package package_javax_xml_transform_stax {
				__id = "javax.xml.transform.stax"
				identifier = new PlatformID {
					value = "javax.xml.transform.stax"
				}
			}
			exports += new Package package_javax_xml_transform_stream {
				__id = "javax.xml.transform.stream"
				identifier = new PlatformID {
					value = "javax.xml.transform.stream"
				}
			}
			exports += new Package package_javax_xml_validation {
				__id = "javax.xml.validation"
				identifier = new PlatformID {
					value = "javax.xml.validation"
				}
			}
			exports += new Package package_javax_xml_ws {
				__id = "javax.xml.ws"
				identifier = new PlatformID {
					value = "javax.xml.ws"
				}
			}
			exports += new Package package_javax_xml_ws_handler {
				__id = "javax.xml.ws.handler"
				identifier = new PlatformID {
					value = "javax.xml.ws.handler"
				}
			}
			exports += new Package package_javax_xml_ws_handler_soap {
				__id = "javax.xml.ws.handler.soap"
				identifier = new PlatformID {
					value = "javax.xml.ws.handler.soap"
				}
			}
			exports += new Package package_javax_xml_ws_http {
				__id = "javax.xml.ws.http"
				identifier = new PlatformID {
					value = "javax.xml.ws.http"
				}
			}
			exports += new Package package_javax_xml_ws_soap {
				__id = "javax.xml.ws.soap"
				identifier = new PlatformID {
					value = "javax.xml.ws.soap"
				}
			}
			exports += new Package package_javax_xml_ws_spi {
				__id = "javax.xml.ws.spi"
				identifier = new PlatformID {
					value = "javax.xml.ws.spi"
				}
			}
			exports += new Package package_javax_xml_ws_wsaddressing {
				__id = "javax.xml.ws.wsaddressing"
				identifier = new PlatformID {
					value = "javax.xml.ws.wsaddressing"
				}
			}
			exports += new Package package_javax_xml_xpath {
				__id = "javax.xml.xpath"
				identifier = new PlatformID {
					value = "javax.xml.xpath"
				}
			}
			exports += new Package package_org_ietf_jgss {
				__id = "org.ietf.jgss"
				identifier = new PlatformID {
					value = "org.ietf.jgss"
				}
			}
			exports += new Package package_org_omg_CORBA {
				__id = "org.omg.CORBA"
				identifier = new PlatformID {
					value = "org.omg.CORBA"
				}
			}
			exports += new Package package_org_omg_CORBA_2_3 {
				__id = "org.omg.CORBA_2_3"
				identifier = new PlatformID {
					value = "org.omg.CORBA_2_3"
				}
			}
			exports += new Package package_org_omg_CORBA_2_3_portable {
				__id = "org.omg.CORBA_2_3.portable"
				identifier = new PlatformID {
					value = "org.omg.CORBA_2_3.portable"
				}
			}
			exports += new Package package_org_omg_CORBA_DynAnyPackage {
				__id = "org.omg.CORBA.DynAnyPackage"
				identifier = new PlatformID {
					value = "org.omg.CORBA.DynAnyPackage"
				}
			}
			exports += new Package package_org_omg_CORBA_ORBPackage {
				__id = "org.omg.CORBA.ORBPackage"
				identifier = new PlatformID {
					value = "org.omg.CORBA.ORBPackage"
				}
			}
			exports += new Package package_org_omg_CORBA_portable {
				__id = "org.omg.CORBA.portable"
				identifier = new PlatformID {
					value = "org.omg.CORBA.portable"
				}
			}
			exports += new Package package_org_omg_CORBA_TypeCodePackage {
				__id = "org.omg.CORBA.TypeCodePackage"
				identifier = new PlatformID {
					value = "org.omg.CORBA.TypeCodePackage"
				}
			}
			exports += new Package package_org_omg_CosNaming {
				__id = "org.omg.CosNaming"
				identifier = new PlatformID {
					value = "org.omg.CosNaming"
				}
			}
			exports += new Package package_org_omg_CosNaming_NamingContextExtPackage {
				__id = "org.omg.CosNaming.NamingContextExtPackage"
				identifier = new PlatformID {
					value = "org.omg.CosNaming.NamingContextExtPackage"
				}
			}
			exports += new Package package_org_omg_CosNaming_NamingContextPackage {
				__id = "org.omg.CosNaming.NamingContextPackage"
				identifier = new PlatformID {
					value = "org.omg.CosNaming.NamingContextPackage"
				}
			}
			exports += new Package package_org_omg_Dynamic {
				__id = "org.omg.Dynamic"
				identifier = new PlatformID {
					value = "org.omg.Dynamic"
				}
			}
			exports += new Package package_org_omg_DynamicAny {
				__id = "org.omg.DynamicAny"
				identifier = new PlatformID {
					value = "org.omg.DynamicAny"
				}
			}
			exports += new Package package_org_omg_DynamicAny_DynAnyFactoryPackage {
				__id = "org.omg.DynamicAny.DynAnyFactoryPackage"
				identifier = new PlatformID {
					value = "org.omg.DynamicAny.DynAnyFactoryPackage"
				}
			}
			exports += new Package package_org_omg_DynamicAny_DynAnyPackage {
				__id = "org.omg.DynamicAny.DynAnyPackage"
				identifier = new PlatformID {
					value = "org.omg.DynamicAny.DynAnyPackage"
				}
			}
			exports += new Package package_org_omg_IOP {
				__id = "org.omg.IOP"
				identifier = new PlatformID {
					value = "org.omg.IOP"
				}
			}
			exports += new Package package_org_omg_IOP_CodecFactoryPackage {
				__id = "org.omg.IOP.CodecFactoryPackage"
				identifier = new PlatformID {
					value = "org.omg.IOP.CodecFactoryPackage"
				}
			}
			exports += new Package package_org_omg_IOP_CodecPackage {
				__id = "org.omg.IOP.CodecPackage"
				identifier = new PlatformID {
					value = "org.omg.IOP.CodecPackage"
				}
			}
			exports += new Package package_org_omg_Messaging {
				__id = "org.omg.Messaging"
				identifier = new PlatformID {
					value = "org.omg.Messaging"
				}
			}
			exports += new Package package_org_omg_PortableInterceptor {
				__id = "org.omg.PortableInterceptor"
				identifier = new PlatformID {
					value = "org.omg.PortableInterceptor"
				}
			}
			exports += new Package package_org_omg_PortableInterceptor_ORBInitInfoPackage {
				__id = "org.omg.PortableInterceptor.ORBInitInfoPackage"
				identifier = new PlatformID {
					value = "org.omg.PortableInterceptor.ORBInitInfoPackage"
				}
			}
			exports += new Package package_org_omg_PortableServer {
				__id = "org.omg.PortableServer"
				identifier = new PlatformID {
					value = "org.omg.PortableServer"
				}
			}
			exports += new Package package_org_omg_PortableServer_CurrentPackage {
				__id = "org.omg.PortableServer.CurrentPackage"
				identifier = new PlatformID {
					value = "org.omg.PortableServer.CurrentPackage"
				}
			}
			exports += new Package package_org_omg_PortableServer_POAManagerPackage {
				__id = "org.omg.PortableServer.POAManagerPackage"
				identifier = new PlatformID {
					value = "org.omg.PortableServer.POAManagerPackage"
				}
			}
			exports += new Package package_org_omg_PortableServer_POAPackage {
				__id = "org.omg.PortableServer.POAPackage"
				identifier = new PlatformID {
					value = "org.omg.PortableServer.POAPackage"
				}
			}
			exports += new Package package_org_omg_PortableServer_portable {
				__id = "org.omg.PortableServer.portable"
				identifier = new PlatformID {
					value = "org.omg.PortableServer.portable"
				}
			}
			exports += new Package package_org_omg_PortableServer_ServantLocatorPackage {
				__id = "org.omg.PortableServer.ServantLocatorPackage"
				identifier = new PlatformID {
					value = "org.omg.PortableServer.ServantLocatorPackage"
				}
			}
			exports += new Package package_org_omg_SendingContext {
				__id = "org.omg.SendingContext"
				identifier = new PlatformID {
					value = "org.omg.SendingContext"
				}
			}
			exports += new Package package_org_omg_stub_java_rmi {
				__id = "org.omg.stub.java.rmi"
				identifier = new PlatformID {
					value = "org.omg.stub.java.rmi"
				}
			}
			exports += new Package package_org_w3c_dom {
				__id = "org.w3c.dom"
				identifier = new PlatformID {
					value = "org.w3c.dom"
				}
			}
			exports += new Package package_org_w3c_dom_bootstrap {
				__id = "org.w3c.dom.bootstrap"
				identifier = new PlatformID {
					value = "org.w3c.dom.bootstrap"
				}
			}
			exports += new Package package_org_w3c_dom_css {
				__id = "org.w3c.dom.css"
				identifier = new PlatformID {
					value = "org.w3c.dom.css"
				}
			}
			exports += new Package package_org_w3c_dom_events {
				__id = "org.w3c.dom.events"
				identifier = new PlatformID {
					value = "org.w3c.dom.events"
				}
			}
			exports += new Package package_org_w3c_dom_html {
				__id = "org.w3c.dom.html"
				identifier = new PlatformID {
					value = "org.w3c.dom.html"
				}
			}
			exports += new Package package_org_w3c_dom_ls {
				__id = "org.w3c.dom.ls"
				identifier = new PlatformID {
					value = "org.w3c.dom.ls"
				}
			}
			exports += new Package package_org_w3c_dom_ranges {
				__id = "org.w3c.dom.ranges"
				identifier = new PlatformID {
					value = "org.w3c.dom.ranges"
				}
			}
			exports += new Package package_org_w3c_dom_stylesheets {
				__id = "org.w3c.dom.stylesheets"
				identifier = new PlatformID {
					value = "org.w3c.dom.stylesheets"
				}
			}
			exports += new Package package_org_w3c_dom_traversal {
				__id = "org.w3c.dom.traversal"
				identifier = new PlatformID {
					value = "org.w3c.dom.traversal"
				}
			}
			exports += new Package package_org_w3c_dom_views {
				__id = "org.w3c.dom.views"
				identifier = new PlatformID {
					value = "org.w3c.dom.views"
				}
			}
			exports += new Package package_org_w3c_dom_xpath {
				__id = "org.w3c.dom.xpath"
				identifier = new PlatformID {
					value = "org.w3c.dom.xpath"
				}
			}
			exports += new Package package_org_xml_sax {
				__id = "org.xml.sax"
				identifier = new PlatformID {
					value = "org.xml.sax"
				}
			}
			exports += new Package package_org_xml_sax_ext {
				__id = "org.xml.sax.ext"
				identifier = new PlatformID {
					value = "org.xml.sax.ext"
				}
			}
			exports += new Package package_org_xml_sax_helpers {
				__id = "org.xml.sax.helpers"
				identifier = new PlatformID {
					value = "org.xml.sax.helpers"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_osgi_services {
			__id = "org.eclipse.osgi.services"
			identifier = new PlatformID {
				value = "org.eclipse.osgi.services"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.2.0.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_osgi_service_cm {
				__id = "org.osgi.service.cm"
				identifier = new PlatformID {
					value = "org.osgi.service.cm"
				}
				version = new Version {
					value = "1.2.1"
				}
			}
			exports += new Package package_org_osgi_service_component {
				__id = "org.osgi.service.component"
				identifier = new PlatformID {
					value = "org.osgi.service.component"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_service_device {
				__id = "org.osgi.service.device"
				identifier = new PlatformID {
					value = "org.osgi.service.device"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_service_event {
				__id = "org.osgi.service.event"
				identifier = new PlatformID {
					value = "org.osgi.service.event"
				}
				version = new Version {
					value = "1.2"
				}
			}
			exports += new Package package_org_osgi_service_http {
				__id = "org.osgi.service.http"
				identifier = new PlatformID {
					value = "org.osgi.service.http"
				}
				version = new Version {
					value = "1.2.1"
				}
			}
			exports += new Package package_org_osgi_service_io {
				__id = "org.osgi.service.io"
				identifier = new PlatformID {
					value = "org.osgi.service.io"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_osgi_service_log {
				__id = "org.osgi.service.log"
				identifier = new PlatformID {
					value = "org.osgi.service.log"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_org_osgi_service_metatype {
				__id = "org.osgi.service.metatype"
				identifier = new PlatformID {
					value = "org.osgi.service.metatype"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_service_provisioning {
				__id = "org.osgi.service.provisioning"
				identifier = new PlatformID {
					value = "org.osgi.service.provisioning"
				}
				version = new Version {
					value = "1.2"
				}
			}
			exports += new Package package_org_osgi_service_upnp {
				__id = "org.osgi.service.upnp"
				identifier = new PlatformID {
					value = "org.osgi.service.upnp"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_service_useradmin {
				__id = "org.osgi.service.useradmin"
				identifier = new PlatformID {
					value = "org.osgi.service.useradmin"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_org_osgi_service_wireadmin {
				__id = "org.osgi.service.wireadmin"
				identifier = new PlatformID {
					value = "org.osgi.service.wireadmin"
				}
				version = new Version {
					value = "1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_osgi_services
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "version=1.2"
				maxVersion = "version=1.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_osgi_services
				target = package_javax_servlet
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_osgi_services
				target = package_javax_servlet_http
			}
		}
		plugins += new Plugin plugin_org_eclipse_help {
			__id = "org.eclipse.help"
			identifier = new PlatformID {
				value = "org.eclipse.help"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.1.v20090805_35x"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.help"
				identifier = new PlatformID {
					value = "org.eclipse.help"
				}
				locator = new EFSLocator {
					value = "org.eclipse.help"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.100-4.0.0)'"
				maxVersion = "'[3.4.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_help {
				__id = "org.eclipse.help"
				identifier = new PlatformID {
					value = "org.eclipse.help"
				}
			}
			exports += new Package package_org_eclipse_help_internal {
				__id = "org.eclipse.help.internal"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal"
				}
			}
			exports += new Package package_org_eclipse_help_webapp {
				__id = "org.eclipse.help.webapp"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp"
				}
			}
			exports += new Package package_org_eclipse_ui_intro {
				__id = "org.eclipse.ui.intro"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro"
				}
			}
			exports += new Package package_org_eclipse_ua_tests {
				__id = "org.eclipse.ua.tests"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests"
				}
			}
			exports += new Package package_org_eclipse_ui_cheatsheets_ {
				__id = "org.eclipse.ui.cheatsheets'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.cheatsheets'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_context {
				__id = "org.eclipse.help.internal.context"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.context"
				}
			}
			exports += new Package package_org_eclipse_ua_tests {
				__id = "org.eclipse.ua.tests"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests"
				}
			}
			exports += new Package package_org_eclipse_help_webapp_ {
				__id = "org.eclipse.help.webapp'"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_dynamic {
				__id = "org.eclipse.help.internal.dynamic"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.dynamic"
				}
			}
			exports += new Package package_org_eclipse_help_base {
				__id = "org.eclipse.help.base"
				identifier = new PlatformID {
					value = "org.eclipse.help.base"
				}
			}
			exports += new Package package_org_eclipse_ui_intro {
				__id = "org.eclipse.ui.intro"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro"
				}
			}
			exports += new Package package_org_eclipse_help_webapp {
				__id = "org.eclipse.help.webapp"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp"
				}
			}
			exports += new Package package_org_eclipse_ui_cheatsheets_ {
				__id = "org.eclipse.ui.cheatsheets'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.cheatsheets'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_entityresolver {
				__id = "org.eclipse.help.internal.entityresolver"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.entityresolver"
				}
			}
			exports += new Package package_org_eclipse_ui_cheatsheets {
				__id = "org.eclipse.ui.cheatsheets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.cheatsheets"
				}
			}
			exports += new Package package_org_eclipse_ua_tests_ {
				__id = "org.eclipse.ua.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_extension {
				__id = "org.eclipse.help.internal.extension"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.extension"
				}
			}
			exports += new Package package_org_eclipse_ua_tests_ {
				__id = "org.eclipse.ua.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_index {
				__id = "org.eclipse.help.internal.index"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.index"
				}
			}
			exports += new Package package_org_eclipse_help_ui {
				__id = "org.eclipse.help.ui"
				identifier = new PlatformID {
					value = "org.eclipse.help.ui"
				}
			}
			exports += new Package package_org_eclipse_help_base_ {
				__id = "org.eclipse.help.base'"
				identifier = new PlatformID {
					value = "org.eclipse.help.base'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_toc {
				__id = "org.eclipse.help.internal.toc"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.toc"
				}
			}
			exports += new Package package_org_eclipse_help_webapp {
				__id = "org.eclipse.help.webapp"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp"
				}
			}
			exports += new Package package_org_eclipse_ua_tests_ {
				__id = "org.eclipse.ua.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests'"
				}
			}
			exports += new Package package_org_eclipse_help_internal_util {
				__id = "org.eclipse.help.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.help.internal.util"
				}
			}
			exports += new Package package_org_eclipse_help_webapp {
				__id = "org.eclipse.help.webapp"
				identifier = new PlatformID {
					value = "org.eclipse.help.webapp"
				}
			}
			exports += new Package package_org_eclipse_ua_tests {
				__id = "org.eclipse.ua.tests"
				identifier = new PlatformID {
					value = "org.eclipse.ua.tests"
				}
			}
			exports += new Package package_org_eclipse_ui_intro_universal {
				__id = "org.eclipse.ui.intro.universal"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro.universal"
				}
			}
			exports += new Package package_org_eclipse_ui_intro_ {
				__id = "org.eclipse.ui.intro'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8.0"
				maxVersion = "3.8.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_javax_xml_transform
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_javax_xml_transform_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_javax_xml_transform_stream
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_help
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_swt {
			__id = "org.eclipse.swt"
			identifier = new PlatformID {
				value = "org.eclipse.swt"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.v3555a"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_eclipse_swt {
				__id = "org.eclipse.swt"
				identifier = new PlatformID {
					value = "org.eclipse.swt"
				}
			}
			exports += new Package package_org_eclipse_swt_accessibility {
				__id = "org.eclipse.swt.accessibility"
				identifier = new PlatformID {
					value = "org.eclipse.swt.accessibility"
				}
			}
			exports += new Package package_org_eclipse_swt_awt {
				__id = "org.eclipse.swt.awt"
				identifier = new PlatformID {
					value = "org.eclipse.swt.awt"
				}
			}
			exports += new Package package_org_eclipse_swt_browser {
				__id = "org.eclipse.swt.browser"
				identifier = new PlatformID {
					value = "org.eclipse.swt.browser"
				}
			}
			exports += new Package package_org_eclipse_swt_custom {
				__id = "org.eclipse.swt.custom"
				identifier = new PlatformID {
					value = "org.eclipse.swt.custom"
				}
			}
			exports += new Package package_org_eclipse_swt_dnd {
				__id = "org.eclipse.swt.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.swt.dnd"
				}
			}
			exports += new Package package_org_eclipse_swt_events {
				__id = "org.eclipse.swt.events"
				identifier = new PlatformID {
					value = "org.eclipse.swt.events"
				}
			}
			exports += new Package package_org_eclipse_swt_graphics {
				__id = "org.eclipse.swt.graphics"
				identifier = new PlatformID {
					value = "org.eclipse.swt.graphics"
				}
			}
			exports += new Package package_org_eclipse_swt_layout {
				__id = "org.eclipse.swt.layout"
				identifier = new PlatformID {
					value = "org.eclipse.swt.layout"
				}
			}
			exports += new Package package_org_eclipse_swt_opengl {
				__id = "org.eclipse.swt.opengl"
				identifier = new PlatformID {
					value = "org.eclipse.swt.opengl"
				}
			}
			exports += new Package package_org_eclipse_swt_printing {
				__id = "org.eclipse.swt.printing"
				identifier = new PlatformID {
					value = "org.eclipse.swt.printing"
				}
			}
			exports += new Package package_org_eclipse_swt_program {
				__id = "org.eclipse.swt.program"
				identifier = new PlatformID {
					value = "org.eclipse.swt.program"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets {
				__id = "org.eclipse.swt.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets"
				}
			}
			exports += new Package package_org_eclipse_swt_internal {
				__id = "org.eclipse.swt.internal"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_image {
				__id = "org.eclipse.swt.internal.image"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.image"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_theme {
				__id = "org.eclipse.swt.internal.theme"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.theme"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jface {
			__id = "org.eclipse.jface"
			identifier = new PlatformID {
				value = "org.eclipse.jface"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.M20090826-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface
				target = plugin_org_eclipse_core_commands
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_jface {
				__id = "org.eclipse.jface"
				identifier = new PlatformID {
					value = "org.eclipse.jface"
				}
			}
			exports += new Package package_org_eclipse_jface_action {
				__id = "org.eclipse.jface.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action"
				}
			}
			exports += new Package package_org_eclipse_jface_action_images {
				__id = "org.eclipse.jface.action.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action.images"
				}
			}
			exports += new Package package_org_eclipse_jface_bindings {
				__id = "org.eclipse.jface.bindings"
				identifier = new PlatformID {
					value = "org.eclipse.jface.bindings"
				}
			}
			exports += new Package package_org_eclipse_jface_bindings_keys {
				__id = "org.eclipse.jface.bindings.keys"
				identifier = new PlatformID {
					value = "org.eclipse.jface.bindings.keys"
				}
			}
			exports += new Package package_org_eclipse_jface_bindings_keys_formatting {
				__id = "org.eclipse.jface.bindings.keys.formatting"
				identifier = new PlatformID {
					value = "org.eclipse.jface.bindings.keys.formatting"
				}
			}
			exports += new Package package_org_eclipse_jface_commands {
				__id = "org.eclipse.jface.commands"
				identifier = new PlatformID {
					value = "org.eclipse.jface.commands"
				}
			}
			exports += new Package package_org_eclipse_jface_contexts {
				__id = "org.eclipse.jface.contexts"
				identifier = new PlatformID {
					value = "org.eclipse.jface.contexts"
				}
			}
			exports += new Package package_org_eclipse_jface_dialogs {
				__id = "org.eclipse.jface.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.jface.dialogs"
				}
			}
			exports += new Package package_org_eclipse_jface_dialogs_images {
				__id = "org.eclipse.jface.dialogs.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.dialogs.images"
				}
			}
			exports += new Package package_org_eclipse_jface_fieldassist {
				__id = "org.eclipse.jface.fieldassist"
				identifier = new PlatformID {
					value = "org.eclipse.jface.fieldassist"
				}
			}
			exports += new Package package_org_eclipse_jface_fieldassist_images {
				__id = "org.eclipse.jface.fieldassist.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.fieldassist.images"
				}
			}
			exports += new Package package_org_eclipse_jface_images {
				__id = "org.eclipse.jface.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.images"
				}
			}
			exports += new Package package_org_eclipse_jface_internal {
				__id = "org.eclipse.jface.internal"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_provisional_action {
				__id = "org.eclipse.jface.internal.provisional.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.provisional.action"
				}
			}
			exports += new Package package_org_eclipse_jface_layout {
				__id = "org.eclipse.jface.layout"
				identifier = new PlatformID {
					value = "org.eclipse.jface.layout"
				}
			}
			exports += new Package package_org_eclipse_jface_menus {
				__id = "org.eclipse.jface.menus"
				identifier = new PlatformID {
					value = "org.eclipse.jface.menus"
				}
			}
			exports += new Package package_org_eclipse_jface_operation {
				__id = "org.eclipse.jface.operation"
				identifier = new PlatformID {
					value = "org.eclipse.jface.operation"
				}
			}
			exports += new Package package_org_eclipse_jface_preference {
				__id = "org.eclipse.jface.preference"
				identifier = new PlatformID {
					value = "org.eclipse.jface.preference"
				}
			}
			exports += new Package package_org_eclipse_jface_preference_images {
				__id = "org.eclipse.jface.preference.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.preference.images"
				}
			}
			exports += new Package package_org_eclipse_jface_resource {
				__id = "org.eclipse.jface.resource"
				identifier = new PlatformID {
					value = "org.eclipse.jface.resource"
				}
			}
			exports += new Package package_org_eclipse_jface_util {
				__id = "org.eclipse.jface.util"
				identifier = new PlatformID {
					value = "org.eclipse.jface.util"
				}
			}
			exports += new Package package_org_eclipse_jface_viewers {
				__id = "org.eclipse.jface.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.viewers"
				}
			}
			exports += new Package package_org_eclipse_jface_viewers_deferred {
				__id = "org.eclipse.jface.viewers.deferred"
				identifier = new PlatformID {
					value = "org.eclipse.jface.viewers.deferred"
				}
			}
			exports += new Package package_org_eclipse_jface_window {
				__id = "org.eclipse.jface.window"
				identifier = new PlatformID {
					value = "org.eclipse.jface.window"
				}
			}
			exports += new Package package_org_eclipse_jface_wizard {
				__id = "org.eclipse.jface.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.jface.wizard"
				}
			}
			exports += new Package package_org_eclipse_jface_wizard_images {
				__id = "org.eclipse.jface.wizard.images"
				identifier = new PlatformID {
					value = "org.eclipse.jface.wizard.images"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_jface_databinding {
			__id = "org.eclipse.jface.databinding"
			identifier = new PlatformID {
				value = "org.eclipse.jface.databinding"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.1.M20090826-0800"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_databinding
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_databinding
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_databinding
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_databinding
				target = plugin_org_eclipse_core_databinding_observable
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_databinding
				target = plugin_org_eclipse_core_databinding_property
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_databinding
				target = plugin_org_eclipse_core_databinding
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_jface_databinding_dialog {
				__id = "org.eclipse.jface.databinding.dialog"
				identifier = new PlatformID {
					value = "org.eclipse.jface.databinding.dialog"
				}
			}
			exports += new Package package_org_eclipse_jface_databinding_preference {
				__id = "org.eclipse.jface.databinding.preference"
				identifier = new PlatformID {
					value = "org.eclipse.jface.databinding.preference"
				}
			}
			exports += new Package package_org_eclipse_jface_databinding_swt {
				__id = "org.eclipse.jface.databinding.swt"
				identifier = new PlatformID {
					value = "org.eclipse.jface.databinding.swt"
				}
			}
			exports += new Package package_org_eclipse_jface_databinding_viewers {
				__id = "org.eclipse.jface.databinding.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.databinding.viewers"
				}
			}
			exports += new Package package_org_eclipse_jface_databinding_wizard {
				__id = "org.eclipse.jface.databinding.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.jface.databinding.wizard"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_databinding_provisional_fieldassist {
				__id = "org.eclipse.jface.internal.databinding.provisional.fieldassist"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.databinding.provisional.fieldassist"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_databinding_provisional_swt {
				__id = "org.eclipse.jface.internal.databinding.provisional.swt"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.databinding.provisional.swt"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_databinding_provisional_viewers {
				__id = "org.eclipse.jface.internal.databinding.provisional.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.databinding.provisional.viewers"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_databinding_swt {
				__id = "org.eclipse.jface.internal.databinding.swt"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.databinding.swt"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_databinding_util {
				__id = "org.eclipse.jface.internal.databinding.util"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.databinding.util"
				}
			}
			exports += new Package package_org_eclipse_jface_internal_databinding_viewers {
				__id = "org.eclipse.jface.internal.databinding.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.internal.databinding.viewers"
				}
			}
			exports += new Package package_org_eclipse_jface_databinding_util {
				__id = "org.eclipse.jface.databinding.util"
				identifier = new PlatformID {
					value = "org.eclipse.jface.databinding.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jface_databinding
				target = package_com_ibm_icu_text
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui {
			__id = "org.eclipse.ui"
			identifier = new PlatformID {
				value = "org.eclipse.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.M20090902-1000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui
				target = plugin_org_eclipse_ui_workbench
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_ui_internal {
				__id = "org.eclipse.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ui_workbench {
			__id = "org.eclipse.ui.workbench"
			identifier = new PlatformID {
				value = "org.eclipse.ui.workbench"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.M20090826-0800a"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_jface_databinding
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_core_databinding_property
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = plugin_org_eclipse_core_databinding_observable
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_ui {
				__id = "org.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_ui_about {
				__id = "org.eclipse.ui.about"
				identifier = new PlatformID {
					value = "org.eclipse.ui.about"
				}
			}
			exports += new Package package_org_eclipse_ui_actions {
				__id = "org.eclipse.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_activities {
				__id = "org.eclipse.ui.activities"
				identifier = new PlatformID {
					value = "org.eclipse.ui.activities"
				}
			}
			exports += new Package package_org_eclipse_ui_application {
				__id = "org.eclipse.ui.application"
				identifier = new PlatformID {
					value = "org.eclipse.ui.application"
				}
			}
			exports += new Package package_org_eclipse_ui_branding {
				__id = "org.eclipse.ui.branding"
				identifier = new PlatformID {
					value = "org.eclipse.ui.branding"
				}
			}
			exports += new Package package_org_eclipse_ui_browser {
				__id = "org.eclipse.ui.browser"
				identifier = new PlatformID {
					value = "org.eclipse.ui.browser"
				}
			}
			exports += new Package package_org_eclipse_ui_commands {
				__id = "org.eclipse.ui.commands"
				identifier = new PlatformID {
					value = "org.eclipse.ui.commands"
				}
			}
			exports += new Package package_org_eclipse_ui_contexts {
				__id = "org.eclipse.ui.contexts"
				identifier = new PlatformID {
					value = "org.eclipse.ui.contexts"
				}
			}
			exports += new Package package_org_eclipse_ui_databinding {
				__id = "org.eclipse.ui.databinding"
				identifier = new PlatformID {
					value = "org.eclipse.ui.databinding"
				}
			}
			exports += new Package package_org_eclipse_ui_dialogs {
				__id = "org.eclipse.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_ui_dnd {
				__id = "org.eclipse.ui.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.ui.dnd"
				}
			}
			exports += new Package package_org_eclipse_ui_fieldassist {
				__id = "org.eclipse.ui.fieldassist"
				identifier = new PlatformID {
					value = "org.eclipse.ui.fieldassist"
				}
			}
			exports += new Package package_org_eclipse_ui_handlers {
				__id = "org.eclipse.ui.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.handlers"
				}
			}
			exports += new Package package_org_eclipse_ui_help {
				__id = "org.eclipse.ui.help"
				identifier = new PlatformID {
					value = "org.eclipse.ui.help"
				}
			}
			exports += new Package package_org_eclipse_ui_internal {
				__id = "org.eclipse.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_ui_ide {
				__id = "org.eclipse.ui.ide"
				identifier = new PlatformID {
					value = "org.eclipse.ui.ide"
				}
			}
			exports += new Package package_org_eclipse_ui_presentations_r21_ {
				__id = "org.eclipse.ui.presentations.r21'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.presentations.r21'"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_about {
				__id = "org.eclipse.ui.internal.about"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.about"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_actions {
				__id = "org.eclipse.ui.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_activities {
				__id = "org.eclipse.ui.internal.activities"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.activities"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_activities_ws {
				__id = "org.eclipse.ui.internal.activities.ws"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.activities.ws"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_application {
				__id = "org.eclipse.ui.internal.application"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.application"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_browser {
				__id = "org.eclipse.ui.internal.browser"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.browser"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_commands {
				__id = "org.eclipse.ui.internal.commands"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.commands"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_contexts {
				__id = "org.eclipse.ui.internal.contexts"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.contexts"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_decorators {
				__id = "org.eclipse.ui.internal.decorators"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.decorators"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_dialogs {
				__id = "org.eclipse.ui.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_dnd {
				__id = "org.eclipse.ui.internal.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.dnd"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_editorsupport {
				__id = "org.eclipse.ui.internal.editorsupport"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.editorsupport"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_expressions {
				__id = "org.eclipse.ui.internal.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.expressions"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_handlers {
				__id = "org.eclipse.ui.internal.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.handlers"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_help {
				__id = "org.eclipse.ui.internal.help"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.help"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_intro {
				__id = "org.eclipse.ui.internal.intro"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.intro"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_keys {
				__id = "org.eclipse.ui.internal.keys"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.keys"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_keys_model {
				__id = "org.eclipse.ui.internal.keys.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.keys.model"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_layout {
				__id = "org.eclipse.ui.internal.layout"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.layout"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_menus {
				__id = "org.eclipse.ui.internal.menus"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.menus"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_misc {
				__id = "org.eclipse.ui.internal.misc"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.misc"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_model {
				__id = "org.eclipse.ui.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.model"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_operations {
				__id = "org.eclipse.ui.internal.operations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.operations"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_part {
				__id = "org.eclipse.ui.internal.part"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.part"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_preferences {
				__id = "org.eclipse.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_presentations {
				__id = "org.eclipse.ui.internal.presentations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.presentations"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_presentations_classic {
				__id = "org.eclipse.ui.internal.presentations.classic"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.presentations.classic"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_presentations_defaultpresentation {
				__id = "org.eclipse.ui.internal.presentations.defaultpresentation"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.presentations.defaultpresentation"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_presentations_util {
				__id = "org.eclipse.ui.internal.presentations.util"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.presentations.util"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_progress {
				__id = "org.eclipse.ui.internal.progress"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.progress"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_provisional_application {
				__id = "org.eclipse.ui.internal.provisional.application"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.provisional.application"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_provisional_presentations {
				__id = "org.eclipse.ui.internal.provisional.presentations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.provisional.presentations"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_quickaccess {
				__id = "org.eclipse.ui.internal.quickaccess"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.quickaccess"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_registry {
				__id = "org.eclipse.ui.internal.registry"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.registry"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_services {
				__id = "org.eclipse.ui.internal.services"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.services"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_splash {
				__id = "org.eclipse.ui.internal.splash"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.splash"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_statushandlers {
				__id = "org.eclipse.ui.internal.statushandlers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.statushandlers"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_testing {
				__id = "org.eclipse.ui.internal.testing"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.testing"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_themes {
				__id = "org.eclipse.ui.internal.themes"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.themes"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_tweaklets {
				__id = "org.eclipse.ui.internal.tweaklets"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.tweaklets"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_util {
				__id = "org.eclipse.ui.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.util"
				}
			}
			exports += new Package package_org_eclipse_ui_ide_ {
				__id = "org.eclipse.ui.ide'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.ide'"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_wizards {
				__id = "org.eclipse.ui.internal.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.wizards"
				}
			}
			exports += new Package package_org_eclipse_ui_internal_wizards_preferences {
				__id = "org.eclipse.ui.internal.wizards.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.ui.internal.wizards.preferences"
				}
			}
			exports += new Package package_org_eclipse_ui_intro {
				__id = "org.eclipse.ui.intro"
				identifier = new PlatformID {
					value = "org.eclipse.ui.intro"
				}
			}
			exports += new Package package_org_eclipse_ui_keys {
				__id = "org.eclipse.ui.keys"
				identifier = new PlatformID {
					value = "org.eclipse.ui.keys"
				}
			}
			exports += new Package package_org_eclipse_ui_menus {
				__id = "org.eclipse.ui.menus"
				identifier = new PlatformID {
					value = "org.eclipse.ui.menus"
				}
			}
			exports += new Package package_org_eclipse_ui_model {
				__id = "org.eclipse.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.ui.model"
				}
			}
			exports += new Package package_org_eclipse_ui_operations {
				__id = "org.eclipse.ui.operations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.operations"
				}
			}
			exports += new Package package_org_eclipse_ui_part {
				__id = "org.eclipse.ui.part"
				identifier = new PlatformID {
					value = "org.eclipse.ui.part"
				}
			}
			exports += new Package package_org_eclipse_ui_plugin {
				__id = "org.eclipse.ui.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.ui.plugin"
				}
			}
			exports += new Package package_org_eclipse_ui_preferences {
				__id = "org.eclipse.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_ui_presentations {
				__id = "org.eclipse.ui.presentations"
				identifier = new PlatformID {
					value = "org.eclipse.ui.presentations"
				}
			}
			exports += new Package package_org_eclipse_ui_progress {
				__id = "org.eclipse.ui.progress"
				identifier = new PlatformID {
					value = "org.eclipse.ui.progress"
				}
			}
			exports += new Package package_org_eclipse_ui_services {
				__id = "org.eclipse.ui.services"
				identifier = new PlatformID {
					value = "org.eclipse.ui.services"
				}
			}
			exports += new Package package_org_eclipse_ui_splash {
				__id = "org.eclipse.ui.splash"
				identifier = new PlatformID {
					value = "org.eclipse.ui.splash"
				}
			}
			exports += new Package package_org_eclipse_ui_statushandlers {
				__id = "org.eclipse.ui.statushandlers"
				identifier = new PlatformID {
					value = "org.eclipse.ui.statushandlers"
				}
			}
			exports += new Package package_org_eclipse_ui_swt {
				__id = "org.eclipse.ui.swt"
				identifier = new PlatformID {
					value = "org.eclipse.ui.swt"
				}
			}
			exports += new Package package_org_eclipse_ui_testing {
				__id = "org.eclipse.ui.testing"
				identifier = new PlatformID {
					value = "org.eclipse.ui.testing"
				}
			}
			exports += new Package package_org_eclipse_ui_themes {
				__id = "org.eclipse.ui.themes"
				identifier = new PlatformID {
					value = "org.eclipse.ui.themes"
				}
			}
			exports += new Package package_org_eclipse_ui_views {
				__id = "org.eclipse.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.ui.views"
				}
			}
			exports += new Package package_org_eclipse_ui_wizards {
				__id = "org.eclipse.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.ui.wizards"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = package_com_ibm_icu_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ui_workbench
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_update_configurator {
			__id = "org.eclipse.update.configurator"
			identifier = new PlatformID {
				value = "org.eclipse.update.configurator"
			}
			state = : "State.active"
			version = new Version {
				value = "3.3.0.v20090312"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_configurator
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_configurator
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_update_configurator {
				__id = "org.eclipse.update.configurator"
				identifier = new PlatformID {
					value = "org.eclipse.update.configurator"
				}
			}
			exports += new Package package_org_eclipse_update_internal_configurator {
				__id = "org.eclipse.update.internal.configurator"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.configurator"
				}
			}
			exports += new Package package_org_eclipse_update_internal_configurator_branding {
				__id = "org.eclipse.update.internal.configurator.branding"
				identifier = new PlatformID {
					value = "org.eclipse.update.internal.configurator.branding"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_configurator
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_configurator
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_configurator
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_update_configurator
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_simpleconfigurator {
			__id = "org.eclipse.equinox.simpleconfigurator"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.simpleconfigurator"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.101.R35x_v20090807-1100"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_internal_provisional_configurator {
				__id = "org.eclipse.equinox.internal.provisional.configurator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.configurator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_ {
				__id = "org.eclipse.equinox.p2.director'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_simpleconfigurator {
				__id = "org.eclipse.equinox.internal.simpleconfigurator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.simpleconfigurator"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_simpleconfigurator_console {
				__id = "org.eclipse.equinox.internal.simpleconfigurator.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.simpleconfigurator.console"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_simpleconfigurator_utils {
				__id = "org.eclipse.equinox.internal.simpleconfigurator.utils"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.simpleconfigurator.utils"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator
				target = package_org_eclipse_osgi_framework_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator
				target = package_org_osgi_service_startlevel
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_swt_gtk_linux_x86 {
			__id = "org.eclipse.swt.gtk.linux.x86"
			identifier = new PlatformID {
				value = "org.eclipse.swt.gtk.linux.x86"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.v3555a"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_eclipse_swt_internal_accessibility_gtk {
				__id = "org.eclipse.swt.internal.accessibility.gtk"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.accessibility.gtk"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_cairo {
				__id = "org.eclipse.swt.internal.cairo"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.cairo"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_cde {
				__id = "org.eclipse.swt.internal.cde"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.cde"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_gnome {
				__id = "org.eclipse.swt.internal.gnome"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.gnome"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_gtk {
				__id = "org.eclipse.swt.internal.gtk"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.gtk"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_mozilla {
				__id = "org.eclipse.swt.internal.mozilla"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.mozilla"
				}
			}
			exports += new Package package_org_eclipse_swt_internal_opengl_glx {
				__id = "org.eclipse.swt.internal.opengl.glx"
				identifier = new PlatformID {
					value = "org.eclipse.swt.internal.opengl.glx"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_rcp {
			__id = "org.eclipse.rcp"
			identifier = new PlatformID {
				value = "org.eclipse.rcp"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.v200909170800"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_core_contenttype {
			__id = "org.eclipse.core.contenttype"
			identifier = new PlatformID {
				value = "org.eclipse.core.contenttype"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.1.R35x_v20090826-0451"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = plugin_org_eclipse_equinox_preferences
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_content {
				__id = "org.eclipse.core.internal.content"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.content"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_content {
				__id = "org.eclipse.core.runtime.content"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.content"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_org_eclipse_osgi_service_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_org_osgi_util_tracker
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_org_xml_sax_ext
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_core_contenttype
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_app {
			__id = "org.eclipse.equinox.app"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.app"
			}
			state = : "State.active"
			version = new Version {
				value = "1.2.0.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_app {
				__id = "org.eclipse.equinox.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.app"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_app {
				__id = "org.eclipse.equinox.internal.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.app"
				}
			}
			exports += new Package package_org_osgi_service_application {
				__id = "org.osgi.service.application"
				identifier = new PlatformID {
					value = "org.osgi.service.application"
				}
				version = new Version {
					value = "1.1"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_framework_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_framework_log
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_service_datalocation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_service_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_service_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1"
				maxVersion = "1.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_service_runnable
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_storagemanager
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3"
				maxVersion = "1.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_osgi_service_condpermadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_osgi_service_event
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2"
				maxVersion = "1.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_app
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_common {
			__id = "org.eclipse.equinox.common"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.common"
			}
			state = : "State.active"
			version = new Version {
				value = "3.5.1.R35x_v20090807-1100"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_core_internal_boot {
				__id = "org.eclipse.core.internal.boot"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.boot"
				}
			}
			exports += new Package package_org_eclipse_pde_build_ {
				__id = "org.eclipse.pde.build'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.build'"
				}
			}
			exports += new Package package_org_eclipse_core_internal_runtime {
				__id = "org.eclipse.core.internal.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.runtime"
				}
			}
			exports += new Package package_org_eclipse_equinox_preferences {
				__id = "org.eclipse.equinox.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.preferences"
				}
			}
			exports += new Package package_org_eclipse_equinox_registry {
				__id = "org.eclipse.equinox.registry"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.registry"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_compatibility {
				__id = "org.eclipse.core.runtime.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.compatibility"
				}
			}
			exports += new Package package_org_eclipse_core_filesystem {
				__id = "org.eclipse.core.filesystem"
				identifier = new PlatformID {
					value = "org.eclipse.core.filesystem"
				}
			}
			exports += new Package package_org_eclipse_equinox_security_ {
				__id = "org.eclipse.equinox.security'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.security'"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
				version = new Version {
					value = "3.4.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_eclipse_osgi_framework_log
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_eclipse_osgi_service_datalocation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_eclipse_osgi_service_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_eclipse_osgi_service_localization
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_eclipse_osgi_service_urlconversion
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_osgi_service_url
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_osgi_service_packageadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_common
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_ds {
			__id = "org.eclipse.equinox.ds"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.ds"
			}
			state = : "State.active"
			version = new Version {
				value = "1.1.1.R35x_v20090806"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_internal_ds {
				__id = "org.eclipse.equinox.internal.ds"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.ds"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_ds_impl {
				__id = "org.eclipse.equinox.internal.ds.impl"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.ds.impl"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_ds_model {
				__id = "org.eclipse.equinox.internal.ds.model"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.ds.model"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_ds_storage_file {
				__id = "org.eclipse.equinox.internal.ds.storage.file"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.ds.storage.file"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_io {
				__id = "org.eclipse.equinox.internal.util.io"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.io"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_xml {
				__id = "org.eclipse.equinox.internal.util.xml"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.xml"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_xml_impl {
				__id = "org.eclipse.equinox.internal.util.xml.impl"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.xml.impl"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_string {
				__id = "org.eclipse.equinox.internal.util.string"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.string"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_equinox_internal_util_event
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_equinox_internal_util_hash
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_equinox_internal_util_pool
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_equinox_internal_util_ref
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_equinox_internal_util_threadpool
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_equinox_internal_util_timer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_osgi_framework_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_osgi_service_debug
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3"
				maxVersion = "1.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_osgi_service_cm
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2"
				maxVersion = "1.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_osgi_service_component
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1"
				maxVersion = "1.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_osgi_service_metatype
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1"
				maxVersion = "1.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_ds
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3"
				maxVersion = "1.3"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_util {
			__id = "org.eclipse.equinox.util"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.util"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_internal_util {
				__id = "org.eclipse.equinox.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_event {
				__id = "org.eclipse.equinox.internal.util.event"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.event"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_hash {
				__id = "org.eclipse.equinox.internal.util.hash"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.hash"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_wireadmin_ {
				__id = "org.eclipse.equinox.wireadmin'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.wireadmin'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_impl_tpt {
				__id = "org.eclipse.equinox.internal.util.impl.tpt"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.impl.tpt"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_impl_tpt_threadpool {
				__id = "org.eclipse.equinox.internal.util.impl.tpt.threadpool"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.impl.tpt.threadpool"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_impl_tpt_timer {
				__id = "org.eclipse.equinox.internal.util.impl.tpt.timer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.impl.tpt.timer"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_pool {
				__id = "org.eclipse.equinox.internal.util.pool"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.pool"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_ref {
				__id = "org.eclipse.equinox.internal.util.ref"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.ref"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_ip {
				__id = "org.eclipse.equinox.ip"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.ip"
				}
			}
			exports += new Package package_org_eclipse_equinox_wireadmin_ {
				__id = "org.eclipse.equinox.wireadmin'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.wireadmin'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_security {
				__id = "org.eclipse.equinox.internal.util.security"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.security"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_threadpool {
				__id = "org.eclipse.equinox.internal.util.threadpool"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.threadpool"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_util_timer {
				__id = "org.eclipse.equinox.internal.util.timer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.util.timer"
				}
				version = new Version {
					value = "1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_util
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3"
				maxVersion = "1.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_util
				target = package_org_osgi_service_cm
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0"
				maxVersion = "1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_util
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_util
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2"
				maxVersion = "1.2"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_preferences {
			__id = "org.eclipse.equinox.preferences"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.preferences"
			}
			state = : "State.active"
			version = new Version {
				value = "3.2.300.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_preferences {
				__id = "org.eclipse.core.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine_ {
				__id = "org.eclipse.equinox.p2.engine'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine'"
				}
			}
			exports += new Package package_org_eclipse_core_internal_preferences_exchange {
				__id = "org.eclipse.core.internal.preferences.exchange"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.preferences.exchange"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_preferences {
				__id = "org.eclipse.core.runtime.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.preferences"
				}
				version = new Version {
					value = "3.2.0"
				}
			}
			exports += new Package package_org_osgi_service_prefs {
				__id = "org.osgi.service.prefs"
				identifier = new PlatformID {
					value = "org.osgi.service.prefs"
				}
				version = new Version {
					value = "1.1.1"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_eclipse_osgi_framework_log
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_eclipse_osgi_service_datalocation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_eclipse_osgi_service_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_eclipse_osgi_service_environment
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_osgi_service_packageadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_preferences
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_registry {
			__id = "org.eclipse.equinox.registry"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.registry"
			}
			state = : "State.active"
			version = new Version {
				value = "3.4.100.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_core_internal_adapter {
				__id = "org.eclipse.core.internal.adapter"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.adapter"
				}
			}
			exports += new Package package_org_eclipse_core_internal_registry {
				__id = "org.eclipse.core.internal.registry"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.registry"
				}
			}
			exports += new Package package_org_eclipse_core_internal_registry_osgi {
				__id = "org.eclipse.core.internal.registry.osgi"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.registry.osgi"
				}
			}
			exports += new Package package_org_eclipse_core_internal_registry_spi {
				__id = "org.eclipse.core.internal.registry.spi"
				identifier = new PlatformID {
					value = "org.eclipse.core.internal.registry.spi"
				}
			}
			exports += new Package package_org_eclipse_core_runtime {
				__id = "org.eclipse.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime"
				}
				version = new Version {
					value = "3.4.0"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_dynamichelpers {
				__id = "org.eclipse.core.runtime.dynamichelpers"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.dynamichelpers"
				}
				version = new Version {
					value = "3.4.0"
				}
			}
			exports += new Package package_org_eclipse_core_runtime_spi {
				__id = "org.eclipse.core.runtime.spi"
				identifier = new PlatformID {
					value = "org.eclipse.core.runtime.spi"
				}
				version = new Version {
					value = "3.4.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_osgi_framework_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_osgi_service_datalocation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_osgi_service_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_osgi_service_environment
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_osgi_service_resolver
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_osgi_storagemanager
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_osgi_service_packageadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_osgi_util_tracker
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_registry
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_launcher {
			__id = "org.eclipse.equinox.launcher"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.launcher"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.201.R35x_v20090715"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_core_launcher {
				__id = "org.eclipse.core.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.core.launcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_launcher {
				__id = "org.eclipse.equinox.internal.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.launcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_launcher {
				__id = "org.eclipse.equinox.launcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.launcher"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_launcher_gtk_linux_x86 {
			__id = "org.eclipse.equinox.launcher.gtk.linux.x86"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.launcher.gtk.linux.x86"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.200.v20090520"
			}
			vendor = vendor_Eclipse_org___Equinox
		}
	}

	features += new Feature feature_org_eclipse_m2m_qvt_oml {
		__id = "org.eclipse.m2m.qvt.oml"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.qvt.oml"
		}
		version = new Version {
			value = "2.0.1.v20090722-1630-78-0AkF77g7VCP3B_OE"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Operational QVT compiler and builder "
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_ocl {
			__id = "org.eclipse.m2m.qvt.oml.ocl"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.ocl"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090526-1940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ocl
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ocl
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ocl
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ocl {
				__id = "org.eclipse.m2m.internal.qvt.oml.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ocl"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ocl_metainfo {
				__id = "org.eclipse.m2m.internal.qvt.oml.ocl.metainfo"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ocl.metainfo"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ocl_transformations {
				__id = "org.eclipse.m2m.internal.qvt.oml.ocl.transformations"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ocl.transformations"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml {
			__id = "org.eclipse.m2m.qvt.oml"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.1.v20090901-1357"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_emf_ecore_change
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_m2m_qvt_oml_cst_parser
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = plugin_org_eclipse_m2m_qvt_oml_ecore_imperativeocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel___www_eclipse_org_m2m_qvt_operational_trace_ecore {
				__id = "__www_eclipse_org_m2m_qvt_operational_trace_ecore"
				identifier = new PlatformID {
					value = "__www_eclipse_org_m2m_qvt_operational_trace_ecore"
				}
				locator = new EFSLocator {
					value = "http:///www.eclipse.org/m2m/qvt/operational/trace.ecore"
				}
			}
				ownedEntities += new Service service_conformsTo___www_eclipse_org_m2m_qvt_operational_trace_ecore {
					__id = "conformsTo___www_eclipse_org_m2m_qvt_operational_trace_ecore"
					identifier = new PlatformID {
						value = "conformsTo___www_eclipse_org_m2m_qvt_operational_trace_ecore"
					}
					locator = new EFSLocator {
						value = "http:///www.eclipse.org/m2m/qvt/operational/trace.ecore.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_qvt_1_0_0_Operational_Expressions {
				__id = "_www_eclipse_org_qvt_1_0_0_Operational_Expressions"
				identifier = new PlatformID {
					value = "_www_eclipse_org_qvt_1_0_0_Operational_Expressions"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/qvt/1.0.0/Operational/Expressions"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_qvt_1_0_0_Operational_Expressions {
					__id = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_Expressions"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_qvt_1_0_0_Operational_Expressions"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/qvt/1.0.0/Operational/Expressions.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml {
				__id = "org.eclipse.m2m.internal.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime {
				__id = "org.eclipse.m2m.qvt.oml.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ui {
				__id = "org.eclipse.m2m.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ui {
				__id = "org.eclipse.m2m.tests.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ast_binding {
				__id = "org.eclipse.m2m.internal.qvt.oml.ast.binding"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ast.binding"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ocl_ {
				__id = "org.eclipse.m2m.qvt.oml.ocl'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ocl'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ast_env {
				__id = "org.eclipse.m2m.internal.qvt.oml.ast.env"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ast.env"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ocl {
				__id = "org.eclipse.m2m.qvt.oml.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ocl"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_ast_parser {
				__id = "org.eclipse.m2m.internal.qvt.oml.ast.parser"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.ast.parser"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime_ui {
				__id = "org.eclipse.m2m.qvt.oml.runtime.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ocl {
				__id = "org.eclipse.m2m.qvt.oml.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ocl"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_blackbox {
				__id = "org.eclipse.m2m.internal.qvt.oml.blackbox"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.blackbox"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_compiler {
				__id = "org.eclipse.m2m.internal.qvt.oml.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.compiler"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime {
				__id = "org.eclipse.m2m.qvt.oml.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime_ui {
				__id = "org.eclipse.m2m.qvt.oml.runtime.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_project {
				__id = "org.eclipse.m2m.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ui_ {
				__id = "org.eclipse.m2m.tests.qvt.oml.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml.ui'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_cst_adapters {
				__id = "org.eclipse.m2m.internal.qvt.oml.cst.adapters"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.cst.adapters"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_evaluator {
				__id = "org.eclipse.m2m.internal.qvt.oml.evaluator"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.evaluator"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_evaluator_iterators {
				__id = "org.eclipse.m2m.internal.qvt.oml.evaluator.iterators"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.evaluator.iterators"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_expressions {
				__id = "org.eclipse.m2m.internal.qvt.oml.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.expressions"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime_ui {
				__id = "org.eclipse.m2m.qvt.oml.runtime.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_trace_edit {
				__id = "org.eclipse.m2m.qvt.oml.trace.edit"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.trace.edit"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ocl {
				__id = "org.eclipse.m2m.qvt.oml.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ocl"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_expressions_impl {
				__id = "org.eclipse.m2m.internal.qvt.oml.expressions.impl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.expressions.impl"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_expressions_util {
				__id = "org.eclipse.m2m.internal.qvt.oml.expressions.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.expressions.util"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_library {
				__id = "org.eclipse.m2m.internal.qvt.oml.library"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.library"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_stdlib {
				__id = "org.eclipse.m2m.internal.qvt.oml.stdlib"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.stdlib"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_trace {
				__id = "org.eclipse.m2m.internal.qvt.oml.trace"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.trace"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_runtime_ui {
				__id = "org.eclipse.m2m.qvt.oml.runtime.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.runtime.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_trace_edit_ {
				__id = "org.eclipse.m2m.qvt.oml.trace.edit'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.trace.edit'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_trace_util {
				__id = "org.eclipse.m2m.internal.qvt.oml.trace.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.trace.util"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml {
				__id = "org.eclipse.m2m.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_blackbox_java {
				__id = "org.eclipse.m2m.qvt.oml.blackbox.java"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.blackbox.java"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_util {
				__id = "org.eclipse.m2m.qvt.oml.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml
				target = package_com_ibm_icu_lang
				closure = : "IntervalClosure.includeExclude"
				minVersion = "4.0.0"
				maxVersion = "5.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_cst_parser {
			__id = "org.eclipse.m2m.qvt.oml.cst.parser"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.cst.parser"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090526-1940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_cst_parser
				target = plugin_org_eclipse_ocl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_cst_parser
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_QVT2_1_0_0_Operational_cst {
				__id = "_www_eclipse_org_QVT2_1_0_0_Operational_cst"
				identifier = new PlatformID {
					value = "_www_eclipse_org_QVT2_1_0_0_Operational_cst"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/QVT2/1.0.0/Operational/cst"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_QVT2_1_0_0_Operational_cst {
					__id = "conformsTo__www_eclipse_org_QVT2_1_0_0_Operational_cst"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_QVT2_1_0_0_Operational_cst"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/QVT2/1.0.0/Operational/cst.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_QVT2_1_0_0_Operational_cst_temp {
				__id = "_www_eclipse_org_QVT2_1_0_0_Operational_cst_temp"
				identifier = new PlatformID {
					value = "_www_eclipse_org_QVT2_1_0_0_Operational_cst_temp"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/QVT2/1.0.0/Operational/cst/temp"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_QVT2_1_0_0_Operational_cst_temp {
					__id = "conformsTo__www_eclipse_org_QVT2_1_0_0_Operational_cst_temp"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_QVT2_1_0_0_Operational_cst_temp"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/QVT2/1.0.0/Operational/cst/temp.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_cst {
				__id = "org.eclipse.m2m.internal.qvt.oml.cst"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.cst"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_cst_parser {
				__id = "org.eclipse.m2m.internal.qvt.oml.cst.parser"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.cst.parser"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_cst_temp {
				__id = "org.eclipse.m2m.internal.qvt.oml.cst.temp"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.cst.temp"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_ecore_imperativeocl {
			__id = "org.eclipse.m2m.qvt.oml.ecore.imperativeocl"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.ecore.imperativeocl"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090515-1840"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ecore_imperativeocl
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ecore_imperativeocl
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_ecore_imperativeocl
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_qvt_1_0_ImperativeOCL {
				__id = "_www_eclipse_org_qvt_1_0_ImperativeOCL"
				identifier = new PlatformID {
					value = "_www_eclipse_org_qvt_1_0_ImperativeOCL"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/qvt/1.0/ImperativeOCL"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_qvt_1_0_ImperativeOCL {
					__id = "conformsTo__www_eclipse_org_qvt_1_0_ImperativeOCL"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_qvt_1_0_ImperativeOCL"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/qvt/1.0/ImperativeOCL.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ecore_ImperativeOCL {
				__id = "org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ecore_ImperativeOCL_impl {
				__id = "org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.impl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.impl"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ecore_ImperativeOCL_util {
				__id = "org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_cdo {
		__id = "org.eclipse.emf.cdo"
		identifier = new PlatformID {
			value = "org.eclipse.emf.cdo"
		}
		version = new Version {
			value = "0.7.1.v200610271316"
		}
		provider = vendor_Eclipse_org
		copyright = new Copyright {
			name = "_copyrightURL"
			text = "%copyright"
			locator = new URLLocator {
				value = "%copyrightURL"
			}
		}
		description = new Description {
			name = "description"
			text = "CDO Runtime"
		}
		plugins += new Plugin plugin_org_eclipse_emf_cdo {
			__id = "org.eclipse.emf.cdo"
			identifier = new PlatformID {
				value = "org.eclipse.emf.cdo"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.1.v200610271316"
			}
			vendor = vendor_Eclipse_org
		}
	}

	features += new Feature feature_org_eclipse_emf_ecoretools_doc {
		__id = "org.eclipse.emf.ecoretools.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ecoretools.doc"
		}
		version = new Version {
			value = "0.8.0.v200906221231"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 Anyware Technologies All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Ecore Tools Documentation (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_doc {
			__id = "org.eclipse.emf.ecoretools.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.ecoretools.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.ecoretools.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_doc
				target = plugin_org_eclipse_help
			}
		}
		sites += site__www_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_databinding {
		__id = "org.eclipse.emf.databinding"
		identifier = new PlatformID {
			value = "org.eclipse.emf.databinding"
		}
		version = new Version {
			value = "1.1.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Support for using EMF objects with JFace's data binding framework."
		}
		plugins += new Plugin plugin_org_eclipse_emf_databinding {
			__id = "org.eclipse.emf.databinding"
			identifier = new PlatformID {
				value = "org.eclipse.emf.databinding"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding
				target = plugin_org_eclipse_core_databinding
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_databinding
				target = plugin_org_eclipse_core_databinding_property
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_databinding {
				__id = "org.eclipse.emf.databinding"
				identifier = new PlatformID {
					value = "org.eclipse.emf.databinding"
				}
			}
			exports += new Package package_org_eclipse_emf_databinding_internal {
				__id = "org.eclipse.emf.databinding.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.databinding.internal"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xtext_sdk_source {
		__id = "org.eclipse.xtext.sdk.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtext.sdk.source"
		}
		version = new Version {
			value = "0.7.2.v200908120607"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Xtext SDK Source (Incubation) Feature"
		}
		plugins += new Plugin plugin_org_eclipse_xtext_sdk_source {
			__id = "org.eclipse.xtext.sdk.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.sdk.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_xpand {
		__id = "org.eclipse.xpand"
		identifier = new PlatformID {
			value = "org.eclipse.xpand"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Xpand (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xpand {
			__id = "org.eclipse.xpand"
			identifier = new PlatformID {
				value = "org.eclipse.xpand"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand
				target = plugin_org_eclipse_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xpand
				target = plugin_org_antlr_runtime
			}
			exports += new Package package_org_eclipse_xpand2 {
				__id = "org.eclipse.xpand2"
				identifier = new PlatformID {
					value = "org.eclipse.xpand2"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_ast {
				__id = "org.eclipse.internal.xpand2.ast"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.ast"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_codeassist {
				__id = "org.eclipse.internal.xpand2.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.codeassist"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_debug {
				__id = "org.eclipse.internal.xpand2.debug"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.debug"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_model {
				__id = "org.eclipse.internal.xpand2.model"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.model"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_parser {
				__id = "org.eclipse.internal.xpand2.parser"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.parser"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_pr {
				__id = "org.eclipse.internal.xpand2.pr"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.pr"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_pr_util {
				__id = "org.eclipse.internal.xpand2.pr.util"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.pr.util"
				}
			}
			exports += new Package package_org_eclipse_internal_xpand2_type {
				__id = "org.eclipse.internal.xpand2.type"
				identifier = new PlatformID {
					value = "org.eclipse.internal.xpand2.type"
				}
			}
			exports += new Package package_org_eclipse_xpand2_output {
				__id = "org.eclipse.xpand2.output"
				identifier = new PlatformID {
					value = "org.eclipse.xpand2.output"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_xtext_examples_source {
		__id = "org.eclipse.xtext.examples.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtext.examples.source"
		}
		version = new Version {
			value = "0.7.2.v200908120607"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Xtext Examples Source (Incubation) Feature"
		}
		plugins += new Plugin plugin_org_eclipse_xtext_examples_source {
			__id = "org.eclipse.xtext.examples.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.examples.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_mint {
		__id = "org.eclipse.emf.mint"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mint"
		}
		version = new Version {
			value = "0.8.0.v200906161513"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 Ecliptical Software Inc. and others. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Eclipse Modeling Framework Technologies (EMFT) - Mint Runtime (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mint {
			__id = "org.eclipse.emf.mint"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mint"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906161513"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_mint {
				__id = "org.eclipse.emf.mint"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_internal {
				__id = "org.eclipse.emf.mint.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_internal_genmodel {
				__id = "org.eclipse.emf.mint.internal.genmodel"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.internal.genmodel"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_util {
				__id = "org.eclipse.emf.mint.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_mint_ui {
			__id = "org.eclipse.emf.mint.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mint.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906161513"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_emf_mint
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[0.8.0-1.0.0)'"
				maxVersion = "'[0.8.0-1.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_ui_intro
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mint_ui
				target = plugin_org_eclipse_ui_intro_universal
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_mint_internal_ui {
				__id = "org.eclipse.emf.mint.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_internal_ui_actions {
				__id = "org.eclipse.emf.mint.internal.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.internal.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_internal_ui_filters {
				__id = "org.eclipse.emf.mint.internal.ui.filters"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.internal.ui.filters"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_internal_ui_search {
				__id = "org.eclipse.emf.mint.internal.ui.search"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.internal.ui.search"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_internal_ui_source {
				__id = "org.eclipse.emf.mint.internal.ui.source"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.internal.ui.source"
				}
			}
			exports += new Package package_org_eclipse_emf_mint_ui {
				__id = "org.eclipse.emf.mint.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mint.ui"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_uml2_examples {
		__id = "org.eclipse.uml2.examples"
		identifier = new PlatformID {
			value = "org.eclipse.uml2.examples"
		}
		version = new Version {
			value = "3.0.0.v200905041045"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2003, 2007 IBM Corporation, Embarcadero Technologies, and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Unified Modeling Language 2.x Examples"
		}
		plugins += new Plugin plugin_org_eclipse_uml2_examples {
			__id = "org.eclipse.uml2.examples"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.examples"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_uml2_examples_uml_ui {
			__id = "org.eclipse.uml2.examples.uml.ui"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.examples.uml.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_examples_uml_ui
				target = plugin_org_eclipse_uml2_uml_editor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_examples_uml_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_examples_uml_ui
				target = plugin_org_eclipse_emf_ecore_editor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_examples_uml_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_examples_uml_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_uml2_examples_uml_ui {
				__id = "org.eclipse.uml2.examples.uml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.examples.uml.ui"
				}
			}
			exports += new Package package_org_eclipse_uml2_examples_uml_ui_actions {
				__id = "org.eclipse.uml2.examples.uml.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.examples.uml.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_uml2_examples_uml_ui_dialogs {
				__id = "org.eclipse.uml2.examples.uml.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.examples.uml.ui.dialogs"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_uml2tools {
		__id = "org.eclipse.uml2tools"
		identifier = new PlatformID {
			value = "org.eclipse.uml2tools"
		}
		version = new Version {
			value = "0.9.0.v200906190654"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_copyrightURL"
			text = "%copyright"
			locator = new URLLocator {
				value = "%copyrightURL"
			}
		}
		description = new Description {
			name = "description"
			text = "UML2 Tools"
		}
		plugins += new Plugin plugin_org_eclipse_uml2tools {
			__id = "org.eclipse.uml2tools"
			identifier = new PlatformID {
				value = "org.eclipse.uml2tools"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_jet_source {
		__id = "org.eclipse.jet.source"
		identifier = new PlatformID {
			value = "org.eclipse.jet.source"
		}
		version = new Version {
			value = "1.0.2.v201001281539"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Java Emitter Templates (JET) component."
		}
		plugins += new Plugin plugin_org_eclipse_jet_source {
			__id = "org.eclipse.jet.source"
			identifier = new PlatformID {
				value = "org.eclipse.jet.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.1.v200908201022"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_gmf_tooling {
		__id = "org.eclipse.gmf.tooling"
		identifier = new PlatformID {
			value = "org.eclipse.gmf.tooling"
		}
		version = new Version {
			value = "2.2.0.v20090317-0630-7c7GFBXFLWUko2mHECQ9Cfd"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2008 Borland Software Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Graphical Modeling Framework Tooling"
		}
		plugins += new Plugin plugin_org_eclipse_gmf_common {
			__id = "org.eclipse.gmf.common"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.100.v20090420-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_emf_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_common
				target = plugin_org_eclipse_gmf_xpand
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_common {
				__id = "org.eclipse.gmf.common"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.common"
				}
			}
			exports += new Package package_org_eclipse_gmf_common_codegen {
				__id = "org.eclipse.gmf.common.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.common.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_codegen_dispatch {
				__id = "org.eclipse.gmf.internal.codegen.dispatch"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.codegen.dispatch"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_lite_ {
				__id = "org.eclipse.gmf.codegen.lite'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.lite'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_common {
				__id = "org.eclipse.gmf.internal.common"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.common"
				}
			}
			exports += new Package package_org_eclipse_gmf_map_edit {
				__id = "org.eclipse.gmf.map.edit"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.map.edit"
				}
			}
			exports += new Package package_org_eclipse_gmf_tooldef_edit {
				__id = "org.eclipse.gmf.tooldef.edit"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tooldef.edit"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_trace {
				__id = "org.eclipse.gmf.bridge.trace"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.trace"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui {
				__id = "org.eclipse.gmf.bridge.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge {
				__id = "org.eclipse.gmf.bridge"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge"
				}
			}
			exports += new Package package_org_eclipse_gmf_tests {
				__id = "org.eclipse.gmf.tests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tests"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui_dashboard {
				__id = "org.eclipse.gmf.bridge.ui.dashboard"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui.dashboard"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_ui {
				__id = "org.eclipse.gmf.codegen.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_lite_ui {
				__id = "org.eclipse.gmf.codegen.lite.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.lite.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen {
				__id = "org.eclipse.gmf.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_map {
				__id = "org.eclipse.gmf.map"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.map"
				}
			}
			exports += new Package package_org_eclipse_gmf_graphdef {
				__id = "org.eclipse.gmf.graphdef"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.graphdef"
				}
			}
			exports += new Package package_org_eclipse_gmf_tooldef_ {
				__id = "org.eclipse.gmf.tooldef'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tooldef'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_common_codegen {
				__id = "org.eclipse.gmf.internal.common.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.common.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge {
				__id = "org.eclipse.gmf.bridge"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_lite {
				__id = "org.eclipse.gmf.codegen.lite"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.lite"
				}
			}
			exports += new Package package_org_eclipse_gmf_tests {
				__id = "org.eclipse.gmf.tests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tests"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_ui {
				__id = "org.eclipse.gmf.codegen.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_lite_ui {
				__id = "org.eclipse.gmf.codegen.lite.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.lite.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_tests_lite {
				__id = "org.eclipse.gmf.tests.lite"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tests.lite"
				}
			}
			exports += new Package package_org_eclipse_gmf_graphdef_codegen_ui_ {
				__id = "org.eclipse.gmf.graphdef.codegen.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.graphdef.codegen.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_common_migrate {
				__id = "org.eclipse.gmf.internal.common.migrate"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.common.migrate"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen {
				__id = "org.eclipse.gmf.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_map {
				__id = "org.eclipse.gmf.map"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.map"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui {
				__id = "org.eclipse.gmf.bridge.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_graphdef_ {
				__id = "org.eclipse.gmf.graphdef'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.graphdef'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_common_reconcile {
				__id = "org.eclipse.gmf.internal.common.reconcile"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.common.reconcile"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui_ {
				__id = "org.eclipse.gmf.bridge.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_common_ui {
				__id = "org.eclipse.gmf.internal.common.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.common.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_codegen {
			__id = "org.eclipse.gmf.codegen"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.codegen"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.2.1.v20090812-1620"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_gmf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_gmf_validate
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_gmf_xpand
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2005_GenModel {
				__id = "_www_eclipse_org_gmf_2005_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2005_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2005/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2005_GenModel {
					__id = "conformsTo__www_eclipse_org_gmf_2005_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2005_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2005/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2005_GenModel_2_0 {
				__id = "_www_eclipse_org_gmf_2005_GenModel_2_0"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2005_GenModel_2_0"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2005/GenModel/2.0"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2005_GenModel_2_0 {
					__id = "conformsTo__www_eclipse_org_gmf_2005_GenModel_2_0"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2005_GenModel_2_0"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2005/GenModel/2.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2009_GenModel {
				__id = "_www_eclipse_org_gmf_2009_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2009_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2009/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2009_GenModel {
					__id = "conformsTo__www_eclipse_org_gmf_2009_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2009_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2009/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2006_GenModel {
				__id = "_www_eclipse_org_gmf_2006_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2006_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2006/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2006_GenModel {
					__id = "conformsTo__www_eclipse_org_gmf_2006_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2006_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2006/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2008_GenModel {
				__id = "_www_eclipse_org_gmf_2008_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2008_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2008/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2008_GenModel {
					__id = "conformsTo__www_eclipse_org_gmf_2008_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2008_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2008/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmf_codegen_gmfgen {
				__id = "org.eclipse.gmf.codegen.gmfgen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.gmfgen"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_gmfgen_impl {
				__id = "org.eclipse.gmf.codegen.gmfgen.impl"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.gmfgen.impl"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_gmfgen_util {
				__id = "org.eclipse.gmf.codegen.gmfgen.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.gmfgen.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_util {
				__id = "org.eclipse.gmf.codegen.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_codegen_util {
				__id = "org.eclipse.gmf.internal.codegen.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.codegen.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_tests_ {
				__id = "org.eclipse.gmf.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tests'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_codegen_edit {
			__id = "org.eclipse.gmf.codegen.edit"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.codegen.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.2.0.v20090416-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_gmf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_edit
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_codegen_gmfgen_presentation {
				__id = "org.eclipse.gmf.codegen.gmfgen.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.gmfgen.presentation"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_gmfgen_provider {
				__id = "org.eclipse.gmf.codegen.gmfgen.provider"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.gmfgen.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_codegen_ui {
			__id = "org.eclipse.gmf.codegen.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.codegen.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.100.v20090424-1042"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_gmf_bridge
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_gmf_bridge_ui_dashboard
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_gmf_codegen_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_gmf_graphdef_codegen_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_gmf_bridge_trace
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_gmf_bridge_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_codegen_ui
				target = plugin_org_eclipse_gmf_xpand
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			exports += new Package package_org_eclipse_gmf_internal_codegen {
				__id = "org.eclipse.gmf.internal.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_codegen_popup_actions {
				__id = "org.eclipse.gmf.internal.codegen.popup.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.codegen.popup.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_graphdef {
			__id = "org.eclipse.gmf.graphdef"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.graphdef"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.0.100.v20090420-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef
				target = plugin_org_eclipse_gmf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2006_GraphicalDefinition {
				__id = "_www_eclipse_org_gmf_2006_GraphicalDefinition"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2006_GraphicalDefinition"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2006/GraphicalDefinition"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2006_GraphicalDefinition {
					__id = "conformsTo__www_eclipse_org_gmf_2006_GraphicalDefinition"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2006_GraphicalDefinition"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2006/GraphicalDefinition.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2005_GraphicalDefinition {
				__id = "_www_eclipse_org_gmf_2005_GraphicalDefinition"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2005_GraphicalDefinition"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2005/GraphicalDefinition"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2005_GraphicalDefinition {
					__id = "conformsTo__www_eclipse_org_gmf_2005_GraphicalDefinition"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2005_GraphicalDefinition"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2005/GraphicalDefinition.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmf_gmfgraph {
				__id = "org.eclipse.gmf.gmfgraph"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.gmfgraph"
				}
			}
			exports += new Package package_org_eclipse_gmf_gmfgraph_impl {
				__id = "org.eclipse.gmf.gmfgraph.impl"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.gmfgraph.impl"
				}
			}
			exports += new Package package_org_eclipse_gmf_gmfgraph_util {
				__id = "org.eclipse.gmf.gmfgraph.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.gmfgraph.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_graphdef_util {
				__id = "org.eclipse.gmf.internal.graphdef.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.graphdef.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_graphdef_edit {
			__id = "org.eclipse.gmf.graphdef.edit"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.graphdef.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.200.v20090216-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_edit
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_edit
				target = plugin_org_eclipse_gmf_graphdef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_edit
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_edit
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_edit
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_gmfgraph_presentation {
				__id = "org.eclipse.gmf.gmfgraph.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.gmfgraph.presentation"
				}
			}
			exports += new Package package_org_eclipse_gmf_gmfgraph_provider {
				__id = "org.eclipse.gmf.gmfgraph.provider"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.gmfgraph.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_map {
			__id = "org.eclipse.gmf.map"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.map"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.2.0.v20090520-1343"
			}
			vendor = vendor_providerName
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map
				target = plugin_org_eclipse_gmf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map
				target = plugin_org_eclipse_gmf_graphdef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map
				target = plugin_org_eclipse_gmf_tooldef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map
				target = plugin_org_eclipse_gmf_validate
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2005_mappings {
				__id = "_www_eclipse_org_gmf_2005_mappings"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2005_mappings"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2005/mappings"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2005_mappings {
					__id = "conformsTo__www_eclipse_org_gmf_2005_mappings"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2005_mappings"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2005/mappings.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2005_mappings_2_0 {
				__id = "_www_eclipse_org_gmf_2005_mappings_2_0"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2005_mappings_2_0"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2005/mappings/2.0"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2005_mappings_2_0 {
					__id = "conformsTo__www_eclipse_org_gmf_2005_mappings_2_0"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2005_mappings_2_0"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2005/mappings/2.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2006_mappings {
				__id = "_www_eclipse_org_gmf_2006_mappings"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2006_mappings"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2006/mappings"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2006_mappings {
					__id = "conformsTo__www_eclipse_org_gmf_2006_mappings"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2006_mappings"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2006/mappings.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2008_mappings {
				__id = "_www_eclipse_org_gmf_2008_mappings"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2008_mappings"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2008/mappings"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2008_mappings {
					__id = "conformsTo__www_eclipse_org_gmf_2008_mappings"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2008_mappings"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2008/mappings.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmf_internal_map_util {
				__id = "org.eclipse.gmf.internal.map.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.map.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_mappings {
				__id = "org.eclipse.gmf.mappings"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.mappings"
				}
			}
			exports += new Package package_org_eclipse_gmf_mappings_impl {
				__id = "org.eclipse.gmf.mappings.impl"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.mappings.impl"
				}
			}
			exports += new Package package_org_eclipse_gmf_mappings_util {
				__id = "org.eclipse.gmf.mappings.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.mappings.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_map_edit {
			__id = "org.eclipse.gmf.map.edit"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.map.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.2.0.v20090114-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_gmf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_gmf_map
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_gmf_graphdef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_gmf_tooldef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_map_edit
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_mappings_presentation {
				__id = "org.eclipse.gmf.mappings.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.mappings.presentation"
				}
			}
			exports += new Package package_org_eclipse_gmf_mappings_provider {
				__id = "org.eclipse.gmf.mappings.provider"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.mappings.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_bridge {
			__id = "org.eclipse.gmf.bridge"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.bridge"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v20090528-1000"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_gmf_map
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_gmf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_gmf_graphdef_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge {
				__id = "org.eclipse.gmf.internal.bridge"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_ui {
				__id = "org.eclipse.gmf.codegen.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui_ {
				__id = "org.eclipse.gmf.bridge.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_genmodel {
				__id = "org.eclipse.gmf.internal.bridge.genmodel"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.genmodel"
				}
			}
			exports += new Package package_org_eclipse_gmf_tests_lite {
				__id = "org.eclipse.gmf.tests.lite"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tests.lite"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui_ {
				__id = "org.eclipse.gmf.bridge.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_naming {
				__id = "org.eclipse.gmf.internal.bridge.naming"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.naming"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_naming_gen {
				__id = "org.eclipse.gmf.internal.bridge.naming.gen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.naming.gen"
				}
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui_ {
				__id = "org.eclipse.gmf.bridge.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_bridge_ui {
			__id = "org.eclipse.gmf.bridge.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.bridge.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.1.v20090812-1620"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_jdt_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_gmf_bridge
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_gmf_graphdef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_gmf_tooldef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_gmf_map_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui
				target = plugin_org_eclipse_m2m_qvt_oml_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_resolver {
				__id = "org.eclipse.gmf.internal.bridge.resolver"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.resolver"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_transform {
				__id = "org.eclipse.gmf.internal.bridge.transform"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.transform"
				}
			}
			exports += new Package package_org_eclipse_gmf_tests {
				__id = "org.eclipse.gmf.tests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tests"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_lite_ui_ {
				__id = "org.eclipse.gmf.codegen.lite.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.lite.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_ui {
				__id = "org.eclipse.gmf.internal.bridge.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_ui_ {
				__id = "org.eclipse.gmf.codegen.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_wizards {
				__id = "org.eclipse.gmf.internal.bridge.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.wizards"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_ui_ {
				__id = "org.eclipse.gmf.codegen.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_wizards_pages {
				__id = "org.eclipse.gmf.internal.bridge.wizards.pages"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.wizards.pages"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_wizards_pages_simple {
				__id = "org.eclipse.gmf.internal.bridge.wizards.pages.simple"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.wizards.pages.simple"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_wizards_strategy {
				__id = "org.eclipse.gmf.internal.bridge.wizards.strategy"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.wizards.strategy"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_bridge_ui_dashboard {
			__id = "org.eclipse.gmf.bridge.ui.dashboard"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.bridge.ui.dashboard"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090114-0940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_emf_ecore_editor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_gmf_graphdef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_gmf_tooldef_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_gmf_map_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_gmf_codegen_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_ui_dashboard
				target = plugin_org_eclipse_gmf_bridge_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_bridge_ui_dashboard {
				__id = "org.eclipse.gmf.bridge.ui.dashboard"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.bridge.ui.dashboard"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_ui_dashboard {
				__id = "org.eclipse.gmf.internal.bridge.ui.dashboard"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.ui.dashboard"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_bridge_ui_dashboard_actions {
				__id = "org.eclipse.gmf.internal.bridge.ui.dashboard.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.bridge.ui.dashboard.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_tooling {
			__id = "org.eclipse.gmf.tooling"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.tooling"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.1.0.v20090615-0700"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_gmf_graphdef_codegen {
			__id = "org.eclipse.gmf.graphdef.codegen"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.graphdef.codegen"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.100.v20090520-1343"
			}
			vendor = vendor_providerName
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_gmf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_gmf_graphdef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_gmf_xpand
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_graphdef_codegen {
				__id = "org.eclipse.gmf.graphdef.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.graphdef.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_graphdef_codegen {
				__id = "org.eclipse.gmf.internal.graphdef.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.graphdef.codegen"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_graphdef_codegen_ui {
			__id = "org.eclipse.gmf.graphdef.codegen.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.graphdef.codegen.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.100.v20090114-0940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_jface
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_gmf_graphdef_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_gmf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_graphdef_codegen_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_internal_graphdef_codegen_ui {
				__id = "org.eclipse.gmf.internal.graphdef.codegen.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.graphdef.codegen.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_tooldef {
			__id = "org.eclipse.gmf.tooldef"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.tooldef"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090114-0940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef
				target = plugin_org_eclipse_gmf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2005_ToolDefinition {
				__id = "_www_eclipse_org_gmf_2005_ToolDefinition"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2005_ToolDefinition"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2005/ToolDefinition"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2005_ToolDefinition {
					__id = "conformsTo__www_eclipse_org_gmf_2005_ToolDefinition"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2005_ToolDefinition"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2005/ToolDefinition.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmf_tooldef {
				__id = "org.eclipse.gmf.tooldef"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tooldef"
				}
			}
			exports += new Package package_org_eclipse_gmf_tooldef_util {
				__id = "org.eclipse.gmf.tooldef.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tooldef.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_tooldef_edit {
			__id = "org.eclipse.gmf.tooldef.edit"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.tooldef.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.100.v20090114-0940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef_edit
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef_edit
				target = plugin_org_eclipse_gmf_tooldef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef_edit
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef_edit
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_tooldef_edit
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_tooldef_presentation {
				__id = "org.eclipse.gmf.tooldef.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tooldef.presentation"
				}
			}
			exports += new Package package_org_eclipse_gmf_tooldef_provider {
				__id = "org.eclipse.gmf.tooldef.provider"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tooldef.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_validate {
			__id = "org.eclipse.gmf.validate"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.validate"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v20090316-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_validate
				target = plugin_org_eclipse_emf_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_validate
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_validate
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_validate
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_validate
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_internal_validate {
				__id = "org.eclipse.gmf.internal.validate"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.validate"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_validate_expressions {
				__id = "org.eclipse.gmf.internal.validate.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.validate.expressions"
				}
			}
			exports += new Package package_org_eclipse_gmf_validate {
				__id = "org.eclipse.gmf.validate"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.validate"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_ecore_editor {
			__id = "org.eclipse.gmf.ecore.editor"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.ecore.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.1.0.v20090529-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_ui_navigator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_emf_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_emf_commands_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_emf_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_printing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_providers_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_render
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_resources_editor_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_gmf_runtime_draw2d_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_draw2d
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_ecore_editor
				target = plugin_org_eclipse_ui_navigator_resources
			}
			exports += new Package package_org_eclipse_gmf_ecore_edit_parts {
				__id = "org.eclipse.gmf.ecore.edit.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.ecore.edit.parts"
				}
			}
			exports += new Package package_org_eclipse_gmf_ecore_part {
				__id = "org.eclipse.gmf.ecore.part"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.ecore.part"
				}
			}
			exports += new Package package_org_eclipse_gmf_ecore_providers {
				__id = "org.eclipse.gmf.ecore.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.ecore.providers"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_xpand {
			__id = "org.eclipse.gmf.xpand"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.xpand"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090521-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_net_sourceforge_lpg_lpgjavaruntime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_m2m_qvt_oml_project
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_m2m_qvt_oml_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand
				target = plugin_org_eclipse_gmf_xpand_qvtlibrary
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand {
				__id = "org.eclipse.gmf.internal.xpand"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand"
				}
			}
			exports += new Package package_org_eclipse_gmf_graphdef_codegen {
				__id = "org.eclipse.gmf.graphdef.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.graphdef.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen {
				__id = "org.eclipse.gmf.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_lite {
				__id = "org.eclipse.gmf.codegen.lite"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.lite"
				}
			}
			exports += new Package package_org_eclipse_gmf_common {
				__id = "org.eclipse.gmf.common"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.common"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_debug {
				__id = "org.eclipse.gmf.xpand.debug"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.debug"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_ant {
				__id = "org.eclipse.gmf.xpand.ant"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.ant"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_ui_ {
				__id = "org.eclipse.gmf.codegen.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.ui'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_ast {
				__id = "org.eclipse.gmf.internal.xpand.ast"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.ast"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_debug_ {
				__id = "org.eclipse.gmf.xpand.debug'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.debug'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_build {
				__id = "org.eclipse.gmf.internal.xpand.build"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.build"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_eval {
				__id = "org.eclipse.gmf.internal.xpand.eval"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.eval"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_expression_ast {
				__id = "org.eclipse.gmf.internal.xpand.expression.ast"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.expression.ast"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_debug_ {
				__id = "org.eclipse.gmf.xpand.debug'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.debug'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_expression_parser {
				__id = "org.eclipse.gmf.internal.xpand.expression.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.expression.parser"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_inactive {
				__id = "org.eclipse.gmf.internal.xpand.inactive"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.inactive"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_model {
				__id = "org.eclipse.gmf.internal.xpand.model"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.model"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_editor {
				__id = "org.eclipse.gmf.xpand.editor"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.editor"
				}
			}
			exports += new Package package_org_eclipse_gmf_common {
				__id = "org.eclipse.gmf.common"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.common"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_debug {
				__id = "org.eclipse.gmf.xpand.debug"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.debug"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_ant_ {
				__id = "org.eclipse.gmf.xpand.ant'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.ant'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_ocl {
				__id = "org.eclipse.gmf.internal.xpand.ocl"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.ocl"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_parser {
				__id = "org.eclipse.gmf.internal.xpand.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.parser"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_util {
				__id = "org.eclipse.gmf.internal.xpand.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_graphdef_codegen {
				__id = "org.eclipse.gmf.graphdef.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.graphdef.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen {
				__id = "org.eclipse.gmf.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen"
				}
			}
			exports += new Package package_org_eclipse_gmf_codegen_lite {
				__id = "org.eclipse.gmf.codegen.lite"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.codegen.lite"
				}
			}
			exports += new Package package_org_eclipse_gmf_common {
				__id = "org.eclipse.gmf.common"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.common"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_debug {
				__id = "org.eclipse.gmf.xpand.debug"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.debug"
				}
			}
			exports += new Package package_org_eclipse_gmf_tests {
				__id = "org.eclipse.gmf.tests"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.tests"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_ant_ {
				__id = "org.eclipse.gmf.xpand.ant'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.ant'"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_xtend_ast {
				__id = "org.eclipse.gmf.internal.xpand.xtend.ast"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.xtend.ast"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_debug {
				__id = "org.eclipse.gmf.xpand.debug"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.debug"
				}
			}
			exports += new Package package_org_eclipse_gmf_xpand_ant_ {
				__id = "org.eclipse.gmf.xpand.ant'"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.xpand.ant'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_xpand_editor {
			__id = "org.eclipse.gmf.xpand.editor"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.xpand.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090520-1343"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_gmf_xpand
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_editor
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_codeassist {
				__id = "org.eclipse.gmf.internal.xpand.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.codeassist"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_editor {
				__id = "org.eclipse.gmf.internal.xpand.editor"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.editor"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_expression_codeassist {
				__id = "org.eclipse.gmf.internal.xpand.expression.codeassist"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.expression.codeassist"
				}
			}
		}
		plugins += new Plugin plugin_net_sourceforge_lpg_lpgjavaruntime {
			__id = "net.sourceforge.lpg.lpgjavaruntime"
			identifier = new PlatformID {
				value = "net.sourceforge.lpg.lpgjavaruntime"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200803061910"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_lpg_lpgjavaruntime {
				__id = "lpg.lpgjavaruntime"
				identifier = new PlatformID {
					value = "lpg.lpgjavaruntime"
				}
				version = new Version {
					value = "1.1"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_xpand_migration {
			__id = "org.eclipse.gmf.xpand.migration"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.xpand.migration"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090608-0720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_net_sourceforge_lpg_lpgjavaruntime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_migration
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand {
				__id = "org.eclipse.gmf.internal.xpand"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_ast {
				__id = "org.eclipse.gmf.internal.xpand.ast"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.ast"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_build {
				__id = "org.eclipse.gmf.internal.xpand.build"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.build"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_eval {
				__id = "org.eclipse.gmf.internal.xpand.eval"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.eval"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_expression {
				__id = "org.eclipse.gmf.internal.xpand.expression"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.expression"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_expression_ast {
				__id = "org.eclipse.gmf.internal.xpand.expression.ast"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.expression.ast"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_expression_parser {
				__id = "org.eclipse.gmf.internal.xpand.expression.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.expression.parser"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_migration {
				__id = "org.eclipse.gmf.internal.xpand.migration"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.migration"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_migration_ui {
				__id = "org.eclipse.gmf.internal.xpand.migration.ui"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.migration.ui"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_model {
				__id = "org.eclipse.gmf.internal.xpand.model"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.model"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_parser {
				__id = "org.eclipse.gmf.internal.xpand.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.parser"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_util {
				__id = "org.eclipse.gmf.internal.xpand.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.util"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_xtend_ast {
				__id = "org.eclipse.gmf.internal.xpand.xtend.ast"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.xtend.ast"
				}
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_xtend_parser {
				__id = "org.eclipse.gmf.internal.xpand.xtend.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.xtend.parser"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_xpand_qvtlibrary {
			__id = "org.eclipse.gmf.xpand.qvtlibrary"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.xpand.qvtlibrary"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090608-0720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_qvtlibrary
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_qvtlibrary
				target = plugin_org_eclipse_ocl_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_xpand_qvtlibrary
				target = plugin_org_eclipse_m2m_qvt_oml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			exports += new Package package_org_eclipse_gmf_internal_xpand_qvtlibraries {
				__id = "org.eclipse.gmf.internal.xpand.qvtlibraries"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.internal.xpand.qvtlibraries"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_templates_legacy {
			__id = "org.eclipse.gmf.templates.legacy"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.templates.legacy"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.v20090614-0839"
			}
			vendor = vendor_providerName
		}
	}

	features += new Feature feature_org_tigris_subversion_clientadapter_feature {
		__id = "org.tigris.subversion.clientadapter.feature"
		identifier = new PlatformID {
			value = "org.tigris.subversion.clientadapter.feature"
		}
		version = new Version {
			value = "1.6.6"
		}
		provider = vendor_tigris_org
		copyright = new Copyright {
			name = "_subclipse_tigris_org_"
			text = "http://subclipse.tigris.org/"
			locator = new URLLocator {
				value = "http://subclipse.tigris.org/"
			}
		}
		description = new Description {
			name = "description"
			text = "Subversion Client Adapter provides a common API for Subversion client functionality."
		}
		plugins += new Plugin plugin_org_tigris_subversion_clientadapter {
			__id = "org.tigris.subversion.clientadapter"
			identifier = new PlatformID {
				value = "org.tigris.subversion.clientadapter"
			}
			state = : "State.active"
			version = new Version {
				value = "1.6.6"
			}
			vendor = vendor_tigris_org
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_clientadapter
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_tigris_subversion_clientadapter {
				__id = "org.tigris.subversion.clientadapter"
				identifier = new PlatformID {
					value = "org.tigris.subversion.clientadapter"
				}
				version = new Version {
					value = "org.tigris.subversion.clientadapte"
				}
			}
			exports += new Package package_org_tigris_subversion_svnclientadapter {
				__id = "org.tigris.subversion.svnclientadapter"
				identifier = new PlatformID {
					value = "org.tigris.subversion.svnclientadapter"
				}
				version = new Version {
					value = "org.tigris.subversion.svnclientadapte"
				}
			}
			exports += new Package package_org_tigris_subversion_svnclientadapter_utils {
				__id = "org.tigris.subversion.svnclientadapter.utils"
				identifier = new PlatformID {
					value = "org.tigris.subversion.svnclientadapter.utils"
				}
				version = new Version {
					value = "org.tigris.subversion.svnclientadapter.util"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_cvs {
		__id = "org.eclipse.cvs"
		identifier = new PlatformID {
			value = "org.eclipse.cvs"
		}
		version = new Version {
			value = "1.1.101.R35x_v20090811-7E79FEd9KKF5H2YDWFLLBL01A16"
		}
		provider = vendor_Eclipse_org
		description = new Description {
			name = "description"
			text = "Eclipse CVS Client. (Binary runtime and user documentation.)"
		}
		plugins += new Plugin plugin_org_eclipse_cvs {
			__id = "org.eclipse.cvs"
			identifier = new PlatformID {
				value = "org.eclipse.cvs"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.300.v200909170800"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_team_cvs_core {
			__id = "org.eclipse.team.cvs.core"
			identifier = new PlatformID {
				value = "org.eclipse.team.cvs.core"
			}
			state = : "State.active"
			version = new Version {
				value = "3.3.200.I20090430-0408"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_com_jcraft_jsch
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[0.1.27-2.0.0)'"
				maxVersion = "'[0.1.27-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_org_eclipse_jsch_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_org_eclipse_core_net
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = plugin_org_eclipse_equinox_security
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core {
				__id = "org.eclipse.team.internal.ccvs.core"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_client {
				__id = "org.eclipse.team.internal.ccvs.core.client"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.client"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_client_listeners {
				__id = "org.eclipse.team.internal.ccvs.core.client.listeners"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.client.listeners"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_connection {
				__id = "org.eclipse.team.internal.ccvs.core.connection"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.connection"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_filehistory {
				__id = "org.eclipse.team.internal.ccvs.core.filehistory"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.filehistory"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_filesystem {
				__id = "org.eclipse.team.internal.ccvs.core.filesystem"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.filesystem"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_mapping {
				__id = "org.eclipse.team.internal.ccvs.core.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.mapping"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_resources {
				__id = "org.eclipse.team.internal.ccvs.core.resources"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.resources"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_syncinfo {
				__id = "org.eclipse.team.internal.ccvs.core.syncinfo"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.syncinfo"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_core_util {
				__id = "org.eclipse.team.internal.ccvs.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.core.util"
				}
			}
			exports += new Package package_org_eclipse_team_cvs_ui_ {
				__id = "org.eclipse.team.cvs.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.team.cvs.ui'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_core
				target = package_com_ibm_icu_util
			}
		}
		plugins += new Plugin plugin_org_eclipse_team_cvs_ssh {
			__id = "org.eclipse.team.cvs.ssh"
			identifier = new PlatformID {
				value = "org.eclipse.team.cvs.ssh"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.100.I20090508-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.0-4.0.0)'"
				maxVersion = "'[3.1.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh
				target = plugin_org_eclipse_team_cvs_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ssh {
				__id = "org.eclipse.team.internal.ccvs.ssh"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ssh"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_team_cvs_ssh2 {
			__id = "org.eclipse.team.cvs.ssh2"
			identifier = new PlatformID {
				value = "org.eclipse.team.cvs.ssh2"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.200.I20090508-2000"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh2
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh2
				target = plugin_org_eclipse_team_cvs_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh2
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh2
				target = plugin_org_eclipse_team_cvs_ssh
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh2
				target = plugin_com_jcraft_jsch
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[0.1.27-2.0.0)'"
				maxVersion = "'[0.1.27-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ssh2
				target = plugin_org_eclipse_jsch_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ssh2 {
				__id = "org.eclipse.team.internal.ccvs.ssh2"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ssh2"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_team_cvs_ui {
			__id = "org.eclipse.team.cvs.ui"
			identifier = new PlatformID {
				value = "org.eclipse.team.cvs.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.3.201.R35x_v20090826-0905"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_team_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_team_cvs_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_compare
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui_navigator_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_ui_navigator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui {
				__id = "org.eclipse.team.internal.ccvs.ui"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_actions {
				__id = "org.eclipse.team.internal.ccvs.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_console {
				__id = "org.eclipse.team.internal.ccvs.ui.console"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.console"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_mappings {
				__id = "org.eclipse.team.internal.ccvs.ui.mappings"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.mappings"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_model {
				__id = "org.eclipse.team.internal.ccvs.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.model"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_operations {
				__id = "org.eclipse.team.internal.ccvs.ui.operations"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.operations"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_repo {
				__id = "org.eclipse.team.internal.ccvs.ui.repo"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.repo"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_subscriber {
				__id = "org.eclipse.team.internal.ccvs.ui.subscriber"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.subscriber"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_tags {
				__id = "org.eclipse.team.internal.ccvs.ui.tags"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.tags"
				}
			}
			exports += new Package package_org_eclipse_team_internal_ccvs_ui_wizards {
				__id = "org.eclipse.team.internal.ccvs.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.team.internal.ccvs.ui.wizards"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_team_cvs_ui
				target = package_com_ibm_icu_util
			}
		}
		sites += site__download_eclipse_org_eclipse_updates_3_5
		sites += site__download_eclipse_org_releases_galileo
	}

	features += new Feature feature_org_eclipse_emf_mapping {
		__id = "org.eclipse.emf.mapping"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mapping"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Platform-independent framework for mapping between EMF models."
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping {
			__id = "org.eclipse.emf.mapping"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2002_Mapping {
				__id = "_www_eclipse_org_emf_2002_Mapping"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2002_Mapping"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2002/Mapping"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2002_Mapping {
					__id = "conformsTo__www_eclipse_org_emf_2002_Mapping"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2002_Mapping"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2002/Mapping.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_mapping {
				__id = "org.eclipse.emf.mapping"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_command {
				__id = "org.eclipse.emf.mapping.command"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.command"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_domain {
				__id = "org.eclipse.emf.mapping.domain"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.domain"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_impl {
				__id = "org.eclipse.emf.mapping.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_provider {
				__id = "org.eclipse.emf.mapping.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_util {
				__id = "org.eclipse.emf.mapping.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_persistence_jpa {
		__id = "org.eclipse.persistence.jpa"
		identifier = new PlatformID {
			value = "org.eclipse.persistence.jpa"
		}
		version = new Version {
			value = "1.1.2.v20090612-r4475"
		}
		provider = vendor_Eclipse_org___EclipseLink_Project
		description = new Description {
			name = "description"
			text = "EclipseLink JPA delivers a comprehensive open-source Java Object-Relational persistence solution."
		}
		plugins += new Plugin plugin_javax_activation {
			__id = "javax.activation"
			identifier = new PlatformID {
				value = "javax.activation"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200806101325"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_javax_activation {
				__id = "javax.activation"
				identifier = new PlatformID {
					value = "javax.activation"
				}
			}
			exports += new Package package_org_apache_geronimo_activation_handlers {
				__id = "org.apache.geronimo.activation.handlers"
				identifier = new PlatformID {
					value = "org.apache.geronimo.activation.handlers"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_javax_activation
				target = package_javax_imageio
			}
			dependencies += new VersionDependency {
				source = plugin_javax_activation
				target = package_javax_imageio_metadata
			}
		}
		plugins += new Plugin plugin_javax_mail {
			__id = "javax.mail"
			identifier = new PlatformID {
				value = "javax.mail"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.4.0.v200804091730"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_javax_mail {
				__id = "javax.mail"
				identifier = new PlatformID {
					value = "javax.mail"
				}
			}
			exports += new Package package_javax_mail_event {
				__id = "javax.mail.event"
				identifier = new PlatformID {
					value = "javax.mail.event"
				}
			}
			exports += new Package package_javax_mail_internet {
				__id = "javax.mail.internet"
				identifier = new PlatformID {
					value = "javax.mail.internet"
				}
			}
			exports += new Package package_javax_mail_search {
				__id = "javax.mail.search"
				identifier = new PlatformID {
					value = "javax.mail.search"
				}
			}
			exports += new Package package_javax_mail_util {
				__id = "javax.mail.util"
				identifier = new PlatformID {
					value = "javax.mail.util"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_authentication {
				__id = "org.apache.geronimo.javamail.authentication"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.authentication"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_store_nntp {
				__id = "org.apache.geronimo.javamail.store.nntp"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.store.nntp"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_store_nntp_newsrc {
				__id = "org.apache.geronimo.javamail.store.nntp.newsrc"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.store.nntp.newsrc"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_store_pop3 {
				__id = "org.apache.geronimo.javamail.store.pop3"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.store.pop3"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_store_pop3_message {
				__id = "org.apache.geronimo.javamail.store.pop3.message"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.store.pop3.message"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_store_pop3_response {
				__id = "org.apache.geronimo.javamail.store.pop3.response"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.store.pop3.response"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_transport_nntp {
				__id = "org.apache.geronimo.javamail.transport.nntp"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.transport.nntp"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_transport_smtp {
				__id = "org.apache.geronimo.javamail.transport.smtp"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.transport.smtp"
				}
			}
			exports += new Package package_org_apache_geronimo_javamail_util {
				__id = "org.apache.geronimo.javamail.util"
				identifier = new PlatformID {
					value = "org.apache.geronimo.javamail.util"
				}
			}
			exports += new Package package_org_apache_geronimo_mail_handlers {
				__id = "org.apache.geronimo.mail.handlers"
				identifier = new PlatformID {
					value = "org.apache.geronimo.mail.handlers"
				}
			}
			exports += new Package package_org_apache_geronimo_mail_util {
				__id = "org.apache.geronimo.mail.util"
				identifier = new PlatformID {
					value = "org.apache.geronimo.mail.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_javax_mail
				target = package_javax_net_ssl
			}
			dependencies += new VersionDependency {
				source = plugin_javax_mail
				target = package_javax_activation
			}
		}
		plugins += new Plugin plugin_javax_persistence {
			__id = "javax.persistence"
			identifier = new PlatformID {
				value = "javax.persistence"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.99.0.v200906021518"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			exports += new Package package_javax_persistence {
				__id = "javax.persistence"
				identifier = new PlatformID {
					value = "javax.persistence"
				}
				version = new Version {
					value = "1.99.0.v200906021518"
				}
			}
			exports += new Package package_javax_persistence_spi {
				__id = "javax.persistence.spi"
				identifier = new PlatformID {
					value = "javax.persistence.spi"
				}
				version = new Version {
					value = "1.99.0.v200906021518"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_javax_persistence
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_javax_persistence
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_javax_xml_stream {
			__id = "javax.xml.stream"
			identifier = new PlatformID {
				value = "javax.xml.stream"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.1.v200903100845"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_javax_xml_stream
				target = plugin_javax_xml
			}
			exports += new Package package_javax_xml {
				__id = "javax.xml"
				identifier = new PlatformID {
					value = "javax.xml"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
			exports += new Package package_javax_xml_namespace {
				__id = "javax.xml.namespace"
				identifier = new PlatformID {
					value = "javax.xml.namespace"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
			exports += new Package package_javax_xml_stream {
				__id = "javax.xml.stream"
				identifier = new PlatformID {
					value = "javax.xml.stream"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
			exports += new Package package_javax_xml_stream_events {
				__id = "javax.xml.stream.events"
				identifier = new PlatformID {
					value = "javax.xml.stream.events"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
			exports += new Package package_javax_xml_stream_util {
				__id = "javax.xml.stream.util"
				identifier = new PlatformID {
					value = "javax.xml.stream.util"
				}
				version = new Version {
					value = "1.0.1"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_persistence_antlr {
			__id = "org.eclipse.persistence.antlr"
			identifier = new PlatformID {
				value = "org.eclipse.persistence.antlr"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090612-r4475"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			exports += new Package package_org_eclipse_persistence_internal_libraries_antlr_runtime {
				__id = "org.eclipse.persistence.internal.libraries.antlr.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.antlr.runtime"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_antlr_runtime_tree {
				__id = "org.eclipse.persistence.internal.libraries.antlr.runtime.tree"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.antlr.runtime.tree"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_persistence_asm {
			__id = "org.eclipse.persistence.asm"
			identifier = new PlatformID {
				value = "org.eclipse.persistence.asm"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090612-r4475"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm {
				__id = "org.eclipse.persistence.internal.libraries.asm"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm_attrs {
				__id = "org.eclipse.persistence.internal.libraries.asm.attrs"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm.attrs"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm_commons {
				__id = "org.eclipse.persistence.internal.libraries.asm.commons"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm.commons"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm_tree {
				__id = "org.eclipse.persistence.internal.libraries.asm.tree"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm.tree"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm_tree_analysis {
				__id = "org.eclipse.persistence.internal.libraries.asm.tree.analysis"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm.tree.analysis"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm_util {
				__id = "org.eclipse.persistence.internal.libraries.asm.util"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm.util"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm_util_attrs {
				__id = "org.eclipse.persistence.internal.libraries.asm.util.attrs"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm.util.attrs"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_libraries_asm_xml {
				__id = "org.eclipse.persistence.internal.libraries.asm.xml"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.libraries.asm.xml"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_persistence_core {
			__id = "org.eclipse.persistence.core"
			identifier = new PlatformID {
				value = "org.eclipse.persistence.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090612-r4475"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = plugin_org_eclipse_persistence_antlr
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.2.v20090612-r4475'"
				maxVersion = "'1.1.2.v20090612-r4475'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = plugin_org_eclipse_persistence_asm
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.2.v20090612-r4475'"
				maxVersion = "'1.1.2.v20090612-r4475'"
			}
			exports += new Package package_org_eclipse_persistence {
				__id = "org.eclipse.persistence"
				identifier = new PlatformID {
					value = "org.eclipse.persistence"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_annotations {
				__id = "org.eclipse.persistence.annotations"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.annotations"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_config {
				__id = "org.eclipse.persistence.config"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.config"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_descriptors {
				__id = "org.eclipse.persistence.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.descriptors"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_descriptors_changetracking {
				__id = "org.eclipse.persistence.descriptors.changetracking"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.descriptors.changetracking"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_descriptors_copying {
				__id = "org.eclipse.persistence.descriptors.copying"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.descriptors.copying"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_descriptors_invalidation {
				__id = "org.eclipse.persistence.descriptors.invalidation"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.descriptors.invalidation"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_eis {
				__id = "org.eclipse.persistence.eis"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.eis"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_eis_adapters_jms {
				__id = "org.eclipse.persistence.eis.adapters.jms"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.eis.adapters.jms"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_eis_adapters_xmlfile {
				__id = "org.eclipse.persistence.eis.adapters.xmlfile"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.eis.adapters.xmlfile"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_eis_interactions {
				__id = "org.eclipse.persistence.eis.interactions"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.eis.interactions"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_eis_mappings {
				__id = "org.eclipse.persistence.eis.mappings"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.eis.mappings"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_exceptions {
				__id = "org.eclipse.persistence.exceptions"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.exceptions"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_exceptions_i18n {
				__id = "org.eclipse.persistence.exceptions.i18n"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.exceptions.i18n"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_expressions {
				__id = "org.eclipse.persistence.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.expressions"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_expressions_spatial {
				__id = "org.eclipse.persistence.expressions.spatial"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.expressions.spatial"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_history {
				__id = "org.eclipse.persistence.history"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.history"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_indirection {
				__id = "org.eclipse.persistence.indirection"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.indirection"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_codegen {
				__id = "org.eclipse.persistence.internal.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.codegen"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_databaseaccess {
				__id = "org.eclipse.persistence.internal.databaseaccess"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.databaseaccess"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_descriptors {
				__id = "org.eclipse.persistence.internal.descriptors"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.descriptors"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_descriptors_changetracking {
				__id = "org.eclipse.persistence.internal.descriptors.changetracking"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.descriptors.changetracking"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_dynamicpersist {
				__id = "org.eclipse.persistence.internal.dynamicpersist"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.dynamicpersist"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_eis_adapters_jms {
				__id = "org.eclipse.persistence.internal.eis.adapters.jms"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.eis.adapters.jms"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_eis_adapters_xmlfile {
				__id = "org.eclipse.persistence.internal.eis.adapters.xmlfile"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.eis.adapters.xmlfile"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_eis_cobol {
				__id = "org.eclipse.persistence.internal.eis.cobol"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.eis.cobol"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_eis_cobol_helper {
				__id = "org.eclipse.persistence.internal.eis.cobol.helper"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.eis.cobol.helper"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_expressions {
				__id = "org.eclipse.persistence.internal.expressions"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.expressions"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_helper {
				__id = "org.eclipse.persistence.internal.helper"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.helper"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_helper_linkedlist {
				__id = "org.eclipse.persistence.internal.helper.linkedlist"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.helper.linkedlist"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_history {
				__id = "org.eclipse.persistence.internal.history"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.history"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_identitymaps {
				__id = "org.eclipse.persistence.internal.identitymaps"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.identitymaps"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_indirection {
				__id = "org.eclipse.persistence.internal.indirection"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.indirection"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_parsing {
				__id = "org.eclipse.persistence.internal.jpa.parsing"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.parsing"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_parsing_jpql {
				__id = "org.eclipse.persistence.internal.jpa.parsing.jpql"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.parsing.jpql"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_parsing_jpql_antlr {
				__id = "org.eclipse.persistence.internal.jpa.parsing.jpql.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.parsing.jpql.antlr"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_localization {
				__id = "org.eclipse.persistence.internal.localization"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.localization"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_localization_i18n {
				__id = "org.eclipse.persistence.internal.localization.i18n"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.localization.i18n"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_oxm {
				__id = "org.eclipse.persistence.internal.oxm"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.oxm"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_oxm_conversion {
				__id = "org.eclipse.persistence.internal.oxm.conversion"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.oxm.conversion"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_oxm_documentpreservation {
				__id = "org.eclipse.persistence.internal.oxm.documentpreservation"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.oxm.documentpreservation"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_oxm_record {
				__id = "org.eclipse.persistence.internal.oxm.record"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.oxm.record"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_oxm_record_deferred {
				__id = "org.eclipse.persistence.internal.oxm.record.deferred"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.oxm.record.deferred"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_oxm_schema {
				__id = "org.eclipse.persistence.internal.oxm.schema"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.oxm.schema"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_oxm_schema_model {
				__id = "org.eclipse.persistence.internal.oxm.schema.model"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.oxm.schema.model"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_platform_database {
				__id = "org.eclipse.persistence.internal.platform.database"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.platform.database"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_queries {
				__id = "org.eclipse.persistence.internal.queries"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.queries"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_security {
				__id = "org.eclipse.persistence.internal.security"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.security"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sequencing {
				__id = "org.eclipse.persistence.internal.sequencing"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sequencing"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions {
				__id = "org.eclipse.persistence.internal.sessions"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_coordination {
				__id = "org.eclipse.persistence.internal.sessions.coordination"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.coordination"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_coordination_broadcast {
				__id = "org.eclipse.persistence.internal.sessions.coordination.broadcast"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.coordination.broadcast"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_coordination_corba {
				__id = "org.eclipse.persistence.internal.sessions.coordination.corba"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.coordination.corba"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_coordination_corba_sun {
				__id = "org.eclipse.persistence.internal.sessions.coordination.corba.sun"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.coordination.corba.sun"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_coordination_jms {
				__id = "org.eclipse.persistence.internal.sessions.coordination.jms"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.coordination.jms"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_coordination_rmi {
				__id = "org.eclipse.persistence.internal.sessions.coordination.rmi"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.coordination.rmi"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_coordination_rmi_iiop {
				__id = "org.eclipse.persistence.internal.sessions.coordination.rmi.iiop"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.coordination.rmi.iiop"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories {
				__id = "org.eclipse.persistence.internal.sessions.factories"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model {
				__id = "org.eclipse.persistence.internal.sessions.factories.model"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_event {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.event"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.event"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_log {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.log"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.log"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_login {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.login"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.login"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_platform {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.platform"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.platform"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_pool {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.pool"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.pool"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_project {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.project"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.project"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_property {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.property"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.property"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_rcm {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.rcm"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.rcm"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_rcm_command {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.rcm.command"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.rcm.command"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_sequencing {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.sequencing"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.sequencing"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_session {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.session"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.session"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_transport {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.transport"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.transport"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_transport_discovery {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.transport.discovery"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.transport.discovery"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_factories_model_transport_naming {
				__id = "org.eclipse.persistence.internal.sessions.factories.model.transport.naming"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.factories.model.transport.naming"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_sessions_remote {
				__id = "org.eclipse.persistence.internal.sessions.remote"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.sessions.remote"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_weaving {
				__id = "org.eclipse.persistence.internal.weaving"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.weaving"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_logging {
				__id = "org.eclipse.persistence.logging"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.logging"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_mappings {
				__id = "org.eclipse.persistence.mappings"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.mappings"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_mappings_converters {
				__id = "org.eclipse.persistence.mappings.converters"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.mappings.converters"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_mappings_foundation {
				__id = "org.eclipse.persistence.mappings.foundation"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.mappings.foundation"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_mappings_querykeys {
				__id = "org.eclipse.persistence.mappings.querykeys"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.mappings.querykeys"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_mappings_structures {
				__id = "org.eclipse.persistence.mappings.structures"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.mappings.structures"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_mappings_transformers {
				__id = "org.eclipse.persistence.mappings.transformers"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.mappings.transformers"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_mappings_xdb {
				__id = "org.eclipse.persistence.mappings.xdb"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.mappings.xdb"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm {
				__id = "org.eclipse.persistence.oxm"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_annotations {
				__id = "org.eclipse.persistence.oxm.annotations"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.annotations"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_attachment {
				__id = "org.eclipse.persistence.oxm.attachment"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.attachment"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_documentpreservation {
				__id = "org.eclipse.persistence.oxm.documentpreservation"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.documentpreservation"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_mappings {
				__id = "org.eclipse.persistence.oxm.mappings"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.mappings"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_mappings_converters {
				__id = "org.eclipse.persistence.oxm.mappings.converters"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.mappings.converters"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_mappings_nullpolicy {
				__id = "org.eclipse.persistence.oxm.mappings.nullpolicy"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.mappings.nullpolicy"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_platform {
				__id = "org.eclipse.persistence.oxm.platform"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.platform"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_record {
				__id = "org.eclipse.persistence.oxm.record"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.record"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_schema {
				__id = "org.eclipse.persistence.oxm.schema"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.schema"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_sequenced {
				__id = "org.eclipse.persistence.oxm.sequenced"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.sequenced"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_oxm_unmapped {
				__id = "org.eclipse.persistence.oxm.unmapped"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.oxm.unmapped"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_database {
				__id = "org.eclipse.persistence.platform.database"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.database"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_database_converters {
				__id = "org.eclipse.persistence.platform.database.converters"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.database.converters"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_database_jdbc {
				__id = "org.eclipse.persistence.platform.database.jdbc"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.database.jdbc"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_database_oracle_plsql {
				__id = "org.eclipse.persistence.platform.database.oracle.plsql"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.database.oracle.plsql"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_server {
				__id = "org.eclipse.persistence.platform.server"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.server"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_server_jboss {
				__id = "org.eclipse.persistence.platform.server.jboss"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.server.jboss"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_server_oc4j {
				__id = "org.eclipse.persistence.platform.server.oc4j"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.server.oc4j"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_server_sunas {
				__id = "org.eclipse.persistence.platform.server.sunas"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.server.sunas"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_server_was {
				__id = "org.eclipse.persistence.platform.server.was"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.server.was"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_server_wls {
				__id = "org.eclipse.persistence.platform.server.wls"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.server.wls"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_xml {
				__id = "org.eclipse.persistence.platform.xml"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.xml"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_xml_jaxp {
				__id = "org.eclipse.persistence.platform.xml.jaxp"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.xml.jaxp"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_queries {
				__id = "org.eclipse.persistence.queries"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.queries"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sequencing {
				__id = "org.eclipse.persistence.sequencing"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sequencing"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_services {
				__id = "org.eclipse.persistence.services"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.services"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_services_mbean {
				__id = "org.eclipse.persistence.services.mbean"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.services.mbean"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_services_weblogic {
				__id = "org.eclipse.persistence.services.weblogic"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.services.weblogic"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions {
				__id = "org.eclipse.persistence.sessions"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_broker {
				__id = "org.eclipse.persistence.sessions.broker"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.broker"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_changesets {
				__id = "org.eclipse.persistence.sessions.changesets"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.changesets"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_coordination {
				__id = "org.eclipse.persistence.sessions.coordination"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.coordination"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_coordination_broadcast {
				__id = "org.eclipse.persistence.sessions.coordination.broadcast"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.coordination.broadcast"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_coordination_corba {
				__id = "org.eclipse.persistence.sessions.coordination.corba"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.coordination.corba"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_coordination_corba_sun {
				__id = "org.eclipse.persistence.sessions.coordination.corba.sun"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.coordination.corba.sun"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_coordination_jms {
				__id = "org.eclipse.persistence.sessions.coordination.jms"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.coordination.jms"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_coordination_rmi {
				__id = "org.eclipse.persistence.sessions.coordination.rmi"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.coordination.rmi"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_factories {
				__id = "org.eclipse.persistence.sessions.factories"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.factories"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_interceptors {
				__id = "org.eclipse.persistence.sessions.interceptors"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.interceptors"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_remote {
				__id = "org.eclipse.persistence.sessions.remote"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.remote"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_remote_corba_sun {
				__id = "org.eclipse.persistence.sessions.remote.corba.sun"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.remote.corba.sun"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_remote_rmi {
				__id = "org.eclipse.persistence.sessions.remote.rmi"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.remote.rmi"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_remote_rmi_iiop {
				__id = "org.eclipse.persistence.sessions.remote.rmi.iiop"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.remote.rmi.iiop"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_sessions_server {
				__id = "org.eclipse.persistence.sessions.server"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.sessions.server"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_tools {
				__id = "org.eclipse.persistence.tools"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.tools"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_tools_file {
				__id = "org.eclipse.persistence.tools.file"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.tools.file"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_tools_profiler {
				__id = "org.eclipse.persistence.tools.profiler"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.tools.profiler"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_tools_schemaframework {
				__id = "org.eclipse.persistence.tools.schemaframework"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.tools.schemaframework"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_transaction {
				__id = "org.eclipse.persistence.transaction"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.transaction"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_transaction_jboss {
				__id = "org.eclipse.persistence.transaction.jboss"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.transaction.jboss"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_transaction_oc4j {
				__id = "org.eclipse.persistence.transaction.oc4j"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.transaction.oc4j"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_transaction_sunas {
				__id = "org.eclipse.persistence.transaction.sunas"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.transaction.sunas"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_transaction_was {
				__id = "org.eclipse.persistence.transaction.was"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.transaction.was"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_transaction_wls {
				__id = "org.eclipse.persistence.transaction.wls"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.transaction.wls"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_xsd {
				__id = "xsd"
				identifier = new PlatformID {
					value = "xsd"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_activation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_jms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_mail
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_mail_internet
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_persistence
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_persistence_spi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_resource
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.5.0"
				maxVersion = "1.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_resource_cci
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.5.0"
				maxVersion = "1.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_javax_transaction
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_core
				target = package_org_w3c_dom
			}
		}
		plugins += new Plugin plugin_org_eclipse_persistence_jpa {
			__id = "org.eclipse.persistence.jpa"
			identifier = new PlatformID {
				value = "org.eclipse.persistence.jpa"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090612-r4475"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = plugin_org_eclipse_persistence_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.2.v20090612-r4475'"
				maxVersion = "'1.1.2.v20090612-r4475'"
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa {
				__id = "org.eclipse.persistence.internal.jpa"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_deployment {
				__id = "org.eclipse.persistence.internal.jpa.deployment"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.deployment"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_deployment_osgi {
				__id = "org.eclipse.persistence.internal.jpa.deployment.osgi"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.deployment.osgi"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_deployment_xml_parser {
				__id = "org.eclipse.persistence.internal.jpa.deployment.xml.parser"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.deployment.xml.parser"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_jdbc {
				__id = "org.eclipse.persistence.internal.jpa.jdbc"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.jdbc"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata {
				__id = "org.eclipse.persistence.internal.jpa.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_accessors {
				__id = "org.eclipse.persistence.internal.jpa.metadata.accessors"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.accessors"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_accessors_classes {
				__id = "org.eclipse.persistence.internal.jpa.metadata.accessors.classes"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.accessors.classes"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_accessors_mappings {
				__id = "org.eclipse.persistence.internal.jpa.metadata.accessors.mappings"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.accessors.mappings"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_accessors_objects {
				__id = "org.eclipse.persistence.internal.jpa.metadata.accessors.objects"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.accessors.objects"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_cache {
				__id = "org.eclipse.persistence.internal.jpa.metadata.cache"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.cache"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_changetracking {
				__id = "org.eclipse.persistence.internal.jpa.metadata.changetracking"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.changetracking"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_columns {
				__id = "org.eclipse.persistence.internal.jpa.metadata.columns"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.columns"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_converters {
				__id = "org.eclipse.persistence.internal.jpa.metadata.converters"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.converters"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_copypolicy {
				__id = "org.eclipse.persistence.internal.jpa.metadata.copypolicy"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.copypolicy"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_inheritance {
				__id = "org.eclipse.persistence.internal.jpa.metadata.inheritance"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.inheritance"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_listeners {
				__id = "org.eclipse.persistence.internal.jpa.metadata.listeners"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.listeners"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_locking {
				__id = "org.eclipse.persistence.internal.jpa.metadata.locking"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.locking"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_queries {
				__id = "org.eclipse.persistence.internal.jpa.metadata.queries"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.queries"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_sequencing {
				__id = "org.eclipse.persistence.internal.jpa.metadata.sequencing"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.sequencing"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_tables {
				__id = "org.eclipse.persistence.internal.jpa.metadata.tables"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.tables"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_transformers {
				__id = "org.eclipse.persistence.internal.jpa.metadata.transformers"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.transformers"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_metadata_xml {
				__id = "org.eclipse.persistence.internal.jpa.metadata.xml"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.metadata.xml"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_jpa_transaction {
				__id = "org.eclipse.persistence.internal.jpa.transaction"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.jpa.transaction"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_jpa {
				__id = "org.eclipse.persistence.jpa"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.jpa"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_jpa_osgi {
				__id = "org.eclipse.persistence.jpa.osgi"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.jpa.osgi"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_tools_weaving_jpa {
				__id = "org.eclipse.persistence.tools.weaving.jpa"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.tools.weaving.jpa"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_javax_persistence
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.99.0"
				maxVersion = "2.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_javax_persistence_spi
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.99.0"
				maxVersion = "2.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_javax_transaction
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_org_apache_tools_ant
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_org_apache_tools_ant_types
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_org_osgi_framework
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_org_osgi_service_packageadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa
				target = package_javax_sql
			}
		}
		plugins += new Plugin plugin_org_eclipse_persistence_jpa_equinox {
			__id = "org.eclipse.persistence.jpa.equinox"
			identifier = new PlatformID {
				value = "org.eclipse.persistence.jpa.equinox"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090612-r4475"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa_equinox
				target = package_org_eclipse_osgi_baseadaptor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa_equinox
				target = package_org_eclipse_osgi_baseadaptor_bundlefile
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa_equinox
				target = package_org_eclipse_osgi_baseadaptor_loader
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa_equinox
				target = package_org_eclipse_osgi_framework_adaptor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa_equinox
				target = package_org_eclipse_osgi_internal_baseadaptor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_jpa_equinox
				target = package_org_eclipse_persistence_jpa_equinox_weaving
			}
		}
		plugins += new Plugin plugin_org_eclipse_persistence_jpa_equinox_weaving {
			__id = "org.eclipse.persistence.jpa.equinox.weaving"
			identifier = new PlatformID {
				value = "org.eclipse.persistence.jpa.equinox.weaving"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090612-r4475"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			exports += new Package package_org_eclipse_persistence_jpa_equinox_weaving {
				__id = "org.eclipse.persistence.jpa.equinox.weaving"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.jpa.equinox.weaving"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_persistence_oracle {
			__id = "org.eclipse.persistence.oracle"
			identifier = new PlatformID {
				value = "org.eclipse.persistence.oracle"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2.v20090612-r4475"
			}
			vendor = vendor_Eclipse_org___EclipseLink_Project
			exports += new Package package_org_eclipse_persistence_eis_adapters_aq {
				__id = "org.eclipse.persistence.eis.adapters.aq"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.eis.adapters.aq"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_eis_adapters_aq {
				__id = "org.eclipse.persistence.internal.eis.adapters.aq"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.eis.adapters.aq"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_platform_database_oracle {
				__id = "org.eclipse.persistence.internal.platform.database.oracle"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.platform.database.oracle"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_internal_platform_database_oracle_xdb {
				__id = "org.eclipse.persistence.internal.platform.database.oracle.xdb"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.internal.platform.database.oracle.xdb"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_database_oracle {
				__id = "org.eclipse.persistence.platform.database.oracle"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.database.oracle"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_database_oracle_converters {
				__id = "org.eclipse.persistence.platform.database.oracle.converters"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.database.oracle.converters"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			exports += new Package package_org_eclipse_persistence_platform_xml_xdk {
				__id = "org.eclipse.persistence.platform.xml.xdk"
				identifier = new PlatformID {
					value = "org.eclipse.persistence.platform.xml.xdk"
				}
				version = new Version {
					value = "1.1.2.v20090612-r4475"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_resource
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.5.0"
				maxVersion = "1.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_naming
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_resource_cci
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.5.0"
				maxVersion = "1.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_sql
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_xml_transform
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_xml_transform_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_xml_transform_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_xml_transform_stream
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_javax_xml_validation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_AQ
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_jdbc
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_jdbc_internal
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_jdbc_pool
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_spatial_geometry
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_sql
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_xdb
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_xdb_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_xml_jaxp
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_xml_parser_schema
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_xml_parser_v2
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_oracle_xml_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_persistence_oracle
				target = package_org_xml_sax
			}
		}
		sites += site__download_eclipse_org_rt_eclipselink_incremental_updates_milestone
	}

	features += new Feature feature_org_eclipse_acceleo_sdk {
		__id = "org.eclipse.acceleo.sdk"
		identifier = new PlatformID {
			value = "org.eclipse.acceleo.sdk"
		}
		version = new Version {
			value = "0.8.1.v200909161003"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2008 Obeo. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "MOF models to text Transformation Language"
		}
	}

	features += new Feature feature_net_sourceforge_texlipse {
		__id = "net.sourceforge.texlipse"
		identifier = new PlatformID {
			value = "net.sourceforge.texlipse"
		}
		version = new Version {
			value = "1.3.0"
		}
		provider = vendor_TeXlapse_Team
		license = license_EPL
		description = new Description {
			name = "description"
			text = "This plugin adds Latex editing support to Eclipse."
		}
		plugins += new Plugin plugin_net_sourceforge_texlipse {
			__id = "net.sourceforge.texlipse"
			identifier = new PlatformID {
				value = "net.sourceforge.texlipse"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_TeXlapse_Team
			ownedEntities += new Document {
				__id = "net.sourceforge.texlipse"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse"
				}
				locator = new EFSLocator {
					value = "net.sourceforge.texlipse"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_net_sourceforge_texlipse
				target = plugin_org_eclipse_debug_ui
			}
			exports += new Package package_net_sourceforge_texlipse {
				__id = "net.sourceforge.texlipse"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_actions {
				__id = "net.sourceforge.texlipse.actions"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.actions"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_bibeditor {
				__id = "net.sourceforge.texlipse.bibeditor"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.bibeditor"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_bibparser {
				__id = "net.sourceforge.texlipse.bibparser"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.bibparser"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_bibparser_analysis {
				__id = "net.sourceforge.texlipse.bibparser.analysis"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.bibparser.analysis"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_bibparser_lexer {
				__id = "net.sourceforge.texlipse.bibparser.lexer"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.bibparser.lexer"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_bibparser_node {
				__id = "net.sourceforge.texlipse.bibparser.node"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.bibparser.node"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_bibparser_parser {
				__id = "net.sourceforge.texlipse.bibparser.parser"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.bibparser.parser"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_builder {
				__id = "net.sourceforge.texlipse.builder"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.builder"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_editor {
				__id = "net.sourceforge.texlipse.editor"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.editor"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_editor_hover {
				__id = "net.sourceforge.texlipse.editor.hover"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.editor.hover"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_editor_scanner {
				__id = "net.sourceforge.texlipse.editor.scanner"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.editor.scanner"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_model {
				__id = "net.sourceforge.texlipse.model"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.model"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_outline {
				__id = "net.sourceforge.texlipse.outline"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.outline"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_properties {
				__id = "net.sourceforge.texlipse.properties"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.properties"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_properties_editor {
				__id = "net.sourceforge.texlipse.properties.editor"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.properties.editor"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_spelling {
				__id = "net.sourceforge.texlipse.spelling"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.spelling"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_tableview_views {
				__id = "net.sourceforge.texlipse.tableview.views"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.tableview.views"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_templates {
				__id = "net.sourceforge.texlipse.templates"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.templates"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_texparser {
				__id = "net.sourceforge.texlipse.texparser"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.texparser"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_texparser_analysis {
				__id = "net.sourceforge.texlipse.texparser.analysis"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.texparser.analysis"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_texparser_lexer {
				__id = "net.sourceforge.texlipse.texparser.lexer"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.texparser.lexer"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_texparser_node {
				__id = "net.sourceforge.texlipse.texparser.node"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.texparser.node"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_treeview_views {
				__id = "net.sourceforge.texlipse.treeview.views"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.treeview.views"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_ui {
				__id = "net.sourceforge.texlipse.ui"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.ui"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_viewer {
				__id = "net.sourceforge.texlipse.viewer"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.viewer"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_viewer_util {
				__id = "net.sourceforge.texlipse.viewer.util"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.viewer.util"
				}
			}
			exports += new Package package_net_sourceforge_texlipse_wizards {
				__id = "net.sourceforge.texlipse.wizards"
				identifier = new PlatformID {
					value = "net.sourceforge.texlipse.wizards"
				}
			}
		}
		sites += site__texlipse_sourceforge_net
	}

	features += new Feature feature_org_eclipse_mylyn_pde_feature {
		__id = "org.eclipse.mylyn.pde_feature"
		identifier = new PlatformID {
			value = "org.eclipse.mylyn.pde_feature"
		}
		version = new Version {
			value = "3.2.2.v20090912-0400-e3x"
		}
		provider = vendor_Eclipse_Mylyn
		license = license_license_html
		description = new Description {
			name = "description"
			text = "Mylyn Task-Focused UI extensions for PDE, Ant, Team Support and CVS."
		}
		plugins += new Plugin plugin_org_eclipse_mylyn_pde_ui {
			__id = "org.eclipse.mylyn.pde.ui"
			identifier = new PlatformID {
				value = "org.eclipse.mylyn.pde.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.2.v20090912-0400-e3x"
			}
			vendor = vendor_Eclipse_Mylyn
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_pde_api_tools_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_search
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_java_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_jdt_junit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_jdt_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_context_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_context_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_ide_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_java_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_commons_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_monitor_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_resources_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_mylyn_pde_ui
				target = plugin_org_eclipse_mylyn_monitor_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_mylyn_internal_pde_ui {
				__id = "org.eclipse.mylyn.internal.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_mylyn_internal_pde_ui_junit {
				__id = "org.eclipse.mylyn.internal.pde.ui.junit"
				identifier = new PlatformID {
					value = "org.eclipse.mylyn.internal.pde.ui.junit"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_acceleo_ui_capabilities {
		__id = "org.eclipse.acceleo.ui.capabilities"
		identifier = new PlatformID {
			value = "org.eclipse.acceleo.ui.capabilities"
		}
		version = new Version {
			value = "0.8.1.v200909161003"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Acceleo UI capabilities definitions"
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_ui_capabilities {
			__id = "org.eclipse.acceleo.ui.capabilities"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.ui.capabilities"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_ui_capabilities
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
		}
		sites += site__download_eclipse_org_modeling_m2t_updates_site_xml
	}

	features += new Feature feature_org_eclipse_emf_ecore {
		__id = "org.eclipse.emf.ecore"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ecore"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "The core runtime for EMF, including EMF's common utilities, Ecore, XML/XMI persistence, and the change model."
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecore {
			__id = "org.eclipse.emf.ecore"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecore"
			}
			state = : "State.active"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2002_Ecore {
				__id = "_www_eclipse_org_emf_2002_Ecore"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2002_Ecore"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2002/Ecore"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2002_Ecore {
					__id = "conformsTo__www_eclipse_org_emf_2002_Ecore"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2002_Ecore"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2002/Ecore.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2003_XMLType {
				__id = "_www_eclipse_org_emf_2003_XMLType"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2003_XMLType"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2003/XMLType"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2003_XMLType {
					__id = "conformsTo__www_eclipse_org_emf_2003_XMLType"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2003_XMLType"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2003/XMLType.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_w3_org_XML_1998_namespace {
				__id = "_www_w3_org_XML_1998_namespace"
				identifier = new PlatformID {
					value = "_www_w3_org_XML_1998_namespace"
				}
				locator = new EFSLocator {
					value = "http://www.w3.org/XML/1998/namespace"
				}
			}
				ownedEntities += new Service service_conformsTo__www_w3_org_XML_1998_namespace {
					__id = "conformsTo__www_w3_org_XML_1998_namespace"
					identifier = new PlatformID {
						value = "conformsTo__www_w3_org_XML_1998_namespace"
					}
					locator = new EFSLocator {
						value = "http://www.w3.org/XML/1998/namespace.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_ecore {
				__id = "org.eclipse.emf.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_impl {
				__id = "org.eclipse.emf.ecore.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_plugin {
				__id = "org.eclipse.emf.ecore.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.plugin"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_resource {
				__id = "org.eclipse.emf.ecore.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.resource"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_resource_impl {
				__id = "org.eclipse.emf.ecore.resource.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.resource.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_util {
				__id = "org.eclipse.emf.ecore.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.util"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xml_namespace {
				__id = "org.eclipse.emf.ecore.xml.namespace"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xml.namespace"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xml_namespace_impl {
				__id = "org.eclipse.emf.ecore.xml.namespace.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xml.namespace.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xml_namespace_util {
				__id = "org.eclipse.emf.ecore.xml.namespace.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xml.namespace.util"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xml_type {
				__id = "org.eclipse.emf.ecore.xml.type"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xml.type"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xml_type_impl {
				__id = "org.eclipse.emf.ecore.xml.type.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xml.type.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xml_type_internal {
				__id = "org.eclipse.emf.ecore.xml.type.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xml.type.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xml_type_util {
				__id = "org.eclipse.emf.ecore.xml.type.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xml.type.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecore_change {
			__id = "org.eclipse.emf.ecore.change"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecore.change"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_change
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_change
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2003_Change {
				__id = "_www_eclipse_org_emf_2003_Change"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2003_Change"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2003/Change"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2003_Change {
					__id = "conformsTo__www_eclipse_org_emf_2003_Change"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2003_Change"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2003/Change.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_ecore_change {
				__id = "org.eclipse.emf.ecore.change"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.change"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_change_impl {
				__id = "org.eclipse.emf.ecore.change.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.change.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_change_util {
				__id = "org.eclipse.emf.ecore.change.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.change.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecore_xmi {
			__id = "org.eclipse.emf.ecore.xmi"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecore.xmi"
			}
			state = : "State.active"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_xmi
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecore_xmi
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_ecore_xmi {
				__id = "org.eclipse.emf.ecore.xmi"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xmi"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xmi_impl {
				__id = "org.eclipse.emf.ecore.xmi.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xmi.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_ecore_xmi_util {
				__id = "org.eclipse.emf.ecore.xmi.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecore.xmi.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_gmf_examples_pde {
		__id = "org.eclipse.gmf.examples.pde"
		identifier = new PlatformID {
			value = "org.eclipse.gmf.examples.pde"
		}
		version = new Version {
			value = "1.2.0.v20090114-0940-318Z8s733L3D4B14H53"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2005 Borland Software Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Graphical Modeling Framework examples PDE UI plugins."
		}
		plugins += new Plugin plugin_org_eclipse_gmf_examples_ui_pde {
			__id = "org.eclipse.gmf.examples.ui.pde"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.examples.ui.pde"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_examples_ui_pde
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_examples_ui_pde
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_examples_ui_pde
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_examples_ui_pde
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_examples_ui_pde_internal {
				__id = "org.eclipse.gmf.examples.ui.pde.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.examples.ui.pde.internal"
				}
			}
			exports += new Package package_org_eclipse_gmf_examples_ui_pde_internal_l10n {
				__id = "org.eclipse.gmf.examples.ui.pde.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.examples.ui.pde.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gmf_examples_ui_pde_internal_wizards {
				__id = "org.eclipse.gmf.examples.ui.pde.internal.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.examples.ui.pde.internal.wizards"
				}
			}
			exports += new Package package_org_eclipse_gmf_examples_ui_pde_util {
				__id = "org.eclipse.gmf.examples.ui.pde.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.examples.ui.pde.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_examples {
			__id = "org.eclipse.gmf.examples"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090615-0700"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_xsd_editor {
		__id = "org.eclipse.xsd.editor"
		identifier = new PlatformID {
			value = "org.eclipse.xsd.editor"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Simple, tree-based XML Schema editor for the IDE."
		}
		plugins += new Plugin plugin_org_eclipse_xsd_editor {
			__id = "org.eclipse.xsd.editor"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_editor
				target = plugin_org_eclipse_xsd_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_xsd_presentation {
				__id = "org.eclipse.xsd.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.presentation"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_uml2_doc {
		__id = "org.eclipse.uml2.doc"
		identifier = new PlatformID {
			value = "org.eclipse.uml2.doc"
		}
		version = new Version {
			value = "3.0.0.v200908281330"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2004, 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Unified Modeling Language 2.x Documentation"
		}
		plugins += new Plugin plugin_org_eclipse_uml2_doc {
			__id = "org.eclipse.uml2.doc"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.uml2.doc"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.uml2.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_emf_codegen_ui {
		__id = "org.eclipse.emf.codegen.ui"
		identifier = new PlatformID {
			value = "org.eclipse.emf.codegen.ui"
		}
		version = new Version {
			value = "2.4.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Tools for compiling Java Emmitter Templates in the IDE."
		}
		plugins += new Plugin plugin_org_eclipse_emf_codegen_ui {
			__id = "org.eclipse.emf.codegen.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.codegen.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_codegen_ui
				target = plugin_org_eclipse_emf_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_codegen_action {
				__id = "org.eclipse.emf.codegen.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.action"
				}
			}
			exports += new Package package_org_eclipse_emf_codegen_presentation {
				__id = "org.eclipse.emf.codegen.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.codegen.presentation"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_ocl_doc {
		__id = "org.eclipse.ocl.doc"
		identifier = new PlatformID {
			value = "org.eclipse.ocl.doc"
		}
		version = new Version {
			value = "1.3.0.v200901271800-35-8s733L3A6F5D63"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc. and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Object Constraint Language (OCL) 2.0 (documentation)"
		}
		plugins += new Plugin plugin_org_eclipse_ocl_doc {
			__id = "org.eclipse.ocl.doc"
			identifier = new PlatformID {
				value = "org.eclipse.ocl.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200906151230"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.ocl.doc"
				identifier = new PlatformID {
					value = "org.eclipse.ocl.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.ocl.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ocl_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ocl_examples {
			__id = "org.eclipse.emf.ocl.examples"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ocl.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0.v200901271800"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl_examples
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl_examples
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl_examples
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ocl_examples
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_ocl_examples_internal_wizard {
				__id = "org.eclipse.emf.ocl.examples.internal.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ocl.examples.internal.wizard"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_m2m_atl_source {
		__id = "org.eclipse.m2m.atl.source"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.atl.source"
		}
		version = new Version {
			value = "3.0.1.v200909150941"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*   * Copyright (c) 2004, 2009 INRIA. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html *  */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "ATL Runtime"
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_source {
			__id = "org.eclipse.m2m.atl.source"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.1.v200909150941"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_h2_jdbc {
		__id = "org.h2.jdbc"
		identifier = new PlatformID {
			value = "org.h2.jdbc"
		}
		version = new Version {
			value = "1.1.114.200912171633"
		}
		provider = vendor_Net4j_and_CDO_Plus
		license = license__www_h2database_com_html_license_html
		copyright = new Copyright {
			name = "_www_h2database_com_html_license_html"
			text = "Summary and License FAQ H2 is dual licensed and available under a modified version of the MPL 1.1 ( Mozilla Public License ) or under the (unmodified) EPL 1.0 ( Eclipse Public License ). The changes to the MPL are underlined . There is a License FAQ for both the MPL and the EPL, most of that is applicable to the H2 License as well. * You can use H2 for free. You can integrate it into your application (including commercial applications), and you can distribute it. * Files containing only your code are not covered by this license (it is 'commercial friendly'). * Modifications to the H2 source code must be published. * You don't need to provide the source code of H2 if you did not modify anything. However, nobody is allowed to rename H2, modify it a little, and sell it as a database engine without telling the customers it is in fact H2. This happened to HSQLDB: A company called 'bungisoft' copied HSQLDB, renamed it to 'RedBase', and tried to sell it, hiding the fact that it was in fact just HSQLDB. It seems 'bungisoft' does not exist any more, but you can use the Wayback Machine of http://www.archive.org and visit old web pages of http://www.bungisoft.com . About porting the source code to another language (for example C# or C++): Converted source code (even if done manually) stays under the same copyright and license as the original code. The copyright of the ported source code does not (automatically) go to the person who ported the code. H2 License, Version 1.0 1. Definitions 1.0.1. 'Commercial Use' means distribution or otherwise making the Covered Code available to a third party. 1.1. 'Contributor' means each entity that creates or contributes to the creation of Modifications. 1.2. 'Contributor Version' means the combination of the Original Code, prior Modifications used by a Contributor, and the Modifications made by that particular Contributor. 1.3. 'Covered Code' means the Original Code or Modifications or the combination of the Original Code and Modifications, in each case including portions thereof. 1.4. 'Electronic Distribution Mechanism' means a mechanism generally accepted in the software development community for the electronic transfer of data. 1.5. 'Executable' means Covered Code in any form other than Source Code. 1.6. 'Initial Developer' means the individual or entity identified as the Initial Developer in the Source Code notice required by Exhibit A . 1.7. 'Larger Work' means a work which combines Covered Code or portions thereof with code not governed by the terms of this License. 1.8. 'License' means this document. 1.8.1. 'Licensable' means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein. 1.9. 'Modifications' means any addition to or deletion from the substance or structure of either the Original Code or any previous Modifications. When Covered Code is released as a series of files, a Modification is: 1.9.a. Any addition to or deletion from the contents of a file containing Original Code or previous Modifications. 1.9.b. Any new file that contains any part of the Original Code or previous Modifications. 1.10. 'Original Code' means Source Code of computer software code which is described in the Source Code notice required by Exhibit A as Original Code, and which, at the time of its release under this License is not already Covered Code governed by this License. 1.10.1. 'Patent Claims' means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor. 1.11. 'Source Code' means the preferred form of the Covered Code for making modifications to it, including all modules it contains, plus any associated interface definition files, scripts used to control compilation and installation of an Executable, or source code differential comparisons against either the Original Code or another well known, available Covered Code of the Contributor's choice. The Source Code can be in a compressed or archival form, provided the appropriate decompression or de-archiving software is widely available for no charge. 1.12. 'You' (or 'Your') means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License or a future version of this License issued under Section 6.1. For legal entities, 'You' includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, 'control' means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. 2. Source Code License 2.1. The Initial Developer Grant The Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license, subject to third party intellectual property claims: 2.1.a. under intellectual property rights (other than patent or trademark) Licensable by Initial Developer to use, reproduce, modify, display, perform, sublicense and distribute the Original Code (or portions thereof) with or without Modifications, and/or as part of a Larger Work; and 2.1.b. under Patents Claims infringed by the making, using or selling of Original Code, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Code (or portions thereof). 2.1.c. the licenses granted in this Section 2.1 ( a ) and ( b ) are effective on the date Initial Developer first distributes Original Code under the terms of this License. 2.1.d. Notwithstanding Section 2.1 ( b ) above, no patent license is granted: 1) for code that You delete from the Original Code; 2) separate from the Original Code; or 3) for infringements caused by: i) the modification of the Original Code or ii) the combination of the Original Code with other software or devices. 2.2. Contributor Grant Subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license 2.2.a. under intellectual property rights (other than patent or trademark) Licensable by Contributor, to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof) either on an unmodified basis, with other Modifications, as Covered Code and/or as part of a Larger Work; and 2.2.b. under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: 1) Modifications made by that Contributor (or portions thereof); and 2) the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination). 2.2.c. the licenses granted in Sections 2.2 ( a ) and 2.2 ( b ) are effective on the date Contributor first makes Commercial Use of the Covered Code. 2.2.c. Notwithstanding Section 2.2 ( b ) above, no patent license is granted: 1) for any code that Contributor has deleted from the Contributor Version; 2) separate from the Contributor Version; 3) for infringements caused by: i) third party modifications of Contributor Version or ii) the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or 4) under Patent Claims infringed by Covered Code in the absence of Modifications made by that Contributor. 3. Distribution Obligations 3.1. Application of License The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section 2.2 . The Source Code version of Covered Code may be distributed only under the terms of this License or a future version of this License released under Section 6.1 , and You must include a copy of this License with every copy of the Source Code You distribute. You may not offer or impose any terms on any Source Code version that alters or restricts the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section 3.5 . 3.2. Availability of Source Code Any Modification which You create or to which You contribute must be made available in Source Code form under the terms of this License either on the same media as an Executable version or via an accepted Electronic Distribution Mechanism to anyone to whom you made an Executable version available; and if made available via Electronic Distribution Mechanism, must remain available for at least twelve (12) months after the date it initially became available, or at least six (6) months after a subsequent version of that particular Modification has been made available to such recipients. You are responsible for ensuring that the Source Code version remains available even if the Electronic Distribution Mechanism is maintained by a third party. 3.3. Description of Modifications You must cause all Covered Code to which You contribute to contain a file documenting the changes You made to create that Covered Code and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Code provided by the Initial Developer and including the name of the Initial Developer in (a) the Source Code, and (b) in any notice in an Executable version or related documentation in which You describe the origin or ownership of the Covered Code. 3.4. Intellectual Property Matters 3.4.a. Third Party Claims: If Contributor has knowledge that a license under a third party's intellectual property rights is required to exercise the rights granted by such Contributor under Sections 2.1 or 2.2 , Contributor must include a text file with the Source Code distribution titled 'LEGAL' which describes the claim and the party making the claim in sufficient detail that a recipient will know whom to contact. If Contributor obtains such knowledge after the Modification is made available as described in Section 3.2 , Contributor shall promptly modify the LEGAL file in all copies Contributor makes available thereafter and shall take other steps (such as notifying appropriate mailing lists or newsgroups) reasonably calculated to inform those who received the Covered Code that new knowledge has been obtained. 3.4.b. Contributor APIs: If Contributor's Modifications include an application programming interface and Contributor has knowledge of patent licenses which are reasonably necessary to implement that API, Contributor must also include this information in the legal file. 3.4.c. Representations: Contributor represents that, except as disclosed pursuant to Section 3.4 ( a ) above, Contributor believes that Contributor's Modifications are Contributor's original creation(s) and/or Contributor has sufficient rights to grant the rights conveyed by this License. 3.5. Required Notices You must duplicate the notice in Exhibit A in each file of the Source Code. If it is not possible to put such notice in a particular Source Code file due to its structure, then You must include such notice in a location (such as a relevant directory) where a user would be likely to look for such a notice. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in Exhibit A . You must also duplicate this License in any documentation for the Source Code where You describe recipients' rights or ownership rights relating to Covered Code. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Code. However, You may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer. 3.6. Distribution of Executable Versions You may distribute Covered Code in Executable form only if the requirements of Sections 3.1 , 3.2 , 3.3 , 3.4 and 3.5 have been met for that Covered Code, and if You include a notice stating that the Source Code version of the Covered Code is available under the terms of this License, including a description of how and where You have fulfilled the obligations of Section 3.2 . The notice must be conspicuously included in any notice in an Executable version, related documentation or collateral in which You describe recipients' rights relating to the Covered Code. You may distribute the Executable version of Covered Code or ownership rights under a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable version does not attempt to limit or alter the recipient's rights in the Source Code version from the rights set forth in this License. If You distribute the Executable version under a different license You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or any Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer. 3.7. Larger Works You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Code. 4. Inability to Comply Due to Statute or Regulation. If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Code due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be included in the legal file described in Section 3.4 and must be included with all distributions of the Source Code. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it. 5. Application of this License. This License applies to code to which the Initial Developer has attached the notice in Exhibit A and to related Covered Code. 6. Versions of the License. 6.1. New Versions The H2 Group may publish revised and/or new versions of the License from time to time. Each version will be given a distinguishing version number. 6.2. Effect of New Versions Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by the H2 Group . No one other than the H2 Group has the right to modify the terms applicable to Covered Code created under this License. 6.3. Derivative Works If You create or use a modified version of this License (which you may only do in order to apply it to code which is not already Covered Code governed by this License), You must (a) rename Your license so that the phrases 'H2 Group', 'H2' or any confusingly similar phrase do not appear in your license (except to note that your license differs from this License) and (b) otherwise make it clear that Your version of the license contains terms which differ from the H2 License . (Filling in the name of the Initial Developer, Original Code or Contributor in the notice described in Exhibit A shall not of themselves be deemed to be modifications of this License.) 7. Disclaimer of Warranty Covered code is provided under this license on an 'as is' basis, without warranty of any kind, either expressed or implied, including, without limitation, warranties that the covered code is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the covered code is with you. Should any covered code prove defective in any respect, you (not the initial developer or any other contributor) assume the cost of any necessary servicing, repair or correction. This disclaimer of warranty constitutes an essential part of this license. No use of any covered code is authorized hereunder except under this disclaimer. 8. Termination 8.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Covered Code which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive. 8.2. If You initiate litigation by asserting a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You file such action is referred to as 'Participant') alleging that: 8.2.a. such Participant's Contributor Version directly or indirectly infringes any patent, then any and all rights granted by such Participant to You under Sections 2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively, unless if within 60 days after receipt of notice You either: (i) agree in writing to pay Participant a mutually agreeable reasonable royalty for Your past and future use of Modifications made by such Participant, or (ii) withdraw Your litigation claim with respect to the Contributor Version against such Participant. If within 60 days of notice, a reasonable royalty and payment arrangement are not mutually agreed upon in writing by the parties or the litigation claim is not withdrawn, the rights granted by Participant to You under Sections 2.1 and/or 2.2 automatically terminate at the expiration of the 60 day notice period specified above. 8.2.b. any software, hardware, or device, other than such Participant's Contributor Version, directly or indirectly infringes any patent, then any rights granted to You by such Participant under Sections 2.1( b ) and 2.2( b ) are revoked effective as of the date You first made, used, sold, distributed, or had made, Modifications made by that Participant. 8.3. If You assert a patent infringement claim against Participant alleging that such Participant's Contributor Version directly or indirectly infringes any patent where such claim is resolved (such as by license or settlement) prior to the initiation of patent infringement litigation, then the reasonable value of the licenses granted by such Participant under Sections 2.1 or 2.2 shall be taken into account in determining the amount or value of any payment or license. 8.4. In the event of termination under Sections 8.1 or 8.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or any distributor hereunder prior to termination shall survive termination. 9. Limitation of Liability Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall you, the initial developer, any other contributor, or any distributor of covered code, or any supplier of any of such parties, be liable to any person for any indirect, special, incidental, or consequential damages of any character including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to you. 10. United States Government End Users The Covered Code is a 'commercial item', as that term is defined in 48 C.F.R. 2.101 (October 1995), consisting of 'commercial computer software' and 'commercial computer software documentation', as such terms are used in 48 C.F.R. 12.212 (September 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Code with only those rights set forth herein. 11. Miscellaneous This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by California law provisions (except to the extent applicable law, if any, provides otherwise), excluding its conflict-of-law provisions. With respect to disputes in which at least one party is a citizen of, or an entity chartered or registered to do business in United States of America, any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California, with venue lying in Santa Clara County, California, with the losing party responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. 12. Responsibility for Claims As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability. 13. Multiple-Licensed Code Initial Developer may designate portions of the Covered Code as 'Multiple-Licensed'. 'Multiple-Licensed' means that the Initial Developer permits you to utilize portions of the Covered Code under Your choice of this or the alternative licenses, if any, specified by the Initial Developer in the file described in Exhibit A . Exhibit A Multiple-Licensed under the H2 License, Version 1.0, and under the Eclipse Public License, Version 1.0 (http://h2database.com/html/license.html). Initial Developer: H2 Group Eclipse Public License - Version 1.0 THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE ('AGREEMENT'). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT. 1. DEFINITIONS 'Contribution' means: a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and b) in the case of each subsequent Contributor: i) changes to the Program, and ii) additions to the Program; where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program. 'Contributor' means any person or entity that distributes the Program. 'Licensed Patents ' mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program. 'Program' means the Contributions distributed in accordance with this Agreement. 'Recipient' means anyone who receives the Program under this Agreement, including all Contributors. 2. GRANT OF RIGHTS a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form. b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder. c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program. d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement. 3. REQUIREMENTS A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that: a) it complies with the terms and conditions of this Agreement; and b) its license agreement: i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose; ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits; iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange. When the Program is made available in source code form: a) it must be made available under this Agreement; and b) a copy of this Agreement must be included with each copy of the Program. Contributors may not remove or alter any copyright notices contained within the Program. Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution. 4. COMMERCIAL DISTRIBUTION Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ('Commercial Contributor') hereby agrees to defend and indemnify every other Contributor ('Indemnified Contributor') against any losses, damages and costs (collectively 'Losses') arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense. For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages. 5. NO WARRANTY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations. 6. DISCLAIMER OF LIABILITY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 7. GENERAL If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable. If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed. All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive. Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation."
			locator = new URLLocator {
				value = "http://www.h2database.com/html/license.html"
			}
		}
		description = new Description {
			name = "description"
			text = "H2, the Java SQL database. The main feature of H2 are:    * Very fast, open source, JDBC API   * Embedded and server modes; in-memory databases   * Browser based Console application   * Small footprint: around 1 MB jar file size"
		}
		plugins += new Plugin plugin_org_h2_jdbc {
			__id = "org.h2.jdbc"
			identifier = new PlatformID {
				value = "org.h2.jdbc"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.114.200912171633"
			}
			vendor = vendor_Net4j_and_CDO_Plus
			exports += new Package package_org_h2 {
				__id = "org.h2"
				identifier = new PlatformID {
					value = "org.h2"
				}
				version = new Version {
					value = "1.1.114"
				}
			}
			exports += new Package package_org_h2_api {
				__id = "org.h2.api"
				identifier = new PlatformID {
					value = "org.h2.api"
				}
				version = new Version {
					value = "1.1.114"
				}
			}
			exports += new Package package_org_h2_fulltext {
				__id = "org.h2.fulltext"
				identifier = new PlatformID {
					value = "org.h2.fulltext"
				}
				version = new Version {
					value = "1.1.114"
				}
			}
			exports += new Package package_org_h2_jdbcx {
				__id = "org.h2.jdbcx"
				identifier = new PlatformID {
					value = "org.h2.jdbcx"
				}
				version = new Version {
					value = "1.1.114"
				}
			}
			exports += new Package package_org_h2_tools {
				__id = "org.h2.tools"
				identifier = new PlatformID {
					value = "org.h2.tools"
				}
				version = new Version {
					value = "1.1.114"
				}
			}
			exports += new Package package_org_h2_util {
				__id = "org.h2.util"
				identifier = new PlatformID {
					value = "org.h2.util"
				}
				version = new Version {
					value = "1.1.114"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_acceleo_examples {
		__id = "org.eclipse.acceleo.examples"
		identifier = new PlatformID {
			value = "org.eclipse.acceleo.examples"
		}
		version = new Version {
			value = "0.8.1.v200909161003"
		}
		provider = vendor_Eclipse_org
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2008 Obeo and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Acceleo Examples"
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_examples {
			__id = "org.eclipse.acceleo.examples"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_examples
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_examples
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_examples
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_acceleo_examples
				target = plugin_org_eclipse_ui_ide
			}
		}
	}

	features += new Feature feature_org_eclipse_xtend_source {
		__id = "org.eclipse.xtend.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.source"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Xtend component.(Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xtend_source {
			__id = "org.eclipse.xtend.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_mwe_ui_source {
		__id = "org.eclipse.emf.mwe.ui.source"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mwe.ui.source"
		}
		version = new Version {
			value = "0.7.2.v200908120417"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "MWE Core UI source code (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_mwe_ui_source {
			__id = "org.eclipse.emf.mwe.ui.source"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mwe.ui.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120417"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_emf_ecoretools_source {
		__id = "org.eclipse.emf.ecoretools.source"
		identifier = new PlatformID {
			value = "org.eclipse.emf.ecoretools.source"
		}
		version = new Version {
			value = "0.9.0.v200906221231"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2007, 2009 Anyware Technologies All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Ecore Tools source code (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_source {
			__id = "org.eclipse.emf.ecoretools.source"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.9.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__www_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_gmf_runtime_notation {
		__id = "org.eclipse.gmf.runtime.notation"
		identifier = new PlatformID {
			value = "org.eclipse.gmf.runtime.notation"
		}
		version = new Version {
			value = "1.2.0.v20090729-2029-33-8s733L3C5715J78"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2008 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Graphical Modeling Framework Notation"
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_notation {
			__id = "org.eclipse.gmf.runtime.notation"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.notation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090521-1925"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_runtime_1_0_0_notation {
				__id = "_www_eclipse_org_gmf_runtime_1_0_0_notation"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_runtime_1_0_0_notation"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/runtime/1.0.0/notation"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_runtime_1_0_0_notation {
					__id = "conformsTo__www_eclipse_org_gmf_runtime_1_0_0_notation"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_runtime_1_0_0_notation"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/runtime/1.0.0/notation.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_runtime_1_0_1_notation {
				__id = "_www_eclipse_org_gmf_runtime_1_0_1_notation"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_runtime_1_0_1_notation"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/runtime/1.0.1/notation"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_runtime_1_0_1_notation {
					__id = "conformsTo__www_eclipse_org_gmf_runtime_1_0_1_notation"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_runtime_1_0_1_notation"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/runtime/1.0.1/notation.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_runtime_1_0_2_notation {
				__id = "_www_eclipse_org_gmf_runtime_1_0_2_notation"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_runtime_1_0_2_notation"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/runtime/1.0.2/notation"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_runtime_1_0_2_notation {
					__id = "conformsTo__www_eclipse_org_gmf_runtime_1_0_2_notation"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_runtime_1_0_2_notation"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/runtime/1.0.2/notation.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmf_runtime_notation {
				__id = "org.eclipse.gmf.runtime.notation"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_datatype {
				__id = "org.eclipse.gmf.runtime.notation.datatype"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.datatype"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_impl {
				__id = "org.eclipse.gmf.runtime.notation.impl"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.impl"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_stylepooling {
				__id = "org.eclipse.gmf.runtime.notation.stylepooling"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.stylepooling"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_util {
				__id = "org.eclipse.gmf.runtime.notation.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_runtime_notation_edit {
			__id = "org.eclipse.gmf.runtime.notation.edit"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.runtime.notation.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v20090403-1720"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_edit
				target = plugin_org_eclipse_gmf_runtime_notation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_edit
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_runtime_notation_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation {
				__id = "org.eclipse.gmf.runtime.notation"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation"
				}
			}
			exports += new Package package_org_eclipse_gmf_runtime_notation_provider {
				__id = "org.eclipse.gmf.runtime.notation.provider"
				identifier = new PlatformID {
					value = "org.eclipse.gmf.runtime.notation.provider"
				}
			}
		}
	}

	features += new Feature feature_dk_contix_eclipse_hudson {
		__id = "dk.contix.eclipse.hudson"
		identifier = new PlatformID {
			value = "dk.contix.eclipse.hudson"
		}
		version = new Version {
			value = "1.0.10"
		}
		provider = vendor_Contix_Technologies
		license = license__www_opensource_org_licenses_mit_license_php
		description = new Description {
			name = "description"
			text = "Hudson monitor plugin"
		}
		plugins += new Plugin plugin_dk_contix_eclipse_hudson {
			__id = "dk.contix.eclipse.hudson"
			identifier = new PlatformID {
				value = "dk.contix.eclipse.hudson"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.10"
			}
			vendor = vendor_Contix_Technologies
			dependencies += new VersionDependency {
				source = plugin_dk_contix_eclipse_hudson
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_dk_contix_eclipse_hudson
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_dk_contix_eclipse_hudson
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_dk_contix_eclipse_hudson
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_dk_contix_eclipse_hudson
				target = plugin_org_eclipse_core_net
			}
		}
	}

	features += new Feature feature_org_eclipse_xtend_typesystem_emf_source {
		__id = "org.eclipse.xtend.typesystem.emf.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.typesystem.emf.source"
		}
		version = new Version {
			value = "0.7.0.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Xtend EMF typesystem component."
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_emf_source {
			__id = "org.eclipse.xtend.typesystem.emf.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.emf.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.0.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_compare_doc {
		__id = "org.eclipse.emf.compare.doc"
		identifier = new PlatformID {
			value = "org.eclipse.emf.compare.doc"
		}
		version = new Version {
			value = "1.0.1.v200909161031"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*    * Copyright (c) 2006, Obeo.  * All rights reserved. This program and the accompanying materials  * are made available under the terms of the Eclipse Public License v1.0  * which accompanies this distribution, and is available at  * http://www.eclipse.org/legal/epl-v10.html  *   */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "EMF Compare Documentation"
		}
		plugins += new Plugin plugin_org_eclipse_emf_compare_doc {
			__id = "org.eclipse.emf.compare.doc"
			identifier = new PlatformID {
				value = "org.eclipse.emf.compare.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.v200909161031"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.emf.compare.doc"
				identifier = new PlatformID {
					value = "org.eclipse.emf.compare.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.emf.compare.doc"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_emf_mapping_ecore_editor {
		__id = "org.eclipse.emf.mapping.ecore.editor"
		identifier = new PlatformID {
			value = "org.eclipse.emf.mapping.ecore.editor"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Editors for defining mappings between Ecore models and to XML representations for instance data in the IDE."
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_ecore_editor {
			__id = "org.eclipse.emf.mapping.ecore.editor"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.ecore.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_ecore2ecore_editor {
			__id = "org.eclipse.emf.mapping.ecore2ecore.editor"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.ecore2ecore.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.4.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore_editor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore_editor
				target = plugin_org_eclipse_emf_mapping_ecore2ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore_editor
				target = plugin_org_eclipse_emf_mapping_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore_editor
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2ecore_editor
				target = plugin_org_eclipse_emf_ecore_editor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2ecore_action {
				__id = "org.eclipse.emf.mapping.ecore2ecore.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2ecore.action"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2ecore_presentation {
				__id = "org.eclipse.emf.mapping.ecore2ecore.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2ecore.presentation"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_mapping_ecore2xml_ui {
			__id = "org.eclipse.emf.mapping.ecore2xml.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.mapping.ecore2xml.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_emf_mapping_ecore2xml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_mapping_ecore2xml_ui
				target = plugin_org_eclipse_emf_mapping_ecore2ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2xml_action {
				__id = "org.eclipse.emf.mapping.ecore2xml.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2xml.action"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2xml_presentation {
				__id = "org.eclipse.emf.mapping.ecore2xml.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2xml.presentation"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2xml_provider {
				__id = "org.eclipse.emf.mapping.ecore2xml.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2xml.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_mapping_ecore2xml_ui {
				__id = "org.eclipse.emf.mapping.ecore2xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.mapping.ecore2xml.ui"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_m2m_qvt_oml_doc {
		__id = "org.eclipse.m2m.qvt.oml.doc"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.qvt.oml.doc"
		}
		version = new Version {
			value = "2.0.0.v20090316-1930-3--7w311A172702611"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Operational QVT Documentation"
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_doc {
			__id = "org.eclipse.m2m.qvt.oml.doc"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090616-1500"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.m2m.qvt.oml.doc"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.m2m.qvt.oml.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
		}
	}

	features += new Feature feature_org_eclipse_acceleo_source {
		__id = "org.eclipse.acceleo.source"
		identifier = new PlatformID {
			value = "org.eclipse.acceleo.source"
		}
		version = new Version {
			value = "0.8.1.v200909161003"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2008, 2009 Obeo. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "MOF models to text Transformation Language"
		}
		plugins += new Plugin plugin_org_eclipse_acceleo_source {
			__id = "org.eclipse.acceleo.source"
			identifier = new PlatformID {
				value = "org.eclipse.acceleo.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.8.1.v200909161003"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		sites += site__download_eclipse_org_modeling_m2t_updates_site_xml
	}

	features += new Feature feature_org_eclipse_draw2d {
		__id = "org.eclipse.draw2d"
		identifier = new PlatformID {
			value = "org.eclipse.draw2d"
		}
		version = new Version {
			value = "3.5.1.v20090724-1146-4407w311A192402452"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Graphical Editing Framework Draw2d"
		}
		plugins += new Plugin plugin_org_eclipse_draw2d {
			__id = "org.eclipse.draw2d"
			identifier = new PlatformID {
				value = "org.eclipse.draw2d"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.1.v20090813-1341"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_draw2d
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_draw2d {
				__id = "org.eclipse.draw2d"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d"
				}
			}
			exports += new Package package_org_eclipse_draw2d_graph {
				__id = "org.eclipse.draw2d.graph"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.graph"
				}
			}
			exports += new Package package_org_eclipse_draw2d_geometry {
				__id = "org.eclipse.draw2d.geometry"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.geometry"
				}
			}
			exports += new Package package_org_eclipse_draw2d_images {
				__id = "org.eclipse.draw2d.images"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.images"
				}
			}
			exports += new Package package_org_eclipse_draw2d_internal {
				__id = "org.eclipse.draw2d.internal"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.internal"
				}
			}
			exports += new Package package_org_eclipse_draw2d_parts {
				__id = "org.eclipse.draw2d.parts"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.parts"
				}
			}
			exports += new Package package_org_eclipse_draw2d_text {
				__id = "org.eclipse.draw2d.text"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.text"
				}
			}
			exports += new Package package_org_eclipse_draw2d_widgets {
				__id = "org.eclipse.draw2d.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.widgets"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_draw2d
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "3.8.1"
				maxVersion = "5.0.0"
			}
		}
		sites += site__download_eclipse_org_tools_gef_updates_releases_site_xml
	}

	features += new Feature feature_org_eclipse_emf_edit {
		__id = "org.eclipse.emf.edit"
		identifier = new PlatformID {
			value = "org.eclipse.emf.edit"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Platform-independent framework for viewing and editing EMF objects."
		}
		plugins += new Plugin plugin_org_eclipse_emf_edit {
			__id = "org.eclipse.emf.edit"
			identifier = new PlatformID {
				value = "org.eclipse.emf.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit
				target = plugin_org_eclipse_emf_ecore_change
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2002_Tree {
				__id = "_www_eclipse_org_emf_2002_Tree"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2002_Tree"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2002/Tree"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2002_Tree {
					__id = "conformsTo__www_eclipse_org_emf_2002_Tree"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2002_Tree"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2002/Tree.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_emf_edit {
				__id = "org.eclipse.emf.edit"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_command {
				__id = "org.eclipse.emf.edit.command"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.command"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_domain {
				__id = "org.eclipse.emf.edit.domain"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.domain"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_provider {
				__id = "org.eclipse.emf.edit.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_provider_resource {
				__id = "org.eclipse.emf.edit.provider.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.provider.resource"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_tree {
				__id = "org.eclipse.emf.edit.tree"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.tree"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_tree_impl {
				__id = "org.eclipse.emf.edit.tree.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.tree.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_tree_provider {
				__id = "org.eclipse.emf.edit.tree.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.tree.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_tree_util {
				__id = "org.eclipse.emf.edit.tree.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.tree.util"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xpand_examples_source {
		__id = "org.eclipse.xpand.examples.source"
		identifier = new PlatformID {
			value = "org.eclipse.xpand.examples.source"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "API documentation and source code zips for Xpand component."
		}
		plugins += new Plugin plugin_org_eclipse_xpand_examples_source {
			__id = "org.eclipse.xpand.examples.source"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.examples.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_eclipse_emf_common_ui {
		__id = "org.eclipse.emf.common.ui"
		identifier = new PlatformID {
			value = "org.eclipse.emf.common.ui"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "General-purpose extensions to the Eclipse UI."
		}
		plugins += new Plugin plugin_org_eclipse_emf_common_ui {
			__id = "org.eclipse.emf.common.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.common.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_common_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_common_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_common_ui
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_common_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_common_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_common_ui {
				__id = "org.eclipse.emf.common.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_common_ui_action {
				__id = "org.eclipse.emf.common.ui.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.ui.action"
				}
			}
			exports += new Package package_org_eclipse_emf_common_ui_celleditor {
				__id = "org.eclipse.emf.common.ui.celleditor"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.ui.celleditor"
				}
			}
			exports += new Package package_org_eclipse_emf_common_ui_dialogs {
				__id = "org.eclipse.emf.common.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_emf_common_ui_editor {
				__id = "org.eclipse.emf.common.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_emf_common_ui_viewer {
				__id = "org.eclipse.emf.common.ui.viewer"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.ui.viewer"
				}
			}
			exports += new Package package_org_eclipse_emf_common_ui_wizard {
				__id = "org.eclipse.emf.common.ui.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.emf.common.ui.wizard"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_eclipse_xtext_runtime_source {
		__id = "org.eclipse.xtext.runtime.source"
		identifier = new PlatformID {
			value = "org.eclipse.xtext.runtime.source"
		}
		version = new Version {
			value = "0.7.2.v200908120607"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		description = new Description {
			name = "description"
			text = "Xtext Runtime Source (Incubation) Feature"
		}
		plugins += new Plugin plugin_org_eclipse_xtext_runtime_source {
			__id = "org.eclipse.xtext.runtime.source"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.runtime.source"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
	}

	features += new Feature feature_org_emftext_language_primitive_types {
		__id = "org.emftext.language.primitive_types"
		identifier = new PlatformID {
			value = "org.emftext.language.primitive_types"
		}
		version = new Version {
			value = "0.5.1.v201002111540"
		}
		provider = vendor_Software_Technology_Group___TU_Dresden_Germany
		license = license_EPL
		description = new Description {
			name = "description"
			text = "A reuseable metamodel that specifies primitve type wrappers."
		}
		plugins += new Plugin plugin_org_emftext_language_primitive_types {
			__id = "org.emftext.language.primitive_types"
			identifier = new PlatformID {
				value = "org.emftext.language.primitive_types"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.5.1.v201002111540"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_primitive_types
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_primitive_types
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_emftext_org_language_primitive_types {
				__id = "_www_emftext_org_language_primitive_types"
				identifier = new PlatformID {
					value = "_www_emftext_org_language_primitive_types"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/language/primitive_types"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_language_primitive_types {
					__id = "conformsTo__www_emftext_org_language_primitive_types"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_language_primitive_types"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/language/primitive_types.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_emftext_language_primitive_types {
				__id = "org.emftext.language.primitive_types"
				identifier = new PlatformID {
					value = "org.emftext.language.primitive_types"
				}
			}
			exports += new Package package_org_emftext_language_primitive_types_helper {
				__id = "org.emftext.language.primitive_types.helper"
				identifier = new PlatformID {
					value = "org.emftext.language.primitive_types.helper"
				}
			}
			exports += new Package package_org_emftext_language_primitive_types_impl {
				__id = "org.emftext.language.primitive_types.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.primitive_types.impl"
				}
			}
			exports += new Package package_org_emftext_language_primitive_types_util {
				__id = "org.emftext.language.primitive_types.util"
				identifier = new PlatformID {
					value = "org.emftext.language.primitive_types.util"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_primitive_types_edit {
			__id = "org.emftext.language.primitive_types.edit"
			identifier = new PlatformID {
				value = "org.emftext.language.primitive_types.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.5.1.v201002111540"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_primitive_types_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_primitive_types_edit
				target = plugin_org_emftext_language_primitive_types
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_primitive_types_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_org_emftext_language_primitive_types_provider {
				__id = "org.emftext.language.primitive_types.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.primitive_types.provider"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_xsd_doc {
		__id = "org.eclipse.xsd.doc"
		identifier = new PlatformID {
			value = "org.eclipse.xsd.doc"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Documentation and tutorials for XSD."
		}
		plugins += new Plugin plugin_org_eclipse_xsd_doc {
			__id = "org.eclipse.xsd.doc"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.doc"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.xsd.doc"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.doc"
				}
				locator = new EFSLocator {
					value = "org.eclipse.xsd.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_doc
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_xsd_cheatsheets {
			__id = "org.eclipse.xsd.cheatsheets"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.cheatsheets"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_cheatsheets
				target = plugin_org_eclipse_ui_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_cheatsheets
				target = plugin_org_eclipse_emf_cheatsheets
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_cheatsheets
				target = plugin_org_eclipse_xsd_ecore_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_tigris_subversion_subclipse {
		__id = "org.tigris.subversion.subclipse"
		identifier = new PlatformID {
			value = "org.tigris.subversion.subclipse"
		}
		version = new Version {
			value = "1.6.6"
		}
		provider = vendor_tigris_org
		copyright = new Copyright {
			name = "_subclipse_tigris_org_"
			text = "http://subclipse.tigris.org/"
			locator = new URLLocator {
				value = "http://subclipse.tigris.org/"
			}
		}
		description = new Description {
			name = "description"
			text = "Subclipse is an Eclipse Team Provider for the Subversion version control system."
		}
		plugins += new Plugin plugin_org_tigris_subversion_subclipse_core {
			__id = "org.tigris.subversion.subclipse.core"
			identifier = new PlatformID {
				value = "org.tigris.subversion.subclipse.core"
			}
			state = : "State.active"
			version = new Version {
				value = "1.6.6"
			}
			vendor = vendor_tigris_org
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_core
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_core
				target = plugin_org_eclipse_osgi
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_core
				target = plugin_org_tigris_subversion_clientadapter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.0-1.7.0)'"
				maxVersion = "'[1.6.0-1.7.0)'"
			}
			exports += new Package package_org_tigris_subversion_subclipse_core {
				__id = "org.tigris.subversion.subclipse.core"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.cor"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_client {
				__id = "org.tigris.subversion.subclipse.core.client"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.client"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.clien"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_commands {
				__id = "org.tigris.subversion.subclipse.core.commands"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.commands"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.command"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_history {
				__id = "org.tigris.subversion.subclipse.core.history"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.history"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.histor"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_internal {
				__id = "org.tigris.subversion.subclipse.core.internal"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.internal"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.interna"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_mapping {
				__id = "org.tigris.subversion.subclipse.core.mapping"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.mapping"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.mappin"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_properties {
				__id = "org.tigris.subversion.subclipse.core.properties"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.properties"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.propertie"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_repo {
				__id = "org.tigris.subversion.subclipse.core.repo"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.repo"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.rep"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_resources {
				__id = "org.tigris.subversion.subclipse.core.resources"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.resources"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.resource"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_resourcesListeners {
				__id = "org.tigris.subversion.subclipse.core.resourcesListeners"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.resourcesListeners"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.resourcesListener"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_status {
				__id = "org.tigris.subversion.subclipse.core.status"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.status"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.statu"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_sync {
				__id = "org.tigris.subversion.subclipse.core.sync"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.sync"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.syn"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_core_util {
				__id = "org.tigris.subversion.subclipse.core.util"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.core.util"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.core.uti"
				}
			}
		}
		plugins += new Plugin plugin_org_tigris_subversion_subclipse_ui {
			__id = "org.tigris.subversion.subclipse.ui"
			identifier = new PlatformID {
				value = "org.tigris.subversion.subclipse.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "1.6.6"
			}
			vendor = vendor_tigris_org
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_tigris_subversion_subclipse_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.0'"
				maxVersion = "'3.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_team_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_compare
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_osgi
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_help
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_ui
				target = plugin_org_eclipse_jdt_core
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui {
				__id = "org.tigris.subversion.subclipse.ui"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.u"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_actions {
				__id = "org.tigris.subversion.subclipse.ui.actions"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.actions"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.action"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_annotations {
				__id = "org.tigris.subversion.subclipse.ui.annotations"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.annotations"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.annotation"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_authentication {
				__id = "org.tigris.subversion.subclipse.ui.authentication"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.authentication"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.authenticatio"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_comments {
				__id = "org.tigris.subversion.subclipse.ui.comments"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.comments"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.comment"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_compare {
				__id = "org.tigris.subversion.subclipse.ui.compare"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.compare"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.compar"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_compare_internal {
				__id = "org.tigris.subversion.subclipse.ui.compare.internal"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.compare.internal"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.compare.interna"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_conflicts {
				__id = "org.tigris.subversion.subclipse.ui.conflicts"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.conflicts"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.conflict"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_console {
				__id = "org.tigris.subversion.subclipse.ui.console"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.console"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.consol"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_decorator {
				__id = "org.tigris.subversion.subclipse.ui.decorator"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.decorator"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.decorato"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_dialogs {
				__id = "org.tigris.subversion.subclipse.ui.dialogs"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.dialogs"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.dialog"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_editor {
				__id = "org.tigris.subversion.subclipse.ui.editor"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.editor"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.edito"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_history {
				__id = "org.tigris.subversion.subclipse.ui.history"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.history"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.histor"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_internal {
				__id = "org.tigris.subversion.subclipse.ui.internal"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.internal"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.interna"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_operations {
				__id = "org.tigris.subversion.subclipse.ui.operations"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.operations"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.operation"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_preferences {
				__id = "org.tigris.subversion.subclipse.ui.preferences"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.preferences"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.preference"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_properties {
				__id = "org.tigris.subversion.subclipse.ui.properties"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.properties"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.propertie"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_repository {
				__id = "org.tigris.subversion.subclipse.ui.repository"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.repository"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.repositor"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_repository_model {
				__id = "org.tigris.subversion.subclipse.ui.repository.model"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.repository.model"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.repository.mode"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_repository_properties {
				__id = "org.tigris.subversion.subclipse.ui.repository.properties"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.repository.properties"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.repository.propertie"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_settings {
				__id = "org.tigris.subversion.subclipse.ui.settings"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.settings"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.setting"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_subscriber {
				__id = "org.tigris.subversion.subclipse.ui.subscriber"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.subscriber"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.subscribe"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_svnproperties {
				__id = "org.tigris.subversion.subclipse.ui.svnproperties"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.svnproperties"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.svnpropertie"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_sync {
				__id = "org.tigris.subversion.subclipse.ui.sync"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.sync"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.syn"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_util {
				__id = "org.tigris.subversion.subclipse.ui.util"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.util"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.uti"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_wizards {
				__id = "org.tigris.subversion.subclipse.ui.wizards"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.wizards"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.wizard"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_wizards_dialogs {
				__id = "org.tigris.subversion.subclipse.ui.wizards.dialogs"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.wizards.dialogs"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.wizards.dialog"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_wizards_generatediff {
				__id = "org.tigris.subversion.subclipse.ui.wizards.generatediff"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.wizards.generatediff"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.wizards.generatedif"
				}
			}
			exports += new Package package_org_tigris_subversion_subclipse_ui_wizards_sharing {
				__id = "org.tigris.subversion.subclipse.ui.wizards.sharing"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.ui.wizards.sharing"
				}
				version = new Version {
					value = "org.tigris.subversion.subclipse.ui.wizards.sharin"
				}
			}
		}
		plugins += new Plugin plugin_org_tigris_subversion_subclipse_doc {
			__id = "org.tigris.subversion.subclipse.doc"
			identifier = new PlatformID {
				value = "org.tigris.subversion.subclipse.doc"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_tigris_org
			ownedEntities += new Document {
				__id = "org.tigris.subversion.subclipse.doc"
				identifier = new PlatformID {
					value = "org.tigris.subversion.subclipse.doc"
				}
				locator = new EFSLocator {
					value = "org.tigris.subversion.subclipse.doc"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_subclipse_doc
				target = plugin_org_eclipse_help
			}
		}
	}

	features += new Feature feature_org_eclipse_xsd_edit {
		__id = "org.eclipse.xsd.edit"
		identifier = new PlatformID {
			value = "org.eclipse.xsd.edit"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2007 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Platform-independent support for viewing and editing XML Schemas."
		}
		plugins += new Plugin plugin_org_eclipse_xsd_edit {
			__id = "org.eclipse.xsd.edit"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_edit
				target = plugin_org_eclipse_xsd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_xsd_provider {
				__id = "org.eclipse.xsd.provider"
				identifier = new PlatformID {
					value = "org.eclipse.xsd.provider"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_eclipse_m2m_qvt_oml_common {
		__id = "org.eclipse.m2m.qvt.oml.common"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.qvt.oml.common"
		}
		version = new Version {
			value = "2.0.1.v20090722-1630-79-0AkF77g7UDT3BcL7"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "%copyright"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Operational QVT common utilities"
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_emf_util {
			__id = "org.eclipse.m2m.qvt.oml.emf.util"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.emf.util"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.1.v20090722-1630"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util
				target = plugin_org_eclipse_ocl_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_editor_ui {
				__id = "org.eclipse.m2m.qvt.oml.editor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.editor.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_project {
				__id = "org.eclipse.m2m.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ui {
				__id = "org.eclipse.m2m.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_emf_util_ui {
				__id = "org.eclipse.m2m.qvt.oml.emf.util.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.emf.util.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml {
				__id = "org.eclipse.m2m.tests.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml {
				__id = "org.eclipse.m2m.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common {
				__id = "org.eclipse.m2m.qvt.oml.common"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common_ui_ {
				__id = "org.eclipse.m2m.qvt.oml.common.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common.ui'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_mmregistry {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.mmregistry"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.mmregistry"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ui {
				__id = "org.eclipse.m2m.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_emf_util_ui {
				__id = "org.eclipse.m2m.qvt.oml.emf.util.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.emf.util.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml {
				__id = "org.eclipse.m2m.tests.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml {
				__id = "org.eclipse.m2m.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common {
				__id = "org.eclipse.m2m.qvt.oml.common"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common_ui_ {
				__id = "org.eclipse.m2m.qvt.oml.common.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common.ui'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_urimap {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.urimap"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.urimap"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_project {
				__id = "org.eclipse.m2m.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ui {
				__id = "org.eclipse.m2m.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml {
				__id = "org.eclipse.m2m.tests.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common_ {
				__id = "org.eclipse.m2m.qvt.oml.common'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_emf_util_ui {
			__id = "org.eclipse.m2m.qvt.oml.emf.util.ui"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.emf.util.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090526-1940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util_ui
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util_ui
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_emf_util_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_ui {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_ui_choosers {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.choosers"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.choosers"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_ui_choosers_metamodel {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.choosers.metamodel"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.choosers.metamodel"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_ui_controls {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.controls"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.controls"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_ui_metamodel {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.metamodel"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.metamodel"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_emf_util_ui_provider {
				__id = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.provider"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.emf.util.ui.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_common {
			__id = "org.eclipse.m2m.qvt.oml.common"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090608-1830"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common {
				__id = "org.eclipse.m2m.internal.qvt.oml.common"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_samples {
				__id = "org.eclipse.m2m.qvt.oml.samples"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.samples"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_editor_ui {
				__id = "org.eclipse.m2m.qvt.oml.editor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.editor.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_project {
				__id = "org.eclipse.m2m.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ui {
				__id = "org.eclipse.m2m.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ui {
				__id = "org.eclipse.m2m.tests.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml {
				__id = "org.eclipse.m2m.tests.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml {
				__id = "org.eclipse.m2m.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common_ui_ {
				__id = "org.eclipse.m2m.qvt.oml.common.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common.ui'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_emf {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.emf"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.emf"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ {
				__id = "org.eclipse.m2m.tests.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_io {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.io"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.io"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_project {
				__id = "org.eclipse.m2m.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml_ui {
				__id = "org.eclipse.m2m.tests.qvt.oml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml {
				__id = "org.eclipse.m2m.tests.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ {
				__id = "org.eclipse.m2m.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_io_eclipse {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.io.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.io.eclipse"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_project {
				__id = "org.eclipse.m2m.qvt.oml.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml {
				__id = "org.eclipse.m2m.tests.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_ {
				__id = "org.eclipse.m2m.qvt.oml'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_launch {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.launch"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_samples {
				__id = "org.eclipse.m2m.qvt.oml.samples"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.samples"
				}
			}
			exports += new Package package_org_eclipse_m2m_tests_qvt_oml {
				__id = "org.eclipse.m2m.tests.qvt.oml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.tests.qvt.oml"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common_ui_ {
				__id = "org.eclipse.m2m.qvt.oml.common.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common.ui'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_project {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.project"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.project"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_editor_ui {
				__id = "org.eclipse.m2m.qvt.oml.editor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.editor.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_qvt_oml_common_ui_ {
				__id = "org.eclipse.m2m.qvt.oml.common.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.qvt.oml.common.ui'"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_resourcesetprovider {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.resourcesetprovider"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.resourcesetprovider"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_util {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_qvt_oml_common_ui {
			__id = "org.eclipse.m2m.qvt.oml.common.ui"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.qvt.oml.common.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.0.v20090526-1940"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_m2m_qvt_oml_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_m2m_qvt_oml_emf_util_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.0-3.0.0)'"
				maxVersion = "'[2.0.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_qvt_oml_common_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_ui {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_ui_action {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.ui.action"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.ui.action"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_ui_controls {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.ui.controls"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.ui.controls"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_ui_launch {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.ui.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.ui.launch"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_ui_views {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.ui.views"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_ui_wizards {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.ui.wizards"
				}
			}
			exports += new Package package_org_eclipse_m2m_internal_qvt_oml_common_ui_wizards_choosers {
				__id = "org.eclipse.m2m.internal.qvt.oml.common.ui.wizards.choosers"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.internal.qvt.oml.common.ui.wizards.choosers"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_wst_xml_ui_feature {
		__id = "org.eclipse.wst.xml_ui.feature"
		identifier = new PlatformID {
			value = "org.eclipse.wst.xml_ui.feature"
		}
		version = new Version {
			value = "3.1.1.v200907161031-7H6FM_DxtkM-7aeTHKEBbQqcZOZ2"
		}
		provider = vendor_Eclipse_Web_Tools_Platform
		description = new Description {
			name = "description"
			text = "XML, DTD and XML Schema Editors, validators, and XML Catalog support"
		}
		plugins += new Plugin plugin_org_eclipse_wst_dtd_ui {
			__id = "org.eclipse.wst.dtd.ui"
			identifier = new PlatformID {
				value = "org.eclipse.wst.dtd.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.400.v200904300717"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_dtd_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-1.2.0)'"
				maxVersion = "'[1.1.200-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_sse_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_sse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_xml_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_xml_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.400-1.2.0)'"
				maxVersion = "'[1.0.400-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = plugin_org_eclipse_ui_views_properties_tabbed
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_dtd_ui {
				__id = "org.eclipse.wst.dtd.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal {
				__id = "org.eclipse.wst.dtd.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_dnd {
				__id = "org.eclipse.wst.dtd.ui.internal.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.dnd"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_editor {
				__id = "org.eclipse.wst.dtd.ui.internal.editor"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.editor"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_preferences {
				__id = "org.eclipse.wst.dtd.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_projection {
				__id = "org.eclipse.wst.dtd.ui.internal.projection"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.projection"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_properties_section {
				__id = "org.eclipse.wst.dtd.ui.internal.properties.section"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.properties.section"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_registry {
				__id = "org.eclipse.wst.dtd.ui.internal.registry"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.registry"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_style {
				__id = "org.eclipse.wst.dtd.ui.internal.style"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.style"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_templates {
				__id = "org.eclipse.wst.dtd.ui.internal.templates"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.templates"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_text {
				__id = "org.eclipse.wst.dtd.ui.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.text"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_views_contentoutline_actions {
				__id = "org.eclipse.wst.dtd.ui.internal.views.contentoutline.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.views.contentoutline.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_views_properties {
				__id = "org.eclipse.wst.dtd.ui.internal.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.views.properties"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_internal_wizard {
				__id = "org.eclipse.wst.dtd.ui.internal.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.internal.wizard"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_ui_views_contentoutline {
				__id = "org.eclipse.wst.dtd.ui.views.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.ui.views.contentoutline"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_dtd_ui_infopop {
			__id = "org.eclipse.wst.dtd.ui.infopop"
			identifier = new PlatformID {
				value = "org.eclipse.wst.dtd.ui.infopop"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.300.v200805140200"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_wst_sse_ui_infopop {
			__id = "org.eclipse.wst.sse.ui.infopop"
			identifier = new PlatformID {
				value = "org.eclipse.wst.sse.ui.infopop"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.200.v200805301545"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_wst_xml_ui_infopop {
			__id = "org.eclipse.wst.xml.ui.infopop"
			identifier = new PlatformID {
				value = "org.eclipse.wst.xml.ui.infopop"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.300.v200805140200"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_wst_sse_ui {
			__id = "org.eclipse.wst.sse.ui"
			identifier = new PlatformID {
				value = "org.eclipse.wst.sse.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.101.v200908261807"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_debug_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.100-4.0.0)'"
				maxVersion = "'[3.3.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_wst_sse_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-1.3.0)'"
				maxVersion = "'[1.2.0-1.3.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal {
				__id = "org.eclipse.wst.sse.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_actions {
				__id = "org.eclipse.wst.sse.ui.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_contentassist {
				__id = "org.eclipse.wst.sse.ui.internal.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.contentassist"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_contentoutline {
				__id = "org.eclipse.wst.sse.ui.internal.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.contentoutline"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_contentproperties_ui {
				__id = "org.eclipse.wst.sse.ui.internal.contentproperties.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.contentproperties.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_correction {
				__id = "org.eclipse.wst.sse.ui.internal.correction"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.correction"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_debug {
				__id = "org.eclipse.wst.sse.ui.internal.debug"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.debug"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_derived {
				__id = "org.eclipse.wst.sse.ui.internal.derived"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.derived"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_edit_util {
				__id = "org.eclipse.wst.sse.ui.internal.edit.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.edit.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_editor {
				__id = "org.eclipse.wst.sse.ui.internal.editor"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.editor"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_encoding_ui {
				__id = "org.eclipse.wst.sse.ui.internal.encoding.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.encoding.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_extension {
				__id = "org.eclipse.wst.sse.ui.internal.extension"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.extension"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_format {
				__id = "org.eclipse.wst.sse.ui.internal.format"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.format"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_handlers {
				__id = "org.eclipse.wst.sse.ui.internal.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.handlers"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_hyperlink {
				__id = "org.eclipse.wst.sse.ui.internal.hyperlink"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.hyperlink"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_openon {
				__id = "org.eclipse.wst.sse.ui.internal.openon"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.openon"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_preferences {
				__id = "org.eclipse.wst.sse.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_preferences_ui {
				__id = "org.eclipse.wst.sse.ui.internal.preferences.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.preferences.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_projection {
				__id = "org.eclipse.wst.sse.ui.internal.projection"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.projection"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_properties {
				__id = "org.eclipse.wst.sse.ui.internal.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.properties"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_provisional_extensions {
				__id = "org.eclipse.wst.sse.ui.internal.provisional.extensions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.provisional.extensions"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_provisional_extensions_breakpoint {
				__id = "org.eclipse.wst.sse.ui.internal.provisional.extensions.breakpoint"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.provisional.extensions.breakpoint"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_provisional_preferences {
				__id = "org.eclipse.wst.sse.ui.internal.provisional.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.provisional.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_provisional_registry {
				__id = "org.eclipse.wst.sse.ui.internal.provisional.registry"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.provisional.registry"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_provisional_style {
				__id = "org.eclipse.wst.sse.ui.internal.provisional.style"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.provisional.style"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_reconcile {
				__id = "org.eclipse.wst.sse.ui.internal.reconcile"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.reconcile"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_reconcile_validator {
				__id = "org.eclipse.wst.sse.ui.internal.reconcile.validator"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.reconcile.validator"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_search {
				__id = "org.eclipse.wst.sse.ui.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.search"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_selection {
				__id = "org.eclipse.wst.sse.ui.internal.selection"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.selection"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_spelling {
				__id = "org.eclipse.wst.sse.ui.internal.spelling"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.spelling"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_taginfo {
				__id = "org.eclipse.wst.sse.ui.internal.taginfo"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.taginfo"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_text {
				__id = "org.eclipse.wst.sse.ui.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.text"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_ui {
				__id = "org.eclipse.wst.sse.ui.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_util {
				__id = "org.eclipse.wst.sse.ui.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_internal_view_events {
				__id = "org.eclipse.wst.sse.ui.internal.view.events"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.internal.view.events"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_views_contentoutline {
				__id = "org.eclipse.wst.sse.ui.views.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.views.contentoutline"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui_views_properties {
				__id = "org.eclipse.wst.sse.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui.views.properties"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_xml_ui {
			__id = "org.eclipse.wst.xml.ui"
			identifier = new PlatformID {
				value = "org.eclipse.wst.xml.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.1.v200908242115"
			}
			vendor = vendor_Eclipse_Web_Tools_Platform
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_wst_sse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_wst_sse_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_wst_xml_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_wst_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-1.3.0)'"
				maxVersion = "'[1.2.0-1.3.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal {
				__id = "org.eclipse.wst.xml.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_actions {
				__id = "org.eclipse.wst.xml.ui.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_autoedit {
				__id = "org.eclipse.wst.xml.ui.internal.autoedit"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.autoedit"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_catalog {
				__id = "org.eclipse.wst.xml.ui.internal.catalog"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.catalog"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_catalog_icons_etool50 {
				__id = "org.eclipse.wst.xml.ui.internal.catalog.icons.etool50"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.catalog.icons.etool50"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_catalog_icons_obj16 {
				__id = "org.eclipse.wst.xml.ui.internal.catalog.icons.obj16"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.catalog.icons.obj16"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_catalog_icons_ovr16 {
				__id = "org.eclipse.wst.xml.ui.internal.catalog.icons.ovr16"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.catalog.icons.ovr16"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_contentassist {
				__id = "org.eclipse.wst.xml.ui.internal.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.contentassist"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_contentoutline {
				__id = "org.eclipse.wst.xml.ui.internal.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.contentoutline"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_correction {
				__id = "org.eclipse.wst.xml.ui.internal.correction"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.correction"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_dialogs {
				__id = "org.eclipse.wst.xml.ui.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_dnd {
				__id = "org.eclipse.wst.xml.ui.internal.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.dnd"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_doubleclick {
				__id = "org.eclipse.wst.xml.ui.internal.doubleclick"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.doubleclick"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_editor {
				__id = "org.eclipse.wst.xml.ui.internal.editor"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.editor"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_handlers {
				__id = "org.eclipse.wst.xml.ui.internal.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.handlers"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_hyperlink {
				__id = "org.eclipse.wst.xml.ui.internal.hyperlink"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.hyperlink"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_nsedit {
				__id = "org.eclipse.wst.xml.ui.internal.nsedit"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.nsedit"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_preferences {
				__id = "org.eclipse.wst.xml.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_projection {
				__id = "org.eclipse.wst.xml.ui.internal.projection"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.projection"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_properties {
				__id = "org.eclipse.wst.xml.ui.internal.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.properties"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_provisional {
				__id = "org.eclipse.wst.xml.ui.internal.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.provisional"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_registry {
				__id = "org.eclipse.wst.xml.ui.internal.registry"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.registry"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_search {
				__id = "org.eclipse.wst.xml.ui.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.search"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_selection {
				__id = "org.eclipse.wst.xml.ui.internal.selection"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.selection"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_style {
				__id = "org.eclipse.wst.xml.ui.internal.style"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.style"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_tabletree {
				__id = "org.eclipse.wst.xml.ui.internal.tabletree"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.tabletree"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_taginfo {
				__id = "org.eclipse.wst.xml.ui.internal.taginfo"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.taginfo"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_templates {
				__id = "org.eclipse.wst.xml.ui.internal.templates"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.templates"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_text {
				__id = "org.eclipse.wst.xml.ui.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.text"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_util {
				__id = "org.eclipse.wst.xml.ui.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_validation {
				__id = "org.eclipse.wst.xml.ui.internal.validation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.validation"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_validation_core_errorinfo {
				__id = "org.eclipse.wst.xml.ui.internal.validation.core.errorinfo"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.validation.core.errorinfo"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_internal_wizards {
				__id = "org.eclipse.wst.xml.ui.internal.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.internal.wizards"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_views_contentoutline {
				__id = "org.eclipse.wst.xml.ui.views.contentoutline"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.views.contentoutline"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui_views_properties {
				__id = "org.eclipse.wst.xml.ui.views.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui.views.properties"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_xsd_ui {
			__id = "org.eclipse.wst.xsd.ui"
			identifier = new PlatformID {
				value = "org.eclipse.wst.xsd.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.204.v200909021537"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_ui_views_properties_tabbed
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_sse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_sse_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_xml_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_xml_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.400-1.2.0)'"
				maxVersion = "'[1.0.400-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_xsd_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-1.3.0)'"
				maxVersion = "'[1.2.0-1.3.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_ltk_core_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_ltk_ui_refactoring
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_wst_xsd_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = plugin_org_eclipse_core_filesystem
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_actions {
				__id = "org.eclipse.wst.xsd.ui.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adapters {
				__id = "org.eclipse.wst.xsd.ui.internal.adapters"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adapters"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_actions {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_design {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.design"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.design"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_design_directedit {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.design.directedit"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.design.directedit"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_design_editparts {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.design.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.design.editparts"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_design_editparts_model {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.design.editparts.model"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.design.editparts.model"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_design_editpolicies {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.design.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.design.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_design_figures {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.design.figures"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.design.figures"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_edit {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.edit"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.edit"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_editor {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.editor"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.editor"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_facade {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.facade"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.facade"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_outline {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.outline"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.outline"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_properties {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.properties"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_typeviz {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.typeviz"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.typeviz"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_typeviz_design_figures {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.typeviz.design.figures"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.typeviz.design.figures"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_adt_typeviz_design_layouts {
				__id = "org.eclipse.wst.xsd.ui.internal.adt.typeviz.design.layouts"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.adt.typeviz.design.layouts"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_commands {
				__id = "org.eclipse.wst.xsd.ui.internal.commands"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.commands"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_common_actions {
				__id = "org.eclipse.wst.xsd.ui.internal.common.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.common.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_common_commands {
				__id = "org.eclipse.wst.xsd.ui.internal.common.commands"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.common.commands"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_common_properties_providers {
				__id = "org.eclipse.wst.xsd.ui.internal.common.properties.providers"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.common.properties.providers"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_common_properties_sections {
				__id = "org.eclipse.wst.xsd.ui.internal.common.properties.sections"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.common.properties.sections"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_common_properties_sections_appinfo {
				__id = "org.eclipse.wst.xsd.ui.internal.common.properties.sections.appinfo"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.common.properties.sections.appinfo"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_common_properties_sections_appinfo_custom {
				__id = "org.eclipse.wst.xsd.ui.internal.common.properties.sections.appinfo.custom"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.common.properties.sections.appinfo.custom"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_common_util {
				__id = "org.eclipse.wst.xsd.ui.internal.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.common.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_design_editparts {
				__id = "org.eclipse.wst.xsd.ui.internal.design.editparts"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.design.editparts"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_design_editparts_model {
				__id = "org.eclipse.wst.xsd.ui.internal.design.editparts.model"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.design.editparts.model"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_design_editpolicies {
				__id = "org.eclipse.wst.xsd.ui.internal.design.editpolicies"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.design.editpolicies"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_design_figures {
				__id = "org.eclipse.wst.xsd.ui.internal.design.figures"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.design.figures"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_design_layouts {
				__id = "org.eclipse.wst.xsd.ui.internal.design.layouts"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.design.layouts"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_dialogs {
				__id = "org.eclipse.wst.xsd.ui.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_editor {
				__id = "org.eclipse.wst.xsd.ui.internal.editor"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.editor"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_editor_icons {
				__id = "org.eclipse.wst.xsd.ui.internal.editor.icons"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.editor.icons"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_editor_search {
				__id = "org.eclipse.wst.xsd.ui.internal.editor.search"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.editor.search"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_navigation {
				__id = "org.eclipse.wst.xsd.ui.internal.navigation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.navigation"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_nsedit {
				__id = "org.eclipse.wst.xsd.ui.internal.nsedit"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.nsedit"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_preferences {
				__id = "org.eclipse.wst.xsd.ui.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_refactor {
				__id = "org.eclipse.wst.xsd.ui.internal.refactor"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.refactor"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_refactor_actions {
				__id = "org.eclipse.wst.xsd.ui.internal.refactor.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.refactor.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_refactor_rename {
				__id = "org.eclipse.wst.xsd.ui.internal.refactor.rename"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.refactor.rename"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_refactor_structure {
				__id = "org.eclipse.wst.xsd.ui.internal.refactor.structure"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.refactor.structure"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_refactor_util {
				__id = "org.eclipse.wst.xsd.ui.internal.refactor.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.refactor.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_refactor_wizard {
				__id = "org.eclipse.wst.xsd.ui.internal.refactor.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.refactor.wizard"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_search {
				__id = "org.eclipse.wst.xsd.ui.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.search"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_search_actions {
				__id = "org.eclipse.wst.xsd.ui.internal.search.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.search.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_text {
				__id = "org.eclipse.wst.xsd.ui.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.text"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_util {
				__id = "org.eclipse.wst.xsd.ui.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_utils {
				__id = "org.eclipse.wst.xsd.ui.internal.utils"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.utils"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_validation {
				__id = "org.eclipse.wst.xsd.ui.internal.validation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.validation"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_widgets {
				__id = "org.eclipse.wst.xsd.ui.internal.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.widgets"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_internal_wizards {
				__id = "org.eclipse.wst.xsd.ui.internal.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui.internal.wizards"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_ui
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8.1"
				maxVersion = "3.8.1"
			}
		}
		sites += site__download_eclipse_org_webtools_updates
	}

	features += new Feature feature_org_eclipse_emf_edit_ui {
		__id = "org.eclipse.emf.edit.ui"
		identifier = new PlatformID {
			value = "org.eclipse.emf.edit.ui"
		}
		version = new Version {
			value = "2.5.0.v200906151043"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2002-2008 IBM Corporation and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Support for integrating EMF Edit with Eclipse's UI framework."
		}
		plugins += new Plugin plugin_org_eclipse_emf_edit_ui {
			__id = "org.eclipse.emf.edit.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.edit.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.5.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit_ui
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit_ui
				target = plugin_org_eclipse_ui_workbench
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit_ui
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit_ui
				target = plugin_org_eclipse_emf_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_edit_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_edit_ui {
				__id = "org.eclipse.emf.edit.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_ui_action {
				__id = "org.eclipse.emf.edit.ui.action"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui.action"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_ui_celleditor {
				__id = "org.eclipse.emf.edit.ui.celleditor"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui.celleditor"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_ui_dnd {
				__id = "org.eclipse.emf.edit.ui.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui.dnd"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_ui_provider {
				__id = "org.eclipse.emf.edit.ui.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_ui_util {
				__id = "org.eclipse.emf.edit.ui.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui.util"
				}
			}
			exports += new Package package_org_eclipse_emf_edit_ui_view {
				__id = "org.eclipse.emf.edit.ui.view"
				identifier = new PlatformID {
					value = "org.eclipse.emf.edit.ui.view"
				}
			}
		}
		sites += site__download_eclipse_org_modeling_emf_updates_
		sites += site__download_eclipse_org_modeling_emft_updates_
	}

	features += new Feature feature_org_emftext_commons_antlr3_1_1 {
		__id = "org.emftext.commons.antlr3_1_1"
		identifier = new PlatformID {
			value = "org.emftext.commons.antlr3_1_1"
		}
		version = new Version {
			value = "3.1.1.v201002111540"
		}
		provider = vendor_Software_Technology_Group___TU_Dresden_Germany
		description = new Description {
			name = "description"
			text = "Runtime required by parsers generated with ANTLR 3.1.1."
		}
		plugins += new Plugin plugin_org_emftext_commons_antlr3_1_1 {
			__id = "org.emftext.commons.antlr3_1_1"
			identifier = new PlatformID {
				value = "org.emftext.commons.antlr3_1_1"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			exports += new Package package_org_antlr_runtime {
				__id = "org.antlr.runtime"
				identifier = new PlatformID {
					value = "org.antlr.runtime"
				}
			}
			exports += new Package package_org_antlr_runtime_debug {
				__id = "org.antlr.runtime.debug"
				identifier = new PlatformID {
					value = "org.antlr.runtime.debug"
				}
			}
			exports += new Package package_org_antlr_runtime_misc {
				__id = "org.antlr.runtime.misc"
				identifier = new PlatformID {
					value = "org.antlr.runtime.misc"
				}
			}
			exports += new Package package_org_antlr_runtime_tree {
				__id = "org.antlr.runtime.tree"
				identifier = new PlatformID {
					value = "org.antlr.runtime.tree"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_xtend_typesystem_xsd {
		__id = "org.eclipse.xtend.typesystem.xsd"
		identifier = new PlatformID {
			value = "org.eclipse.xtend.typesystem.xsd"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Xtend XSD typesystem (Incubation)  This feature allows to access XSD based models from within Xpand and Xtend."
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_xsd {
			__id = "org.eclipse.xtend.typesystem.xsd"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.xsd"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd
				target = plugin_org_eclipse_xsd
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd
				target = plugin_org_eclipse_emf_mwe_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd
				target = plugin_org_eclipse_xpand
			}
			exports += new Package package_org_eclipse_xtend_typesystem_xsd {
				__id = "org.eclipse.xtend.typesystem.xsd"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.xsd"
				}
			}
			exports += new Package package_org_eclipse_xtend_typesystem_xsd_builder {
				__id = "org.eclipse.xtend.typesystem.xsd.builder"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.xsd.builder"
				}
			}
			exports += new Package package_org_eclipse_xtend_typesystem_xsd_lib {
				__id = "org.eclipse.xtend.typesystem.xsd.lib"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.xsd.lib"
				}
			}
			exports += new Package package_org_eclipse_xtend_typesystem_xsd_type {
				__id = "org.eclipse.xtend.typesystem.xsd.type"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.xsd.type"
				}
			}
			exports += new Package package_org_eclipse_xtend_typesystem_xsd_util {
				__id = "org.eclipse.xtend.typesystem.xsd.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.xsd.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtend_typesystem_xsd_ui {
			__id = "org.eclipse.xtend.typesystem.xsd.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.typesystem.xsd.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_xtend_typesystem_xsd
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_emf_mwe_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_xtend_shared_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_typesystem_xsd_ui
				target = plugin_org_eclipse_xtend
			}
			exports += new Package package_org_eclipse_xtend_typesystem_xsd_ui {
				__id = "org.eclipse.xtend.typesystem.xsd.ui"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.typesystem.xsd.ui"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_m2m_atl {
		__id = "org.eclipse.m2m.atl"
		identifier = new PlatformID {
			value = "org.eclipse.m2m.atl"
		}
		version = new Version {
			value = "3.0.1.v200909150941"
		}
		provider = vendor_Eclipse_Modeling_Project
		license = license_EPL
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "/*   * Copyright (c) 2004, 2009 INRIA. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html *  */"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "ATL Runtime"
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_engine_emfvm {
			__id = "org.eclipse.m2m.atl.engine.emfvm"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.engine.emfvm"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_emfvm
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_emfvm
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_emfvm
				target = plugin_org_eclipse_m2m_atl_core_emf
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_emfvm {
				__id = "org.eclipse.m2m.atl.engine.emfvm"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.emfvm"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_emfvm_adapter {
				__id = "org.eclipse.m2m.atl.engine.emfvm.adapter"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.emfvm.adapter"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_emfvm_launch {
				__id = "org.eclipse.m2m.atl.engine.emfvm.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.emfvm.launch"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_emfvm_lib {
				__id = "org.eclipse.m2m.atl.engine.emfvm.lib"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.emfvm.lib"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl {
			__id = "org.eclipse.m2m.atl"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_adt_debug {
			__id = "org.eclipse.m2m.atl.adt.debug"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.adt.debug"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_m2m_atl_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_m2m_atl_adt_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_debug
				target = plugin_org_eclipse_m2m_atl_debug_core
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_debug {
				__id = "org.eclipse.m2m.atl.adt.debug"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.debug"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_debug_ui {
				__id = "org.eclipse.m2m.atl.adt.debug.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.debug.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_adt_editor {
			__id = "org.eclipse.m2m.atl.adt.editor"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.adt.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_m2m_atl_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_editor
				target = plugin_org_eclipse_m2m_atl_debug_core
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui {
				__id = "org.eclipse.m2m.atl.adt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_actions {
				__id = "org.eclipse.m2m.atl.adt.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_corext_doc {
				__id = "org.eclipse.m2m.atl.adt.ui.corext.doc"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.corext.doc"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_editor {
				__id = "org.eclipse.m2m.atl.adt.ui.editor"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.editor"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_outline {
				__id = "org.eclipse.m2m.atl.adt.ui.outline"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.outline"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_preferences {
				__id = "org.eclipse.m2m.atl.adt.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_properties {
				__id = "org.eclipse.m2m.atl.adt.ui.properties"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.properties"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_text {
				__id = "org.eclipse.m2m.atl.adt.ui.text"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.text"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_text_atl {
				__id = "org.eclipse.m2m.atl.adt.ui.text.atl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.text.atl"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_text_hover {
				__id = "org.eclipse.m2m.atl.adt.ui.text.hover"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.text.hover"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_viewsupport {
				__id = "org.eclipse.m2m.atl.adt.ui.viewsupport"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.viewsupport"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_drivers_emf4atl {
			__id = "org.eclipse.m2m.atl.drivers.emf4atl"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.drivers.emf4atl"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_emf4atl
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_emf4atl
				target = plugin_org_eclipse_m2m_atl_dsls
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_emf4atl
				target = plugin_org_eclipse_m2m_atl_engine_vm
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_emf4atl
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_emf4atl
				target = plugin_org_eclipse_m2m_atl_common
			}
			exports += new Package package_org_eclipse_m2m_atl_drivers_emf4atl {
				__id = "org.eclipse.m2m.atl.drivers.emf4atl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.drivers.emf4atl"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_drivers_emf4atl_tcs_extractor {
				__id = "org.eclipse.m2m.atl.drivers.emf4atl.tcs.extractor"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.drivers.emf4atl.tcs.extractor"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_drivers_emf4atl_tcs_injector {
				__id = "org.eclipse.m2m.atl.drivers.emf4atl.tcs.injector"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.drivers.emf4atl.tcs.injector"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_drivers_uml24atl {
			__id = "org.eclipse.m2m.atl.drivers.uml24atl"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.drivers.uml24atl"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_uml24atl
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_uml24atl
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_uml24atl
				target = plugin_org_eclipse_m2m_atl_drivers_emf4atl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_drivers_uml24atl
				target = plugin_org_eclipse_m2m_atl_common
			}
			exports += new Package package_org_eclipse_m2m_atl_drivers_uml24atl {
				__id = "org.eclipse.m2m.atl.drivers.uml24atl"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.drivers.uml24atl"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_engine {
			__id = "org.eclipse.m2m.atl.engine"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.engine"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine
				target = plugin_org_eclipse_m2m_atl_dsls
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine
				target = plugin_org_eclipse_m2m_atl_core_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine
				target = plugin_org_eclipse_m2m_atl_engine_emfvm
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine
				target = plugin_org_eclipse_m2m_atl_engine_emfvm_launch
			}
			exports += new Package package_org_eclipse_m2m_atl_engine {
				__id = "org.eclipse.m2m.atl.engine"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_asm {
				__id = "org.eclipse.m2m.atl.engine.asm"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.asm"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_compiler {
				__id = "org.eclipse.m2m.atl.engine.compiler"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.compiler"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_compiler_atl2006 {
				__id = "org.eclipse.m2m.atl.engine.compiler.atl2006"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.compiler.atl2006"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_parser {
				__id = "org.eclipse.m2m.atl.engine.parser"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.parser"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_engine_vm {
			__id = "org.eclipse.m2m.atl.engine.vm"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.engine.vm"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_vm
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_vm
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_vm
				target = plugin_org_eclipse_m2m_atl_common
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_extractors {
				__id = "org.eclipse.m2m.atl.engine.extractors"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.extractors"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_extractors_xml {
				__id = "org.eclipse.m2m.atl.engine.extractors.xml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.extractors.xml"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_injectors {
				__id = "org.eclipse.m2m.atl.engine.injectors"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.injectors"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_injectors_xml {
				__id = "org.eclipse.m2m.atl.engine.injectors.xml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.injectors.xml"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_vm {
				__id = "org.eclipse.m2m.atl.engine.vm"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.vm"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_vm_nativelib {
				__id = "org.eclipse.m2m.atl.engine.vm.nativelib"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.vm.nativelib"
				}
			}
		}
		plugins += new Plugin plugin_org_antlr_runtime {
			__id = "org.antlr.runtime"
			identifier = new PlatformID {
				value = "org.antlr.runtime"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.0.v200908120607"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_antlr_runtime {
				__id = "org.antlr.runtime"
				identifier = new PlatformID {
					value = "org.antlr.runtime"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
			exports += new Package package_org_antlr_runtime_debug {
				__id = "org.antlr.runtime.debug"
				identifier = new PlatformID {
					value = "org.antlr.runtime.debug"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
			exports += new Package package_org_antlr_runtime_misc {
				__id = "org.antlr.runtime.misc"
				identifier = new PlatformID {
					value = "org.antlr.runtime.misc"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
			exports += new Package package_org_antlr_runtime_tree {
				__id = "org.antlr.runtime.tree"
				identifier = new PlatformID {
					value = "org.antlr.runtime.tree"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_dsls {
			__id = "org.eclipse.m2m.atl.dsls"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.dsls"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_dsls
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_dsls
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_dsls
				target = plugin_org_antlr_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_dsls
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_dsls
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_dsls
				target = plugin_org_eclipse_m2m_atl_core_emf
			}
			exports += new Package package_org_eclipse_m2m_atl_dsls {
				__id = "org.eclipse.m2m.atl.dsls"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.dsls"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_dsls_core {
				__id = "org.eclipse.m2m.atl.dsls.core"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.dsls.core"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_dsls_tcs_extractor {
				__id = "org.eclipse.m2m.atl.dsls.tcs.extractor"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.dsls.tcs.extractor"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_dsls_tcs_injector {
				__id = "org.eclipse.m2m.atl.dsls.tcs.injector"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.dsls.tcs.injector"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_dsls_tcs_injector_wrappers {
				__id = "org.eclipse.m2m.atl.dsls.tcs.injector.wrappers"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.dsls.tcs.injector.wrappers"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_dsls_tcs_injector_wrappers_antlr3 {
				__id = "org.eclipse.m2m.atl.dsls.tcs.injector.wrappers.antlr3"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.dsls.tcs.injector.wrappers.antlr3"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_dsls_textsource {
				__id = "org.eclipse.m2m.atl.dsls.textsource"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.dsls.textsource"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_adt {
			__id = "org.eclipse.m2m.atl.adt"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.adt"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt
				target = plugin_org_eclipse_m2m_atl_engine
			}
			exports += new Package package_org_eclipse_m2m_atl_adt {
				__id = "org.eclipse.m2m.atl.adt"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_adt_ui {
			__id = "org.eclipse.m2m.atl.adt.ui"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.adt.ui"
			}
			state = : "State.active"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_m2m_atl_adt
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_update_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_emf_ecore_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_adt_ui
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui {
				__id = "org.eclipse.m2m.atl.adt.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_common {
				__id = "org.eclipse.m2m.atl.adt.ui.common"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.common"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_compatibility {
				__id = "org.eclipse.m2m.atl.adt.ui.compatibility"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.compatibility"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_handlers {
				__id = "org.eclipse.m2m.atl.adt.ui.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.handlers"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_perspective {
				__id = "org.eclipse.m2m.atl.adt.ui.perspective"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.perspective"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_startup {
				__id = "org.eclipse.m2m.atl.adt.ui.startup"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.startup"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_wizard_atlfile {
				__id = "org.eclipse.m2m.atl.adt.ui.wizard.atlfile"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.wizard.atlfile"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_adt_ui_wizard_atlproject {
				__id = "org.eclipse.m2m.atl.adt.ui.wizard.atlproject"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.adt.ui.wizard.atlproject"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_core {
			__id = "org.eclipse.m2m.atl.core"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_eclipse_m2m_atl_core {
				__id = "org.eclipse.m2m.atl.core"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_core_launch {
				__id = "org.eclipse.m2m.atl.core.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.launch"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_core_service {
				__id = "org.eclipse.m2m.atl.core.service"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.service"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_core_emf {
			__id = "org.eclipse.m2m.atl.core.emf"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.core.emf"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_emf
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_emf
				target = plugin_org_eclipse_m2m_atl_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_emf
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			exports += new Package package_org_eclipse_m2m_atl_core_emf {
				__id = "org.eclipse.m2m.atl.core.emf"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.emf"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_core_ui {
			__id = "org.eclipse.m2m.atl.core.ui"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.core.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_m2m_atl_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_m2m_atl_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui
				target = plugin_org_eclipse_m2m_atl_debug_core
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ui {
				__id = "org.eclipse.m2m.atl.core.ui"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ui"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ui_launch {
				__id = "org.eclipse.m2m.atl.core.ui.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ui.launch"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_core_ui_vm {
			__id = "org.eclipse.m2m.atl.core.ui.vm"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.core.ui.vm"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui_vm
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui_vm
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui_vm
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui_vm
				target = plugin_org_eclipse_m2m_atl_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui_vm
				target = plugin_org_eclipse_m2m_atl_drivers_emf4atl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui_vm
				target = plugin_org_eclipse_m2m_atl_adt_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ui_vm
				target = plugin_org_eclipse_m2m_atl_debug_core
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ui_vm {
				__id = "org.eclipse.m2m.atl.core.ui.vm"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ui.vm"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ui_vm_asm {
				__id = "org.eclipse.m2m.atl.core.ui.vm.asm"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ui.vm.asm"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ui_vm_debug {
				__id = "org.eclipse.m2m.atl.core.ui.vm.debug"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ui.vm.debug"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_common {
			__id = "org.eclipse.m2m.atl.common"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			exports += new Package package_org_eclipse_m2m_atl_common {
				__id = "org.eclipse.m2m.atl.common"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.common"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_core_ant {
			__id = "org.eclipse.m2m.atl.core.ant"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.core.ant"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ant
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ant
				target = plugin_org_apache_ant
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ant
				target = plugin_org_eclipse_m2m_atl_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_core_ant
				target = plugin_org_eclipse_m2m_atl_common
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ant {
				__id = "org.eclipse.m2m.atl.core.ant"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ant"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ant_tasks {
				__id = "org.eclipse.m2m.atl.core.ant.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ant.tasks"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_core_ant_tasks_nested {
				__id = "org.eclipse.m2m.atl.core.ant.tasks.nested"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.core.ant.tasks.nested"
				}
			}
		}
	}

	features += new Feature feature_org_tigris_subversion_clientadapter_javahl_feature {
		__id = "org.tigris.subversion.clientadapter.javahl.feature"
		identifier = new PlatformID {
			value = "org.tigris.subversion.clientadapter.javahl.feature"
		}
		version = new Version {
			value = "1.6.9"
		}
		provider = vendor_tigris_org
		copyright = new Copyright {
			name = "_subclipse_tigris_org_"
			text = "http://subclipse.tigris.org/"
			locator = new URLLocator {
				value = "http://subclipse.tigris.org/"
			}
		}
		description = new Description {
			name = "description"
			text = "Subversion Client Adapter implementation using the Subversion native JavaHL library."
		}
		plugins += new Plugin plugin_org_tigris_subversion_clientadapter_javahl {
			__id = "org.tigris.subversion.clientadapter.javahl"
			identifier = new PlatformID {
				value = "org.tigris.subversion.clientadapter.javahl"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.6.9"
			}
			vendor = vendor_tigris_org
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_clientadapter_javahl
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_tigris_subversion_clientadapter_javahl
				target = plugin_org_tigris_subversion_clientadapter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.6.6-1.7.0)'"
				maxVersion = "'[1.6.6-1.7.0)'"
			}
			exports += new Package package_org_tigris_subversion_javahl {
				__id = "org.tigris.subversion.javahl"
				identifier = new PlatformID {
					value = "org.tigris.subversion.javahl"
				}
				version = new Version {
					value = "org.tigris.subversion.javah"
				}
			}
			exports += new Package package_org_tigris_subversion_svnclientadapter_javahl {
				__id = "org.tigris.subversion.svnclientadapter.javahl"
				identifier = new PlatformID {
					value = "org.tigris.subversion.svnclientadapter.javahl"
				}
				version = new Version {
					value = "org.tigris.subversion.svnclientadapter.javah"
				}
			}
		}
	}

	features += new Feature feature_unfeatured_plugins {
		__id = "unfeatured.plugins"
		plugins += new Plugin plugin_com_cea_nfp_parsers {
			__id = "com.cea.nfp.parsers"
			identifier = new PlatformID {
				value = "com.cea.nfp.parsers"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_CEA_List___Thales_Research___Technology
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_com_thalesgroup_vsl
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_com_cea_papyrus_extensionpoints_editors
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_nfp_parsers
				target = plugin_com_cea_papyrus_umlutils
			}
			exports += new Package package_antlr {
				__id = "antlr"
				identifier = new PlatformID {
					value = "antlr"
				}
			}
			exports += new Package package_antlr_actions_java {
				__id = "antlr.actions.java"
				identifier = new PlatformID {
					value = "antlr.actions.java"
				}
			}
			exports += new Package package_antlr_build {
				__id = "antlr.build"
				identifier = new PlatformID {
					value = "antlr.build"
				}
			}
			exports += new Package package_antlr_collections {
				__id = "antlr.collections"
				identifier = new PlatformID {
					value = "antlr.collections"
				}
			}
			exports += new Package package_antlr_collections_impl {
				__id = "antlr.collections.impl"
				identifier = new PlatformID {
					value = "antlr.collections.impl"
				}
			}
			exports += new Package package_antlr_preprocessor {
				__id = "antlr.preprocessor"
				identifier = new PlatformID {
					value = "antlr.preprocessor"
				}
			}
			exports += new Package package_com_cea_nfp_parsers {
				__id = "com.cea.nfp.parsers"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_antlr {
				__id = "com.cea.nfp.parsers.antlr"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.antlr"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_messages {
				__id = "com.cea.nfp.parsers.messages"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.messages"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_modelgenerator {
				__id = "com.cea.nfp.parsers.modelgenerator"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.modelgenerator"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_preferences {
				__id = "com.cea.nfp.parsers.preferences"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.preferences"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_texteditor {
				__id = "com.cea.nfp.parsers.texteditor"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.texteditor"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_texteditor_completionproposals {
				__id = "com.cea.nfp.parsers.texteditor.completionproposals"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.texteditor.completionproposals"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_texteditor_vsldatatypes {
				__id = "com.cea.nfp.parsers.texteditor.vsldatatypes"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.texteditor.vsldatatypes"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_uml {
				__id = "com.cea.nfp.parsers.uml"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.uml"
				}
			}
			exports += new Package package_com_cea_nfp_parsers_util {
				__id = "com.cea.nfp.parsers.util"
				identifier = new PlatformID {
					value = "com.cea.nfp.parsers.util"
				}
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_marte_profile {
			__id = "com.cea.papyrus.marte.profile"
			identifier = new PlatformID {
				value = "com.cea.papyrus.marte.profile"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_marte_profile
				target = plugin_com_cea_papyrus_extensionpoints_uml2
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_marte_profile
				target = plugin_org_eclipse_emf_ecore
			}
		}
		plugins += new Plugin plugin_com_cea_papyrus_profile_topcased {
			__id = "com.cea.papyrus.profile.topcased"
			identifier = new PlatformID {
				value = "com.cea.papyrus.profile.topcased"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.10.1"
			}
			vendor = vendor_CEA_LIST
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_com_cea_papyrus_profile
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_com_cea_papyrus_extensionpoints_uml2
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_org_topcased_modeler
			}
			dependencies += new VersionDependency {
				source = plugin_com_cea_papyrus_profile_topcased
				target = plugin_org_topcased_modeler_uml
			}
		}
		plugins += new Plugin plugin_com_google_collect {
			__id = "com.google.collect"
			identifier = new PlatformID {
				value = "com.google.collect"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.8.0.v200908120607"
			}
			vendor = vendor_bundleVendor
			exports += new Package package_com_google_common_base {
				__id = "com.google.common.base"
				identifier = new PlatformID {
					value = "com.google.common.base"
				}
			}
			exports += new Package package_com_google_common_collect {
				__id = "com.google.common.collect"
				identifier = new PlatformID {
					value = "com.google.common.collect"
				}
			}
		}
		plugins += new Plugin plugin_com_google_guice {
			__id = "com.google.guice"
			identifier = new PlatformID {
				value = "com.google.guice"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.1.v200908120607"
			}
			vendor = vendor_google_com
			exports += new Package package_com_google_inject {
				__id = "com.google.inject"
				identifier = new PlatformID {
					value = "com.google.inject"
				}
			}
			exports += new Package package_com_google_inject_asm {
				__id = "com.google.inject.asm"
				identifier = new PlatformID {
					value = "com.google.inject.asm"
				}
			}
			exports += new Package package_com_google_inject_asm_signature {
				__id = "com.google.inject.asm.signature"
				identifier = new PlatformID {
					value = "com.google.inject.asm.signature"
				}
			}
			exports += new Package package_com_google_inject_binder {
				__id = "com.google.inject.binder"
				identifier = new PlatformID {
					value = "com.google.inject.binder"
				}
			}
			exports += new Package package_com_google_inject_cglib_asm {
				__id = "com.google.inject.cglib.asm"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.asm"
				}
			}
			exports += new Package package_com_google_inject_cglib_asm_signature {
				__id = "com.google.inject.cglib.asm.signature"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.asm.signature"
				}
			}
			exports += new Package package_com_google_inject_cglib_beans {
				__id = "com.google.inject.cglib.beans"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.beans"
				}
			}
			exports += new Package package_com_google_inject_cglib_core {
				__id = "com.google.inject.cglib.core"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.core"
				}
			}
			exports += new Package package_com_google_inject_cglib_proxy {
				__id = "com.google.inject.cglib.proxy"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.proxy"
				}
			}
			exports += new Package package_com_google_inject_cglib_reflect {
				__id = "com.google.inject.cglib.reflect"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.reflect"
				}
			}
			exports += new Package package_com_google_inject_cglib_transform {
				__id = "com.google.inject.cglib.transform"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.transform"
				}
			}
			exports += new Package package_com_google_inject_cglib_transform_impl {
				__id = "com.google.inject.cglib.transform.impl"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.transform.impl"
				}
			}
			exports += new Package package_com_google_inject_cglib_util {
				__id = "com.google.inject.cglib.util"
				identifier = new PlatformID {
					value = "com.google.inject.cglib.util"
				}
			}
			exports += new Package package_com_google_inject_jndi {
				__id = "com.google.inject.jndi"
				identifier = new PlatformID {
					value = "com.google.inject.jndi"
				}
			}
			exports += new Package package_com_google_inject_matcher {
				__id = "com.google.inject.matcher"
				identifier = new PlatformID {
					value = "com.google.inject.matcher"
				}
			}
			exports += new Package package_com_google_inject_name {
				__id = "com.google.inject.name"
				identifier = new PlatformID {
					value = "com.google.inject.name"
				}
			}
			exports += new Package package_com_google_inject_spi {
				__id = "com.google.inject.spi"
				identifier = new PlatformID {
					value = "com.google.inject.spi"
				}
			}
			exports += new Package package_com_google_inject_tools_jmx {
				__id = "com.google.inject.tools.jmx"
				identifier = new PlatformID {
					value = "com.google.inject.tools.jmx"
				}
			}
			exports += new Package package_com_google_inject_util {
				__id = "com.google.inject.util"
				identifier = new PlatformID {
					value = "com.google.inject.util"
				}
			}
			exports += new Package package_org_aopalliance_aop {
				__id = "org.aopalliance.aop"
				identifier = new PlatformID {
					value = "org.aopalliance.aop"
				}
			}
			exports += new Package package_org_aopalliance_intercept {
				__id = "org.aopalliance.intercept"
				identifier = new PlatformID {
					value = "org.aopalliance.intercept"
				}
			}
		}
		plugins += new Plugin plugin_com_thalesgroup_marte_papyrus_nfp_ui {
			__id = "com.thalesgroup.marte.papyrus.nfp.ui"
			identifier = new PlatformID {
				value = "com.thalesgroup.marte.papyrus.nfp.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_pluginProvider
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_com_cea_papyrus_diagram_classdiagram
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_com_cea_papyrus_tabbedproperties
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_com_cea_nfp_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_com_thalesgroup_vsl
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_com_cea_papyrus_extensionpoints_uml2
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_com_cea_papyrus_profile
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_papyrus_nfp_ui
				target = plugin_org_odf_ctrte_nfp
			}
			exports += new Package package_com_thalesgroup_marte_papyrus_nfp_ui {
				__id = "com.thalesgroup.marte.papyrus.nfp.ui"
				identifier = new PlatformID {
					value = "com.thalesgroup.marte.papyrus.nfp.ui"
				}
			}
			exports += new Package package_com_thalesgroup_marte_papyrus_nfp_ui_model {
				__id = "com.thalesgroup.marte.papyrus.nfp.ui.model"
				identifier = new PlatformID {
					value = "com.thalesgroup.marte.papyrus.nfp.ui.model"
				}
			}
			exports += new Package package_com_thalesgroup_marte_papyrus_nfp_ui_modelAccess {
				__id = "com.thalesgroup.marte.papyrus.nfp.ui.modelAccess"
				identifier = new PlatformID {
					value = "com.thalesgroup.marte.papyrus.nfp.ui.modelAccess"
				}
			}
			exports += new Package package_com_thalesgroup_marte_papyrus_nfp_ui_popup {
				__id = "com.thalesgroup.marte.papyrus.nfp.ui.popup"
				identifier = new PlatformID {
					value = "com.thalesgroup.marte.papyrus.nfp.ui.popup"
				}
			}
			exports += new Package package_com_thalesgroup_marte_papyrus_nfp_ui_tabbed {
				__id = "com.thalesgroup.marte.papyrus.nfp.ui.tabbed"
				identifier = new PlatformID {
					value = "com.thalesgroup.marte.papyrus.nfp.ui.tabbed"
				}
			}
		}
		plugins += new Plugin plugin_com_thalesgroup_marte_vsl_vslview_papyrus {
			__id = "com.thalesgroup.marte.vsl.vslview.papyrus"
			identifier = new PlatformID {
				value = "com.thalesgroup.marte.vsl.vslview.papyrus"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_pluginProvider
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_com_cea_nfp_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_com_cea_papyrus_core
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_com_thalesgroup_vslview
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_com_thalesgroup_marte_papyrus_nfp_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_marte_vsl_vslview_papyrus
				target = plugin_org_eclipse_jface_text
			}
		}
		plugins += new Plugin plugin_com_thalesgroup_vsl {
			__id = "com.thalesgroup.vsl"
			identifier = new PlatformID {
				value = "com.thalesgroup.vsl"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_Thales_Research___Technology
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vsl
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vsl
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vsl
				target = plugin_org_eclipse_uml2_uml
			}
			ownedEntities += new Metamodel metamodel_MARTE__VSL {
				__id = "MARTE__VSL"
				identifier = new PlatformID {
					value = "MARTE__VSL"
				}
				locator = new EFSLocator {
					value = "MARTE::VSL"
				}
			}
				ownedEntities += new Service service_conformsTo_MARTE__VSL {
					__id = "conformsTo_MARTE__VSL"
					identifier = new PlatformID {
						value = "conformsTo_MARTE__VSL"
					}
					locator = new EFSLocator {
						value = "MARTE::VSL.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_com_thalesgroup_vsl {
				__id = "com.thalesgroup.vsl"
				identifier = new PlatformID {
					value = "com.thalesgroup.vsl"
				}
			}
			exports += new Package package_com_thalesgroup_vsl_types {
				__id = "com.thalesgroup.vsl.types"
				identifier = new PlatformID {
					value = "com.thalesgroup.vsl.types"
				}
			}
			exports += new Package package_com_thalesgroup_vsl_types_impl {
				__id = "com.thalesgroup.vsl.types.impl"
				identifier = new PlatformID {
					value = "com.thalesgroup.vsl.types.impl"
				}
			}
			exports += new Package package_com_thalesgroup_vsl_util {
				__id = "com.thalesgroup.vsl.util"
				identifier = new PlatformID {
					value = "com.thalesgroup.vsl.util"
				}
			}
		}
		plugins += new Plugin plugin_com_thalesgroup_vslview {
			__id = "com.thalesgroup.vslview"
			identifier = new PlatformID {
				value = "com.thalesgroup.vslview"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_Thales_Research___Technology
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vslview
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vslview
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vslview
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vslview
				target = plugin_com_thalesgroup_vsl
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vslview
				target = plugin_com_cea_nfp_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vslview
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_com_thalesgroup_vslview
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_com_thalesgroup_vslviewer {
				__id = "com.thalesgroup.vslviewer"
				identifier = new PlatformID {
					value = "com.thalesgroup.vslviewer"
				}
			}
			exports += new Package package_com_thalesgroup_vslviewer_extension {
				__id = "com.thalesgroup.vslviewer.extension"
				identifier = new PlatformID {
					value = "com.thalesgroup.vslviewer.extension"
				}
			}
			exports += new Package package_com_thalesgroup_vslviewer_treeObject {
				__id = "com.thalesgroup.vslviewer.treeObject"
				identifier = new PlatformID {
					value = "com.thalesgroup.vslviewer.treeObject"
				}
			}
			exports += new Package package_com_thalesgroup_vslviewer_views {
				__id = "com.thalesgroup.vslviewer.views"
				identifier = new PlatformID {
					value = "com.thalesgroup.vslviewer.views"
				}
			}
		}
		plugins += new Plugin plugin_de_itemis_xtext_antlr {
			__id = "de.itemis.xtext.antlr"
			identifier = new PlatformID {
				value = "de.itemis.xtext.antlr"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.200908121408"
			}
			vendor = vendor_itemis_AG
			dependencies += new VersionDependency {
				source = plugin_de_itemis_xtext_antlr
				target = plugin_org_antlr_gen
			}
			dependencies += new VersionDependency {
				source = plugin_de_itemis_xtext_antlr
				target = plugin_org_eclipse_xtext
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_de_itemis_xtext_antlr
				target = plugin_org_eclipse_xtext_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_de_itemis_xtext_antlr
				target = plugin_org_eclipse_xtext_generator
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_de_itemis_xtext_antlr
				target = plugin_org_eclipse_xtend_util_stdlib
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			exports += new Package package_de_itemis_xtext_antlr {
				__id = "de.itemis.xtext.antlr"
				identifier = new PlatformID {
					value = "de.itemis.xtext.antlr"
				}
			}
			exports += new Package package_de_itemis_xtext_antlr_ex_ca {
				__id = "de.itemis.xtext.antlr.ex.ca"
				identifier = new PlatformID {
					value = "de.itemis.xtext.antlr.ex.ca"
				}
			}
			exports += new Package package_de_itemis_xtext_antlr_ex_common {
				__id = "de.itemis.xtext.antlr.ex.common"
				identifier = new PlatformID {
					value = "de.itemis.xtext.antlr.ex.common"
				}
			}
			exports += new Package package_de_itemis_xtext_antlr_ex_rt {
				__id = "de.itemis.xtext.antlr.ex.rt"
				identifier = new PlatformID {
					value = "de.itemis.xtext.antlr.ex.rt"
				}
			}
		}
		plugins += new Plugin plugin_fr_inria_ipr {
			__id = "fr.inria.ipr"
			identifier = new PlatformID {
				value = "fr.inria.ipr"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.2.1"
			}
			vendor = vendor_inria_org
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr
				target = plugin_org_eclipse_core_resources
			}
			ownedEntities += new Metamodel metamodel__inria_org_ipr_1_0 {
				__id = "_inria_org_ipr_1_0"
				identifier = new PlatformID {
					value = "_inria_org_ipr_1_0"
				}
				locator = new EFSLocator {
					value = "http://inria.org/ipr/1.0"
				}
			}
				ownedEntities += new Service service_conformsTo__inria_org_ipr_1_0 {
					__id = "conformsTo__inria_org_ipr_1_0"
					identifier = new PlatformID {
						value = "conformsTo__inria_org_ipr_1_0"
					}
					locator = new EFSLocator {
						value = "http://inria.org/ipr/1.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_fr_inria_ipr_helpers {
				__id = "fr.inria.ipr.helpers"
				identifier = new PlatformID {
					value = "fr.inria.ipr.helpers"
				}
			}
			exports += new Package package_ipr {
				__id = "ipr"
				identifier = new PlatformID {
					value = "ipr"
				}
			}
			exports += new Package package_ipr_impl {
				__id = "ipr.impl"
				identifier = new PlatformID {
					value = "ipr.impl"
				}
			}
			exports += new Package package_ipr_util {
				__id = "ipr.util"
				identifier = new PlatformID {
					value = "ipr.util"
				}
			}
		}
		plugins += new Plugin plugin_fr_inria_ipr_edit {
			__id = "fr.inria.ipr.edit"
			identifier = new PlatformID {
				value = "fr.inria.ipr.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.2.0"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_edit
				target = plugin_fr_inria_ipr
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_ipr_provider {
				__id = "ipr.provider"
				identifier = new PlatformID {
					value = "ipr.provider"
				}
			}
		}
		plugins += new Plugin plugin_fr_inria_ipr_editor {
			__id = "fr.inria.ipr.editor"
			identifier = new PlatformID {
				value = "fr.inria.ipr.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.2.0"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_editor
				target = plugin_fr_inria_ipr_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_editor
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_ipr_presentation {
				__id = "ipr.presentation"
				identifier = new PlatformID {
					value = "ipr.presentation"
				}
			}
		}
		plugins += new Plugin plugin_fr_inria_ipr_ui {
			__id = "fr.inria.ipr.ui"
			identifier = new PlatformID {
				value = "fr.inria.ipr.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.2.1"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_fr_irisa_triskell_eclipse_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_fr_inria_ipr
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.1.0'"
				maxVersion = "'0.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.2'"
				maxVersion = "'3.4.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_org_eclipse_debug_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.1'"
				maxVersion = "'3.4.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_inria_ipr_ui
				target = plugin_fr_irisa_triskell_kermeta_interpreter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_graphicaleditor {
			__id = "fr.irisa.triskell.kermeta.graphicaleditor"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.graphicaleditor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_topcased_modeler
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-4.0.0)'"
				maxVersion = "'[2.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_fr_irisa_triskell_kermeta_model_editor
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_graphicaleditor
				target = plugin_fr_irisa_triskell_kermeta
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_actions {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.actions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.actions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_actions_utils {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.actions.utils"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.actions.utils"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_actions {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.actions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.actions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_commands {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.commands"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.commands"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_dialogs {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.dialogs"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.dialogs"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_edit {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.edit"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.edit"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_edit_utils {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.edit.utils"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.edit.utils"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_figures {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.figures"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.figures"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_policies {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.policies"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.policies"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_cd_utils {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.cd.utils"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.cd.utils"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_editor {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.editor"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.editor"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_editor_properties_sections {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.editor.properties.sections"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.editor.properties.sections"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_preferences {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.preferences"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.preferences"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_providers {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.providers"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.providers"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_graphicaleditor_wizards {
				__id = "fr.irisa.triskell.kermeta.graphicaleditor.wizards"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.graphicaleditor.wizards"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_ket {
			__id = "fr.irisa.triskell.kermeta.ket"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.ket"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_text
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_osgi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_core_filebuffers
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_core_filesystem
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_jet_core
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_fr_irisa_triskell_kermeta_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ket {
				__id = "fr.irisa.triskell.kermeta.ket"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ket"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ket_builder {
				__id = "fr.irisa.triskell.kermeta.ket.builder"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ket.builder"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ket_kpm_actions {
				__id = "fr.irisa.triskell.kermeta.ket.kpm.actions"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ket.kpm.actions"
				}
			}
			exports += new Package package_fr_irisa_triskell_kermeta_ket_parser {
				__id = "fr.irisa.triskell.kermeta.ket.parser"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ket.parser"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_kermeta_ket_documentation {
			__id = "fr.irisa.triskell.kermeta.ket.documentation"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.kermeta.ket.documentation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			ownedEntities += new Document {
				__id = "fr.irisa.triskell.kermeta.ket.documentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.kermeta.ket.documentation"
				}
				locator = new EFSLocator {
					value = "fr.irisa.triskell.kermeta.ket.documentation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket_documentation
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_kermeta_ket_documentation
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_ktr_model {
			__id = "fr.irisa.triskell.ktr.model"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.ktr.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_Ktr {
				__id = "_www_kermeta_org_Ktr"
				identifier = new PlatformID {
					value = "_www_kermeta_org_Ktr"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/Ktr"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_Ktr {
					__id = "conformsTo__www_kermeta_org_Ktr"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_Ktr"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/Ktr.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_fr_irisa_triskell_ktr {
				__id = "fr.irisa.triskell.ktr"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.ktr"
				}
			}
			exports += new Package package_fr_irisa_triskell_ktr_impl {
				__id = "fr.irisa.triskell.ktr.impl"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.ktr.impl"
				}
			}
			exports += new Package package_fr_irisa_triskell_ktr_util {
				__id = "fr.irisa.triskell.ktr.util"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.ktr.util"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_ktr_model_edit {
			__id = "fr.irisa.triskell.ktr.model.edit"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.ktr.model.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_edit
				target = plugin_fr_irisa_triskell_ktr_model
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_fr_irisa_triskell_ktr_provider {
				__id = "fr.irisa.triskell.ktr.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.ktr.provider"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_ktr_model_editor {
			__id = "fr.irisa.triskell.ktr.model.editor"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.ktr.model.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_editor
				target = plugin_fr_irisa_triskell_ktr_model_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_ktr_model_editor
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_fr_irisa_triskell_ktr_presentation {
				__id = "fr.irisa.triskell.ktr.presentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.ktr.presentation"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_traceability_documentation {
			__id = "fr.irisa.triskell.traceability.documentation"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.traceability.documentation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_INRIA___IRISA
			ownedEntities += new Document {
				__id = "fr.irisa.triskell.traceability.documentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability.documentation"
				}
				locator = new EFSLocator {
					value = "fr.irisa.triskell.traceability.documentation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_documentation
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_documentation
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_traceability_model_edit {
			__id = "fr.irisa.triskell.traceability.model.edit"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.traceability.model.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_edit
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_edit
				target = plugin_fr_irisa_triskell_traceability_model
			}
			exports += new Package package_fr_irisa_triskell_traceability_provider {
				__id = "fr.irisa.triskell.traceability.provider"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability.provider"
				}
			}
		}
		plugins += new Plugin plugin_fr_irisa_triskell_traceability_model_editor {
			__id = "fr.irisa.triskell.traceability.model.editor"
			identifier = new PlatformID {
				value = "fr.irisa.triskell.traceability.model.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_editor
				target = plugin_fr_irisa_triskell_traceability_model_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_editor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_fr_irisa_triskell_traceability_model_editor
				target = plugin_fr_irisa_triskell_traceability_model
			}
			exports += new Package package_fr_irisa_triskell_traceability_presentation {
				__id = "fr.irisa.triskell.traceability.presentation"
				identifier = new PlatformID {
					value = "fr.irisa.triskell.traceability.presentation"
				}
			}
		}
		plugins += new Plugin plugin_fr_mopcom_wfr {
			__id = "fr.mopcom.wfr"
			identifier = new PlatformID {
				value = "fr.mopcom.wfr"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr
				target = plugin_org_kermeta_uml2_profile_marte
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr
				target = plugin_org_kermeta_uml2_profiles_model
			}
		}
		plugins += new Plugin plugin_fr_mopcom_wfr_documentation {
			__id = "fr.mopcom.wfr.documentation"
			identifier = new PlatformID {
				value = "fr.mopcom.wfr.documentation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			ownedEntities += new Document {
				__id = "fr.mopcom.wfr.documentation"
				identifier = new PlatformID {
					value = "fr.mopcom.wfr.documentation"
				}
				locator = new EFSLocator {
					value = "fr.mopcom.wfr.documentation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_documentation
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_documentation
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_fr_mopcom_wfr_ui {
			__id = "fr.mopcom.wfr.ui"
			identifier = new PlatformID {
				value = "fr.mopcom.wfr.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_fr_mopcom_wfr
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_org_kermeta_uml2_profile_marte
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_org_kermeta_uml2
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_org_kermeta_uml2_profile_marte_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_org_kermeta_uml2_profiles_model
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_fr_mopcom_wfr_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_fr_mopcom_wfr_ui {
				__id = "fr.mopcom.wfr.ui"
				identifier = new PlatformID {
					value = "fr.mopcom.wfr.ui"
				}
			}
			exports += new Package package_fr_mopcom_wfr_ui_popup_actions {
				__id = "fr.mopcom.wfr.ui.popup.actions"
				identifier = new PlatformID {
					value = "fr.mopcom.wfr.ui.popup.actions"
				}
			}
		}
		plugins += new Plugin plugin_fr_uha_mips_sintaks_ecore2hutn {
			__id = "fr.uha.mips.sintaks.ecore2hutn"
			identifier = new PlatformID {
				value = "fr.uha.mips.sintaks.ecore2hutn"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.1.200910271327"
			}
			vendor = vendor_michel_hassenforder_uha_fr
			ownedEntities += new Document {
				__id = "fr.uha.mips.sintaks.ecore2hutn"
				identifier = new PlatformID {
					value = "fr.uha.mips.sintaks.ecore2hutn"
				}
				locator = new EFSLocator {
					value = "fr.uha.mips.sintaks.ecore2hutn"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_eclipse_help
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_fr_uha_mips_sintaks_stsgen
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_ecore2hutn
				target = plugin_org_kermeta_sintaks_model
			}
		}
		plugins += new Plugin plugin_fr_uha_mips_sintaks_stsgen {
			__id = "fr.uha.mips.sintaks.stsgen"
			identifier = new PlatformID {
				value = "fr.uha.mips.sintaks.stsgen"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.200910271327"
			}
			vendor = vendor_michel_hassenforder_uha_fr
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen
				target = plugin_org_eclipse_emf_ecore
			}
			exports += new Package package_fr_uha_mips_sintaks_stsgen {
				__id = "fr.uha.mips.sintaks.stsgen"
				identifier = new PlatformID {
					value = "fr.uha.mips.sintaks.stsgen"
				}
			}
			exports += new Package package_fr_uha_mips_sintaks_stsgen_impl {
				__id = "fr.uha.mips.sintaks.stsgen.impl"
				identifier = new PlatformID {
					value = "fr.uha.mips.sintaks.stsgen.impl"
				}
			}
			exports += new Package package_fr_uha_mips_sintaks_stsgen_util {
				__id = "fr.uha.mips.sintaks.stsgen.util"
				identifier = new PlatformID {
					value = "fr.uha.mips.sintaks.stsgen.util"
				}
			}
		}
		plugins += new Plugin plugin_fr_uha_mips_sintaks_stsgen_edit {
			__id = "fr.uha.mips.sintaks.stsgen.edit"
			identifier = new PlatformID {
				value = "fr.uha.mips.sintaks.stsgen.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.200910271327"
			}
			vendor = vendor_michel_hassenforder_uha_fr
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_edit
				target = plugin_fr_uha_mips_sintaks_stsgen
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_fr_uha_mips_sintaks_stsgen_provider {
				__id = "fr.uha.mips.sintaks.stsgen.provider"
				identifier = new PlatformID {
					value = "fr.uha.mips.sintaks.stsgen.provider"
				}
			}
		}
		plugins += new Plugin plugin_fr_uha_mips_sintaks_stsgen_editor {
			__id = "fr.uha.mips.sintaks.stsgen.editor"
			identifier = new PlatformID {
				value = "fr.uha.mips.sintaks.stsgen.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.200910271327"
			}
			vendor = vendor_michel_hassenforder_uha_fr
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_editor
				target = plugin_fr_uha_mips_sintaks_stsgen_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_stsgen_editor
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_fr_uha_mips_sintaks_stsgen_presentation {
				__id = "fr.uha.mips.sintaks.stsgen.presentation"
				identifier = new PlatformID {
					value = "fr.uha.mips.sintaks.stsgen.presentation"
				}
			}
		}
		plugins += new Plugin plugin_fr_uha_mips_sintaks_trace {
			__id = "fr.uha.mips.sintaks.trace"
			identifier = new PlatformID {
				value = "fr.uha.mips.sintaks.trace"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.200910271327"
			}
			vendor = vendor_michel_hassenforder_uha_fr
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_SintaksTrace {
				__id = "_www_kermeta_org_SintaksTrace"
				identifier = new PlatformID {
					value = "_www_kermeta_org_SintaksTrace"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/SintaksTrace"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_SintaksTrace {
					__id = "conformsTo__www_kermeta_org_SintaksTrace"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_SintaksTrace"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/SintaksTrace.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_kermeta_sintaks_trace {
				__id = "org.kermeta.sintaks.trace"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.trace"
				}
			}
			exports += new Package package_org_kermeta_sintaks_trace_impl {
				__id = "org.kermeta.sintaks.trace.impl"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.trace.impl"
				}
			}
			exports += new Package package_org_kermeta_sintaks_trace_util {
				__id = "org.kermeta.sintaks.trace.util"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.trace.util"
				}
			}
		}
		plugins += new Plugin plugin_fr_uha_mips_sintaks_trace_edit {
			__id = "fr.uha.mips.sintaks.trace.edit"
			identifier = new PlatformID {
				value = "fr.uha.mips.sintaks.trace.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.200910271327"
			}
			vendor = vendor_michel_hassenforder_uha_fr
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_edit
				target = plugin_fr_uha_mips_sintaks_trace
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_org_kermeta_sintaks_trace_provider {
				__id = "org.kermeta.sintaks.trace.provider"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.trace.provider"
				}
			}
		}
		plugins += new Plugin plugin_fr_uha_mips_sintaks_trace_editor {
			__id = "fr.uha.mips.sintaks.trace.editor"
			identifier = new PlatformID {
				value = "fr.uha.mips.sintaks.trace.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.200910271327"
			}
			vendor = vendor_michel_hassenforder_uha_fr
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_editor
				target = plugin_fr_uha_mips_sintaks_trace_edit
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_fr_uha_mips_sintaks_trace_editor
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_org_kermeta_sintaks_trace_presentation {
				__id = "org.kermeta.sintaks.trace.presentation"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.trace.presentation"
				}
			}
		}
		plugins += new Plugin plugin_javax_transaction {
			__id = "javax.transaction"
			identifier = new PlatformID {
				value = "javax.transaction"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.1.v200909161740"
			}
			vendor = vendor_Bundle_Vendor_0
			exports += new Package package_javax_transaction_xa {
				__id = "javax.transaction.xa"
				identifier = new PlatformID {
					value = "javax.transaction.xa"
				}
				version = new Version {
					value = "1.1"
				}
			}
			exports += new Package package_javax_transaction {
				__id = "javax.transaction"
				identifier = new PlatformID {
					value = "javax.transaction"
				}
				version = new Version {
					value = "1.1"
				}
			}
		}
		plugins += new Plugin plugin_javax_xml {
			__id = "javax.xml"
			identifier = new PlatformID {
				value = "javax.xml"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.4.v200902170245"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_javax_xml
				target = plugin_system_bundle
			}
			exports += new Package package_javax_xml {
				__id = "javax.xml"
				identifier = new PlatformID {
					value = "javax.xml"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_datatype {
				__id = "javax.xml.datatype"
				identifier = new PlatformID {
					value = "javax.xml.datatype"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_namespace {
				__id = "javax.xml.namespace"
				identifier = new PlatformID {
					value = "javax.xml.namespace"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_parsers {
				__id = "javax.xml.parsers"
				identifier = new PlatformID {
					value = "javax.xml.parsers"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_transform {
				__id = "javax.xml.transform"
				identifier = new PlatformID {
					value = "javax.xml.transform"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_transform_dom {
				__id = "javax.xml.transform.dom"
				identifier = new PlatformID {
					value = "javax.xml.transform.dom"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_transform_sax {
				__id = "javax.xml.transform.sax"
				identifier = new PlatformID {
					value = "javax.xml.transform.sax"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_transform_stream {
				__id = "javax.xml.transform.stream"
				identifier = new PlatformID {
					value = "javax.xml.transform.stream"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_validation {
				__id = "javax.xml.validation"
				identifier = new PlatformID {
					value = "javax.xml.validation"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_javax_xml_xpath {
				__id = "javax.xml.xpath"
				identifier = new PlatformID {
					value = "javax.xml.xpath"
				}
				version = new Version {
					value = "1.3"
				}
			}
			exports += new Package package_org_apache_xmlcommons {
				__id = "org.apache.xmlcommons"
				identifier = new PlatformID {
					value = "org.apache.xmlcommons"
				}
				version = new Version {
					value = "1.3.4"
				}
			}
			exports += new Package package_org_w3c_dom {
				__id = "org.w3c.dom"
				identifier = new PlatformID {
					value = "org.w3c.dom"
				}
				version = new Version {
					value = "3.0"
				}
			}
			exports += new Package package_org_w3c_dom_bootstrap {
				__id = "org.w3c.dom.bootstrap"
				identifier = new PlatformID {
					value = "org.w3c.dom.bootstrap"
				}
				version = new Version {
					value = "3.0"
				}
			}
			exports += new Package package_org_w3c_dom_css {
				__id = "org.w3c.dom.css"
				identifier = new PlatformID {
					value = "org.w3c.dom.css"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_events {
				__id = "org.w3c.dom.events"
				identifier = new PlatformID {
					value = "org.w3c.dom.events"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_html {
				__id = "org.w3c.dom.html"
				identifier = new PlatformID {
					value = "org.w3c.dom.html"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_ls {
				__id = "org.w3c.dom.ls"
				identifier = new PlatformID {
					value = "org.w3c.dom.ls"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_ranges {
				__id = "org.w3c.dom.ranges"
				identifier = new PlatformID {
					value = "org.w3c.dom.ranges"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_stylesheets {
				__id = "org.w3c.dom.stylesheets"
				identifier = new PlatformID {
					value = "org.w3c.dom.stylesheets"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_traversal {
				__id = "org.w3c.dom.traversal"
				identifier = new PlatformID {
					value = "org.w3c.dom.traversal"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_views {
				__id = "org.w3c.dom.views"
				identifier = new PlatformID {
					value = "org.w3c.dom.views"
				}
				version = new Version {
					value = "2.0"
				}
			}
			exports += new Package package_org_w3c_dom_xpath {
				__id = "org.w3c.dom.xpath"
				identifier = new PlatformID {
					value = "org.w3c.dom.xpath"
				}
				version = new Version {
					value = "3.0"
				}
			}
			exports += new Package package_org_xml_sax {
				__id = "org.xml.sax"
				identifier = new PlatformID {
					value = "org.xml.sax"
				}
				version = new Version {
					value = "2.0.2"
				}
			}
			exports += new Package package_org_xml_sax_ext {
				__id = "org.xml.sax.ext"
				identifier = new PlatformID {
					value = "org.xml.sax.ext"
				}
				version = new Version {
					value = "2.0.2"
				}
			}
			exports += new Package package_org_xml_sax_helpers {
				__id = "org.xml.sax.helpers"
				identifier = new PlatformID {
					value = "org.xml.sax.helpers"
				}
				version = new Version {
					value = "2.0.2"
				}
			}
		}
		plugins += new Plugin plugin_org_antlr {
			__id = "org.antlr"
			identifier = new PlatformID {
				value = "org.antlr"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.0"
			}
			vendor = vendor_www_antlr_org
			dependencies += new VersionDependency {
				source = plugin_org_antlr
				target = plugin_org_antlr_runtime
			}
			exports += new Package package_org_antlr {
				__id = "org.antlr"
				identifier = new PlatformID {
					value = "org.antlr"
				}
			}
			exports += new Package package_org_antlr_tool {
				__id = "org.antlr.tool"
				identifier = new PlatformID {
					value = "org.antlr.tool"
				}
			}
		}
		plugins += new Plugin plugin_org_antlr_antlr3 {
			__id = "org.antlr.antlr3"
			identifier = new PlatformID {
				value = "org.antlr.antlr3"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.1"
			}
			exports += new Package package_org_antlr_runtime {
				__id = "org.antlr.runtime"
				identifier = new PlatformID {
					value = "org.antlr.runtime"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_antlr_antlr3
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
		plugins += new Plugin plugin_org_antlr_gen {
			__id = "org.antlr.gen"
			identifier = new PlatformID {
				value = "org.antlr.gen"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.1.200908121408"
			}
			dependencies += new VersionDependency {
				source = plugin_org_antlr_gen
				target = plugin_org_junit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.8.2-4.0.0)'"
				maxVersion = "'[3.8.2-4.0.0)'"
			}
			exports += new Package package_antlr {
				__id = "antlr"
				identifier = new PlatformID {
					value = "antlr"
				}
			}
			exports += new Package package_antlr_ASdebug {
				__id = "antlr.ASdebug"
				identifier = new PlatformID {
					value = "antlr.ASdebug"
				}
			}
			exports += new Package package_antlr_actions_cpp {
				__id = "antlr.actions.cpp"
				identifier = new PlatformID {
					value = "antlr.actions.cpp"
				}
			}
			exports += new Package package_antlr_actions_csharp {
				__id = "antlr.actions.csharp"
				identifier = new PlatformID {
					value = "antlr.actions.csharp"
				}
			}
			exports += new Package package_antlr_actions_java {
				__id = "antlr.actions.java"
				identifier = new PlatformID {
					value = "antlr.actions.java"
				}
			}
			exports += new Package package_antlr_actions_python {
				__id = "antlr.actions.python"
				identifier = new PlatformID {
					value = "antlr.actions.python"
				}
			}
			exports += new Package package_antlr_build {
				__id = "antlr.build"
				identifier = new PlatformID {
					value = "antlr.build"
				}
			}
			exports += new Package package_antlr_collections {
				__id = "antlr.collections"
				identifier = new PlatformID {
					value = "antlr.collections"
				}
			}
			exports += new Package package_antlr_collections_impl {
				__id = "antlr.collections.impl"
				identifier = new PlatformID {
					value = "antlr.collections.impl"
				}
			}
			exports += new Package package_antlr_debug {
				__id = "antlr.debug"
				identifier = new PlatformID {
					value = "antlr.debug"
				}
			}
			exports += new Package package_antlr_debug_misc {
				__id = "antlr.debug.misc"
				identifier = new PlatformID {
					value = "antlr.debug.misc"
				}
			}
			exports += new Package package_antlr_preprocessor {
				__id = "antlr.preprocessor"
				identifier = new PlatformID {
					value = "antlr.preprocessor"
				}
			}
			exports += new Package package_org_antlr {
				__id = "org.antlr"
				identifier = new PlatformID {
					value = "org.antlr"
				}
			}
			exports += new Package package_org_antlr_analysis {
				__id = "org.antlr.analysis"
				identifier = new PlatformID {
					value = "org.antlr.analysis"
				}
			}
			exports += new Package package_org_antlr_codegen {
				__id = "org.antlr.codegen"
				identifier = new PlatformID {
					value = "org.antlr.codegen"
				}
			}
			exports += new Package package_org_antlr_misc {
				__id = "org.antlr.misc"
				identifier = new PlatformID {
					value = "org.antlr.misc"
				}
			}
			exports += new Package package_org_antlr_runtime {
				__id = "org.antlr.runtime"
				identifier = new PlatformID {
					value = "org.antlr.runtime"
				}
			}
			exports += new Package package_org_antlr_runtime_debug {
				__id = "org.antlr.runtime.debug"
				identifier = new PlatformID {
					value = "org.antlr.runtime.debug"
				}
			}
			exports += new Package package_org_antlr_runtime_misc {
				__id = "org.antlr.runtime.misc"
				identifier = new PlatformID {
					value = "org.antlr.runtime.misc"
				}
			}
			exports += new Package package_org_antlr_runtime_tree {
				__id = "org.antlr.runtime.tree"
				identifier = new PlatformID {
					value = "org.antlr.runtime.tree"
				}
			}
			exports += new Package package_org_antlr_stringtemplate {
				__id = "org.antlr.stringtemplate"
				identifier = new PlatformID {
					value = "org.antlr.stringtemplate"
				}
			}
			exports += new Package package_org_antlr_stringtemplate_language {
				__id = "org.antlr.stringtemplate.language"
				identifier = new PlatformID {
					value = "org.antlr.stringtemplate.language"
				}
			}
			exports += new Package package_org_antlr_stringtemplate_misc {
				__id = "org.antlr.stringtemplate.misc"
				identifier = new PlatformID {
					value = "org.antlr.stringtemplate.misc"
				}
			}
			exports += new Package package_org_antlr_stringtemplate_test {
				__id = "org.antlr.stringtemplate.test"
				identifier = new PlatformID {
					value = "org.antlr.stringtemplate.test"
				}
			}
			exports += new Package package_org_antlr_tool {
				__id = "org.antlr.tool"
				identifier = new PlatformID {
					value = "org.antlr.tool"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_bridge {
			__id = "org.apache.batik.bridge"
			identifier = new PlatformID {
				value = "org.apache.batik.bridge"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_css
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_dom
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_ext_awt
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_parser
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_util_gui
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_apache_batik_xml
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_bridge
				target = plugin_org_w3c_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "1.3.0"
			}
			exports += new Package package_org_apache_batik_bridge {
				__id = "org.apache.batik.bridge"
				identifier = new PlatformID {
					value = "org.apache.batik.bridge"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_bridge_svg12 {
				__id = "org.apache.batik.bridge.svg12"
				identifier = new PlatformID {
					value = "org.apache.batik.bridge.svg12"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt {
				__id = "org.apache.batik.gvt"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt_event {
				__id = "org.apache.batik.gvt.event"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt.event"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt_filter {
				__id = "org.apache.batik.gvt.filter"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt.filter"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt_flow {
				__id = "org.apache.batik.gvt.flow"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt.flow"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt_font {
				__id = "org.apache.batik.gvt.font"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt.font"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt_renderer {
				__id = "org.apache.batik.gvt.renderer"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt.renderer"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt_svg12 {
				__id = "org.apache.batik.gvt.svg12"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt.svg12"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_gvt_text {
				__id = "org.apache.batik.gvt.text"
				identifier = new PlatformID {
					value = "org.apache.batik.gvt.text"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_script {
				__id = "org.apache.batik.script"
				identifier = new PlatformID {
					value = "org.apache.batik.script"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_script_rhino {
				__id = "org.apache.batik.script.rhino"
				identifier = new PlatformID {
					value = "org.apache.batik.script.rhino"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_META_INF_services {
				__id = "META-INF.services"
				identifier = new PlatformID {
					value = "META-INF.services"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_css {
			__id = "org.apache.batik.css"
			identifier = new PlatformID {
				value = "org.apache.batik.css"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_css
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_css
				target = plugin_org_w3c_css_sac
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.3.0"
				maxVersion = "1.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_css
				target = plugin_org_w3c_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "1.3.0"
			}
			exports += new Package package_org_apache_batik_css_dom {
				__id = "org.apache.batik.css.dom"
				identifier = new PlatformID {
					value = "org.apache.batik.css.dom"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_css_engine {
				__id = "org.apache.batik.css.engine"
				identifier = new PlatformID {
					value = "org.apache.batik.css.engine"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_css_engine_sac {
				__id = "org.apache.batik.css.engine.sac"
				identifier = new PlatformID {
					value = "org.apache.batik.css.engine.sac"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_css_engine_value {
				__id = "org.apache.batik.css.engine.value"
				identifier = new PlatformID {
					value = "org.apache.batik.css.engine.value"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_css_engine_value_css2 {
				__id = "org.apache.batik.css.engine.value.css2"
				identifier = new PlatformID {
					value = "org.apache.batik.css.engine.value.css2"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_css_engine_value_svg {
				__id = "org.apache.batik.css.engine.value.svg"
				identifier = new PlatformID {
					value = "org.apache.batik.css.engine.value.svg"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_css_engine_value_svg12 {
				__id = "org.apache.batik.css.engine.value.svg12"
				identifier = new PlatformID {
					value = "org.apache.batik.css.engine.value.svg12"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_css_parser {
				__id = "org.apache.batik.css.parser"
				identifier = new PlatformID {
					value = "org.apache.batik.css.parser"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_dom {
			__id = "org.apache.batik.dom"
			identifier = new PlatformID {
				value = "org.apache.batik.dom"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom
				target = plugin_org_apache_batik_css
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom
				target = plugin_org_apache_batik_xml
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom
				target = plugin_org_w3c_css_sac
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.3.0"
				maxVersion = "1.4.0"
			}
			exports += new Package package_org_apache_batik_dom {
				__id = "org.apache.batik.dom"
				identifier = new PlatformID {
					value = "org.apache.batik.dom"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_dom_events {
				__id = "org.apache.batik.dom.events"
				identifier = new PlatformID {
					value = "org.apache.batik.dom.events"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_dom_traversal {
				__id = "org.apache.batik.dom.traversal"
				identifier = new PlatformID {
					value = "org.apache.batik.dom.traversal"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_dom_util {
				__id = "org.apache.batik.dom.util"
				identifier = new PlatformID {
					value = "org.apache.batik.dom.util"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom
				target = package_org_apache_xerces_parsers
			}
		}
		plugins += new Plugin plugin_org_apache_batik_dom_svg {
			__id = "org.apache.batik.dom.svg"
			identifier = new PlatformID {
				value = "org.apache.batik.dom.svg"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = plugin_org_apache_batik_css
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = plugin_org_apache_batik_dom
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = plugin_org_apache_batik_parser
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = plugin_org_w3c_css_sac
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.3.0"
				maxVersion = "1.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = plugin_org_w3c_dom_smil
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = plugin_org_w3c_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "1.3.0"
			}
			exports += new Package package_org_apache_batik_dom_svg {
				__id = "org.apache.batik.dom.svg"
				identifier = new PlatformID {
					value = "org.apache.batik.dom.svg"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_dom_svg12 {
				__id = "org.apache.batik.dom.svg12"
				identifier = new PlatformID {
					value = "org.apache.batik.dom.svg12"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_dom_svg
				target = package_org_w3c_dom
			}
		}
		plugins += new Plugin plugin_org_apache_batik_ext_awt {
			__id = "org.apache.batik.ext.awt"
			identifier = new PlatformID {
				value = "org.apache.batik.ext.awt"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_ext_awt
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_ext_awt
				target = plugin_org_apache_batik_util_gui
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			exports += new Package package_org_apache_batik_ext_awt {
				__id = "org.apache.batik.ext.awt"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_color {
				__id = "org.apache.batik.ext.awt.color"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.color"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_font {
				__id = "org.apache.batik.ext.awt.font"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.font"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_g2d {
				__id = "org.apache.batik.ext.awt.g2d"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.g2d"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_geom {
				__id = "org.apache.batik.ext.awt.geom"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.geom"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_image {
				__id = "org.apache.batik.ext.awt.image"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.image"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_image_codec {
				__id = "org.apache.batik.ext.awt.image.codec"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.image.codec"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_image_codec_tiff {
				__id = "org.apache.batik.ext.awt.image.codec.tiff"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.image.codec.tiff"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_image_renderable {
				__id = "org.apache.batik.ext.awt.image.renderable"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.image.renderable"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_image_rendered {
				__id = "org.apache.batik.ext.awt.image.rendered"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.image.rendered"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_awt_image_spi {
				__id = "org.apache.batik.ext.awt.image.spi"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.awt.image.spi"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_ext_swing {
				__id = "org.apache.batik.ext.swing"
				identifier = new PlatformID {
					value = "org.apache.batik.ext.swing"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_parser {
			__id = "org.apache.batik.parser"
			identifier = new PlatformID {
				value = "org.apache.batik.parser"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_parser
				target = plugin_org_apache_batik_ext_awt
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_parser
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_parser
				target = plugin_org_apache_batik_xml
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_parser
				target = plugin_org_w3c_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "1.3.0"
			}
			exports += new Package package_org_apache_batik_parser {
				__id = "org.apache.batik.parser"
				identifier = new PlatformID {
					value = "org.apache.batik.parser"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_pdf {
			__id = "org.apache.batik.pdf"
			identifier = new PlatformID {
				value = "org.apache.batik.pdf"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200806031500"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_avalon_framework {
				__id = "org.apache.avalon.framework"
				identifier = new PlatformID {
					value = "org.apache.avalon.framework"
				}
			}
			exports += new Package package_org_apache_avalon_framework_activity {
				__id = "org.apache.avalon.framework.activity"
				identifier = new PlatformID {
					value = "org.apache.avalon.framework.activity"
				}
			}
			exports += new Package package_org_apache_avalon_framework_configuration {
				__id = "org.apache.avalon.framework.configuration"
				identifier = new PlatformID {
					value = "org.apache.avalon.framework.configuration"
				}
			}
			exports += new Package package_org_apache_avalon_framework_container {
				__id = "org.apache.avalon.framework.container"
				identifier = new PlatformID {
					value = "org.apache.avalon.framework.container"
				}
			}
			exports += new Package package_org_apache_commons_io {
				__id = "org.apache.commons.io"
				identifier = new PlatformID {
					value = "org.apache.commons.io"
				}
			}
			exports += new Package package_org_apache_commons_io_output {
				__id = "org.apache.commons.io.output"
				identifier = new PlatformID {
					value = "org.apache.commons.io.output"
				}
			}
			exports += new Package package_org_apache_commons_logging {
				__id = "org.apache.commons.logging"
				identifier = new PlatformID {
					value = "org.apache.commons.logging"
				}
			}
			exports += new Package package_org_apache_commons_logging_impl {
				__id = "org.apache.commons.logging.impl"
				identifier = new PlatformID {
					value = "org.apache.commons.logging.impl"
				}
			}
			exports += new Package package_org_apache_fop_apps {
				__id = "org.apache.fop.apps"
				identifier = new PlatformID {
					value = "org.apache.fop.apps"
				}
			}
			exports += new Package package_org_apache_fop_fo {
				__id = "org.apache.fop.fo"
				identifier = new PlatformID {
					value = "org.apache.fop.fo"
				}
			}
			exports += new Package package_org_apache_fop_fonts {
				__id = "org.apache.fop.fonts"
				identifier = new PlatformID {
					value = "org.apache.fop.fonts"
				}
			}
			exports += new Package package_org_apache_fop_fonts_apps {
				__id = "org.apache.fop.fonts.apps"
				identifier = new PlatformID {
					value = "org.apache.fop.fonts.apps"
				}
			}
			exports += new Package package_org_apache_fop_fonts_base14 {
				__id = "org.apache.fop.fonts.base14"
				identifier = new PlatformID {
					value = "org.apache.fop.fonts.base14"
				}
			}
			exports += new Package package_org_apache_fop_fonts_truetype {
				__id = "org.apache.fop.fonts.truetype"
				identifier = new PlatformID {
					value = "org.apache.fop.fonts.truetype"
				}
			}
			exports += new Package package_org_apache_fop_fonts_type1 {
				__id = "org.apache.fop.fonts.type1"
				identifier = new PlatformID {
					value = "org.apache.fop.fonts.type1"
				}
			}
			exports += new Package package_org_apache_fop_image {
				__id = "org.apache.fop.image"
				identifier = new PlatformID {
					value = "org.apache.fop.image"
				}
			}
			exports += new Package package_org_apache_fop_image_analyser {
				__id = "org.apache.fop.image.analyser"
				identifier = new PlatformID {
					value = "org.apache.fop.image.analyser"
				}
			}
			exports += new Package package_org_apache_fop_pdf {
				__id = "org.apache.fop.pdf"
				identifier = new PlatformID {
					value = "org.apache.fop.pdf"
				}
			}
			exports += new Package package_org_apache_fop_render_pdf {
				__id = "org.apache.fop.render.pdf"
				identifier = new PlatformID {
					value = "org.apache.fop.render.pdf"
				}
			}
			exports += new Package package_org_apache_fop_render_ps {
				__id = "org.apache.fop.render.ps"
				identifier = new PlatformID {
					value = "org.apache.fop.render.ps"
				}
			}
			exports += new Package package_org_apache_fop_svg {
				__id = "org.apache.fop.svg"
				identifier = new PlatformID {
					value = "org.apache.fop.svg"
				}
			}
			exports += new Package package_org_apache_fop_util {
				__id = "org.apache.fop.util"
				identifier = new PlatformID {
					value = "org.apache.fop.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_bridge
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_dom_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_ext_awt
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_ext_awt_g2d
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_gvt
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_gvt_renderer
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_gvt_text
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_transcoder
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_transcoder_image
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_transcoder_keys
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_pdf
				target = package_org_w3c_dom
			}
		}
		plugins += new Plugin plugin_org_apache_batik_svggen {
			__id = "org.apache.batik.svggen"
			identifier = new PlatformID {
				value = "org.apache.batik.svggen"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_svggen
				target = plugin_org_apache_batik_ext_awt
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_svggen
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			exports += new Package package_org_apache_batik_svggen {
				__id = "org.apache.batik.svggen"
				identifier = new PlatformID {
					value = "org.apache.batik.svggen"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_svggen_font {
				__id = "org.apache.batik.svggen.font"
				identifier = new PlatformID {
					value = "org.apache.batik.svggen.font"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_svggen_font_table {
				__id = "org.apache.batik.svggen.font.table"
				identifier = new PlatformID {
					value = "org.apache.batik.svggen.font.table"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_transcoder {
			__id = "org.apache.batik.transcoder"
			identifier = new PlatformID {
				value = "org.apache.batik.transcoder"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_apache_batik_bridge
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_apache_batik_dom
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_apache_batik_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_apache_batik_ext_awt
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_apache_batik_svggen
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_apache_batik_xml
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_transcoder
				target = plugin_org_w3c_dom_svg
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.1.0"
				maxVersion = "1.3.0"
			}
			exports += new Package package_org_apache_batik_transcoder {
				__id = "org.apache.batik.transcoder"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_transcoder_image {
				__id = "org.apache.batik.transcoder.image"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder.image"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_transcoder_image_resources {
				__id = "org.apache.batik.transcoder.image.resources"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder.image.resources"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_transcoder_keys {
				__id = "org.apache.batik.transcoder.keys"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder.keys"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_transcoder_print {
				__id = "org.apache.batik.transcoder.print"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder.print"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_transcoder_svg2svg {
				__id = "org.apache.batik.transcoder.svg2svg"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder.svg2svg"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_transcoder_wmf {
				__id = "org.apache.batik.transcoder.wmf"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder.wmf"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_transcoder_wmf_tosvg {
				__id = "org.apache.batik.transcoder.wmf.tosvg"
				identifier = new PlatformID {
					value = "org.apache.batik.transcoder.wmf.tosvg"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_util {
			__id = "org.apache.batik.util"
			identifier = new PlatformID {
				value = "org.apache.batik.util"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_util
				target = plugin_org_apache_batik_util_gui
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			exports += new Package package_org_apache_batik {
				__id = "org.apache.batik"
				identifier = new PlatformID {
					value = "org.apache.batik"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_i18n {
				__id = "org.apache.batik.i18n"
				identifier = new PlatformID {
					value = "org.apache.batik.i18n"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_util {
				__id = "org.apache.batik.util"
				identifier = new PlatformID {
					value = "org.apache.batik.util"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_util_io {
				__id = "org.apache.batik.util.io"
				identifier = new PlatformID {
					value = "org.apache.batik.util.io"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_util_resources {
				__id = "org.apache.batik.util.resources"
				identifier = new PlatformID {
					value = "org.apache.batik.util.resources"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_util_gui {
			__id = "org.apache.batik.util.gui"
			identifier = new PlatformID {
				value = "org.apache.batik.util.gui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_batik_util_gui {
				__id = "org.apache.batik.util.gui"
				identifier = new PlatformID {
					value = "org.apache.batik.util.gui"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
			exports += new Package package_org_apache_batik_util_gui_resource {
				__id = "org.apache.batik.util.gui.resource"
				identifier = new PlatformID {
					value = "org.apache.batik.util.gui.resource"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_batik_xml {
			__id = "org.apache.batik.xml"
			identifier = new PlatformID {
				value = "org.apache.batik.xml"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.6.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_batik_xml
				target = plugin_org_apache_batik_util
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.6.0"
				maxVersion = "1.7.0"
			}
			exports += new Package package_org_apache_batik_xml {
				__id = "org.apache.batik.xml"
				identifier = new PlatformID {
					value = "org.apache.batik.xml"
				}
				version = new Version {
					value = "1.6.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_log4j {
			__id = "org.apache.log4j"
			identifier = new PlatformID {
				value = "org.apache.log4j"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.13.v200806030600"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_apache_log4j {
				__id = "org.apache.log4j"
				identifier = new PlatformID {
					value = "org.apache.log4j"
				}
			}
			exports += new Package package_org_apache_log4j_chainsaw {
				__id = "org.apache.log4j.chainsaw"
				identifier = new PlatformID {
					value = "org.apache.log4j.chainsaw"
				}
			}
			exports += new Package package_org_apache_log4j_config {
				__id = "org.apache.log4j.config"
				identifier = new PlatformID {
					value = "org.apache.log4j.config"
				}
			}
			exports += new Package package_org_apache_log4j_helpers {
				__id = "org.apache.log4j.helpers"
				identifier = new PlatformID {
					value = "org.apache.log4j.helpers"
				}
			}
			exports += new Package package_org_apache_log4j_jdbc {
				__id = "org.apache.log4j.jdbc"
				identifier = new PlatformID {
					value = "org.apache.log4j.jdbc"
				}
			}
			exports += new Package package_org_apache_log4j_jmx {
				__id = "org.apache.log4j.jmx"
				identifier = new PlatformID {
					value = "org.apache.log4j.jmx"
				}
			}
			exports += new Package package_org_apache_log4j_lf5 {
				__id = "org.apache.log4j.lf5"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_config {
				__id = "org.apache.log4j.lf5.config"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.config"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_util {
				__id = "org.apache.log4j.lf5.util"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.util"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_viewer {
				__id = "org.apache.log4j.lf5.viewer"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.viewer"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_viewer_categoryexplorer {
				__id = "org.apache.log4j.lf5.viewer.categoryexplorer"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.viewer.categoryexplorer"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_viewer_configure {
				__id = "org.apache.log4j.lf5.viewer.configure"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.viewer.configure"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_viewer_images {
				__id = "org.apache.log4j.lf5.viewer.images"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.viewer.images"
				}
			}
			exports += new Package package_org_apache_log4j_net {
				__id = "org.apache.log4j.net"
				identifier = new PlatformID {
					value = "org.apache.log4j.net"
				}
			}
			exports += new Package package_org_apache_log4j_nt {
				__id = "org.apache.log4j.nt"
				identifier = new PlatformID {
					value = "org.apache.log4j.nt"
				}
			}
			exports += new Package package_org_apache_log4j_or {
				__id = "org.apache.log4j.or"
				identifier = new PlatformID {
					value = "org.apache.log4j.or"
				}
			}
			exports += new Package package_org_apache_log4j_or_jms {
				__id = "org.apache.log4j.or.jms"
				identifier = new PlatformID {
					value = "org.apache.log4j.or.jms"
				}
			}
			exports += new Package package_org_apache_log4j_or_sax {
				__id = "org.apache.log4j.or.sax"
				identifier = new PlatformID {
					value = "org.apache.log4j.or.sax"
				}
			}
			exports += new Package package_org_apache_log4j_spi {
				__id = "org.apache.log4j.spi"
				identifier = new PlatformID {
					value = "org.apache.log4j.spi"
				}
			}
			exports += new Package package_org_apache_log4j_varia {
				__id = "org.apache.log4j.varia"
				identifier = new PlatformID {
					value = "org.apache.log4j.varia"
				}
			}
			exports += new Package package_org_apache_log4j_xml {
				__id = "org.apache.log4j.xml"
				identifier = new PlatformID {
					value = "org.apache.log4j.xml"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_xerces {
			__id = "org.apache.xerces"
			identifier = new PlatformID {
				value = "org.apache.xerces"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.9.0.v200909240008"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_xerces
				target = plugin_system_bundle
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_xerces
				target = plugin_javax_xml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.4-2.0.0)'"
				maxVersion = "'[1.3.4-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_xerces
				target = plugin_org_apache_xml_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_apache_xerces
				target = plugin_org_apache_xml_serializer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.7.1-3.0.0)'"
				maxVersion = "'[2.7.1-3.0.0)'"
			}
			exports += new Package package_META_INF_services {
				__id = "META-INF.services"
				identifier = new PlatformID {
					value = "META-INF.services"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_html_dom {
				__id = "org.apache.html.dom"
				identifier = new PlatformID {
					value = "org.apache.html.dom"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_wml {
				__id = "org.apache.wml"
				identifier = new PlatformID {
					value = "org.apache.wml"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_wml_dom {
				__id = "org.apache.wml.dom"
				identifier = new PlatformID {
					value = "org.apache.wml.dom"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_dom {
				__id = "org.apache.xerces.dom"
				identifier = new PlatformID {
					value = "org.apache.xerces.dom"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_dom_events {
				__id = "org.apache.xerces.dom.events"
				identifier = new PlatformID {
					value = "org.apache.xerces.dom.events"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_dom3_as {
				__id = "org.apache.xerces.dom3.as"
				identifier = new PlatformID {
					value = "org.apache.xerces.dom3.as"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl {
				__id = "org.apache.xerces.impl"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_dtd {
				__id = "org.apache.xerces.impl.dtd"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.dtd"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_dtd_models {
				__id = "org.apache.xerces.impl.dtd.models"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.dtd.models"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_dv {
				__id = "org.apache.xerces.impl.dv"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.dv"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_dv_dtd {
				__id = "org.apache.xerces.impl.dv.dtd"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.dv.dtd"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_dv_util {
				__id = "org.apache.xerces.impl.dv.util"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.dv.util"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_dv_xs {
				__id = "org.apache.xerces.impl.dv.xs"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.dv.xs"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_io {
				__id = "org.apache.xerces.impl.io"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.io"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_msg {
				__id = "org.apache.xerces.impl.msg"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.msg"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_validation {
				__id = "org.apache.xerces.impl.validation"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.validation"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xpath {
				__id = "org.apache.xerces.impl.xpath"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xpath"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xpath_regex {
				__id = "org.apache.xerces.impl.xpath.regex"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xpath.regex"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xs {
				__id = "org.apache.xerces.impl.xs"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xs"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xs_identity {
				__id = "org.apache.xerces.impl.xs.identity"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xs.identity"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xs_models {
				__id = "org.apache.xerces.impl.xs.models"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xs.models"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xs_opti {
				__id = "org.apache.xerces.impl.xs.opti"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xs.opti"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xs_traversers {
				__id = "org.apache.xerces.impl.xs.traversers"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xs.traversers"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_impl_xs_util {
				__id = "org.apache.xerces.impl.xs.util"
				identifier = new PlatformID {
					value = "org.apache.xerces.impl.xs.util"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_jaxp {
				__id = "org.apache.xerces.jaxp"
				identifier = new PlatformID {
					value = "org.apache.xerces.jaxp"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_jaxp_datatype {
				__id = "org.apache.xerces.jaxp.datatype"
				identifier = new PlatformID {
					value = "org.apache.xerces.jaxp.datatype"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_jaxp_validation {
				__id = "org.apache.xerces.jaxp.validation"
				identifier = new PlatformID {
					value = "org.apache.xerces.jaxp.validation"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_parsers {
				__id = "org.apache.xerces.parsers"
				identifier = new PlatformID {
					value = "org.apache.xerces.parsers"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_util {
				__id = "org.apache.xerces.util"
				identifier = new PlatformID {
					value = "org.apache.xerces.util"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_xinclude {
				__id = "org.apache.xerces.xinclude"
				identifier = new PlatformID {
					value = "org.apache.xerces.xinclude"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_xni {
				__id = "org.apache.xerces.xni"
				identifier = new PlatformID {
					value = "org.apache.xerces.xni"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_xni_grammars {
				__id = "org.apache.xerces.xni.grammars"
				identifier = new PlatformID {
					value = "org.apache.xerces.xni.grammars"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_xni_parser {
				__id = "org.apache.xerces.xni.parser"
				identifier = new PlatformID {
					value = "org.apache.xerces.xni.parser"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_xpointer {
				__id = "org.apache.xerces.xpointer"
				identifier = new PlatformID {
					value = "org.apache.xerces.xpointer"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_xs {
				__id = "org.apache.xerces.xs"
				identifier = new PlatformID {
					value = "org.apache.xerces.xs"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xerces_xs_datatypes {
				__id = "org.apache.xerces.xs.datatypes"
				identifier = new PlatformID {
					value = "org.apache.xerces.xs.datatypes"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_apache_xml_serialize {
				__id = "org.apache.xml.serialize"
				identifier = new PlatformID {
					value = "org.apache.xml.serialize"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
			exports += new Package package_org_w3c_dom_html {
				__id = "org.w3c.dom.html"
				identifier = new PlatformID {
					value = "org.w3c.dom.html"
				}
				version = new Version {
					value = "2.9.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_xml_resolver {
			__id = "org.apache.xml.resolver"
			identifier = new PlatformID {
				value = "org.apache.xml.resolver"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.v200902170519"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_xml_resolver
				target = plugin_system_bundle
			}
			exports += new Package package_org_apache_env {
				__id = "org.apache.env"
				identifier = new PlatformID {
					value = "org.apache.env"
				}
				version = new Version {
					value = "1.2.0"
				}
			}
			exports += new Package package_org_apache_xml_resolver {
				__id = "org.apache.xml.resolver"
				identifier = new PlatformID {
					value = "org.apache.xml.resolver"
				}
				version = new Version {
					value = "1.2.0"
				}
			}
			exports += new Package package_org_apache_xml_resolver_apps {
				__id = "org.apache.xml.resolver.apps"
				identifier = new PlatformID {
					value = "org.apache.xml.resolver.apps"
				}
				version = new Version {
					value = "1.2.0"
				}
			}
			exports += new Package package_org_apache_xml_resolver_etc {
				__id = "org.apache.xml.resolver.etc"
				identifier = new PlatformID {
					value = "org.apache.xml.resolver.etc"
				}
				version = new Version {
					value = "1.2.0"
				}
			}
			exports += new Package package_org_apache_xml_resolver_helpers {
				__id = "org.apache.xml.resolver.helpers"
				identifier = new PlatformID {
					value = "org.apache.xml.resolver.helpers"
				}
				version = new Version {
					value = "1.2.0"
				}
			}
			exports += new Package package_org_apache_xml_resolver_readers {
				__id = "org.apache.xml.resolver.readers"
				identifier = new PlatformID {
					value = "org.apache.xml.resolver.readers"
				}
				version = new Version {
					value = "1.2.0"
				}
			}
			exports += new Package package_org_apache_xml_resolver_tools {
				__id = "org.apache.xml.resolver.tools"
				identifier = new PlatformID {
					value = "org.apache.xml.resolver.tools"
				}
				version = new Version {
					value = "1.2.0"
				}
			}
		}
		plugins += new Plugin plugin_org_apache_xml_serializer {
			__id = "org.apache.xml.serializer"
			identifier = new PlatformID {
				value = "org.apache.xml.serializer"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.7.1.v200902170519"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_apache_xml_serializer
				target = plugin_system_bundle
			}
			exports += new Package package_org_apache_xml_serializer {
				__id = "org.apache.xml.serializer"
				identifier = new PlatformID {
					value = "org.apache.xml.serializer"
				}
				version = new Version {
					value = "2.7.1"
				}
			}
			exports += new Package package_org_apache_xml_serializer_dom3 {
				__id = "org.apache.xml.serializer.dom3"
				identifier = new PlatformID {
					value = "org.apache.xml.serializer.dom3"
				}
				version = new Version {
					value = "2.7.1"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_cvs {
			__id = "org.eclipse.buckminster.cvs"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.cvs"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.350.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.350'"
				maxVersion = "'1.1.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_buckminster_osgi_filter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_team_cvs_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.200'"
				maxVersion = "'3.3.200'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.100'"
				maxVersion = "'3.2.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_ecf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_cvs
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_jarprocessor {
			__id = "org.eclipse.buckminster.jarprocessor"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.jarprocessor"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.r10579"
			}
			vendor = vendor_Cloudsmith_Inc
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jarprocessor
				target = plugin_org_eclipse_buckminster_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jarprocessor
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jarprocessor
				target = plugin_org_eclipse_buckminster_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jarprocessor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jarprocessor
				target = plugin_org_eclipse_equinox_p2_jarprocessor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			exports += new Package package_org_eclipse_buckminster_jarprocessor {
				__id = "org.eclipse.buckminster.jarprocessor"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.jarprocessor"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_jdt {
			__id = "org.eclipse.buckminster.jdt"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.jdt"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.r10628"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_buckminster_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_buckminster_cmdline
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.1.200'"
				maxVersion = "'3.1.200'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_jdt
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.100'"
				maxVersion = "'3.3.100'"
			}
			exports += new Package package_org_eclipse_buckminster_jdt {
				__id = "org.eclipse.buckminster.jdt"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.jdt"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_pde {
			__id = "org.eclipse.buckminster.pde"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.pde"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.360.r10630"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_jdt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.350'"
				maxVersion = "'1.1.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.350'"
				maxVersion = "'1.1.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_cmdline
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.350'"
				maxVersion = "'1.0.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_download
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_opml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_osgi_filter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_team_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_pde_build
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_jdt_launching
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_update_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.300'"
				maxVersion = "'3.2.300'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_apache_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.7.1'"
				maxVersion = "'1.7.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_ecf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_equinox_p2_publisher
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_buckminster_jarprocessor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_equinox_p2_artifact_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_equinox_p2_metadata_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = plugin_org_eclipse_ant_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.2.100'"
				maxVersion = "'3.2.100'"
			}
			exports += new Package package_org_eclipse_buckminster_pde {
				__id = "org.eclipse.buckminster.pde"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.pde"
				}
			}
			exports += new Package package_org_eclipse_buckminster_pde_cspecgen {
				__id = "org.eclipse.buckminster.pde.cspecgen"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.pde.cspecgen"
				}
			}
			exports += new Package package_org_eclipse_buckminster_pde_cspecgen_bundle {
				__id = "org.eclipse.buckminster.pde.cspecgen.bundle"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.pde.cspecgen.bundle"
				}
			}
			exports += new Package package_org_eclipse_buckminster_pde_cspecgen_feature {
				__id = "org.eclipse.buckminster.pde.cspecgen.feature"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.pde.cspecgen.feature"
				}
			}
			exports += new Package package_org_eclipse_buckminster_pde_mapfile {
				__id = "org.eclipse.buckminster.pde.mapfile"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.pde.mapfile"
				}
			}
			exports += new Package package_org_eclipse_buckminster_pde_mapprovider {
				__id = "org.eclipse.buckminster.pde.mapprovider"
				identifier = new PlatformID {
					value = "org.eclipse.buckminster.pde.mapprovider"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_p2_updatesite
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_frameworkadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository_processing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_p2_publisher
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde
				target = package_org_eclipse_equinox_p2_publisher_eclipse
			}
		}
		plugins += new Plugin plugin_org_eclipse_buckminster_pde_ui {
			__id = "org.eclipse.buckminster.pde.ui"
			identifier = new PlatformID {
				value = "org.eclipse.buckminster.pde.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.350.r10356"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_buckminster_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.350'"
				maxVersion = "'1.0.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_buckminster_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.350'"
				maxVersion = "'1.1.350'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_buckminster_sax
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_buckminster_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.1.0'"
				maxVersion = "'1.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_buckminster_pde_ui
				target = plugin_org_eclipse_equinox_p2_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_draw2d_doc_isv {
			__id = "org.eclipse.draw2d.doc.isv"
			identifier = new PlatformID {
				value = "org.eclipse.draw2d.doc.isv"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.v20090422-2346"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.draw2d.doc.isv"
				identifier = new PlatformID {
					value = "org.eclipse.draw2d.doc.isv"
				}
				locator = new EFSLocator {
					value = "org.eclipse.draw2d.doc.isv"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf {
			__id = "org.eclipse.ecf"
			identifier = new PlatformID {
				value = "org.eclipse.ecf"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.0.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = plugin_org_eclipse_equinox_registry
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = plugin_org_eclipse_ecf_identity
			}
			exports += new Package package_org_eclipse_ecf_core {
				__id = "org.eclipse.ecf.core"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_events {
				__id = "org.eclipse.ecf.core.events"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.events"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_jobs {
				__id = "org.eclipse.ecf.core.jobs"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.jobs"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_provider {
				__id = "org.eclipse.ecf.core.provider"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.provider"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_security {
				__id = "org.eclipse.ecf.core.security"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.security"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_start {
				__id = "org.eclipse.ecf.core.start"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.start"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_status {
				__id = "org.eclipse.ecf.core.status"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.status"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_user {
				__id = "org.eclipse.ecf.core.user"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.user"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_util {
				__id = "org.eclipse.ecf.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.util"
				}
			}
			exports += new Package package_org_eclipse_ecf_internal_core {
				__id = "org.eclipse.ecf.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.internal.core"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = package_org_eclipse_equinox_concurrent_future
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.2"
				maxVersion = "1.3.2"
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf_filetransfer {
			__id = "org.eclipse.ecf.filetransfer"
			identifier = new PlatformID {
				value = "org.eclipse.ecf.filetransfer"
			}
			state = : "State.active"
			version = new Version {
				value = "3.0.0.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = plugin_org_eclipse_equinox_registry
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = plugin_org_eclipse_ecf
			}
			exports += new Package package_org_eclipse_ecf_filetransfer {
				__id = "org.eclipse.ecf.filetransfer"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.filetransfer"
				}
			}
			exports += new Package package_org_eclipse_ecf_filetransfer_events {
				__id = "org.eclipse.ecf.filetransfer.events"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.filetransfer.events"
				}
			}
			exports += new Package package_org_eclipse_ecf_filetransfer_events_socket {
				__id = "org.eclipse.ecf.filetransfer.events.socket"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.filetransfer.events.socket"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_ecf_filetransfer_events_socketfactory {
				__id = "org.eclipse.ecf.filetransfer.events.socketfactory"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.filetransfer.events.socketfactory"
				}
			}
			exports += new Package package_org_eclipse_ecf_filetransfer_identity {
				__id = "org.eclipse.ecf.filetransfer.identity"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.filetransfer.identity"
				}
			}
			exports += new Package package_org_eclipse_ecf_filetransfer_service {
				__id = "org.eclipse.ecf.filetransfer.service"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.filetransfer.service"
				}
			}
			exports += new Package package_org_eclipse_ecf_internal_filetransfer {
				__id = "org.eclipse.ecf.internal.filetransfer"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.internal.filetransfer"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = package_org_osgi_service_url
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_filetransfer
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.2"
				maxVersion = "1.3.2"
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf_identity {
			__id = "org.eclipse.ecf.identity"
			identifier = new PlatformID {
				value = "org.eclipse.ecf.identity"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.0.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_identity
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_identity
				target = plugin_org_eclipse_equinox_registry
			}
			exports += new Package package_org_eclipse_ecf_core_identity {
				__id = "org.eclipse.ecf.core.identity"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.identity"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
			exports += new Package package_org_eclipse_ecf_core_util {
				__id = "org.eclipse.ecf.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.core.util"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
			exports += new Package package_org_eclipse_ecf_internal_core_identity {
				__id = "org.eclipse.ecf.internal.core.identity"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.internal.core.identity"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_identity
				target = package_org_eclipse_osgi_service_debug
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_identity
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_identity
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_identity
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_identity
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.2"
				maxVersion = "1.3.2"
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf_provider_filetransfer {
			__id = "org.eclipse.ecf.provider.filetransfer"
			identifier = new PlatformID {
				value = "org.eclipse.ecf.provider.filetransfer"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.1.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = plugin_org_eclipse_ecf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = plugin_org_eclipse_ecf_filetransfer
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = plugin_org_eclipse_equinox_registry
			}
			exports += new Package package_org_eclipse_ecf_internal_provider_filetransfer {
				__id = "org.eclipse.ecf.internal.provider.filetransfer"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.internal.provider.filetransfer"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer {
				__id = "org.eclipse.ecf.provider.filetransfer"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer_browse {
				__id = "org.eclipse.ecf.provider.filetransfer.browse"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer.browse"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer_events_socket {
				__id = "org.eclipse.ecf.provider.filetransfer.events.socket"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer.events.socket"
				}
				version = new Version {
					value = "1.0"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer_identity {
				__id = "org.eclipse.ecf.provider.filetransfer.identity"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer.identity"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer_outgoing {
				__id = "org.eclipse.ecf.provider.filetransfer.outgoing"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer.outgoing"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer_retrieve {
				__id = "org.eclipse.ecf.provider.filetransfer.retrieve"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer.retrieve"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer_util {
				__id = "org.eclipse.ecf.provider.filetransfer.util"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer.util"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_eclipse_core_net_proxy
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_eclipse_ecf_provider_filetransfer_events_socket
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "2.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_osgi_service_url
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.2"
				maxVersion = "1.3.2"
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf_provider_filetransfer_httpclient {
			__id = "org.eclipse.ecf.provider.filetransfer.httpclient"
			identifier = new PlatformID {
				value = "org.eclipse.ecf.provider.filetransfer.httpclient"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.1.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = plugin_org_eclipse_ecf_provider_filetransfer
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = plugin_org_eclipse_ecf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = plugin_org_eclipse_ecf_filetransfer
			}
			exports += new Package package_org_eclipse_ecf_internal_provider_filetransfer_httpclient {
				__id = "org.eclipse.ecf.internal.provider.filetransfer.httpclient"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.internal.provider.filetransfer.httpclient"
				}
			}
			exports += new Package package_org_eclipse_ecf_provider_filetransfer_httpclient {
				__id = "org.eclipse.ecf.provider.filetransfer.httpclient"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.provider.filetransfer.httpclient"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_apache_commons_httpclient
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.0.1"
				maxVersion = "3.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_apache_commons_httpclient_auth
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.0.1"
				maxVersion = "3.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_apache_commons_httpclient_methods
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.0.1"
				maxVersion = "3.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_apache_commons_httpclient_params
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.0.1"
				maxVersion = "3.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_apache_commons_httpclient_protocol
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.0.1"
				maxVersion = "3.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_apache_commons_httpclient_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.0.1"
				maxVersion = "3.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_osgi_service_url
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.2"
				maxVersion = "1.3.2"
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf_provider_filetransfer_httpclient_ssl {
			__id = "org.eclipse.ecf.provider.filetransfer.httpclient.ssl"
			identifier = new PlatformID {
				value = "org.eclipse.ecf.provider.filetransfer.httpclient.ssl"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_httpclient_ssl
				target = package_org_apache_commons_httpclient_protocol
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf_provider_filetransfer_ssl {
			__id = "org.eclipse.ecf.provider.filetransfer.ssl"
			identifier = new PlatformID {
				value = "org.eclipse.ecf.provider.filetransfer.ssl"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_provider_filetransfer_ssl
				target = package_javax_net_ssl
			}
		}
		plugins += new Plugin plugin_org_eclipse_ecf_ssl {
			__id = "org.eclipse.ecf.ssl"
			identifier = new PlatformID {
				value = "org.eclipse.ecf.ssl"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.v20090831-1906"
			}
			vendor = vendor_Eclipse_org___ECF
			exports += new Package package_org_eclipse_ecf_internal_ssl {
				__id = "org.eclipse.ecf.internal.ssl"
				identifier = new PlatformID {
					value = "org.eclipse.ecf.internal.ssl"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_ssl
				target = package_org_eclipse_osgi_service_security
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_ecf_ssl
				target = package_javax_net_ssl
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_diagram_ui_outline {
			__id = "org.eclipse.emf.ecoretools.diagram.ui.outline"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.diagram.ui.outline"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram_ui_outline
				target = plugin_org_eclipse_gmf_runtime_diagram_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram_ui_outline
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_diagram_ui_outline
				target = plugin_org_eclipse_core_expressions
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_ui_outline {
				__id = "org.eclipse.emf.ecoretools.diagram.ui.outline"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.ui.outline"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_ui_outline_actions {
				__id = "org.eclipse.emf.ecoretools.diagram.ui.outline.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.ui.outline.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_ui_outline_decorator {
				__id = "org.eclipse.emf.ecoretools.diagram.ui.outline.decorator"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.ui.outline.decorator"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_diagram_ui_outline_internal {
				__id = "org.eclipse.emf.ecoretools.diagram.ui.outline.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.diagram.ui.outline.internal"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_filters {
			__id = "org.eclipse.emf.ecoretools.filters"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.filters"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_filters
				target = plugin_org_eclipse_gmf_runtime_diagram_ui_properties
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_filters
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_filters
				target = plugin_org_eclipse_ocl_ecore
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_diagramfilters {
				__id = "org.eclipse.emf.ecoretools.filters.diagramfilters"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.diagramfilters"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_internal {
				__id = "org.eclipse.emf.ecoretools.filters.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_internal_actions {
				__id = "org.eclipse.emf.ecoretools.filters.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_internal_commands {
				__id = "org.eclipse.emf.ecoretools.filters.internal.commands"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.internal.commands"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_internal_dialogs {
				__id = "org.eclipse.emf.ecoretools.filters.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_internal_extension {
				__id = "org.eclipse.emf.ecoretools.filters.internal.extension"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.internal.extension"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_internal_providers {
				__id = "org.eclipse.emf.ecoretools.filters.internal.providers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.internal.providers"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_filters_internal_utils {
				__id = "org.eclipse.emf.ecoretools.filters.internal.utils"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.filters.internal.utils"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_ecoretools_tabbedproperties {
			__id = "org.eclipse.emf.ecoretools.tabbedproperties"
			identifier = new PlatformID {
				value = "org.eclipse.emf.ecoretools.tabbedproperties"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.8.0.v200906221231"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_tabbedproperties
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_tabbedproperties
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_tabbedproperties
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_tabbedproperties
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_ecoretools_tabbedproperties
				target = plugin_org_eclipse_emf_ecore_edit
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_internal {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_internal_sections {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.internal.sections"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.internal.sections"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_internal_sections_listeners {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.internal.sections.listeners"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.internal.sections.listeners"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_internal_utils {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.internal.utils"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.internal.utils"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_providers {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.providers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.providers"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_sections {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.sections"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.sections"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_sections_widgets {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.sections.widgets"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.sections.widgets"
				}
			}
			exports += new Package package_org_eclipse_emf_ecoretools_tabbedproperties_utils {
				__id = "org.eclipse.emf.ecoretools.tabbedproperties.utils"
				identifier = new PlatformID {
					value = "org.eclipse.emf.ecoretools.tabbedproperties.utils"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_example_installer {
			__id = "org.eclipse.emf.example.installer"
			identifier = new PlatformID {
				value = "org.eclipse.emf.example.installer"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_example_installer
				target = plugin_org_eclipse_emf_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_example_installer
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_index {
			__id = "org.eclipse.emf.index"
			identifier = new PlatformID {
				value = "org.eclipse.emf.index"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.0.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index
				target = plugin_com_google_guice
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_emf_index {
				__id = "org.eclipse.emf.index"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index"
				}
			}
			exports += new Package package_org_eclipse_emf_index_ecore {
				__id = "org.eclipse.emf.index.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ecore"
				}
			}
			exports += new Package package_org_eclipse_emf_index_ecore_impl {
				__id = "org.eclipse.emf.index.ecore.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ecore.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_index_event {
				__id = "org.eclipse.emf.index.event"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.event"
				}
			}
			exports += new Package package_org_eclipse_emf_index_event_impl {
				__id = "org.eclipse.emf.index.event.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.event.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_index_impl {
				__id = "org.eclipse.emf.index.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_index_impl_memory {
				__id = "org.eclipse.emf.index.impl.memory"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.impl.memory"
				}
			}
			exports += new Package package_org_eclipse_emf_index_internal {
				__id = "org.eclipse.emf.index.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_index_resource {
				__id = "org.eclipse.emf.index.resource"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.resource"
				}
			}
			exports += new Package package_org_eclipse_emf_index_resource_impl {
				__id = "org.eclipse.emf.index.resource.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.resource.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_index_runtime_impl {
				__id = "org.eclipse.emf.index.runtime.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.runtime.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_index_tracking_impl {
				__id = "org.eclipse.emf.index.tracking.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.tracking.impl"
				}
			}
			exports += new Package package_org_eclipse_emf_index_util {
				__id = "org.eclipse.emf.index.util"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_index_tests {
			__id = "org.eclipse.emf.index.tests"
			identifier = new PlatformID {
				value = "org.eclipse.emf.index.tests"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.0.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_tests
				target = plugin_org_eclipse_emf_index
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_tests
				target = plugin_org_junit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.8.2'"
				maxVersion = "'3.8.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_tests
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_tests
				target = plugin_com_google_guice
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.1'"
				maxVersion = "'1.0.1'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_emf_index_ui {
			__id = "org.eclipse.emf.index.ui"
			identifier = new PlatformID {
				value = "org.eclipse.emf.index.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.0.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_ui
				target = plugin_org_eclipse_emf_index
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_index_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			exports += new Package package_org_eclipse_emf_index_ui {
				__id = "org.eclipse.emf.index.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_index_ui_builder {
				__id = "org.eclipse.emf.index.ui.builder"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ui.builder"
				}
			}
			exports += new Package package_org_eclipse_emf_index_ui_dialog {
				__id = "org.eclipse.emf.index.ui.dialog"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ui.dialog"
				}
			}
			exports += new Package package_org_eclipse_emf_index_ui_handlers {
				__id = "org.eclipse.emf.index.ui.handlers"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ui.handlers"
				}
			}
			exports += new Package package_org_eclipse_emf_index_ui_internal {
				__id = "org.eclipse.emf.index.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_emf_index_ui_resource_impl {
				__id = "org.eclipse.emf.index.ui.resource.impl"
				identifier = new PlatformID {
					value = "org.eclipse.emf.index.ui.resource.impl"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_epp_usagedata_gathering {
			__id = "org.eclipse.epp.usagedata.gathering"
			identifier = new PlatformID {
				value = "org.eclipse.epp.usagedata.gathering"
			}
			state = : "State.active"
			version = new Version {
				value = "1.1.0.R200906100410"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_gathering
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_gathering
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_gathering {
				__id = "org.eclipse.epp.usagedata.internal.gathering"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.gathering"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_gathering_events {
				__id = "org.eclipse.epp.usagedata.internal.gathering.events"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.gathering.events"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_gathering_monitors {
				__id = "org.eclipse.epp.usagedata.internal.gathering.monitors"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.gathering.monitors"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_gathering_services {
				__id = "org.eclipse.epp.usagedata.internal.gathering.services"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.gathering.services"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_gathering_settings {
				__id = "org.eclipse.epp.usagedata.internal.gathering.settings"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.gathering.settings"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_epp_usagedata_recording {
			__id = "org.eclipse.epp.usagedata.recording"
			identifier = new PlatformID {
				value = "org.eclipse.epp.usagedata.recording"
			}
			state = : "State.active"
			version = new Version {
				value = "1.1.0.R200906100410"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_recording
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_recording
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_recording
				target = plugin_org_eclipse_epp_usagedata_gathering
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_recording
				target = plugin_org_apache_commons_httpclient
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.1-4.0.0)'"
				maxVersion = "'[3.0.1-4.0.0)'"
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_recording {
				__id = "org.eclipse.epp.usagedata.internal.recording"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.recording"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_recording_filtering {
				__id = "org.eclipse.epp.usagedata.internal.recording.filtering"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.recording.filtering"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_recording_settings {
				__id = "org.eclipse.epp.usagedata.internal.recording.settings"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.recording.settings"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_recording_uploading {
				__id = "org.eclipse.epp.usagedata.internal.recording.uploading"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.recording.uploading"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_epp_usagedata_ui {
			__id = "org.eclipse.epp.usagedata.ui"
			identifier = new PlatformID {
				value = "org.eclipse.epp.usagedata.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0.R200906100410"
			}
			vendor = vendor_Eclipse_Packaging_Project
			ownedEntities += new Document {
				__id = "org.eclipse.epp.usagedata.ui"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.ui"
				}
				locator = new EFSLocator {
					value = "org.eclipse.epp.usagedata.ui"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_org_eclipse_epp_usagedata_recording
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_org_eclipse_epp_usagedata_gathering
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_org_eclipse_ui_intro
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_org_eclipse_ui_intro_universal
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_epp_usagedata_ui
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.8.1-5.0.0)'"
				maxVersion = "'[3.8.1-5.0.0)'"
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_ui {
				__id = "org.eclipse.epp.usagedata.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_ui_preferences {
				__id = "org.eclipse.epp.usagedata.internal.ui.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.ui.preferences"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_ui_preview {
				__id = "org.eclipse.epp.usagedata.internal.ui.preview"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.ui.preview"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_ui_uploaders {
				__id = "org.eclipse.epp.usagedata.internal.ui.uploaders"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.ui.uploaders"
				}
			}
			exports += new Package package_org_eclipse_epp_usagedata_internal_ui_wizards {
				__id = "org.eclipse.epp.usagedata.internal.ui.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.epp.usagedata.internal.ui.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_concurrent {
			__id = "org.eclipse.equinox.concurrent"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.concurrent"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090520-1800"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_concurrent_future {
				__id = "org.eclipse.equinox.concurrent.future"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.concurrent.future"
				}
				version = new Version {
					value = "1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_concurrent
				target = package_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.4.0"
				maxVersion = "3.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_concurrent
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_concurrent
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_frameworkadmin {
			__id = "org.eclipse.equinox.frameworkadmin"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.frameworkadmin"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			exports += new Package package_org_eclipse_equinox_internal_frameworkadmin_utils {
				__id = "org.eclipse.equinox.internal.frameworkadmin.utils"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.frameworkadmin.utils"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_simpleconfigurator_manipulator_ {
				__id = "org.eclipse.equinox.simpleconfigurator.manipulator'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.simpleconfigurator.manipulator'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_configuratormanipulator {
				__id = "org.eclipse.equinox.internal.provisional.configuratormanipulator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.configuratormanipulator"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_frameworkadmin {
				__id = "org.eclipse.equinox.internal.provisional.frameworkadmin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.frameworkadmin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_simpleconfigurator_manipulator {
				__id = "org.eclipse.equinox.simpleconfigurator.manipulator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.simpleconfigurator.manipulator"
				}
			}
			exports += new Package package_org_eclipse_pde_core {
				__id = "org.eclipse.pde.core"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_ {
				__id = "org.eclipse.pde.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin
				target = package_org_eclipse_osgi_service_pluginconversion
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin
				target = package_org_osgi_service_startlevel
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_frameworkadmin_equinox {
			__id = "org.eclipse.equinox.frameworkadmin.equinox"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.frameworkadmin.equinox"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = plugin_org_eclipse_equinox_common
			}
			exports += new Package package_org_eclipse_equinox_internal_frameworkadmin_equinox {
				__id = "org.eclipse.equinox.internal.frameworkadmin.equinox"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.frameworkadmin.equinox"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_frameworkadmin_equinox_utils {
				__id = "org.eclipse.equinox.internal.frameworkadmin.equinox.utils"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.frameworkadmin.equinox.utils"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_core_runtime_adaptor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_core_runtime_internal_adaptor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_equinox_internal_frameworkadmin_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_equinox_internal_provisional_configuratormanipulator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_equinox_internal_provisional_frameworkadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_framework_adaptor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_framework_debug
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_framework_internal_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_service_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_storagemanager
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_osgi_service_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_osgi_service_startlevel
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_frameworkadmin_equinox
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.2"
				maxVersion = "1.3.2"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_artifact_repository {
			__id = "org.eclipse.equinox.p2.artifact.repository"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.artifact.repository"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.101.R35x_v20090721"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = plugin_org_eclipse_ecf_filetransfer
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = plugin_org_eclipse_ecf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = plugin_org_eclipse_equinox_registry
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_artifact_mirror {
				__id = "org.eclipse.equinox.internal.p2.artifact.mirror"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.artifact.mirror"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_artifact_processing {
				__id = "org.eclipse.equinox.internal.p2.artifact.processing"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.artifact.processing"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_artifact_processors_md5 {
				__id = "org.eclipse.equinox.internal.p2.artifact.processors.md5"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.artifact.processors.md5"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_artifact_processors_pack200 {
				__id = "org.eclipse.equinox.internal.p2.artifact.processors.pack200"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.artifact.processors.pack200"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_artifact_repository {
				__id = "org.eclipse.equinox.internal.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins_ {
				__id = "org.eclipse.equinox.p2.reconciler.dropins'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_artifact_repository_ant {
				__id = "org.eclipse.equinox.internal.p2.artifact.repository.ant"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.artifact.repository.ant"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_artifact_repository_simple {
				__id = "org.eclipse.equinox.internal.p2.artifact.repository.simple"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.artifact.repository.simple"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_tests_ {
				__id = "org.eclipse.equinox.p2.tests'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.tests'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_artifact_repository {
				__id = "org.eclipse.equinox.internal.provisional.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_console {
				__id = "org.eclipse.equinox.p2.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.console"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_garbagecollector {
				__id = "org.eclipse.equinox.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.garbagecollector"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_artifact_repository_processing {
				__id = "org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite_ {
				__id = "org.eclipse.equinox.p2.updatesite'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_spi_p2_artifact_repository {
				__id = "org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite_ {
				__id = "org.eclipse.equinox.p2.updatesite'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_p2_jarprocessor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_p2_persistence
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_core_location
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_equinox_security_storage
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_internal_provisional_equinox_p2_jarprocessor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_osgi_framework_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_osgi_signedcontent
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_artifact_repository
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_cartography {
			__id = "org.eclipse.equinox.p2.cartography"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.cartography"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_INRIA_Rennes_Bretagne_Atlantique
			ownedEntities += new Metamodel metamodel_Platform {
				__id = "Platform"
				identifier = new PlatformID {
					value = "Platform"
				}
				locator = new EFSLocator {
					value = "http://org.eclipse.equinox.p2/1.0"
				}
			}
				ownedEntities += new Service service_conformsTo_Platform {
					__id = "conformsTo_Platform"
					identifier = new PlatformID {
						value = "conformsTo_Platform"
					}
					locator = new EFSLocator {
						value = "http://org.eclipse.equinox.p2/1.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_cartography_emftext_tests {
			__id = "org.eclipse.equinox.p2.cartography.emftext.tests"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.cartography.emftext.tests"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.qualifier"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_cartography_emftext_tests
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_cartography_emftext_tests
				target = plugin_org_eclipse_pde_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.100'"
				maxVersion = "'3.5.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_cartography_emftext_tests
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.1'"
				maxVersion = "'3.5.1'"
			}
			exports += new Package package_org_eclipse_equinox_p2_cartography_emftext_tests {
				__id = "org.eclipse.equinox.p2.cartography.emftext.tests"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.cartography.emftext.tests"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_console {
			__id = "org.eclipse.equinox.p2.console"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.console"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_internal_p2_console {
				__id = "org.eclipse.equinox.internal.p2.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.console"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_configurator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_osgi_framework_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_osgi_service_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.4.0"
				maxVersion = "1.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_console
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.3"
				maxVersion = "1.3.3"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_core {
			__id = "org.eclipse.equinox.p2.core"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.core"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.101.R35x_v20090819"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_core {
				__id = "org.eclipse.equinox.internal.p2.core"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.core"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_ {
				__id = "org.eclipse.equinox.p2.repository'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_core_helpers {
				__id = "org.eclipse.equinox.internal.p2.core.helpers"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.core.helpers"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_optimizers {
				__id = "org.eclipse.equinox.p2.artifact.optimizers"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.optimizers"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_download {
				__id = "org.eclipse.equinox.p2.download"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.download"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata {
				__id = "org.eclipse.equinox.p2.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_frameworkadmin_test {
				__id = "org.eclipse.equinox.frameworkadmin.test"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.frameworkadmin.test"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repositoryoptimizer {
				__id = "org.eclipse.equinox.p2.repositoryoptimizer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repositoryoptimizer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker_app {
				__id = "org.eclipse.equinox.p2.updatechecker.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_garbagecollector {
				__id = "org.eclipse.equinox.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.garbagecollector"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_console {
				__id = "org.eclipse.equinox.p2.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.console"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_ {
				__id = "org.eclipse.equinox.p2.repository'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_core {
				__id = "org.eclipse.equinox.internal.provisional.p2.core"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.core"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_console {
				__id = "org.eclipse.equinox.p2.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.console"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director {
				__id = "org.eclipse.equinox.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata {
				__id = "org.eclipse.equinox.p2.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository {
				__id = "org.eclipse.equinox.p2.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_core_eventbus {
				__id = "org.eclipse.equinox.internal.provisional.p2.core.eventbus"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.core.eventbus"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director {
				__id = "org.eclipse.equinox.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_garbagecollector {
				__id = "org.eclipse.equinox.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.garbagecollector"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_ {
				__id = "org.eclipse.equinox.p2.repository'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_core_location {
				__id = "org.eclipse.equinox.internal.provisional.p2.core.location"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.core.location"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director {
				__id = "org.eclipse.equinox.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse_ {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_query {
				__id = "org.eclipse.equinox.internal.provisional.p2.query"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.query"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director {
				__id = "org.eclipse.equinox.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_exemplarysetup {
				__id = "org.eclipse.equinox.p2.exemplarysetup"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.exemplarysetup"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_garbagecollector {
				__id = "org.eclipse.equinox.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.garbagecollector"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_jarprocessor {
				__id = "org.eclipse.equinox.p2.jarprocessor"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.jarprocessor"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata {
				__id = "org.eclipse.equinox.p2.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin_rcp {
				__id = "org.eclipse.equinox.p2.ui.admin.rcp"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin.rcp"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_console {
				__id = "org.eclipse.equinox.p2.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.console"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_eclipse_core_runtime_preferences
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.2.0"
				maxVersion = "3.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_eclipse_osgi_framework_eventmgr
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_eclipse_osgi_framework_log
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_eclipse_osgi_service_debug
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_osgi_service_prefs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.3"
				maxVersion = "1.3.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_core
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_director {
			__id = "org.eclipse.equinox.p2.director"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.director"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = plugin_org_sat4j_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.1.0'"
				maxVersion = "'2.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = plugin_org_sat4j_pb
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.1.0'"
				maxVersion = "'2.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = plugin_org_eclipse_core_jobs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_director {
				__id = "org.eclipse.equinox.internal.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_rollback {
				__id = "org.eclipse.equinox.internal.p2.rollback"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.rollback"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_director {
				__id = "org.eclipse.equinox.internal.provisional.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_configurator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_director_app {
			__id = "org.eclipse.equinox.p2.director.app"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.director.app"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090521-1912"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_director_app {
				__id = "org.eclipse.equinox.internal.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.director.app"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_app
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_p2_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_core_location
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_engine_phases
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_osgi_service_environment
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_director_app
				target = package_org_osgi_framework
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_directorywatcher {
			__id = "org.eclipse.equinox.p2.directorywatcher"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.directorywatcher"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090525"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0)'"
				maxVersion = "'[3.3.0-4.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_directorywatcher {
				__id = "org.eclipse.equinox.internal.provisional.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.directorywatcher"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_p2_update
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_p2_publisher
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_p2_publisher_actions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_equinox_p2_publisher_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.4.0"
				maxVersion = "1.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_osgi_service_cm
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_directorywatcher
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_engine {
			__id = "org.eclipse.equinox.p2.engine"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.engine"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.101.R35x_v20090825"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = plugin_org_eclipse_equinox_registry
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = plugin_org_eclipse_osgi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = plugin_org_eclipse_equinox_p2_metadata_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.100'"
				maxVersion = "'1.0.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = plugin_org_eclipse_core_jobs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_engine {
				__id = "org.eclipse.equinox.internal.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_engine {
				__id = "org.eclipse.equinox.internal.provisional.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_garbagecollector {
				__id = "org.eclipse.equinox.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.garbagecollector"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_engine_phases {
				__id = "org.eclipse.equinox.internal.provisional.p2.engine.phases"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.engine.phases"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app_ {
				__id = "org.eclipse.equinox.p2.director.app'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_core_internal_preferences
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_core_runtime_preferences
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_p2_metadata_repository_io
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_p2_persistence
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_core_location
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_osgi_signedcontent
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_osgi_service_prefs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.3"
				maxVersion = "1.3.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_engine
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_exemplarysetup {
			__id = "org.eclipse.equinox.p2.exemplarysetup"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.exemplarysetup"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = plugin_org_eclipse_equinox_common
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_exemplarysetup {
				__id = "org.eclipse.equinox.internal.p2.exemplarysetup"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.exemplarysetup"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_p2_garbagecollector
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_provisional_p2_core_location
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_exemplarysetup
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_extensionlocation {
			__id = "org.eclipse.equinox.p2.extensionlocation"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.extensionlocation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_extensionlocation {
				__id = "org.eclipse.equinox.internal.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.extensionlocation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_p2_publisher_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_p2_touchpoint_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_p2_update
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_directorywatcher
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_equinox_p2_publisher_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_eclipse_osgi_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_extensionlocation
				target = package_org_osgi_framework
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_garbagecollector {
			__id = "org.eclipse.equinox.p2.garbagecollector"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.garbagecollector"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = plugin_org_eclipse_equinox_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_garbagecollector {
				__id = "org.eclipse.equinox.internal.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.garbagecollector"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_core_runtime_preferences
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.4.0"
				maxVersion = "1.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_osgi_service_prefs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_garbagecollector
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.3"
				maxVersion = "1.3.3"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_jarprocessor {
			__id = "org.eclipse.equinox.p2.jarprocessor"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.jarprocessor"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			exports += new Package package_org_eclipse_equinox_internal_p2_jarprocessor {
				__id = "org.eclipse.equinox.internal.p2.jarprocessor"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.jarprocessor"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_jarprocessor_unsigner {
				__id = "org.eclipse.equinox.internal.p2.jarprocessor.unsigner"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.jarprocessor.unsigner"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_jarprocessor_verifier {
				__id = "org.eclipse.equinox.internal.p2.jarprocessor.verifier"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.jarprocessor.verifier"
				}
			}
			exports += new Package package_org_eclipse_internal_provisional_equinox_p2_jarprocessor {
				__id = "org.eclipse.internal.provisional.equinox.p2.jarprocessor"
				identifier = new PlatformID {
					value = "org.eclipse.internal.provisional.equinox.p2.jarprocessor"
				}
			}
			exports += new Package package_org_eclipse_pde_build_ {
				__id = "org.eclipse.pde.build'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.build'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_metadata {
			__id = "org.eclipse.equinox.p2.metadata"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.metadata"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090525"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata
				target = plugin_org_eclipse_equinox_p2_core
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_metadata {
				__id = "org.eclipse.equinox.internal.p2.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.metadata"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_optimizers {
				__id = "org.eclipse.equinox.p2.artifact.optimizers"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.optimizers"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_processors {
				__id = "org.eclipse.equinox.p2.artifact.processors"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.processors"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher_ {
				__id = "org.eclipse.equinox.p2.publisher'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_metadata {
				__id = "org.eclipse.equinox.internal.provisional.p2.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.metadata"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_console {
				__id = "org.eclipse.equinox.p2.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.console"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_core {
				__id = "org.eclipse.equinox.p2.core"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.core"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director {
				__id = "org.eclipse.equinox.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_exemplarysetup {
				__id = "org.eclipse.equinox.p2.exemplarysetup"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.exemplarysetup"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_garbagecollector {
				__id = "org.eclipse.equinox.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.garbagecollector"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_jarprocessor {
				__id = "org.eclipse.equinox.p2.jarprocessor"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.jarprocessor"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata {
				__id = "org.eclipse.equinox.p2.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_metadata_query {
				__id = "org.eclipse.equinox.internal.provisional.p2.metadata.query"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.metadata.query"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_artifact_repository {
				__id = "org.eclipse.equinox.p2.artifact.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.artifact.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_core {
				__id = "org.eclipse.equinox.p2.core"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.core"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director {
				__id = "org.eclipse.equinox.p2.director"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_exemplarysetup {
				__id = "org.eclipse.equinox.p2.exemplarysetup"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.exemplarysetup"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_garbagecollector {
				__id = "org.eclipse.equinox.p2.garbagecollector"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.garbagecollector"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_jarprocessor {
				__id = "org.eclipse.equinox.p2.jarprocessor"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.jarprocessor"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata {
				__id = "org.eclipse.equinox.p2.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin_rcp {
				__id = "org.eclipse.equinox.p2.ui.admin.rcp"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin.rcp"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_console {
				__id = "org.eclipse.equinox.p2.console"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.console"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_metadata_generator {
			__id = "org.eclipse.equinox.p2.metadata.generator"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.metadata.generator"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = plugin_org_eclipse_equinox_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = plugin_org_eclipse_osgi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_metadata_generator {
				__id = "org.eclipse.equinox.internal.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_metadata_generator_features {
				__id = "org.eclipse.equinox.internal.p2.metadata.generator.features"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.metadata.generator.features"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation_ {
				__id = "org.eclipse.equinox.p2.extensionlocation'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_metadata_generator {
				__id = "org.eclipse.equinox.internal.provisional.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite_ {
				__id = "org.eclipse.equinox.p2.updatesite'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_frameworkadmin_equinox
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_frameworkadmin_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_provisional_frameworkadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository_processing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_generator
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_metadata_repository {
			__id = "org.eclipse.equinox.p2.metadata.repository"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.metadata.repository"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.101.R35x_v20090812"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = plugin_org_eclipse_equinox_registry
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = plugin_org_eclipse_ecf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = plugin_org_eclipse_ecf_filetransfer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.0.0'"
				maxVersion = "'2.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = plugin_org_eclipse_osgi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = plugin_org_eclipse_core_jobs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_metadata_mirror {
				__id = "org.eclipse.equinox.internal.p2.metadata.mirror"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.metadata.mirror"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_metadata_repository {
				__id = "org.eclipse.equinox.internal.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite_ {
				__id = "org.eclipse.equinox.p2.updatesite'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_metadata_repository_io {
				__id = "org.eclipse.equinox.internal.p2.metadata.repository.io"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.metadata.repository.io"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_metadata_repository {
				__id = "org.eclipse.equinox.internal.provisional.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_director_app {
				__id = "org.eclipse.equinox.p2.director.app"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.director.app"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher {
				__id = "org.eclipse.equinox.p2.directorywatcher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine {
				__id = "org.eclipse.equinox.p2.engine"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation {
				__id = "org.eclipse.equinox.p2.extensionlocation"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_installer {
				__id = "org.eclipse.equinox.p2.installer"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.installer"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_generator {
				__id = "org.eclipse.equinox.p2.metadata.generator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.generator"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.reconciler.dropins"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui {
				__id = "org.eclipse.equinox.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_admin {
				__id = "org.eclipse.equinox.p2.ui.admin"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.admin"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatechecker {
				__id = "org.eclipse.equinox.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_pde_ui {
				__id = "org.eclipse.pde.ui"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_pde_core_ {
				__id = "org.eclipse.pde.core'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.core'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_spi_p2_metadata_repository {
				__id = "org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_engine_ {
				__id = "org.eclipse.equinox.p2.engine'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.engine'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_app
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_p2_persistence
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_core_location
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_equinox_security_storage
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_metadata_repository
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_publisher {
			__id = "org.eclipse.equinox.p2.publisher"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.publisher"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v20090527-1812"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_publisher {
				__id = "org.eclipse.equinox.internal.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_ {
				__id = "org.eclipse.equinox.p2.ui.sdk'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_publisher_eclipse {
				__id = "org.eclipse.equinox.internal.p2.publisher.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.publisher.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_extensionlocation_ {
				__id = "org.eclipse.equinox.p2.extensionlocation'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.extensionlocation'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_swt_tools {
				__id = "org.eclipse.equinox.internal.p2.swt.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.swt.tools"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher {
				__id = "org.eclipse.equinox.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite_ {
				__id = "org.eclipse.equinox.p2.updatesite'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite'"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher_actions {
				__id = "org.eclipse.equinox.p2.publisher.actions"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher.actions"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_publisher_eclipse {
				__id = "org.eclipse.equinox.p2.publisher.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.publisher.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite_ {
				__id = "org.eclipse.equinox.p2.updatesite'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite'"
				}
			}
			exports += new Package package_org_eclipse_equinox_spi_p2_publisher {
				__id = "org.eclipse.equinox.spi.p2.publisher"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.spi.p2.publisher"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_frameworkadmin_equinox
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_frameworkadmin_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_frameworkadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository_processing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_osgi_service_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_osgi_service_pluginconversion
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.4.0"
				maxVersion = "1.4.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.3"
				maxVersion = "1.3.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_publisher
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_reconciler_dropins {
			__id = "org.eclipse.equinox.p2.reconciler.dropins"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.reconciler.dropins"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_reconciler_dropins {
				__id = "org.eclipse.equinox.internal.p2.reconciler.dropins"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.reconciler.dropins"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_p2_extensionlocation
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_p2_update
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_configurator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_directorywatcher
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_osgi_service_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.3"
				maxVersion = "1.3.3"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_reconciler_dropins
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_repository {
			__id = "org.eclipse.equinox.p2.repository"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.repository"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.1.v20090901-1041"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = plugin_org_eclipse_equinox_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = plugin_org_eclipse_ecf_filetransfer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = plugin_org_eclipse_ecf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = plugin_org_eclipse_equinox_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = plugin_org_eclipse_equinox_registry
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = plugin_org_eclipse_ecf_provider_filetransfer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.1'"
				maxVersion = "'3.0.1'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_persistence {
				__id = "org.eclipse.equinox.internal.p2.persistence"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.persistence"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository_ {
				__id = "org.eclipse.equinox.p2.metadata.repository'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_repository {
				__id = "org.eclipse.equinox.internal.p2.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite_ {
				__id = "org.eclipse.equinox.p2.updatesite'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_repository_helpers {
				__id = "org.eclipse.equinox.internal.p2.repository.helpers"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.repository.helpers"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_metadata_repository {
				__id = "org.eclipse.equinox.p2.metadata.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.metadata.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_updatesite {
				__id = "org.eclipse.equinox.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_repository_tools {
				__id = "org.eclipse.equinox.p2.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_ {
				__id = "org.eclipse.equinox.p2.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_repository {
				__id = "org.eclipse.equinox.internal.provisional.p2.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.repository"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_spi_p2_repository {
				__id = "org.eclipse.equinox.internal.provisional.spi.p2.repository"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.spi.p2.repository"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_eclipse_core_runtime_jobs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_eclipse_core_runtime_preferences
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.2.0"
				maxVersion = "3.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_eclipse_equinox_security_storage
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.5.0"
				maxVersion = "1.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_osgi_service_prefs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.1"
				maxVersion = "1.1.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.4.2"
				maxVersion = "1.4.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository
				target = package_org_xml_sax_helpers
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_repository_tools {
			__id = "org.eclipse.equinox.p2.repository.tools"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.repository.tools"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1.R35x_v20090806"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			exports += new Package package_org_eclipse_equinox_p2_internal_repository_tools {
				__id = "org.eclipse.equinox.p2.internal.repository.tools"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.internal.repository.tools"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_internal_repository_tools_tasks {
				__id = "org.eclipse.equinox.p2.internal.repository.tools.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.internal.repository.tools.tasks"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_artifact_mirror
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_artifact_repository_ant
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_artifact_repository_simple
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository_processing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_engine_phases
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_internal_provisional_equinox_p2_jarprocessor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.5.0"
				maxVersion = "1.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_repository_tools
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_touchpoint_eclipse {
			__id = "org.eclipse.equinox.p2.touchpoint.eclipse"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.touchpoint.eclipse"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.101.R35x_20090820-1821"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_touchpoint_eclipse {
				__id = "org.eclipse.equinox.internal.p2.touchpoint.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.touchpoint.eclipse"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_touchpoint_eclipse_actions {
				__id = "org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_update {
				__id = "org.eclipse.equinox.internal.p2.update"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.update"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_directorywatcher_ {
				__id = "org.eclipse.equinox.p2.directorywatcher'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.directorywatcher'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_core_runtime_preferences
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.2.0"
				maxVersion = "3.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_p2_garbagecollector
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_frameworkadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_core_location
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_internal_simpleconfigurator_manipulator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_p2_publisher
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_equinox_p2_publisher_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_osgi_service_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_osgi_service_prefs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.1"
				maxVersion = "1.1.1"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.2"
				maxVersion = "1.3.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_eclipse
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_touchpoint_natives {
			__id = "org.eclipse.equinox.p2.touchpoint.natives"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.touchpoint.natives"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.101.R35x_v20090806"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = plugin_org_eclipse_equinox_common
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_touchpoint_natives {
				__id = "org.eclipse.equinox.internal.p2.touchpoint.natives"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.touchpoint.natives"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_touchpoint_natives_actions {
				__id = "org.eclipse.equinox.internal.p2.touchpoint.natives.actions"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.touchpoint.natives.actions"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_provisional_p2_core_location
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_osgi_service_datalocation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_touchpoint_natives
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.3"
				maxVersion = "1.3.3"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_ui {
			__id = "org.eclipse.equinox.p2.ui"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.101.R35x_v20090819"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = plugin_org_eclipse_equinox_p2_exemplarysetup
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = plugin_org_eclipse_equinox_security_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui {
				__id = "org.eclipse.equinox.internal.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui_dialogs {
				__id = "org.eclipse.equinox.internal.p2.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui_model {
				__id = "org.eclipse.equinox.internal.p2.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui.model"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui_query {
				__id = "org.eclipse.equinox.internal.p2.ui.query"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui.query"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui_viewers {
				__id = "org.eclipse.equinox.internal.p2.ui.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui.viewers"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_ui {
				__id = "org.eclipse.equinox.internal.provisional.p2.ui"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.ui"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_ {
				__id = "org.eclipse.pde.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_ui_actions {
				__id = "org.eclipse.equinox.internal.provisional.p2.ui.actions"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.ui.actions"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_ {
				__id = "org.eclipse.pde.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_ui_dialogs {
				__id = "org.eclipse.equinox.internal.provisional.p2.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_ {
				__id = "org.eclipse.pde.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_ui_model {
				__id = "org.eclipse.equinox.internal.provisional.p2.ui.model"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.ui.model"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler_ {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_ui_operations {
				__id = "org.eclipse.equinox.internal.provisional.p2.ui.operations"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.ui.operations"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_ {
				__id = "org.eclipse.pde.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_ui_policy {
				__id = "org.eclipse.equinox.internal.provisional.p2.ui.policy"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.ui.policy"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk {
				__id = "org.eclipse.equinox.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
				}
			}
			exports += new Package package_org_eclipse_pde_ui_ {
				__id = "org.eclipse.pde.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.pde.ui'"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_ui_viewers {
				__id = "org.eclipse.equinox.internal.provisional.p2.ui.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.ui.viewers"
				}
			}
			exports += new Package package_org_eclipse_equinox_p2_ui_sdk_ {
				__id = "org.eclipse.equinox.p2.ui.sdk'"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.p2.ui.sdk'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_com_ibm_icu_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_p2_rollback
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_configurator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository_processing
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_engine_phases
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui
				target = package_org_xml_sax
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_ui_sdk {
			__id = "org.eclipse.equinox.p2.ui.sdk"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.ui.sdk"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = plugin_org_eclipse_equinox_p2_ui
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui_sdk {
				__id = "org.eclipse.equinox.internal.p2.ui.sdk"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui.sdk"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui_sdk_prefs {
				__id = "org.eclipse.equinox.internal.p2.ui.sdk.prefs"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui.sdk.prefs"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_p2_ui_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_actions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_dialogs
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_operations
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_policy
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_viewers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_ui_sdk_scheduler {
			__id = "org.eclipse.equinox.p2.ui.sdk.scheduler"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.ui.sdk.scheduler"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.0.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = plugin_org_eclipse_equinox_p2_updatechecker
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = plugin_org_eclipse_equinox_p2_ui
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_ui_sdk_scheduler {
				__id = "org.eclipse.equinox.internal.p2.ui.sdk.scheduler"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.ui.sdk.scheduler"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_p2_ui_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_actions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_operations
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_ui_policy
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_equinox_internal_provisional_p2_updatechecker
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_ui_sdk_scheduler
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_updatechecker {
			__id = "org.eclipse.equinox.p2.updatechecker"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.updatechecker"
			}
			state = : "State.active"
			version = new Version {
				value = "1.1.0.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0)'"
				maxVersion = "'[3.3.0-4.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_updatechecker {
				__id = "org.eclipse.equinox.internal.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.updatechecker"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_p2_updatechecker {
				__id = "org.eclipse.equinox.internal.provisional.p2.updatechecker"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.p2.updatechecker"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_director
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatechecker
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.4.0"
				maxVersion = "1.4.0"
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_p2_updatesite {
			__id = "org.eclipse.equinox.p2.updatesite"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.p2.updatesite"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v20090525"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = plugin_org_eclipse_ecf_filetransfer
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = plugin_org_eclipse_ecf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = plugin_org_eclipse_equinox_p2_metadata_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.1.0'"
				maxVersion = "'0.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = plugin_org_eclipse_equinox_p2_artifact_repository
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.1.0'"
				maxVersion = "'0.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = plugin_org_eclipse_core_jobs
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_updatesite {
				__id = "org.eclipse.equinox.internal.p2.updatesite"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.updatesite"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_updatesite_artifact {
				__id = "org.eclipse.equinox.internal.p2.updatesite.artifact"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.updatesite.artifact"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_p2_updatesite_metadata {
				__id = "org.eclipse.equinox.internal.p2.updatesite.metadata"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.p2.updatesite.metadata"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_javax_xml_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_app
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_p2_core_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_p2_publisher_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_p2_repository_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_core_eventbus
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_query
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_artifact_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_metadata_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_internal_provisional_spi_p2_repository
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_p2_publisher
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_p2_publisher_actions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_p2_publisher_eclipse
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_security_storage
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_equinox_spi_p2_publisher
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_osgi_service_resolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_osgi_signedcontent
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.1.0"
				maxVersion = "1.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_osgi_util_tracker
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_xml_sax
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_xml_sax_helpers
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_p2_updatesite
				target = package_org_w3c_dom
			}
		}
		plugins += new Plugin plugin_org_eclipse_equinox_simpleconfigurator_manipulator {
			__id = "org.eclipse.equinox.simpleconfigurator.manipulator"
			identifier = new PlatformID {
				value = "org.eclipse.equinox.simpleconfigurator.manipulator"
			}
			state = : "State.active"
			version = new Version {
				value = "1.0.100.v20090520-1905"
			}
			vendor = vendor_Eclipse_org___Equinox
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = plugin_org_eclipse_equinox_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			exports += new Package package_org_eclipse_equinox_internal_provisional_simpleconfigurator_manipulator {
				__id = "org.eclipse.equinox.internal.provisional.simpleconfigurator.manipulator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.provisional.simpleconfigurator.manipulator"
				}
			}
			exports += new Package package_org_eclipse_equinox_internal_simpleconfigurator_manipulator {
				__id = "org.eclipse.equinox.internal.simpleconfigurator.manipulator"
				identifier = new PlatformID {
					value = "org.eclipse.equinox.internal.simpleconfigurator.manipulator"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_eclipse_equinox_internal_frameworkadmin_equinox
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_eclipse_equinox_internal_frameworkadmin_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_eclipse_equinox_internal_provisional_configuratormanipulator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_eclipse_equinox_internal_provisional_frameworkadmin
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_eclipse_equinox_internal_simpleconfigurator_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_osgi_framework
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.3.0"
				maxVersion = "1.3.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_osgi_service_packageadmin
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.2.0"
				maxVersion = "1.2.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_osgi_service_startlevel
				closure = : "IntervalClosure.includeInclude"
				minVersion = "1.0.0"
				maxVersion = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_equinox_simpleconfigurator_manipulator
				target = package_org_osgi_util_tracker
			}
		}
		plugins += new Plugin plugin_org_eclipse_gef_doc_isv {
			__id = "org.eclipse.gef.doc.isv"
			identifier = new PlatformID {
				value = "org.eclipse.gef.doc.isv"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.v20090422-2346"
			}
			vendor = vendor_Eclipse_Modeling_Project
			ownedEntities += new Document {
				__id = "org.eclipse.gef.doc.isv"
				identifier = new PlatformID {
					value = "org.eclipse.gef.doc.isv"
				}
				locator = new EFSLocator {
					value = "org.eclipse.gef.doc.isv"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gef_examples_ui_pde {
			__id = "org.eclipse.gef.examples.ui.pde"
			identifier = new PlatformID {
				value = "org.eclipse.gef.examples.ui.pde"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.5.0.v20090422-2346"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef_examples_ui_pde
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef_examples_ui_pde
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef_examples_ui_pde
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gef_examples_ui_pde
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_gef_examples_ui_pde_internal {
				__id = "org.eclipse.gef.examples.ui.pde.internal"
				identifier = new PlatformID {
					value = "org.eclipse.gef.examples.ui.pde.internal"
				}
			}
			exports += new Package package_org_eclipse_gef_examples_ui_pde_internal_l10n {
				__id = "org.eclipse.gef.examples.ui.pde.internal.l10n"
				identifier = new PlatformID {
					value = "org.eclipse.gef.examples.ui.pde.internal.l10n"
				}
			}
			exports += new Package package_org_eclipse_gef_examples_ui_pde_internal_wizards {
				__id = "org.eclipse.gef.examples.ui.pde.internal.wizards"
				identifier = new PlatformID {
					value = "org.eclipse.gef.examples.ui.pde.internal.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmf_bridge_trace {
			__id = "org.eclipse.gmf.bridge.trace"
			identifier = new PlatformID {
				value = "org.eclipse.gmf.bridge.trace"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.200.v20090520-1343"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_trace
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_trace
				target = plugin_org_eclipse_gmf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_trace
				target = plugin_org_eclipse_gmf_bridge
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_trace
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_trace
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmf_bridge_trace
				target = plugin_org_eclipse_ocl_ecore
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_gmf_2006_Trace {
				__id = "_www_eclipse_org_gmf_2006_Trace"
				identifier = new PlatformID {
					value = "_www_eclipse_org_gmf_2006_Trace"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmf/2006/Trace"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_gmf_2006_Trace {
					__id = "conformsTo__www_eclipse_org_gmf_2006_Trace"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_gmf_2006_Trace"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmf/2006/Trace.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3 {
			__id = "org.eclipse.gmt.am3"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_eclipse_gmt_am3 {
				__id = "org.eclipse.gmt.am3"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_core {
			__id = "org.eclipse.gmt.am3.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_core
				target = plugin_org_eclipse_gmt_am3
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_core
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_eclipse_gmt_am3_core_modelhandler {
				__id = "org.eclipse.gmt.am3.core.modelhandler"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.core.modelhandler"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_core_modeling {
				__id = "org.eclipse.gmt.am3.core.modeling"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.core.modeling"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_core_projectors {
				__id = "org.eclipse.gmt.am3.core.projectors"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.core.projectors"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_core_storage {
				__id = "org.eclipse.gmt.am3.core.storage"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.core.storage"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_core_storage_exception {
				__id = "org.eclipse.gmt.am3.core.storage.exception"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.core.storage.exception"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_core_storage_impl {
				__id = "org.eclipse.gmt.am3.core.storage.impl"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.core.storage.impl"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_core_util {
				__id = "org.eclipse.gmt.am3.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.core.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_modelhandler_emf {
			__id = "org.eclipse.gmt.am3.modelhandler.emf"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.modelhandler.emf"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_modelhandler_emf
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_modelhandler_emf
				target = plugin_org_eclipse_gmt_am3_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_modelhandler_emf
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_modelhandler_emf
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_modelhandler_emf
				target = plugin_org_eclipse_gmt_am3
			}
			exports += new Package package_org_eclipse_gmt_am3_modelhandler_emf {
				__id = "org.eclipse.gmt.am3.modelhandler.emf"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.modelhandler.emf"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_core {
			__id = "org.eclipse.gmt.am3.platform.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_core
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_core
				target = plugin_org_eclipse_gmt_am3_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_core
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_core
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_core
				target = plugin_org_eclipse_gmt_am3_platform_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_core
				target = plugin_org_eclipse_emf_common
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_core {
				__id = "org.eclipse.gmt.am3.platform.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.core"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_core_extensions {
				__id = "org.eclipse.gmt.am3.platform.core.extensions"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.core.extensions"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_core_locators {
				__id = "org.eclipse.gmt.am3.platform.core.locators"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.core.locators"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse {
			__id = "org.eclipse.gmt.am3.platform.extension.cartography.eclipse"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.cartography.eclipse"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.5.0"
			}
			vendor = vendor_INRIA_Espresso
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_core_filesystem
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_equinox_p2_metadata_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_pde_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_cartography_eclipse
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_cartography_eclipse {
				__id = "org.eclipse.gmt.am3.platform.extension.cartography.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.cartography.eclipse"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified {
			__id = "org.eclipse.gmt.am3.platform.extension.excel.xml2simplified"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.excel.xml2simplified"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_m2m_atl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_m2m_atl_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_gmt_am3_platform_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
				target = plugin_org_eclipse_gmt_am3_platform_extension_xml
			}
			ownedEntities += new Metamodel metamodel_SpreadsheetMLSimplified {
				__id = "SpreadsheetMLSimplified"
				identifier = new PlatformID {
					value = "SpreadsheetMLSimplified"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmt/am3/2009/SpreadsheetMLSimplified"
				}
			}
				ownedEntities += new Service service_conformsTo_SpreadsheetMLSimplified {
					__id = "conformsTo_SpreadsheetMLSimplified"
					identifier = new PlatformID {
						value = "conformsTo_SpreadsheetMLSimplified"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmt/am3/2009/SpreadsheetMLSimplified.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified {
				__id = "org.eclipse.gmt.am3.platform.extension.excel.xml2simplified"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.excel.xml2simplified"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified_atl {
				__id = "org.eclipse.gmt.am3.platform.extension.excel.xml2simplified.atl"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.excel.xml2simplified.atl"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement {
			__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_gmt_am3_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_gmt_am3_platform_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_gmt_am3_platform_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = plugin_org_eclipse_gmt_am3_platform_runtime_core
			}
			ownedEntities += new Metamodel metamodel_GMM {
				__id = "GMM"
				identifier = new PlatformID {
					value = "GMM"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmt/am3/2007/GlobalModelManagement"
				}
			}
				ownedEntities += new Service service_conformsTo_GMM {
					__id = "conformsTo_GMM"
					identifier = new PlatformID {
						value = "conformsTo_GMM"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmt/am3/2007/GlobalModelManagement.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_extensioninterfaces {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.extensioninterfaces"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.extensioninterfaces"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_locators {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.locators"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.locators"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_model_implementation {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.model.implementation"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.model.implementation"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_model_interfaces {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.model.interfaces"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.model.interfaces"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_traceabilitysupport {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.traceabilitysupport"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.traceabilitysupport"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_transformationexecutionengine {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.transformationexecutionengine"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.transformationexecutionengine"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_typesystem {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.typesystem"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.typesystem"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_typesystem_datatypes {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.typesystem.datatypes"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.typesystem.datatypes"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_ui_dialogs {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_ui_editors_pages {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.editors.pages"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.editors.pages"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_ui_editors_parts {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.editors.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.editors.parts"
				}
			}
			exports += new Package package_org_eclipse_jface_viewers {
				__id = "org.eclipse.jface.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.jface.viewers"
				}
			}
			exports += new Package package_org_eclipse_swt_widgets_ {
				__id = "org.eclipse.swt.widgets'"
				identifier = new PlatformID {
					value = "org.eclipse.swt.widgets'"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement_ui_views_providers {
				__id = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.views.providers"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.globalmodelmanagement.ui.views.providers"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = package_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
				target = package_org_eclipse_ui_dialogs
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_gmm_cartography {
			__id = "org.eclipse.gmt.am3.platform.extension.gmm.cartography"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.gmm.cartography"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_www_example_org
			ownedEntities += new Metamodel metamodel_Cartography {
				__id = "Cartography"
				identifier = new PlatformID {
					value = "Cartography"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmt/am3/2009/EclipseCartography"
				}
			}
				ownedEntities += new Service service_conformsTo_Cartography {
					__id = "conformsTo_Cartography"
					identifier = new PlatformID {
						value = "conformsTo_Cartography"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmt/am3/2009/EclipseCartography.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_gmm_cartography_emftext_tests {
			__id = "org.eclipse.gmt.am3.platform.extension.gmm.cartography.emftext.tests"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.gmm.cartography.emftext.tests"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.qualifier"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm_cartography_emftext_tests
				target = plugin_org_junit4
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'4.5.0'"
				maxVersion = "'4.5.0'"
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_gmm_cartography_emftext_tests {
				__id = "org.eclipse.gmt.am3.platform.extension.gmm.cartography.emftext.tests"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.gmm.cartography.emftext.tests"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel {
			__id = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.excel"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.excel"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_gmt_am3_platform_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_gmt_am3_platform_extension_globalmodelmanagement
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_m2m_atl_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_gmt_am3_platform_extension_xml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel
				target = plugin_org_eclipse_gmt_am3_platform_extension_excel_xml2simplified
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel {
				__id = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.excel"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.excel"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_gmm4cartography_excel_atl {
				__id = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.excel.atl"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.excel.atl"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml {
			__id = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.graphml"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.gmm4cartography.graphml"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.0"
			}
			vendor = vendor_INRIA_AtlanMod__INRIA_Espresso
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml
				target = plugin_org_eclipse_gmt_am3_platform_extension_graphml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml
				target = plugin_org_eclipse_gmt_am3_platform_extension_gmm_cartography
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml
				target = plugin_org_eclipse_m2m_atl_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_gmm4cartography_graphml
				target = plugin_org_eclipse_emf_common
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_graphml {
			__id = "org.eclipse.gmt.am3.platform.extension.graphml"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.graphml"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_INRIA_AtlanMod__INRIA_Espresso
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_m2m_atl_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_m2m_atl_core_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_gmt_am3_platform_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_gmt_am3_platform_extension_xml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml
				target = plugin_org_eclipse_gmt_am3_platform_ui
			}
			ownedEntities += new Metamodel metamodel_GraphML {
				__id = "GraphML"
				identifier = new PlatformID {
					value = "GraphML"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmt/am3/2009/GraphML"
				}
			}
				ownedEntities += new Service service_conformsTo_GraphML {
					__id = "conformsTo_GraphML"
					identifier = new PlatformID {
						value = "conformsTo_GraphML"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmt/am3/2009/GraphML.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_graphml {
				__id = "org.eclipse.gmt.am3.platform.extension.graphml"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.graphml"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_graphml_prefuse {
			__id = "org.eclipse.gmt.am3.platform.extension.graphml.prefuse"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.graphml.prefuse"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.5.0"
			}
			vendor = vendor_INRIA_AtlanMod_Espresso
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml_prefuse
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml_prefuse
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml_prefuse
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml_prefuse
				target = plugin_org_eclipse_gmt_am3_platform_extension_xml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_graphml_prefuse
				target = plugin_org_eclipse_gmt_am3_platform_extension_graphml
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_graphml_prefuse {
				__id = "org.eclipse.gmt.am3.platform.extension.graphml.prefuse"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.graphml.prefuse"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_graphml_prefuse_action {
				__id = "org.eclipse.gmt.am3.platform.extension.graphml.prefuse.action"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.graphml.prefuse.action"
				}
			}
			exports += new Package package_prefuse {
				__id = "prefuse"
				identifier = new PlatformID {
					value = "prefuse"
				}
			}
			exports += new Package package_prefuse_action {
				__id = "prefuse.action"
				identifier = new PlatformID {
					value = "prefuse.action"
				}
			}
			exports += new Package package_prefuse_action_animate {
				__id = "prefuse.action.animate"
				identifier = new PlatformID {
					value = "prefuse.action.animate"
				}
			}
			exports += new Package package_prefuse_action_assignment {
				__id = "prefuse.action.assignment"
				identifier = new PlatformID {
					value = "prefuse.action.assignment"
				}
			}
			exports += new Package package_prefuse_action_distortion {
				__id = "prefuse.action.distortion"
				identifier = new PlatformID {
					value = "prefuse.action.distortion"
				}
			}
			exports += new Package package_prefuse_action_filter {
				__id = "prefuse.action.filter"
				identifier = new PlatformID {
					value = "prefuse.action.filter"
				}
			}
			exports += new Package package_prefuse_action_layout {
				__id = "prefuse.action.layout"
				identifier = new PlatformID {
					value = "prefuse.action.layout"
				}
			}
			exports += new Package package_prefuse_action_layout_graph {
				__id = "prefuse.action.layout.graph"
				identifier = new PlatformID {
					value = "prefuse.action.layout.graph"
				}
			}
			exports += new Package package_prefuse_activity {
				__id = "prefuse.activity"
				identifier = new PlatformID {
					value = "prefuse.activity"
				}
			}
			exports += new Package package_prefuse_controls {
				__id = "prefuse.controls"
				identifier = new PlatformID {
					value = "prefuse.controls"
				}
			}
			exports += new Package package_prefuse_data {
				__id = "prefuse.data"
				identifier = new PlatformID {
					value = "prefuse.data"
				}
			}
			exports += new Package package_prefuse_data_column {
				__id = "prefuse.data.column"
				identifier = new PlatformID {
					value = "prefuse.data.column"
				}
			}
			exports += new Package package_prefuse_data_event {
				__id = "prefuse.data.event"
				identifier = new PlatformID {
					value = "prefuse.data.event"
				}
			}
			exports += new Package package_prefuse_data_expression {
				__id = "prefuse.data.expression"
				identifier = new PlatformID {
					value = "prefuse.data.expression"
				}
			}
			exports += new Package package_prefuse_data_expression_parser {
				__id = "prefuse.data.expression.parser"
				identifier = new PlatformID {
					value = "prefuse.data.expression.parser"
				}
			}
			exports += new Package package_prefuse_data_io {
				__id = "prefuse.data.io"
				identifier = new PlatformID {
					value = "prefuse.data.io"
				}
			}
			exports += new Package package_prefuse_data_io_sql {
				__id = "prefuse.data.io.sql"
				identifier = new PlatformID {
					value = "prefuse.data.io.sql"
				}
			}
			exports += new Package package_prefuse_data_parser {
				__id = "prefuse.data.parser"
				identifier = new PlatformID {
					value = "prefuse.data.parser"
				}
			}
			exports += new Package package_prefuse_data_query {
				__id = "prefuse.data.query"
				identifier = new PlatformID {
					value = "prefuse.data.query"
				}
			}
			exports += new Package package_prefuse_data_search {
				__id = "prefuse.data.search"
				identifier = new PlatformID {
					value = "prefuse.data.search"
				}
			}
			exports += new Package package_prefuse_data_tuple {
				__id = "prefuse.data.tuple"
				identifier = new PlatformID {
					value = "prefuse.data.tuple"
				}
			}
			exports += new Package package_prefuse_data_util {
				__id = "prefuse.data.util"
				identifier = new PlatformID {
					value = "prefuse.data.util"
				}
			}
			exports += new Package package_prefuse_render {
				__id = "prefuse.render"
				identifier = new PlatformID {
					value = "prefuse.render"
				}
			}
			exports += new Package package_prefuse_util {
				__id = "prefuse.util"
				identifier = new PlatformID {
					value = "prefuse.util"
				}
			}
			exports += new Package package_prefuse_util_collections {
				__id = "prefuse.util.collections"
				identifier = new PlatformID {
					value = "prefuse.util.collections"
				}
			}
			exports += new Package package_prefuse_util_display {
				__id = "prefuse.util.display"
				identifier = new PlatformID {
					value = "prefuse.util.display"
				}
			}
			exports += new Package package_prefuse_util_force {
				__id = "prefuse.util.force"
				identifier = new PlatformID {
					value = "prefuse.util.force"
				}
			}
			exports += new Package package_prefuse_util_io {
				__id = "prefuse.util.io"
				identifier = new PlatformID {
					value = "prefuse.util.io"
				}
			}
			exports += new Package package_prefuse_util_ui {
				__id = "prefuse.util.ui"
				identifier = new PlatformID {
					value = "prefuse.util.ui"
				}
			}
			exports += new Package package_prefuse_visual {
				__id = "prefuse.visual"
				identifier = new PlatformID {
					value = "prefuse.visual"
				}
			}
			exports += new Package package_prefuse_visual_expression {
				__id = "prefuse.visual.expression"
				identifier = new PlatformID {
					value = "prefuse.visual.expression"
				}
			}
			exports += new Package package_prefuse_visual_sort {
				__id = "prefuse.visual.sort"
				identifier = new PlatformID {
					value = "prefuse.visual.sort"
				}
			}
			exports += new Package package_prefuse_visual_tuple {
				__id = "prefuse.visual.tuple"
				identifier = new PlatformID {
					value = "prefuse.visual.tuple"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_platforms {
			__id = "org.eclipse.gmt.am3.platform.extension.platforms"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.platforms"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.qualifier"
			}
			ownedEntities += new Metamodel metamodel_Platform {
				__id = "Platform"
				identifier = new PlatformID {
					value = "Platform"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmt/am3/2009/Platform"
				}
			}
				ownedEntities += new Service service_conformsTo_Platform {
					__id = "conformsTo_Platform"
					identifier = new PlatformID {
						value = "conformsTo_Platform"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmt/am3/2009/Platform.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_extension_xml {
			__id = "org.eclipse.gmt.am3.platform.extension.xml"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.extension.xml"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.5.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_m2m_atl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_m2m_atl_engine
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = plugin_org_eclipse_m2m_atl_projectors_xml
			}
			ownedEntities += new Metamodel metamodel_XML {
				__id = "XML"
				identifier = new PlatformID {
					value = "XML"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmt/am3/2009/XML"
				}
			}
				ownedEntities += new Service service_conformsTo_XML {
					__id = "conformsTo_XML"
					identifier = new PlatformID {
						value = "conformsTo_XML"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmt/am3/2009/XML.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_xml {
				__id = "org.eclipse.gmt.am3.platform.extension.xml"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.xml"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_extension_xml_actions {
				__id = "org.eclipse.gmt.am3.platform.extension.xml.actions"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.extension.xml.actions"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_extension_xml
				target = package_org_eclipse_equinox_internal_p2_reconciler_dropins
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_runtime_core {
			__id = "org.eclipse.gmt.am3.platform.runtime.core"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.runtime.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_runtime_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_runtime_core
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_runtime_core
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_runtime_core
				target = plugin_org_eclipse_gmt_am3_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_runtime_core
				target = plugin_org_eclipse_gmt_am3_modelhandler_emf
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_runtime_core {
				__id = "org.eclipse.gmt.am3.platform.runtime.core"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.runtime.core"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_runtime_core_context {
				__id = "org.eclipse.gmt.am3.platform.runtime.core.context"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.runtime.core.context"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_runtime_core_context_strategy {
				__id = "org.eclipse.gmt.am3.platform.runtime.core.context.strategy"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.runtime.core.context.strategy"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_runtime_core_impl {
				__id = "org.eclipse.gmt.am3.platform.runtime.core.impl"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.runtime.core.impl"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gmt_am3_platform_ui {
			__id = "org.eclipse.gmt.am3.platform.ui"
			identifier = new PlatformID {
				value = "org.eclipse.gmt.am3.platform.ui"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_gmt_am3_platform_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_gmt_am3_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_gmt_am3_platform_runtime_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gmt_am3_platform_ui
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_ui_dialogs {
				__id = "org.eclipse.gmt.am3.platform.ui.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.ui.dialogs"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_ui_editors {
				__id = "org.eclipse.gmt.am3.platform.ui.editors"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.ui.editors"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_ui_editors_pages {
				__id = "org.eclipse.gmt.am3.platform.ui.editors.pages"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.ui.editors.pages"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_ui_views {
				__id = "org.eclipse.gmt.am3.platform.ui.views"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.ui.views"
				}
			}
			exports += new Package package_org_eclipse_gmt_am3_platform_ui_views_parts {
				__id = "org.eclipse.gmt.am3.platform.ui.views.parts"
				identifier = new PlatformID {
					value = "org.eclipse.gmt.am3.platform.ui.views.parts"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_gymnast_runtime_core {
			__id = "org.eclipse.gymnast.runtime.core"
			identifier = new PlatformID {
				value = "org.eclipse.gymnast.runtime.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.3.0"
			}
			vendor = vendor_Eclipse_org_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gymnast_runtime_core
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gymnast_runtime_core
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gymnast_runtime_core
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gymnast_runtime_core
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gymnast_runtime_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gymnast_runtime_core
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_gymnast_runtime_core
				target = plugin_org_eclipse_jface_text
			}
			exports += new Package package_org_eclipse_gymnast_runtime_core {
				__id = "org.eclipse.gymnast.runtime.core"
				identifier = new PlatformID {
					value = "org.eclipse.gymnast.runtime.core"
				}
			}
			exports += new Package package_org_eclipse_gymnast_runtime_core_ast {
				__id = "org.eclipse.gymnast.runtime.core.ast"
				identifier = new PlatformID {
					value = "org.eclipse.gymnast.runtime.core.ast"
				}
			}
			exports += new Package package_org_eclipse_gymnast_runtime_core_outline {
				__id = "org.eclipse.gymnast.runtime.core.outline"
				identifier = new PlatformID {
					value = "org.eclipse.gymnast.runtime.core.outline"
				}
			}
			exports += new Package package_org_eclipse_gymnast_runtime_core_parser {
				__id = "org.eclipse.gymnast.runtime.core.parser"
				identifier = new PlatformID {
					value = "org.eclipse.gymnast.runtime.core.parser"
				}
			}
			exports += new Package package_org_eclipse_gymnast_runtime_core_templates_ext {
				__id = "org.eclipse.gymnast.runtime.core.templates.ext"
				identifier = new PlatformID {
					value = "org.eclipse.gymnast.runtime.core.templates.ext"
				}
			}
			exports += new Package package_org_eclipse_gymnast_runtime_core_util {
				__id = "org.eclipse.gymnast.runtime.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.gymnast.runtime.core.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jdt_doc_isv {
			__id = "org.eclipse.jdt.doc.isv"
			identifier = new PlatformID {
				value = "org.eclipse.jdt.doc.isv"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.r351_v20090831"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.jdt.doc.isv"
				identifier = new PlatformID {
					value = "org.eclipse.jdt.doc.isv"
				}
				locator = new EFSLocator {
					value = "org.eclipse.jdt.doc.isv"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_jem_util {
			__id = "org.eclipse.jem.util"
			identifier = new PlatformID {
				value = "org.eclipse.jem.util"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.0.200.v200905140200"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jem_util
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jem_util
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jem_util
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jem_util
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_jem_util
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.8.1.1-4.1.0)'"
				maxVersion = "'[3.8.1.1-4.1.0)'"
			}
			exports += new Package package_org_eclipse_jem_internal_util_emf_workbench {
				__id = "org.eclipse.jem.internal.util.emf.workbench"
				identifier = new PlatformID {
					value = "org.eclipse.jem.internal.util.emf.workbench"
				}
			}
			exports += new Package package_org_eclipse_jem_internal_util_emf_workbench_nature {
				__id = "org.eclipse.jem.internal.util.emf.workbench.nature"
				identifier = new PlatformID {
					value = "org.eclipse.jem.internal.util.emf.workbench.nature"
				}
			}
			exports += new Package package_org_eclipse_jem_internal_util_emf_workbench_nls {
				__id = "org.eclipse.jem.internal.util.emf.workbench.nls"
				identifier = new PlatformID {
					value = "org.eclipse.jem.internal.util.emf.workbench.nls"
				}
			}
			exports += new Package package_org_eclipse_jem_util {
				__id = "org.eclipse.jem.util"
				identifier = new PlatformID {
					value = "org.eclipse.jem.util"
				}
			}
			exports += new Package package_org_eclipse_jem_util_emf_workbench {
				__id = "org.eclipse.jem.util.emf.workbench"
				identifier = new PlatformID {
					value = "org.eclipse.jem.util.emf.workbench"
				}
			}
			exports += new Package package_org_eclipse_jem_util_emf_workbench_nature {
				__id = "org.eclipse.jem.util.emf.workbench.nature"
				identifier = new PlatformID {
					value = "org.eclipse.jem.util.emf.workbench.nature"
				}
			}
			exports += new Package package_org_eclipse_jem_util_logger {
				__id = "org.eclipse.jem.util.logger"
				identifier = new PlatformID {
					value = "org.eclipse.jem.util.logger"
				}
			}
			exports += new Package package_org_eclipse_jem_util_logger_proxy {
				__id = "org.eclipse.jem.util.logger.proxy"
				identifier = new PlatformID {
					value = "org.eclipse.jem.util.logger.proxy"
				}
			}
			exports += new Package package_org_eclipse_jem_util_logger_proxyrender {
				__id = "org.eclipse.jem.util.logger.proxyrender"
				identifier = new PlatformID {
					value = "org.eclipse.jem.util.logger.proxyrender"
				}
			}
			exports += new Package package_org_eclipse_jem_util_plugin {
				__id = "org.eclipse.jem.util.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.jem.util.plugin"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_debug_core {
			__id = "org.eclipse.m2m.atl.debug.core"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.debug.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_debug_core
				target = plugin_org_eclipse_debug_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_debug_core
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_debug_core
				target = plugin_org_eclipse_m2m_atl_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_debug_core
				target = plugin_org_eclipse_m2m_atl_core
			}
			exports += new Package package_org_eclipse_m2m_atl_debug_core {
				__id = "org.eclipse.m2m.atl.debug.core"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.debug.core"
				}
			}
			exports += new Package package_org_eclipse_m2m_atl_debug_core_adwp {
				__id = "org.eclipse.m2m.atl.debug.core.adwp"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.debug.core.adwp"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_engine_emfvm_launch {
			__id = "org.eclipse.m2m.atl.engine.emfvm.launch"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.engine.emfvm.launch"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.1.0.qualifier"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_emfvm_launch
				target = plugin_org_eclipse_m2m_atl_engine_emfvm
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_engine_emfvm_launch
				target = plugin_org_eclipse_m2m_atl_debug_core
			}
			exports += new Package package_org_eclipse_m2m_atl_engine_emfvm_launch {
				__id = "org.eclipse.m2m.atl.engine.emfvm.launch"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.engine.emfvm.launch"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_m2m_atl_projectors_xml {
			__id = "org.eclipse.m2m.atl.projectors.xml"
			identifier = new PlatformID {
				value = "org.eclipse.m2m.atl.projectors.xml"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.0"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_projectors_xml
				target = plugin_org_eclipse_m2m_atl_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.1.0'"
				maxVersion = "'3.1.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_m2m_atl_projectors_xml
				target = plugin_org_eclipse_m2m_atl_core_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.1.0'"
				maxVersion = "'3.1.0'"
			}
			exports += new Package package_org_eclipse_m2m_atl_projectors_xml {
				__id = "org.eclipse.m2m.atl.projectors.xml"
				identifier = new PlatformID {
					value = "org.eclipse.m2m.atl.projectors.xml"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_net4j_jms_api {
			__id = "org.eclipse.net4j.jms.api"
			identifier = new PlatformID {
				value = "org.eclipse.net4j.jms.api"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.9.v200902272310"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_javax_jms {
				__id = "javax.jms"
				identifier = new PlatformID {
					value = "javax.jms"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_pde_visualization_dependency {
			__id = "org.eclipse.pde.visualization.dependency"
			identifier = new PlatformID {
				value = "org.eclipse.pde.visualization.dependency"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.5.0.qualifier"
			}
			vendor = vendor_Eclipse
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_visualization_dependency
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_visualization_dependency
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_visualization_dependency
				target = plugin_org_eclipse_pde_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_visualization_dependency
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.100-4.0.0)'"
				maxVersion = "'[3.3.100-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_visualization_dependency
				target = plugin_org_eclipse_draw2d
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_visualization_dependency
				target = plugin_org_eclipse_zest_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_pde_visualization_dependency
				target = plugin_org_eclipse_zest_layouts
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.0-2.0.0)'"
				maxVersion = "'[1.0.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_pde_internal_visualization_dependency {
				__id = "org.eclipse.pde.internal.visualization.dependency"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.visualization.dependency"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_visualization_dependency_analysis {
				__id = "org.eclipse.pde.internal.visualization.dependency.analysis"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.visualization.dependency.analysis"
				}
			}
			exports += new Package package_org_eclipse_pde_internal_visualization_dependency_views {
				__id = "org.eclipse.pde.internal.visualization.dependency.views"
				identifier = new PlatformID {
					value = "org.eclipse.pde.internal.visualization.dependency.views"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_platform_doc_isv {
			__id = "org.eclipse.platform.doc.isv"
			identifier = new PlatformID {
				value = "org.eclipse.platform.doc.isv"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.5.1.r351_v20090831"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.platform.doc.isv"
				identifier = new PlatformID {
					value = "org.eclipse.platform.doc.isv"
				}
				locator = new EFSLocator {
					value = "org.eclipse.platform.doc.isv"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_platform_doc_isv
				target = plugin_org_eclipse_help
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_test {
			__id = "org.eclipse.test"
			identifier = new PlatformID {
				value = "org.eclipse.test"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.2.100"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_test
				target = plugin_org_apache_ant
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_test
				target = plugin_org_junit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_test
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_test
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_test
				target = plugin_org_eclipse_ui_ide_application
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_test
				target = plugin_org_eclipse_equinox_app
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_codegen {
			__id = "org.eclipse.uml2.diagram.codegen"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.codegen"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_gmf_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_gmf_codegen_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_m2m_qvt_oml
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen
				target = plugin_org_eclipse_gmf_map
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_modeling_mdt_uml2tools_gmf_GenModel {
				__id = "_www_eclipse_org_modeling_mdt_uml2tools_gmf_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_modeling_mdt_uml2tools_gmf_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/modeling/mdt/uml2tools/gmf/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_modeling_mdt_uml2tools_gmf_GenModel {
					__id = "conformsTo__www_eclipse_org_modeling_mdt_uml2tools_gmf_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_modeling_mdt_uml2tools_gmf_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/modeling/mdt/uml2tools/gmf/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_modeling_mdt_uml2tools_gmf_mapping {
				__id = "_www_eclipse_org_modeling_mdt_uml2tools_gmf_mapping"
				identifier = new PlatformID {
					value = "_www_eclipse_org_modeling_mdt_uml2tools_gmf_mapping"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/modeling/mdt/uml2tools/gmf/mapping"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_modeling_mdt_uml2tools_gmf_mapping {
					__id = "conformsTo__www_eclipse_org_modeling_mdt_uml2tools_gmf_mapping"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_modeling_mdt_uml2tools_gmf_mapping"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/modeling/mdt/uml2tools/gmf/mapping.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_uml2_diagram_codegen {
				__id = "org.eclipse.uml2.diagram.codegen"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_u2tgen {
				__id = "org.eclipse.uml2.diagram.codegen.u2tgen"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.u2tgen"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_u2tgen_impl {
				__id = "org.eclipse.uml2.diagram.codegen.u2tgen.impl"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.u2tgen.impl"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_u2tgen_util {
				__id = "org.eclipse.uml2.diagram.codegen.u2tgen.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.u2tgen.util"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_qvt {
				__id = "org.eclipse.uml2.diagram.codegen.qvt"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.qvt"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_u2tmap {
				__id = "org.eclipse.uml2.diagram.codegen.u2tmap"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.u2tmap"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_u2tmap_util {
				__id = "org.eclipse.uml2.diagram.codegen.u2tmap.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.u2tmap.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_codegen_edit {
			__id = "org.eclipse.uml2.diagram.codegen.edit"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.codegen.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_uml2_diagram_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_emf_codegen_ecore_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_codegen_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_map
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_map_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_graphdef
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_graphdef_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_tooling
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_codegen_edit
				target = plugin_org_eclipse_gmf_tooldef_edit
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_u2tgen_provider {
				__id = "org.eclipse.uml2.diagram.codegen.u2tgen.provider"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.u2tgen.provider"
				}
			}
			exports += new Package package_org_eclipse_uml2_diagram_codegen_u2tmap_provider {
				__id = "org.eclipse.uml2.diagram.codegen.u2tmap.provider"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.diagram.codegen.u2tmap.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_def {
			__id = "org.eclipse.uml2.diagram.def"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.def"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_def
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_def
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_diagram_def
				target = plugin_org_eclipse_gmf_codegen
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_examples_activity {
			__id = "org.eclipse.uml2.diagram.examples.activity"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.examples.activity"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.8.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_examples_clazz {
			__id = "org.eclipse.uml2.diagram.examples.clazz"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.examples.clazz"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_examples_profile {
			__id = "org.eclipse.uml2.diagram.examples.profile"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.examples.profile"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.9.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_uml2_diagram_examples_statemachine {
			__id = "org.eclipse.uml2.diagram.examples.statemachine"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.diagram.examples.statemachine"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.8.0.v200906190654"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_core {
			__id = "org.eclipse.wst.common.core"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.201.v200806010600"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_core
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_core_search {
				__id = "org.eclipse.wst.common.core.search"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.core.search"
				}
			}
			exports += new Package package_org_eclipse_wst_common_core_search_document {
				__id = "org.eclipse.wst.common.core.search.document"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.core.search.document"
				}
			}
			exports += new Package package_org_eclipse_wst_common_core_search_internal {
				__id = "org.eclipse.wst.common.core.search.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.core.search.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_core_search_pattern {
				__id = "org.eclipse.wst.common.core.search.pattern"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.core.search.pattern"
				}
			}
			exports += new Package package_org_eclipse_wst_common_core_search_scope {
				__id = "org.eclipse.wst.common.core.search.scope"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.core.search.scope"
				}
			}
			exports += new Package package_org_eclipse_wst_common_core_search_util {
				__id = "org.eclipse.wst.common.core.search.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.core.search.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_emf {
			__id = "org.eclipse.wst.common.emf"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.emf"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.301.v200908181930"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emf
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emf
				target = plugin_org_eclipse_wst_common_frameworks
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emf
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emf
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emf
				target = plugin_org_eclipse_jem_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.100-3.0.0)'"
				maxVersion = "'[2.0.100-3.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_internal_emf_plugin {
				__id = "org.eclipse.wst.common.internal.emf.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.emf.plugin"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_emf_resource {
				__id = "org.eclipse.wst.common.internal.emf.resource"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.emf.resource"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_emf_utilities {
				__id = "org.eclipse.wst.common.internal.emf.utilities"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.emf.utilities"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_emfworkbench_integration {
			__id = "org.eclipse.wst.common.emfworkbench.integration"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.emfworkbench.integration"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.301.v200908101600"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_wst_common_frameworks
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_jem_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.100-3.0.0)'"
				maxVersion = "'[2.0.100-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_wst_common_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_wst_common_project_facet_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_emfworkbench_integration
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_internal_emfworkbench {
				__id = "org.eclipse.wst.common.internal.emfworkbench"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.emfworkbench"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_emfworkbench_edit {
				__id = "org.eclipse.wst.common.internal.emfworkbench.edit"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.emfworkbench.edit"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_emfworkbench_integration {
				__id = "org.eclipse.wst.common.internal.emfworkbench.integration"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.emfworkbench.integration"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_emfworkbench_validateedit {
				__id = "org.eclipse.wst.common.internal.emfworkbench.validateedit"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.emfworkbench.validateedit"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_environment {
			__id = "org.eclipse.wst.common.environment"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.environment"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.301.v200908101600"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_environment
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_environment
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_environment
				target = plugin_org_eclipse_osgi_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.1.300-4.0.0)'"
				maxVersion = "'[3.1.300-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_environment {
				__id = "org.eclipse.wst.common.environment"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.environment"
				}
			}
			exports += new Package package_org_eclipse_wst_common_environment_uri {
				__id = "org.eclipse.wst.common.environment.uri"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.environment.uri"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_environment_eclipse {
				__id = "org.eclipse.wst.common.internal.environment.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.environment.eclipse"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_environment_plugin {
				__id = "org.eclipse.wst.common.internal.environment.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.environment.plugin"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_environment_relative {
				__id = "org.eclipse.wst.common.internal.environment.relative"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.environment.relative"
				}
			}
			exports += new Package package_org_eclipse_wst_common_internal_environment_uri_file {
				__id = "org.eclipse.wst.common.internal.environment.uri.file"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.internal.environment.uri.file"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_frameworks {
			__id = "org.eclipse.wst.common.frameworks"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.frameworks"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.300.v200904160730"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks
				target = plugin_org_eclipse_core_commands
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks
				target = plugin_org_eclipse_jem_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.100-3.0.0)'"
				maxVersion = "'[2.0.100-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks
				target = plugin_org_eclipse_wst_common_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.200-2.0.0)'"
				maxVersion = "'[1.0.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_datamodel {
				__id = "org.eclipse.wst.common.frameworks.datamodel"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.datamodel"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_datamodel_properties {
				__id = "org.eclipse.wst.common.frameworks.datamodel.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.datamodel.properties"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal {
				__id = "org.eclipse.wst.common.frameworks.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_activities {
				__id = "org.eclipse.wst.common.frameworks.internal.activities"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.activities"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_datamodel {
				__id = "org.eclipse.wst.common.frameworks.internal.datamodel"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.datamodel"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_enablement {
				__id = "org.eclipse.wst.common.frameworks.internal.enablement"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.enablement"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_enablement_nonui {
				__id = "org.eclipse.wst.common.frameworks.internal.enablement.nonui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.enablement.nonui"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_operations {
				__id = "org.eclipse.wst.common.frameworks.internal.operations"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.operations"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_plugin {
				__id = "org.eclipse.wst.common.frameworks.internal.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.plugin"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_frameworks_ui {
			__id = "org.eclipse.wst.common.frameworks.ui"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.frameworks.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.301.v200908101600"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks_ui
				target = plugin_org_eclipse_wst_common_frameworks
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks_ui
				target = plugin_org_eclipse_jem_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.100-3.0.0)'"
				maxVersion = "'[2.0.100-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_frameworks_ui
				target = plugin_org_eclipse_wst_common_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.200-2.0.0)'"
				maxVersion = "'[1.0.200-2.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_datamodel_ui {
				__id = "org.eclipse.wst.common.frameworks.internal.datamodel.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.datamodel.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_dialog_ui {
				__id = "org.eclipse.wst.common.frameworks.internal.dialog.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.dialog.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_eclipse_ui {
				__id = "org.eclipse.wst.common.frameworks.internal.eclipse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.eclipse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_operation_extensionui {
				__id = "org.eclipse.wst.common.frameworks.internal.operation.extensionui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.operation.extensionui"
				}
			}
			exports += new Package package_org_eclipse_wst_common_frameworks_internal_ui {
				__id = "org.eclipse.wst.common.frameworks.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.frameworks.internal.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_infopop {
			__id = "org.eclipse.wst.common.infopop"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.infopop"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.100.v200805301550"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_modulecore {
			__id = "org.eclipse.wst.common.modulecore"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.modulecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.301.v200908101600"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_wst_common_frameworks
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_wst_common_emfworkbench_integration
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_wst_common_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_core_commands
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_jem_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.100-3.0.0)'"
				maxVersion = "'[2.0.100-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-2.0.0)'"
				maxVersion = "'[1.1.301-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_wst_common_project_facet_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_wst_common_environment
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.200-2.0.0)'"
				maxVersion = "'[1.0.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_modulecore
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			ownedEntities += new Metamodel metamodel_componentcore_xmi {
				__id = "componentcore_xmi"
				identifier = new PlatformID {
					value = "componentcore_xmi"
				}
				locator = new EFSLocator {
					value = "componentcore.xmi"
				}
			}
				ownedEntities += new Service service_conformsTo_componentcore_xmi {
					__id = "conformsTo_componentcore_xmi"
					identifier = new PlatformID {
						value = "conformsTo_componentcore_xmi"
					}
					locator = new EFSLocator {
						value = "componentcore.xmi.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_wst_common_componentcore {
				__id = "org.eclipse.wst.common.componentcore"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_datamodel {
				__id = "org.eclipse.wst.common.componentcore.datamodel"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.datamodel"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_datamodel_properties {
				__id = "org.eclipse.wst.common.componentcore.datamodel.properties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.datamodel.properties"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_internal {
				__id = "org.eclipse.wst.common.componentcore.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_internal_builder {
				__id = "org.eclipse.wst.common.componentcore.internal.builder"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.internal.builder"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_internal_impl {
				__id = "org.eclipse.wst.common.componentcore.internal.impl"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.internal.impl"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_internal_operation {
				__id = "org.eclipse.wst.common.componentcore.internal.operation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.internal.operation"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_internal_resources {
				__id = "org.eclipse.wst.common.componentcore.internal.resources"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.internal.resources"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_internal_util {
				__id = "org.eclipse.wst.common.componentcore.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_common_componentcore_resources {
				__id = "org.eclipse.wst.common.componentcore.resources"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.componentcore.resources"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_project_facet_core {
			__id = "org.eclipse.wst.common.project.facet.core"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.project.facet.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.4.1.v200908111817"
			}
			vendor = vendor_Eclipse_Web_Tools_Platform
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_project_facet_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_project_facet_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_project_facet_core
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core {
				__id = "org.eclipse.wst.common.project.facet.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core"
				}
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core_events {
				__id = "org.eclipse.wst.common.project.facet.core.events"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core.events"
				}
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core_internal {
				__id = "org.eclipse.wst.common.project.facet.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core_runtime {
				__id = "org.eclipse.wst.common.project.facet.core.runtime"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core.runtime"
				}
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core_runtime_events {
				__id = "org.eclipse.wst.common.project.facet.core.runtime.events"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core.runtime.events"
				}
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core_runtime_internal {
				__id = "org.eclipse.wst.common.project.facet.core.runtime.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core.runtime.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core_util {
				__id = "org.eclipse.wst.common.project.facet.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core.util"
				}
			}
			exports += new Package package_org_eclipse_wst_common_project_facet_core_util_internal {
				__id = "org.eclipse.wst.common.project.facet.core.util.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.project.facet.core.util.internal"
				}
			}
			exports += new Package package_org_eclipse_jst_common_project_facet_ui {
				__id = "org.eclipse.jst.common.project.facet.ui"
				identifier = new PlatformID {
					value = "org.eclipse.jst.common.project.facet.ui"
				}
			}
			exports += new Package package_org_eclipse_jst_common_project_facet_core_ {
				__id = "org.eclipse.jst.common.project.facet.core'"
				identifier = new PlatformID {
					value = "org.eclipse.jst.common.project.facet.core'"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_snippets {
			__id = "org.eclipse.wst.common.snippets"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.snippets"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.300.v200903120643"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = plugin_org_eclipse_gef
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_snippets_core {
				__id = "org.eclipse.wst.common.snippets.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.core"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal {
				__id = "org.eclipse.wst.common.snippets.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_actions {
				__id = "org.eclipse.wst.common.snippets.internal.actions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.actions"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_dnd {
				__id = "org.eclipse.wst.common.snippets.internal.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.dnd"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_editors {
				__id = "org.eclipse.wst.common.snippets.internal.editors"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.editors"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_model {
				__id = "org.eclipse.wst.common.snippets.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.model"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_palette {
				__id = "org.eclipse.wst.common.snippets.internal.palette"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.palette"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_team {
				__id = "org.eclipse.wst.common.snippets.internal.team"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.team"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_ui {
				__id = "org.eclipse.wst.common.snippets.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_internal_util {
				__id = "org.eclipse.wst.common.snippets.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_common_snippets_ui {
				__id = "org.eclipse.wst.common.snippets.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.snippets.ui"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_snippets
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_ui {
			__id = "org.eclipse.wst.common.ui"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.402.v200901262305"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_search
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_wst_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.101-2.0.0)'"
				maxVersion = "'[1.1.101-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_ui_internal {
				__id = "org.eclipse.wst.common.ui.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.ui.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_ui_internal_dialogs {
				__id = "org.eclipse.wst.common.ui.internal.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.ui.internal.dialogs"
				}
			}
			exports += new Package package_org_eclipse_wst_common_ui_internal_dnd {
				__id = "org.eclipse.wst.common.ui.internal.dnd"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.ui.internal.dnd"
				}
			}
			exports += new Package package_org_eclipse_wst_common_ui_internal_search {
				__id = "org.eclipse.wst.common.ui.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.ui.internal.search"
				}
			}
			exports += new Package package_org_eclipse_wst_common_ui_internal_search_dialogs {
				__id = "org.eclipse.wst.common.ui.internal.search.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.ui.internal.search.dialogs"
				}
			}
			exports += new Package package_org_eclipse_wst_common_ui_internal_viewers {
				__id = "org.eclipse.wst.common.ui.internal.viewers"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.ui.internal.viewers"
				}
			}
			exports += new Package package_org_eclipse_wst_common_ui_provisional_editors {
				__id = "org.eclipse.wst.common.ui.provisional.editors"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.ui.provisional.editors"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_ui
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_common_uriresolver {
			__id = "org.eclipse.wst.common.uriresolver"
			identifier = new PlatformID {
				value = "org.eclipse.wst.common.uriresolver"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.301.v200805140415"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_uriresolver
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_common_uriresolver
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_common_uriresolver_internal {
				__id = "org.eclipse.wst.common.uriresolver.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.uriresolver.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_common_uriresolver_internal_provisional {
				__id = "org.eclipse.wst.common.uriresolver.internal.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.uriresolver.internal.provisional"
				}
			}
			exports += new Package package_org_eclipse_wst_common_uriresolver_internal_util {
				__id = "org.eclipse.wst.common.uriresolver.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.common.uriresolver.internal.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_dtd_core {
			__id = "org.eclipse.wst.dtd.core"
			identifier = new PlatformID {
				value = "org.eclipse.wst.dtd.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.300.v200904181727"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_wst_sse_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_wst_xml_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-1.3.0)'"
				maxVersion = "'[1.2.0-1.3.0)'"
			}
			ownedEntities += new Metamodel metamodel_DTD_xmi {
				__id = "DTD_xmi"
				identifier = new PlatformID {
					value = "DTD_xmi"
				}
				locator = new EFSLocator {
					value = "DTD.xmi"
				}
			}
				ownedEntities += new Service service_conformsTo_DTD_xmi {
					__id = "conformsTo_DTD_xmi"
					identifier = new PlatformID {
						value = "conformsTo_DTD_xmi"
					}
					locator = new EFSLocator {
						value = "DTD.xmi.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_wst_dtd_core_internal {
				__id = "org.eclipse.wst.dtd.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_content {
				__id = "org.eclipse.wst.dtd.core.internal.content"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.content"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_contentmodel {
				__id = "org.eclipse.wst.dtd.core.internal.contentmodel"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.contentmodel"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_document {
				__id = "org.eclipse.wst.dtd.core.internal.document"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.document"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_emf {
				__id = "org.eclipse.wst.dtd.core.internal.emf"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.emf"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_emf_impl {
				__id = "org.eclipse.wst.dtd.core.internal.emf.impl"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.emf.impl"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_emf_util {
				__id = "org.eclipse.wst.dtd.core.internal.emf.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.emf.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_encoding {
				__id = "org.eclipse.wst.dtd.core.internal.encoding"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.encoding"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_event {
				__id = "org.eclipse.wst.dtd.core.internal.event"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.event"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_modelhandler {
				__id = "org.eclipse.wst.dtd.core.internal.modelhandler"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.modelhandler"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_parser {
				__id = "org.eclipse.wst.dtd.core.internal.parser"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.parser"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_preferences {
				__id = "org.eclipse.wst.dtd.core.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_provisional_contenttype {
				__id = "org.eclipse.wst.dtd.core.internal.provisional.contenttype"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.provisional.contenttype"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_provisional_document {
				__id = "org.eclipse.wst.dtd.core.internal.provisional.document"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.provisional.document"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_provisional_text {
				__id = "org.eclipse.wst.dtd.core.internal.provisional.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.provisional.text"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_saxparser {
				__id = "org.eclipse.wst.dtd.core.internal.saxparser"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.saxparser"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_tasks {
				__id = "org.eclipse.wst.dtd.core.internal.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.tasks"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_text {
				__id = "org.eclipse.wst.dtd.core.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.text"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_tokenizer {
				__id = "org.eclipse.wst.dtd.core.internal.tokenizer"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.tokenizer"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_util {
				__id = "org.eclipse.wst.dtd.core.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_validation {
				__id = "org.eclipse.wst.dtd.core.internal.validation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.validation"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_internal_validation_eclipse {
				__id = "org.eclipse.wst.dtd.core.internal.validation.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.internal.validation.eclipse"
				}
			}
			exports += new Package package_org_eclipse_wst_dtd_core_text {
				__id = "org.eclipse.wst.dtd.core.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtd.core.text"
				}
			}
			exports += new Package package_rose {
				__id = "rose"
				identifier = new PlatformID {
					value = "rose"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_dtd_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_dtdeditor_doc_user {
			__id = "org.eclipse.wst.dtdeditor.doc.user"
			identifier = new PlatformID {
				value = "org.eclipse.wst.dtdeditor.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.500.v200904292308"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.wst.dtdeditor.doc.user"
				identifier = new PlatformID {
					value = "org.eclipse.wst.dtdeditor.doc.user"
				}
				locator = new EFSLocator {
					value = "org.eclipse.wst.dtdeditor.doc.user"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_internet_cache {
			__id = "org.eclipse.wst.internet.cache"
			identifier = new PlatformID {
				value = "org.eclipse.wst.internet.cache"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.301.v200805140020"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_internet_cache
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_internet_cache
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_internet_cache
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-2.0.0)'"
				maxVersion = "'[1.1.301-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_internet_cache
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_internet_cache_internal {
				__id = "org.eclipse.wst.internet.cache.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.internet.cache.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_internet_cache_internal_preferences {
				__id = "org.eclipse.wst.internet.cache.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.internet.cache.internal.preferences"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_sse_core {
			__id = "org.eclipse.wst.sse.core"
			identifier = new PlatformID {
				value = "org.eclipse.wst.sse.core"
			}
			state = : "State.active"
			version = new Version {
				value = "1.1.401.v200909172215"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_sse_core {
				__id = "org.eclipse.wst.sse.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal {
				__id = "org.eclipse.wst.sse.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_cleanup {
				__id = "org.eclipse.wst.sse.core.internal.cleanup"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.cleanup"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_document {
				__id = "org.eclipse.wst.sse.core.internal.document"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.document"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_encoding {
				__id = "org.eclipse.wst.sse.core.internal.encoding"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.encoding"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_encoding_util {
				__id = "org.eclipse.wst.sse.core.internal.encoding.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.encoding.util"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_exceptions {
				__id = "org.eclipse.wst.sse.core.internal.exceptions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.exceptions"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_filebuffers {
				__id = "org.eclipse.wst.sse.core.internal.filebuffers"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.filebuffers"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_format {
				__id = "org.eclipse.wst.sse.core.internal.format"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.format"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_ltk_modelhandler {
				__id = "org.eclipse.wst.sse.core.internal.ltk.modelhandler"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.ltk.modelhandler"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_ltk_parser {
				__id = "org.eclipse.wst.sse.core.internal.ltk.parser"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.ltk.parser"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_model {
				__id = "org.eclipse.wst.sse.core.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.model"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_modelhandler {
				__id = "org.eclipse.wst.sse.core.internal.modelhandler"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.modelhandler"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_parser {
				__id = "org.eclipse.wst.sse.core.internal.parser"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.parser"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_preferences {
				__id = "org.eclipse.wst.sse.core.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_provisional {
				__id = "org.eclipse.wst.sse.core.internal.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.provisional"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_provisional_document {
				__id = "org.eclipse.wst.sse.core.internal.provisional.document"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.provisional.document"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_provisional_events {
				__id = "org.eclipse.wst.sse.core.internal.provisional.events"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.provisional.events"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_provisional_exceptions {
				__id = "org.eclipse.wst.sse.core.internal.provisional.exceptions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.provisional.exceptions"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_provisional_model {
				__id = "org.eclipse.wst.sse.core.internal.provisional.model"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.provisional.model"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_provisional_tasks {
				__id = "org.eclipse.wst.sse.core.internal.provisional.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.provisional.tasks"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_provisional_text {
				__id = "org.eclipse.wst.sse.core.internal.provisional.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.provisional.text"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_tasks {
				__id = "org.eclipse.wst.sse.core.internal.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.tasks"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_text {
				__id = "org.eclipse.wst.sse.core.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.text"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_text_rules {
				__id = "org.eclipse.wst.sse.core.internal.text.rules"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.text.rules"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_undo {
				__id = "org.eclipse.wst.sse.core.internal.undo"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.undo"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_util {
				__id = "org.eclipse.wst.sse.core.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_internal_validate {
				__id = "org.eclipse.wst.sse.core.internal.validate"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.internal.validate"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_text {
				__id = "org.eclipse.wst.sse.core.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.text"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_core_utils {
				__id = "org.eclipse.wst.sse.core.utils"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.core.utils"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_internal_contentproperties {
				__id = "org.eclipse.wst.sse.internal.contentproperties"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.internal.contentproperties"
				}
			}
			exports += new Package package_org_eclipse_wst_sse_ui {
				__id = "org.eclipse.wst.sse.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core {
				__id = "org.eclipse.wst.xml.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_sse_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_sse_doc_user {
			__id = "org.eclipse.wst.sse.doc.user"
			identifier = new PlatformID {
				value = "org.eclipse.wst.sse.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200805211530"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.wst.sse.doc.user"
				identifier = new PlatformID {
					value = "org.eclipse.wst.sse.doc.user"
				}
				locator = new EFSLocator {
					value = "org.eclipse.wst.sse.doc.user"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_standard_schemas {
			__id = "org.eclipse.wst.standard.schemas"
			identifier = new PlatformID {
				value = "org.eclipse.wst.standard.schemas"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.200.v200902270215"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_standard_schemas
				target = plugin_org_eclipse_wst_xml_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_standard_schemas
				target = plugin_org_eclipse_wst_sse_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-2.0.0)'"
				maxVersion = "'[1.1.0-2.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_validation {
			__id = "org.eclipse.wst.validation"
			identifier = new PlatformID {
				value = "org.eclipse.wst.validation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.102.v200905201610"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation
				target = plugin_org_eclipse_wst_common_frameworks
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation
				target = plugin_org_eclipse_wst_common_project_facet_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_validation {
				__id = "org.eclipse.wst.validation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal {
				__id = "org.eclipse.wst.validation.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_core {
				__id = "org.eclipse.wst.validation.internal.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.core"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_delegates {
				__id = "org.eclipse.wst.validation.internal.delegates"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.delegates"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_model {
				__id = "org.eclipse.wst.validation.internal.model"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.model"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_operations {
				__id = "org.eclipse.wst.validation.internal.operations"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.operations"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_plugin {
				__id = "org.eclipse.wst.validation.internal.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.plugin"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_provisional {
				__id = "org.eclipse.wst.validation.internal.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.provisional"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_provisional_core {
				__id = "org.eclipse.wst.validation.internal.provisional.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.provisional.core"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_validation_infopop {
			__id = "org.eclipse.wst.validation.infopop"
			identifier = new PlatformID {
				value = "org.eclipse.wst.validation.infopop"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.300.v200806041506"
			}
			vendor = vendor_Eclipse_org
		}
		plugins += new Plugin plugin_org_eclipse_wst_validation_ui {
			__id = "org.eclipse.wst.validation.ui"
			identifier = new PlatformID {
				value = "org.eclipse.wst.validation.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.104.v200904232035"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_swt
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_wst_common_frameworks_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_wst_common_frameworks
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-2.0.0)'"
				maxVersion = "'[1.1.200-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_validation_ui
				target = plugin_org_eclipse_ui_forms
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.100-4.0.0)'"
				maxVersion = "'[3.3.100-4.0.0)'"
			}
			exports += new Package package_org_eclipse_wst_validation_internal_ui {
				__id = "org.eclipse.wst.validation.internal.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_validation_internal_ui_plugin {
				__id = "org.eclipse.wst.validation.internal.ui.plugin"
				identifier = new PlatformID {
					value = "org.eclipse.wst.validation.internal.ui.plugin"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_xml_core {
			__id = "org.eclipse.wst.xml.core"
			identifier = new PlatformID {
				value = "org.eclipse.wst.xml.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.401.v200908242115"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_apache_xerces
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.9.0-3.0.0)'"
				maxVersion = "'[2.9.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.4.0-4.0.0)'"
				maxVersion = "'[3.4.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_core_filebuffers
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.301-1.2.0)'"
				maxVersion = "'[1.1.301-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_wst_sse_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.300-1.2.0)'"
				maxVersion = "'[1.1.300-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_jem_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.0.100-3.0.0)'"
				maxVersion = "'[2.0.100-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-1.3.0)'"
				maxVersion = "'[1.2.0-1.3.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_wst_common_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.104-1.2.0)'"
				maxVersion = "'[1.1.104-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_wst_common_emfworkbench_integration
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.200-1.2.0)'"
				maxVersion = "'[1.1.200-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = plugin_org_eclipse_wst_common_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.101-1.2.0)'"
				maxVersion = "'[1.1.101-1.2.0)'"
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal {
				__id = "org.eclipse.wst.xml.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_catalog {
				__id = "org.eclipse.wst.xml.core.internal.catalog"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.catalog"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_catalog_provisional {
				__id = "org.eclipse.wst.xml.core.internal.catalog.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.catalog.provisional"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_cleanup {
				__id = "org.eclipse.wst.xml.core.internal.cleanup"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.cleanup"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_commentelement {
				__id = "org.eclipse.wst.xml.core.internal.commentelement"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.commentelement"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_commentelement_impl {
				__id = "org.eclipse.wst.xml.core.internal.commentelement.impl"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.commentelement.impl"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_commentelement_util {
				__id = "org.eclipse.wst.xml.core.internal.commentelement.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.commentelement.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_annotation {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.annotation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.annotation"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_basic {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.basic"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.basic"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_factory {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.factory"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.factory"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_internal_annotation {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.internal.annotation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.internal.annotation"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_internal_modelqueryimpl {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.internal.modelqueryimpl"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.internal.modelqueryimpl"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_internal_util {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_modelquery {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.modelquery"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.modelquery"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_modelquery_extension {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.modelquery.extension"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.modelquery.extension"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_modelqueryimpl {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contentmodel_util {
				__id = "org.eclipse.wst.xml.core.internal.contentmodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contentmodel.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_contenttype {
				__id = "org.eclipse.wst.xml.core.internal.contenttype"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.contenttype"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_document {
				__id = "org.eclipse.wst.xml.core.internal.document"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.document"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_emf2xml {
				__id = "org.eclipse.wst.xml.core.internal.emf2xml"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.emf2xml"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_encoding {
				__id = "org.eclipse.wst.xml.core.internal.encoding"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.encoding"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_formatter {
				__id = "org.eclipse.wst.xml.core.internal.formatter"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.formatter"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_modelhandler {
				__id = "org.eclipse.wst.xml.core.internal.modelhandler"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.modelhandler"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_modelquery {
				__id = "org.eclipse.wst.xml.core.internal.modelquery"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.modelquery"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_parser {
				__id = "org.eclipse.wst.xml.core.internal.parser"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.parser"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_parser_regions {
				__id = "org.eclipse.wst.xml.core.internal.parser.regions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.parser.regions"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_preferences {
				__id = "org.eclipse.wst.xml.core.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_propagate {
				__id = "org.eclipse.wst.xml.core.internal.propagate"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.propagate"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_provisional {
				__id = "org.eclipse.wst.xml.core.internal.provisional"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.provisional"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_provisional_contentmodel {
				__id = "org.eclipse.wst.xml.core.internal.provisional.contentmodel"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.provisional.contentmodel"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_provisional_contenttype {
				__id = "org.eclipse.wst.xml.core.internal.provisional.contenttype"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.provisional.contenttype"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_provisional_document {
				__id = "org.eclipse.wst.xml.core.internal.provisional.document"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.provisional.document"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_provisional_format {
				__id = "org.eclipse.wst.xml.core.internal.provisional.format"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.provisional.format"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_provisional_text {
				__id = "org.eclipse.wst.xml.core.internal.provisional.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.provisional.text"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_regions {
				__id = "org.eclipse.wst.xml.core.internal.regions"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.regions"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_search {
				__id = "org.eclipse.wst.xml.core.internal.search"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.search"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_search_impl {
				__id = "org.eclipse.wst.xml.core.internal.search.impl"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.search.impl"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_search_matching {
				__id = "org.eclipse.wst.xml.core.internal.search.matching"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.search.matching"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_search_quickscan {
				__id = "org.eclipse.wst.xml.core.internal.search.quickscan"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.search.quickscan"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_ssemodelquery {
				__id = "org.eclipse.wst.xml.core.internal.ssemodelquery"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.ssemodelquery"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_tasks {
				__id = "org.eclipse.wst.xml.core.internal.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.tasks"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_text {
				__id = "org.eclipse.wst.xml.core.internal.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.text"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_text_rules {
				__id = "org.eclipse.wst.xml.core.internal.text.rules"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.text.rules"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_validate {
				__id = "org.eclipse.wst.xml.core.internal.validate"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.validate"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_validation {
				__id = "org.eclipse.wst.xml.core.internal.validation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.validation"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_validation_core {
				__id = "org.eclipse.wst.xml.core.internal.validation.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.validation.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_validation_core_logging {
				__id = "org.eclipse.wst.xml.core.internal.validation.core.logging"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.validation.core.logging"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_validation_eclipse {
				__id = "org.eclipse.wst.xml.core.internal.validation.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.validation.eclipse"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_internal_validation_errorcustomization {
				__id = "org.eclipse.wst.xml.core.internal.validation.errorcustomization"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.internal.validation.errorcustomization"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_ui {
				__id = "org.eclipse.wst.xml.ui"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.ui"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core {
				__id = "org.eclipse.wst.xsd.core"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_ui_ {
				__id = "org.eclipse.wst.xsd.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.ui'"
				}
			}
			exports += new Package package_org_eclipse_wst_xml_core_text {
				__id = "org.eclipse.wst.xml.core.text"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xml.core.text"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = package_com_ibm_icu_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xml_core
				target = package_com_ibm_icu_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "3.8"
				maxVersion = "3.8"
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_xmleditor_doc_user {
			__id = "org.eclipse.wst.xmleditor.doc.user"
			identifier = new PlatformID {
				value = "org.eclipse.wst.xmleditor.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.600.v200901231300"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.wst.xmleditor.doc.user"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xmleditor.doc.user"
				}
				locator = new EFSLocator {
					value = "org.eclipse.wst.xmleditor.doc.user"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_xsd_core {
			__id = "org.eclipse.wst.xsd.core"
			identifier = new PlatformID {
				value = "org.eclipse.wst.xsd.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.401.v200903020335"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.2.0-4.0.0)'"
				maxVersion = "'[3.2.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_core
				target = plugin_org_eclipse_wst_common_uriresolver
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_core
				target = plugin_org_eclipse_xsd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.2.0-3.0.0)'"
				maxVersion = "'[2.2.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_core
				target = plugin_org_eclipse_wst_xml_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.1.0-1.2.0)'"
				maxVersion = "'[1.1.0-1.2.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_wst_xsd_core
				target = plugin_org_eclipse_wst_validation
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-1.3.0)'"
				maxVersion = "'[1.2.0-1.3.0)'"
			}
			exports += new Package package_org_eclipse_wst_xsd_contentmodel_internal {
				__id = "org.eclipse.wst.xsd.contentmodel.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.contentmodel.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_contentmodel_internal_util {
				__id = "org.eclipse.wst.xsd.contentmodel.internal.util"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.contentmodel.internal.util"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core_internal {
				__id = "org.eclipse.wst.xsd.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core.internal"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core_internal_preferences {
				__id = "org.eclipse.wst.xsd.core.internal.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core.internal.preferences"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core_internal_validation {
				__id = "org.eclipse.wst.xsd.core.internal.validation"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core.internal.validation"
				}
			}
			exports += new Package package_org_eclipse_wst_xsd_core_internal_validation_eclipse {
				__id = "org.eclipse.wst.xsd.core.internal.validation.eclipse"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsd.core.internal.validation.eclipse"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_wst_xsdeditor_doc_user {
			__id = "org.eclipse.wst.xsdeditor.doc.user"
			identifier = new PlatformID {
				value = "org.eclipse.wst.xsdeditor.doc.user"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.700.v200905182240"
			}
			vendor = vendor_Eclipse_org
			ownedEntities += new Document {
				__id = "org.eclipse.wst.xsdeditor.doc.user"
				identifier = new PlatformID {
					value = "org.eclipse.wst.xsdeditor.doc.user"
				}
				locator = new EFSLocator {
					value = "org.eclipse.wst.xsdeditor.doc.user"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xsd_example_installer {
			__id = "org.eclipse.xsd.example.installer"
			identifier = new PlatformID {
				value = "org.eclipse.xsd.example.installer"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0.v200906151043"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_example_installer
				target = plugin_org_eclipse_emf_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xsd_example_installer
				target = plugin_org_eclipse_xsd
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtend_util_stdlib {
			__id = "org.eclipse.xtend.util.stdlib"
			identifier = new PlatformID {
				value = "org.eclipse.xtend.util.stdlib"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_util_stdlib
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_util_stdlib
				target = plugin_org_eclipse_emf_mwe_utils
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_util_stdlib
				target = plugin_org_eclipse_xpand
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtend_util_stdlib
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			exports += new Package package_org_eclipse_xpand_util_stdlib {
				__id = "org.eclipse.xpand.util.stdlib"
				identifier = new PlatformID {
					value = "org.eclipse.xpand.util.stdlib"
				}
			}
			exports += new Package package_org_eclipse_xtend_util_stdlib {
				__id = "org.eclipse.xtend.util.stdlib"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.util.stdlib"
				}
			}
			exports += new Package package_org_eclipse_xtend_util_stdlib_texttest {
				__id = "org.eclipse.xtend.util.stdlib.texttest"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.util.stdlib.texttest"
				}
			}
			exports += new Package package_org_eclipse_xtend_util_stdlib_tracing {
				__id = "org.eclipse.xtend.util.stdlib.tracing"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.util.stdlib.tracing"
				}
			}
			exports += new Package package_org_eclipse_xtend_util_stdlib_tracing_templates {
				__id = "org.eclipse.xtend.util.stdlib.tracing.templates"
				identifier = new PlatformID {
					value = "org.eclipse.xtend.util.stdlib.tracing.templates"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext {
			__id = "org.eclipse.xtext"
			identifier = new PlatformID {
				value = "org.eclipse.xtext"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_xtext_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_index
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_junit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_antlr_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.0.0'"
				maxVersion = "'3.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_com_google_guice
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.0'"
				maxVersion = "'1.0.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_codegen
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_mwe_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_mwe_utils
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext
				target = plugin_org_eclipse_xtend_typesystem_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_2008_Xtext {
				__id = "_www_eclipse_org_2008_Xtext"
				identifier = new PlatformID {
					value = "_www_eclipse_org_2008_Xtext"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/2008/Xtext"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_2008_Xtext {
					__id = "conformsTo__www_eclipse_org_2008_Xtext"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_2008_Xtext"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/2008/Xtext.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_2008_xtext_parsetree {
				__id = "_www_eclipse_org_2008_xtext_parsetree"
				identifier = new PlatformID {
					value = "_www_eclipse_org_2008_xtext_parsetree"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/2008/xtext/parsetree"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_2008_xtext_parsetree {
					__id = "conformsTo__www_eclipse_org_2008_xtext_parsetree"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_2008_xtext_parsetree"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/2008/xtext/parsetree.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_xtext {
				__id = "org.eclipse.xtext"
				identifier = new PlatformID {
					value = "org.eclipse.xtext"
				}
			}
			exports += new Package package_org_eclipse_xtext_common {
				__id = "org.eclipse.xtext.common"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.common"
				}
			}
			exports += new Package package_org_eclipse_xtext_common_parseTreeConstruction {
				__id = "org.eclipse.xtext.common.parseTreeConstruction"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.common.parseTreeConstruction"
				}
			}
			exports += new Package package_org_eclipse_xtext_common_parser_packrat {
				__id = "org.eclipse.xtext.common.parser.packrat"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.common.parser.packrat"
				}
			}
			exports += new Package package_org_eclipse_xtext_common_parser_packrat_consumers {
				__id = "org.eclipse.xtext.common.parser.packrat.consumers"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.common.parser.packrat.consumers"
				}
			}
			exports += new Package package_org_eclipse_xtext_common_services {
				__id = "org.eclipse.xtext.common.services"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.common.services"
				}
			}
			exports += new Package package_org_eclipse_xtext_concurrent {
				__id = "org.eclipse.xtext.concurrent"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.concurrent"
				}
			}
			exports += new Package package_org_eclipse_xtext_conversion {
				__id = "org.eclipse.xtext.conversion"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.conversion"
				}
				version = new Version {
					value = "org.eclipse.xtext.conversio"
				}
			}
			exports += new Package package_org_eclipse_xtext_conversion_impl {
				__id = "org.eclipse.xtext.conversion.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.conversion.impl"
				}
				version = new Version {
					value = "org.eclipse.xtext.conversion.imp"
				}
			}
			exports += new Package package_org_eclipse_xtext_diagnostics {
				__id = "org.eclipse.xtext.diagnostics"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.diagnostics"
				}
			}
			exports += new Package package_org_eclipse_xtext_formatting {
				__id = "org.eclipse.xtext.formatting"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.formatting"
				}
			}
			exports += new Package package_org_eclipse_xtext_formatting_impl {
				__id = "org.eclipse.xtext.formatting.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.formatting.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_grammaranalysis {
				__id = "org.eclipse.xtext.grammaranalysis"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.grammaranalysis"
				}
			}
			exports += new Package package_org_eclipse_xtext_grammaranalysis_impl {
				__id = "org.eclipse.xtext.grammaranalysis.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.grammaranalysis.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_impl {
				__id = "org.eclipse.xtext.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_index {
				__id = "org.eclipse.xtext.index"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.index"
				}
			}
			exports += new Package package_org_eclipse_xtext_linking {
				__id = "org.eclipse.xtext.linking"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.linking"
				}
			}
			exports += new Package package_org_eclipse_xtext_linking_impl {
				__id = "org.eclipse.xtext.linking.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.linking.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_linking_lazy {
				__id = "org.eclipse.xtext.linking.lazy"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.linking.lazy"
				}
			}
			exports += new Package package_org_eclipse_xtext_parseTreeConstruction {
				__id = "org.eclipse.xtext.parseTreeConstruction"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parseTreeConstruction"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser {
				__id = "org.eclipse.xtext.parser"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser_antlr {
				__id = "org.eclipse.xtext.parser.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser.antlr"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser_antlr_internal {
				__id = "org.eclipse.xtext.parser.antlr.internal"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser.antlr.internal"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser_impl {
				__id = "org.eclipse.xtext.parser.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser_packrat {
				__id = "org.eclipse.xtext.parser.packrat"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser.packrat"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser_packrat_consumers {
				__id = "org.eclipse.xtext.parser.packrat.consumers"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser.packrat.consumers"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser_packrat_matching {
				__id = "org.eclipse.xtext.parser.packrat.matching"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser.packrat.matching"
				}
			}
			exports += new Package package_org_eclipse_xtext_parser_packrat_tokens {
				__id = "org.eclipse.xtext.parser.packrat.tokens"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parser.packrat.tokens"
				}
			}
			exports += new Package package_org_eclipse_xtext_parsetree {
				__id = "org.eclipse.xtext.parsetree"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parsetree"
				}
			}
			exports += new Package package_org_eclipse_xtext_parsetree_impl {
				__id = "org.eclipse.xtext.parsetree.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parsetree.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_parsetree_reconstr {
				__id = "org.eclipse.xtext.parsetree.reconstr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parsetree.reconstr"
				}
			}
			exports += new Package package_org_eclipse_xtext_parsetree_reconstr_impl {
				__id = "org.eclipse.xtext.parsetree.reconstr.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parsetree.reconstr.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_parsetree_util {
				__id = "org.eclipse.xtext.parsetree.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.parsetree.util"
				}
			}
			exports += new Package package_org_eclipse_xtext_resource {
				__id = "org.eclipse.xtext.resource"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.resource"
				}
			}
			exports += new Package package_org_eclipse_xtext_scoping {
				__id = "org.eclipse.xtext.scoping"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.scoping"
				}
			}
			exports += new Package package_org_eclipse_xtext_scoping_impl {
				__id = "org.eclipse.xtext.scoping.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.scoping.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_service {
				__id = "org.eclipse.xtext.service"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.service"
				}
			}
			exports += new Package package_org_eclipse_xtext_services {
				__id = "org.eclipse.xtext.services"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.services"
				}
			}
			exports += new Package package_org_eclipse_xtext_util {
				__id = "org.eclipse.xtext.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.util"
				}
			}
			exports += new Package package_org_eclipse_xtext_validation {
				__id = "org.eclipse.xtext.validation"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.validation"
				}
			}
			exports += new Package package_org_eclipse_xtext_xtext {
				__id = "org.eclipse.xtext.xtext"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.xtext"
				}
			}
			exports += new Package package_org_eclipse_xtext_xtext_ecoreInference {
				__id = "org.eclipse.xtext.xtext.ecoreInference"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.xtext.ecoreInference"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_activities {
			__id = "org.eclipse.xtext.activities"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.activities"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_activities
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_example_domainmodel {
			__id = "org.eclipse.xtext.example.domainmodel"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.example.domainmodel"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtext
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtext_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xpand
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtend_util_stdlib
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_de_itemis_xtext_antlr
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtext_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_antlr_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_xtext_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel
				target = plugin_org_eclipse_emf_index
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			ownedEntities += new Metamodel metamodel__www_example_xtext_Domainmodel {
				__id = "_www_example_xtext_Domainmodel"
				identifier = new PlatformID {
					value = "_www_example_xtext_Domainmodel"
				}
				locator = new EFSLocator {
					value = "http://www.example.xtext/Domainmodel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_example_xtext_Domainmodel {
					__id = "conformsTo__www_example_xtext_Domainmodel"
					identifier = new PlatformID {
						value = "conformsTo__www_example_xtext_Domainmodel"
					}
					locator = new EFSLocator {
						value = "http://www.example.xtext/Domainmodel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_xtext_example {
				__id = "org.eclipse.xtext.example"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_domainmodel {
				__id = "org.eclipse.xtext.example.domainmodel"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.domainmodel"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_domainmodel_impl {
				__id = "org.eclipse.xtext.example.domainmodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.domainmodel.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_domainmodel_util {
				__id = "org.eclipse.xtext.example.domainmodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.domainmodel.util"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parseTreeConstruction {
				__id = "org.eclipse.xtext.example.parseTreeConstruction"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parseTreeConstruction"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parser_antlr {
				__id = "org.eclipse.xtext.example.parser.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parser.antlr"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parser_antlr_internal {
				__id = "org.eclipse.xtext.example.parser.antlr.internal"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parser.antlr.internal"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_services {
				__id = "org.eclipse.xtext.example.services"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.services"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_validation {
				__id = "org.eclipse.xtext.example.validation"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.validation"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_example_domainmodel_ui {
			__id = "org.eclipse.xtext.example.domainmodel.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.example.domainmodel.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_xtext_example_domainmodel
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_xtext_ui_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_xtext_ui_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_xtext_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_emf_index
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_domainmodel_ui
				target = plugin_org_eclipse_emf_index_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.0'"
				maxVersion = "'0.7.0'"
			}
			exports += new Package package_org_eclipse_xtext_example {
				__id = "org.eclipse.xtext.example"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_contentassist {
				__id = "org.eclipse.xtext.example.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.contentassist"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_example_ecoredsl {
			__id = "org.eclipse.xtext.example.ecoredsl"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.example.ecoredsl"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_xtext
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_xtext_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_de_itemis_xtext_antlr
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_emf_mwe_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_xtext_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_antlr_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl
				target = plugin_org_eclipse_xtext_xtend
			}
			ownedEntities += new Metamodel metamodel__example_xtext_org_EcoreDsl {
				__id = "_example_xtext_org_EcoreDsl"
				identifier = new PlatformID {
					value = "_example_xtext_org_EcoreDsl"
				}
				locator = new EFSLocator {
					value = "http://example.xtext.org/EcoreDsl"
				}
			}
				ownedEntities += new Service service_conformsTo__example_xtext_org_EcoreDsl {
					__id = "conformsTo__example_xtext_org_EcoreDsl"
					identifier = new PlatformID {
						value = "conformsTo__example_xtext_org_EcoreDsl"
					}
					locator = new EFSLocator {
						value = "http://example.xtext.org/EcoreDsl.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_xtext_example {
				__id = "org.eclipse.xtext.example"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_ecoredsl {
				__id = "org.eclipse.xtext.example.ecoredsl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.ecoredsl"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parseTreeConstruction {
				__id = "org.eclipse.xtext.example.parseTreeConstruction"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parseTreeConstruction"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parser_antlr {
				__id = "org.eclipse.xtext.example.parser.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parser.antlr"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_services {
				__id = "org.eclipse.xtext.example.services"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.services"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_ecoredsl_impl {
				__id = "org.eclipse.xtext.example.ecoredsl.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.ecoredsl.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_ecoredsl_util {
				__id = "org.eclipse.xtext.example.ecoredsl.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.ecoredsl.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_example_ecoredsl_ui {
			__id = "org.eclipse.xtext.example.ecoredsl.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.example.ecoredsl.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_xtext_ui_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_xtext_ui_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_ecoredsl_ui
				target = plugin_org_eclipse_xtext_example_ecoredsl
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			exports += new Package package_org_eclipse_xtext_example {
				__id = "org.eclipse.xtext.example"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_contentassist {
				__id = "org.eclipse.xtext.example.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.contentassist"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_example_fowlerdsl {
			__id = "org.eclipse.xtext.example.fowlerdsl"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.example.fowlerdsl"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_xtext
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_xtext_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_de_itemis_xtext_antlr
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_emf_mwe_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_xtext_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_antlr_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl
				target = plugin_org_eclipse_xtext_xtend
			}
			ownedEntities += new Metamodel metamodel__example_xtext_org_FowlerDsl {
				__id = "_example_xtext_org_FowlerDsl"
				identifier = new PlatformID {
					value = "_example_xtext_org_FowlerDsl"
				}
				locator = new EFSLocator {
					value = "http://example.xtext.org/FowlerDsl"
				}
			}
				ownedEntities += new Service service_conformsTo__example_xtext_org_FowlerDsl {
					__id = "conformsTo__example_xtext_org_FowlerDsl"
					identifier = new PlatformID {
						value = "conformsTo__example_xtext_org_FowlerDsl"
					}
					locator = new EFSLocator {
						value = "http://example.xtext.org/FowlerDsl.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_xtext_example {
				__id = "org.eclipse.xtext.example"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_fowlerdsl {
				__id = "org.eclipse.xtext.example.fowlerdsl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.fowlerdsl"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_fowlerdsl_impl {
				__id = "org.eclipse.xtext.example.fowlerdsl.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.fowlerdsl.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_fowlerdsl_util {
				__id = "org.eclipse.xtext.example.fowlerdsl.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.fowlerdsl.util"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parseTreeConstruction {
				__id = "org.eclipse.xtext.example.parseTreeConstruction"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parseTreeConstruction"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parser_antlr {
				__id = "org.eclipse.xtext.example.parser.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parser.antlr"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_parser_antlr_internal {
				__id = "org.eclipse.xtext.example.parser.antlr.internal"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.parser.antlr.internal"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_services {
				__id = "org.eclipse.xtext.example.services"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.services"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_validation {
				__id = "org.eclipse.xtext.example.validation"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.validation"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_example_fowlerdsl_ui {
			__id = "org.eclipse.xtext.example.fowlerdsl.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.example.fowlerdsl.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl_ui
				target = plugin_org_eclipse_xtext_example_fowlerdsl
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl_ui
				target = plugin_org_eclipse_xtext_ui_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl_ui
				target = plugin_org_eclipse_xtext_ui_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl_ui
				target = plugin_org_eclipse_xtext_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_example_fowlerdsl_ui
				target = plugin_org_eclipse_ui
			}
			exports += new Package package_org_eclipse_xtext_example {
				__id = "org.eclipse.xtext.example"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example"
				}
			}
			exports += new Package package_org_eclipse_xtext_example_contentassist {
				__id = "org.eclipse.xtext.example.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.example.contentassist"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_generator {
			__id = "org.eclipse.xtext.generator"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.generator"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_xtext_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_xpand
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_xtend_util_stdlib
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_emf_mwe_utils
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_generator
				target = plugin_org_eclipse_xtext
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			exports += new Package package_org_eclipse_xtext_generator {
				__id = "org.eclipse.xtext.generator"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.generator"
				}
			}
			exports += new Package package_org_eclipse_xtext_generator_ecore {
				__id = "org.eclipse.xtext.generator.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.generator.ecore"
				}
			}
			exports += new Package package_org_eclipse_xtext_generator_grammarAccess {
				__id = "org.eclipse.xtext.generator.grammarAccess"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.generator.grammarAccess"
				}
			}
			exports += new Package package_org_eclipse_xtext_generator_parseTreeConstructor {
				__id = "org.eclipse.xtext.generator.parseTreeConstructor"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.generator.parseTreeConstructor"
				}
			}
			exports += new Package package_org_eclipse_xtext_generator_parser {
				__id = "org.eclipse.xtext.generator.parser"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.generator.parser"
				}
			}
			exports += new Package package_org_eclipse_xtext_generator_resourceFactory {
				__id = "org.eclipse.xtext.generator.resourceFactory"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.generator.resourceFactory"
				}
			}
			exports += new Package package_org_eclipse_xtext_generator_validation {
				__id = "org.eclipse.xtext.generator.validation"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.generator.validation"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_log4j {
			__id = "org.eclipse.xtext.log4j"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.log4j"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.15.v200908120607"
			}
			exports += new Package package_org_apache_log4j {
				__id = "org.apache.log4j"
				identifier = new PlatformID {
					value = "org.apache.log4j"
				}
			}
			exports += new Package package_org_apache_log4j_chainsaw {
				__id = "org.apache.log4j.chainsaw"
				identifier = new PlatformID {
					value = "org.apache.log4j.chainsaw"
				}
			}
			exports += new Package package_org_apache_log4j_config {
				__id = "org.apache.log4j.config"
				identifier = new PlatformID {
					value = "org.apache.log4j.config"
				}
			}
			exports += new Package package_org_apache_log4j_helpers {
				__id = "org.apache.log4j.helpers"
				identifier = new PlatformID {
					value = "org.apache.log4j.helpers"
				}
			}
			exports += new Package package_org_apache_log4j_jdbc {
				__id = "org.apache.log4j.jdbc"
				identifier = new PlatformID {
					value = "org.apache.log4j.jdbc"
				}
			}
			exports += new Package package_org_apache_log4j_jmx {
				__id = "org.apache.log4j.jmx"
				identifier = new PlatformID {
					value = "org.apache.log4j.jmx"
				}
			}
			exports += new Package package_org_apache_log4j_lf5 {
				__id = "org.apache.log4j.lf5"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_util {
				__id = "org.apache.log4j.lf5.util"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.util"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_viewer {
				__id = "org.apache.log4j.lf5.viewer"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.viewer"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_viewer_categoryexplorer {
				__id = "org.apache.log4j.lf5.viewer.categoryexplorer"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.viewer.categoryexplorer"
				}
			}
			exports += new Package package_org_apache_log4j_lf5_viewer_configure {
				__id = "org.apache.log4j.lf5.viewer.configure"
				identifier = new PlatformID {
					value = "org.apache.log4j.lf5.viewer.configure"
				}
			}
			exports += new Package package_org_apache_log4j_net {
				__id = "org.apache.log4j.net"
				identifier = new PlatformID {
					value = "org.apache.log4j.net"
				}
			}
			exports += new Package package_org_apache_log4j_nt {
				__id = "org.apache.log4j.nt"
				identifier = new PlatformID {
					value = "org.apache.log4j.nt"
				}
			}
			exports += new Package package_org_apache_log4j_or {
				__id = "org.apache.log4j.or"
				identifier = new PlatformID {
					value = "org.apache.log4j.or"
				}
			}
			exports += new Package package_org_apache_log4j_or_jms {
				__id = "org.apache.log4j.or.jms"
				identifier = new PlatformID {
					value = "org.apache.log4j.or.jms"
				}
			}
			exports += new Package package_org_apache_log4j_or_sax {
				__id = "org.apache.log4j.or.sax"
				identifier = new PlatformID {
					value = "org.apache.log4j.or.sax"
				}
			}
			exports += new Package package_org_apache_log4j_spi {
				__id = "org.apache.log4j.spi"
				identifier = new PlatformID {
					value = "org.apache.log4j.spi"
				}
			}
			exports += new Package package_org_apache_log4j_varia {
				__id = "org.apache.log4j.varia"
				identifier = new PlatformID {
					value = "org.apache.log4j.varia"
				}
			}
			exports += new Package package_org_apache_log4j_xml {
				__id = "org.apache.log4j.xml"
				identifier = new PlatformID {
					value = "org.apache.log4j.xml"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_logging {
			__id = "org.eclipse.xtext.logging"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.logging"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_logging
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_logging
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_logging
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.8'"
				maxVersion = "'1.2.8'"
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_reference {
			__id = "org.eclipse.xtext.reference"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.reference"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_xtext
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_xtext_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_de_itemis_xtext_antlr
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_emf_mwe_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_xtext_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_antlr_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference
				target = plugin_org_eclipse_xtext_xtend
			}
			ownedEntities += new Metamodel metamodel__eclipse_org_xtext_reference_ReferenceModel {
				__id = "_eclipse_org_xtext_reference_ReferenceModel"
				identifier = new PlatformID {
					value = "_eclipse_org_xtext_reference_ReferenceModel"
				}
				locator = new EFSLocator {
					value = "http://eclipse.org/xtext/reference/ReferenceModel"
				}
			}
				ownedEntities += new Service service_conformsTo__eclipse_org_xtext_reference_ReferenceModel {
					__id = "conformsTo__eclipse_org_xtext_reference_ReferenceModel"
					identifier = new PlatformID {
						value = "conformsTo__eclipse_org_xtext_reference_ReferenceModel"
					}
					locator = new EFSLocator {
						value = "http://eclipse.org/xtext/reference/ReferenceModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__eclipse_org_xtext_reference_ReferenceGrammar {
				__id = "_eclipse_org_xtext_reference_ReferenceGrammar"
				identifier = new PlatformID {
					value = "_eclipse_org_xtext_reference_ReferenceGrammar"
				}
				locator = new EFSLocator {
					value = "http://eclipse.org/xtext/reference/ReferenceGrammar"
				}
			}
				ownedEntities += new Service service_conformsTo__eclipse_org_xtext_reference_ReferenceGrammar {
					__id = "conformsTo__eclipse_org_xtext_reference_ReferenceGrammar"
					identifier = new PlatformID {
						value = "conformsTo__eclipse_org_xtext_reference_ReferenceGrammar"
					}
					locator = new EFSLocator {
						value = "http://eclipse.org/xtext/reference/ReferenceGrammar.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_ReferenceModel {
				__id = "ReferenceModel"
				identifier = new PlatformID {
					value = "ReferenceModel"
				}
			}
			exports += new Package package_ReferenceModel_util {
				__id = "ReferenceModel.util"
				identifier = new PlatformID {
					value = "ReferenceModel.util"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference {
				__id = "org.eclipse.xtext.reference"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_parseTreeConstruction {
				__id = "org.eclipse.xtext.reference.parseTreeConstruction"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.parseTreeConstruction"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_referenceGrammar {
				__id = "org.eclipse.xtext.reference.referenceGrammar"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.referenceGrammar"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_referenceGrammar_util {
				__id = "org.eclipse.xtext.reference.referenceGrammar.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.referenceGrammar.util"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_services {
				__id = "org.eclipse.xtext.reference.services"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.services"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_parser_antlr {
				__id = "org.eclipse.xtext.reference.parser.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.parser.antlr"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_referenceGrammar_impl {
				__id = "org.eclipse.xtext.reference.referenceGrammar.impl"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.referenceGrammar.impl"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_validation {
				__id = "org.eclipse.xtext.reference.validation"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.validation"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_reference_ui {
			__id = "org.eclipse.xtext.reference.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.reference.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference_ui
				target = plugin_org_eclipse_xtext_reference
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference_ui
				target = plugin_org_eclipse_xtext_ui_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference_ui
				target = plugin_org_eclipse_xtext_ui_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference_ui
				target = plugin_org_eclipse_xtext_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_reference_ui
				target = plugin_org_eclipse_ui
			}
			exports += new Package package_org_eclipse_xtext_reference {
				__id = "org.eclipse.xtext.reference"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference"
				}
			}
			exports += new Package package_org_eclipse_xtext_reference_contentassist {
				__id = "org.eclipse.xtext.reference.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.reference.contentassist"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_ui_common {
			__id = "org.eclipse.xtext.ui.common"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.ui.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_common
				target = plugin_org_eclipse_xtext_ui_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_common
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_common
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_common
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.5.0'"
				maxVersion = "'3.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_common
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_common
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_common
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.100'"
				maxVersion = "'3.4.100'"
			}
			exports += new Package package_org_eclipse_xtext_common {
				__id = "org.eclipse.xtext.common"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.common"
				}
			}
			exports += new Package package_org_eclipse_xtext_common_contentassist {
				__id = "org.eclipse.xtext.common.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.common.contentassist"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_contentassist {
				__id = "org.eclipse.xtext.ui.common.editor.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.contentassist"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_contentassist_antlr {
				__id = "org.eclipse.xtext.ui.common.editor.contentassist.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.contentassist.antlr"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_contentassist_antlr_internal {
				__id = "org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_folding {
				__id = "org.eclipse.xtext.ui.common.editor.folding"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.folding"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_hover {
				__id = "org.eclipse.xtext.ui.common.editor.hover"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.hover"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_hyperlinking {
				__id = "org.eclipse.xtext.ui.common.editor.hyperlinking"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.hyperlinking"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_outline {
				__id = "org.eclipse.xtext.ui.common.editor.outline"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.outline"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_outline_actions {
				__id = "org.eclipse.xtext.ui.common.editor.outline.actions"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.outline.actions"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_outline_linking {
				__id = "org.eclipse.xtext.ui.common.editor.outline.linking"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.outline.linking"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_outline_transformer {
				__id = "org.eclipse.xtext.ui.common.editor.outline.transformer"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.outline.transformer"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_preferencepage {
				__id = "org.eclipse.xtext.ui.common.editor.preferencepage"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.preferencepage"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_syntaxcoloring {
				__id = "org.eclipse.xtext.ui.common.editor.syntaxcoloring"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.syntaxcoloring"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_syntaxcoloring_antlr {
				__id = "org.eclipse.xtext.ui.common.editor.syntaxcoloring.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.syntaxcoloring.antlr"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_tasks {
				__id = "org.eclipse.xtext.ui.common.editor.tasks"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.tasks"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_tasks_dialogfields {
				__id = "org.eclipse.xtext.ui.common.editor.tasks.dialogfields"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.tasks.dialogfields"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_templates {
				__id = "org.eclipse.xtext.ui.common.editor.templates"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.templates"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_editor_toggleComments {
				__id = "org.eclipse.xtext.ui.common.editor.toggleComments"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.editor.toggleComments"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_common_service {
				__id = "org.eclipse.xtext.ui.common.service"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.common.service"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_ui_core {
			__id = "org.eclipse.xtext.ui.core"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.ui.core"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_ui_editors
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_jface_text
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_xtext
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_ui_views
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.3.0'"
				maxVersion = "'3.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.3.1'"
				maxVersion = "'2.3.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.3.1'"
				maxVersion = "'2.3.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_ui_workbench_texteditor
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_xtext_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_org_eclipse_core_expressions
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_ui_core
				target = plugin_com_ibm_icu
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'4.0.1'"
				maxVersion = "'4.0.1'"
			}
			exports += new Package package_org_eclipse_xtext_ui_core {
				__id = "org.eclipse.xtext.ui.core"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor {
				__id = "org.eclipse.xtext.ui.core.editor"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_contentassist {
				__id = "org.eclipse.xtext.ui.core.editor.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.contentassist"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_formatting {
				__id = "org.eclipse.xtext.ui.core.editor.formatting"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.formatting"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_handler {
				__id = "org.eclipse.xtext.ui.core.editor.handler"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.handler"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_model {
				__id = "org.eclipse.xtext.ui.core.editor.model"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.model"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_preferences {
				__id = "org.eclipse.xtext.ui.core.editor.preferences"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.preferences"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_preferences_fields {
				__id = "org.eclipse.xtext.ui.core.editor.preferences.fields"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.preferences.fields"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_reconciler {
				__id = "org.eclipse.xtext.ui.core.editor.reconciler"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.reconciler"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_syntaxcoloring {
				__id = "org.eclipse.xtext.ui.core.editor.syntaxcoloring"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.syntaxcoloring"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_toggleComments {
				__id = "org.eclipse.xtext.ui.core.editor.toggleComments"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.toggleComments"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_editor_utils {
				__id = "org.eclipse.xtext.ui.core.editor.utils"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.editor.utils"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_internal {
				__id = "org.eclipse.xtext.ui.core.internal"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.internal"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_util {
				__id = "org.eclipse.xtext.ui.core.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.util"
				}
			}
			exports += new Package package_org_eclipse_xtext_ui_core_wizard {
				__id = "org.eclipse.xtext.ui.core.wizard"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.ui.core.wizard"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_util {
			__id = "org.eclipse.xtext.util"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.util"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_util
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.3.2'"
				maxVersion = "'2.3.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_util
				target = plugin_org_junit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.8.2'"
				maxVersion = "'3.8.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_util
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_util
				target = plugin_com_google_collect
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.8.0'"
				maxVersion = "'0.8.0'"
			}
			exports += new Package package_org_eclipse_xtext_util {
				__id = "org.eclipse.xtext.util"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_xtend {
			__id = "org.eclipse.xtext.xtend"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.xtend"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_xtext_ui_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_xtext
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_xtend_typesystem_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_xtend_util_stdlib
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_com_google_collect
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.8.0'"
				maxVersion = "'0.8.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtend
				target = plugin_org_eclipse_xtext_ui_core
			}
			exports += new Package package_org_eclipse_xtext_check {
				__id = "org.eclipse.xtext.check"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.check"
				}
			}
			exports += new Package package_org_eclipse_xtext_xtend {
				__id = "org.eclipse.xtext.xtend"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.xtend"
				}
			}
			exports += new Package package_org_eclipse_xtext_xtend_contentassist {
				__id = "org.eclipse.xtext.xtend.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.xtend.contentassist"
				}
			}
			exports += new Package package_org_eclipse_xtext_xtend_scoping {
				__id = "org.eclipse.xtext.xtend.scoping"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.xtend.scoping"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_xtext_xtext_ui {
			__id = "org.eclipse.xtext.xtext.ui"
			identifier = new PlatformID {
				value = "org.eclipse.xtext.xtext.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120607"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xtext_ui_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xtext_ui_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xtext_log4j
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.15'"
				maxVersion = "'1.2.15'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xpand
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xtend
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xtend_typesystem_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xtend_util_stdlib
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'0.7.2'"
				maxVersion = "'0.7.2'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_xtext_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_xtext_xtext_ui
				target = plugin_org_antlr_runtime
			}
			exports += new Package package_org_eclipse_xtext {
				__id = "org.eclipse.xtext"
				identifier = new PlatformID {
					value = "org.eclipse.xtext"
				}
			}
			exports += new Package package_org_eclipse_xtext_contentassist {
				__id = "org.eclipse.xtext.contentassist"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.contentassist"
				}
			}
			exports += new Package package_org_eclipse_xtext_contentassist_antlr {
				__id = "org.eclipse.xtext.contentassist.antlr"
				identifier = new PlatformID {
					value = "org.eclipse.xtext.contentassist.antlr"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_access {
			__id = "org.emftext.access"
			identifier = new PlatformID {
				value = "org.emftext.access"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_access
				target = plugin_org_eclipse_emf_workspace
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_access
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_access
				target = plugin_org_eclipse_jface_text
			}
			exports += new Package package_org_emftext_access {
				__id = "org.emftext.access"
				identifier = new PlatformID {
					value = "org.emftext.access"
				}
			}
			exports += new Package package_org_emftext_access_resource {
				__id = "org.emftext.access.resource"
				identifier = new PlatformID {
					value = "org.emftext.access.resource"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_commons_antlr3_2_0 {
			__id = "org.emftext.commons.antlr3_2_0"
			identifier = new PlatformID {
				value = "org.emftext.commons.antlr3_2_0"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			exports += new Package package_org_antlr_runtime3_2_0 {
				__id = "org.antlr.runtime3_2_0"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0"
				}
			}
			exports += new Package package_org_antlr_runtime3_2_0_debug {
				__id = "org.antlr.runtime3_2_0.debug"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0.debug"
				}
			}
			exports += new Package package_org_antlr_runtime3_2_0_misc {
				__id = "org.antlr.runtime3_2_0.misc"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0.misc"
				}
			}
			exports += new Package package_org_antlr_runtime3_2_0_tree {
				__id = "org.antlr.runtime3_2_0.tree"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0.tree"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_doc {
			__id = "org.emftext.doc"
			identifier = new PlatformID {
				value = "org.emftext.doc"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			ownedEntities += new Document {
				__id = "org.emftext.doc"
				identifier = new PlatformID {
					value = "org.emftext.doc"
				}
				locator = new EFSLocator {
					value = "org.emftext.doc"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_efactory {
			__id = "org.emftext.language.efactory"
			identifier = new PlatformID {
				value = "org.emftext.language.efactory"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_googlecode_com_efactory_EFactory {
				__id = "_www_googlecode_com_efactory_EFactory"
				identifier = new PlatformID {
					value = "_www_googlecode_com_efactory_EFactory"
				}
				locator = new EFSLocator {
					value = "http://www.googlecode.com/efactory/EFactory"
				}
			}
				ownedEntities += new Service service_conformsTo__www_googlecode_com_efactory_EFactory {
					__id = "conformsTo__www_googlecode_com_efactory_EFactory"
					identifier = new PlatformID {
						value = "conformsTo__www_googlecode_com_efactory_EFactory"
					}
					locator = new EFSLocator {
						value = "http://www.googlecode.com/efactory/EFactory.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_emftext_language_efactory {
				__id = "org.emftext.language.efactory"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory"
				}
			}
			exports += new Package package_org_emftext_language_efactory_builder {
				__id = "org.emftext.language.efactory.builder"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.builder"
				}
			}
			exports += new Package package_org_emftext_language_efactory_impl {
				__id = "org.emftext.language.efactory.impl"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.impl"
				}
			}
			exports += new Package package_org_emftext_language_efactory_util {
				__id = "org.emftext.language.efactory.util"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.util"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_efactory_edit {
			__id = "org.emftext.language.efactory.edit"
			identifier = new PlatformID {
				value = "org.emftext.language.efactory.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_edit
				target = plugin_org_emftext_language_efactory
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_edit
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_edit
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_edit
				target = plugin_org_eclipse_emf_ecore_edit
			}
			exports += new Package package_org_emftext_language_efactory_provider {
				__id = "org.emftext.language.efactory.provider"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_efactory_editor {
			__id = "org.emftext.language.efactory.editor"
			identifier = new PlatformID {
				value = "org.emftext.language.efactory.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_editor
				target = plugin_org_emftext_language_efactory_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_editor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_editor
				target = plugin_org_eclipse_emf_ecore_edit
			}
			exports += new Package package_org_emftext_language_efactory_presentation {
				__id = "org.emftext.language.efactory.presentation"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.presentation"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_efactory_resource_efactory {
			__id = "org.emftext.language.efactory.resource.efactory"
			identifier = new PlatformID {
				value = "org.emftext.language.efactory.resource.efactory"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_emftext_access
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_emf_workspace
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_emftext_commons_antlr3_2_0
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory
				target = plugin_org_emftext_language_efactory
			}
			exports += new Package package_org_emftext_language_efactory_resource_efactory {
				__id = "org.emftext.language.efactory.resource.efactory"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.resource.efactory"
				}
			}
			exports += new Package package_org_emftext_language_efactory_resource_efactory_mopp {
				__id = "org.emftext.language.efactory.resource.efactory.mopp"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.resource.efactory.mopp"
				}
			}
			exports += new Package package_org_emftext_language_efactory_resource_efactory_ui {
				__id = "org.emftext.language.efactory.resource.efactory.ui"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.resource.efactory.ui"
				}
			}
			exports += new Package package_org_emftext_language_efactory_resource_efactory_util {
				__id = "org.emftext.language.efactory.resource.efactory.util"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.resource.efactory.util"
				}
			}
			exports += new Package package_org_emftext_language_efactory_resource_efactory_analysis {
				__id = "org.emftext.language.efactory.resource.efactory.analysis"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.resource.efactory.analysis"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_language_efactory_resource_efactory_post_processing {
			__id = "org.emftext.language.efactory.resource.efactory.post_processing"
			identifier = new PlatformID {
				value = "org.emftext.language.efactory.resource.efactory.post_processing"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.qualifier"
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory_post_processing
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory_post_processing
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory_post_processing
				target = plugin_org_emftext_language_efactory
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_resource_efactory_post_processing
				target = plugin_org_emftext_language_efactory_resource_efactory
			}
		}
		plugins += new Plugin plugin_org_emftext_language_efactory_samples_inherited_metamodel {
			__id = "org.emftext.language.efactory.samples.inherited.metamodel"
			identifier = new PlatformID {
				value = "org.emftext.language.efactory.samples.inherited.metamodel"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.qualifier"
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_samples_inherited_metamodel
				target = plugin_org_eclipse_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_samples_inherited_metamodel
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_samples_inherited_metamodel
				target = plugin_org_eclipse_emf_common_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_samples_inherited_metamodel
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.5.0'"
				maxVersion = "'2.5.0'"
			}
			ownedEntities += new Metamodel metamodel__generic_1_0 {
				__id = "_generic_1_0"
				identifier = new PlatformID {
					value = "_generic_1_0"
				}
				locator = new EFSLocator {
					value = "http://generic/1.0"
				}
			}
				ownedEntities += new Service service_conformsTo__generic_1_0 {
					__id = "conformsTo__generic_1_0"
					identifier = new PlatformID {
						value = "conformsTo__generic_1_0"
					}
					locator = new EFSLocator {
						value = "http://generic/1.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__specialized_1_0 {
				__id = "_specialized_1_0"
				identifier = new PlatformID {
					value = "_specialized_1_0"
				}
				locator = new EFSLocator {
					value = "http://specialized/1.0"
				}
			}
				ownedEntities += new Service service_conformsTo__specialized_1_0 {
					__id = "conformsTo__specialized_1_0"
					identifier = new PlatformID {
						value = "conformsTo__specialized_1_0"
					}
					locator = new EFSLocator {
						value = "http://specialized/1.0.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
		}
		plugins += new Plugin plugin_org_emftext_language_efactory_tests {
			__id = "org.emftext.language.efactory.tests"
			identifier = new PlatformID {
				value = "org.emftext.language.efactory.tests"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_tests
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_tests
				target = plugin_org_emftext_language_efactory
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_tests
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_tests
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_language_efactory_tests
				target = plugin_org_junit
			}
			exports += new Package package_org_emftext_language_efactory_tests {
				__id = "org.emftext.language.efactory.tests"
				identifier = new PlatformID {
					value = "org.emftext.language.efactory.tests"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk {
			__id = "org.emftext.sdk"
			identifier = new PlatformID {
				value = "org.emftext.sdk"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_emf_workspace
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_emftext_sdk_antlr3_2_0
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_emftext_sdk_concretesyntax
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_emftext_access
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_junit4
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_emftext_sdk_automaton
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_emftext_sdk {
				__id = "org.emftext.sdk"
				identifier = new PlatformID {
					value = "org.emftext.sdk"
				}
			}
			exports += new Package package_org_emftext_sdk_codegen {
				__id = "org.emftext.sdk.codegen"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen"
				}
			}
			exports += new Package package_org_emftext_sdk_codegen_composites {
				__id = "org.emftext.sdk.codegen.composites"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen.composites"
				}
			}
			exports += new Package package_org_emftext_sdk_codegen_util {
				__id = "org.emftext.sdk.codegen.util"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen.util"
				}
			}
			exports += new Package package_org_emftext_sdk_finders {
				__id = "org.emftext.sdk.finders"
				identifier = new PlatformID {
					value = "org.emftext.sdk.finders"
				}
			}
			exports += new Package package_org_emftext_sdk_regex {
				__id = "org.emftext.sdk.regex"
				identifier = new PlatformID {
					value = "org.emftext.sdk.regex"
				}
			}
			exports += new Package package_org_emftext_sdk_util {
				__id = "org.emftext.sdk.util"
				identifier = new PlatformID {
					value = "org.emftext.sdk.util"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_ant {
			__id = "org.emftext.sdk.ant"
			identifier = new PlatformID {
				value = "org.emftext.sdk.ant"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_apache_ant
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_emftext_sdk
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_emftext_sdk_antlr3_2_0
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_emftext_sdk_concretesyntax
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_emftext_sdk_concretesyntax_resource_cs
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_emftext_sdk_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ant
				target = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
			}
			exports += new Package package_org_emftext_sdk_ant {
				__id = "org.emftext.sdk.ant"
				identifier = new PlatformID {
					value = "org.emftext.sdk.ant"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_antlr3_2_0 {
			__id = "org.emftext.sdk.antlr3_2_0"
			identifier = new PlatformID {
				value = "org.emftext.sdk.antlr3_2_0"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0.201001072102"
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_antlr3_2_0
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_antlr {
				__id = "antlr"
				identifier = new PlatformID {
					value = "antlr"
				}
			}
			exports += new Package package_antlr_ASdebug {
				__id = "antlr.ASdebug"
				identifier = new PlatformID {
					value = "antlr.ASdebug"
				}
			}
			exports += new Package package_antlr_actions_cpp {
				__id = "antlr.actions.cpp"
				identifier = new PlatformID {
					value = "antlr.actions.cpp"
				}
			}
			exports += new Package package_antlr_actions_csharp {
				__id = "antlr.actions.csharp"
				identifier = new PlatformID {
					value = "antlr.actions.csharp"
				}
			}
			exports += new Package package_antlr_actions_java {
				__id = "antlr.actions.java"
				identifier = new PlatformID {
					value = "antlr.actions.java"
				}
			}
			exports += new Package package_antlr_actions_python {
				__id = "antlr.actions.python"
				identifier = new PlatformID {
					value = "antlr.actions.python"
				}
			}
			exports += new Package package_antlr_build {
				__id = "antlr.build"
				identifier = new PlatformID {
					value = "antlr.build"
				}
			}
			exports += new Package package_antlr_collections {
				__id = "antlr.collections"
				identifier = new PlatformID {
					value = "antlr.collections"
				}
			}
			exports += new Package package_antlr_collections_impl {
				__id = "antlr.collections.impl"
				identifier = new PlatformID {
					value = "antlr.collections.impl"
				}
			}
			exports += new Package package_antlr_debug {
				__id = "antlr.debug"
				identifier = new PlatformID {
					value = "antlr.debug"
				}
			}
			exports += new Package package_antlr_debug_misc {
				__id = "antlr.debug.misc"
				identifier = new PlatformID {
					value = "antlr.debug.misc"
				}
			}
			exports += new Package package_antlr_preprocessor {
				__id = "antlr.preprocessor"
				identifier = new PlatformID {
					value = "antlr.preprocessor"
				}
			}
			exports += new Package package_org_antlr {
				__id = "org.antlr"
				identifier = new PlatformID {
					value = "org.antlr"
				}
			}
			exports += new Package package_org_antlr_analysis {
				__id = "org.antlr.analysis"
				identifier = new PlatformID {
					value = "org.antlr.analysis"
				}
			}
			exports += new Package package_org_antlr_codegen {
				__id = "org.antlr.codegen"
				identifier = new PlatformID {
					value = "org.antlr.codegen"
				}
			}
			exports += new Package package_org_antlr_codegen_templates {
				__id = "org.antlr.codegen.templates"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_ActionScript {
				__id = "org.antlr.codegen.templates.ActionScript"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.ActionScript"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_C {
				__id = "org.antlr.codegen.templates.C"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.C"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_CPP {
				__id = "org.antlr.codegen.templates.CPP"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.CPP"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_CSharp {
				__id = "org.antlr.codegen.templates.CSharp"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.CSharp"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_CSharp2 {
				__id = "org.antlr.codegen.templates.CSharp2"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.CSharp2"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_CSharp3 {
				__id = "org.antlr.codegen.templates.CSharp3"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.CSharp3"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Delphi {
				__id = "org.antlr.codegen.templates.Delphi"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Delphi"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Java {
				__id = "org.antlr.codegen.templates.Java"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Java"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_JavaScript {
				__id = "org.antlr.codegen.templates.JavaScript"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.JavaScript"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_ObjC {
				__id = "org.antlr.codegen.templates.ObjC"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.ObjC"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Perl5 {
				__id = "org.antlr.codegen.templates.Perl5"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Perl5"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Python {
				__id = "org.antlr.codegen.templates.Python"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Python"
				}
			}
			exports += new Package package_org_antlr_codegen_templates_Ruby {
				__id = "org.antlr.codegen.templates.Ruby"
				identifier = new PlatformID {
					value = "org.antlr.codegen.templates.Ruby"
				}
			}
			exports += new Package package_org_antlr_grammar_v2 {
				__id = "org.antlr.grammar.v2"
				identifier = new PlatformID {
					value = "org.antlr.grammar.v2"
				}
			}
			exports += new Package package_org_antlr_grammar_v3 {
				__id = "org.antlr.grammar.v3"
				identifier = new PlatformID {
					value = "org.antlr.grammar.v3"
				}
			}
			exports += new Package package_org_antlr_misc {
				__id = "org.antlr.misc"
				identifier = new PlatformID {
					value = "org.antlr.misc"
				}
			}
			exports += new Package package_org_antlr_runtime3_2_0 {
				__id = "org.antlr.runtime3_2_0"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0"
				}
			}
			exports += new Package package_org_antlr_runtime3_2_0_debug {
				__id = "org.antlr.runtime3_2_0.debug"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0.debug"
				}
			}
			exports += new Package package_org_antlr_runtime3_2_0_misc {
				__id = "org.antlr.runtime3_2_0.misc"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0.misc"
				}
			}
			exports += new Package package_org_antlr_runtime3_2_0_tree {
				__id = "org.antlr.runtime3_2_0.tree"
				identifier = new PlatformID {
					value = "org.antlr.runtime3_2_0.tree"
				}
			}
			exports += new Package package_org_antlr_stringtemplate {
				__id = "org.antlr.stringtemplate"
				identifier = new PlatformID {
					value = "org.antlr.stringtemplate"
				}
			}
			exports += new Package package_org_antlr_stringtemplate_language {
				__id = "org.antlr.stringtemplate.language"
				identifier = new PlatformID {
					value = "org.antlr.stringtemplate.language"
				}
			}
			exports += new Package package_org_antlr_stringtemplate_misc {
				__id = "org.antlr.stringtemplate.misc"
				identifier = new PlatformID {
					value = "org.antlr.stringtemplate.misc"
				}
			}
			exports += new Package package_org_antlr_tool {
				__id = "org.antlr.tool"
				identifier = new PlatformID {
					value = "org.antlr.tool"
				}
			}
			exports += new Package package_org_antlr_tool_templates {
				__id = "org.antlr.tool.templates"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates"
				}
			}
			exports += new Package package_org_antlr_tool_templates_dot {
				__id = "org.antlr.tool.templates.dot"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates.dot"
				}
			}
			exports += new Package package_org_antlr_tool_templates_messages_formats {
				__id = "org.antlr.tool.templates.messages.formats"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates.messages.formats"
				}
			}
			exports += new Package package_org_antlr_tool_templates_messages_languages {
				__id = "org.antlr.tool.templates.messages.languages"
				identifier = new PlatformID {
					value = "org.antlr.tool.templates.messages.languages"
				}
			}
			exports += new Package package_org_emftext_sdk_antlr3_2_0 {
				__id = "org.emftext.sdk.antlr3_2_0"
				identifier = new PlatformID {
					value = "org.emftext.sdk.antlr3_2_0"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_automaton {
			__id = "org.emftext.sdk.automaton"
			identifier = new PlatformID {
				value = "org.emftext.sdk.automaton"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_automaton
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_automaton
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_dk_brics_automaton {
				__id = "dk.brics.automaton"
				identifier = new PlatformID {
					value = "dk.brics.automaton"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_codegen {
			__id = "org.emftext.sdk.codegen"
			identifier = new PlatformID {
				value = "org.emftext.sdk.codegen"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_emftext_sdk
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_emftext_sdk_antlr3_2_0
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_codegen
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_org_emftext_sdk_codegen {
				__id = "org.emftext.sdk.codegen"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen"
				}
			}
			exports += new Package package_org_emftext_sdk_codegen_creators {
				__id = "org.emftext.sdk.codegen.creators"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen.creators"
				}
			}
			exports += new Package package_org_emftext_sdk_codegen_generators {
				__id = "org.emftext.sdk.codegen.generators"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen.generators"
				}
			}
			exports += new Package package_org_emftext_sdk_codegen_generators_code_completion_helpers {
				__id = "org.emftext.sdk.codegen.generators.code_completion.helpers"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen.generators.code_completion.helpers"
				}
			}
			exports += new Package package_org_emftext_sdk_codegen_generators_ui {
				__id = "org.emftext.sdk.codegen.generators.ui"
				identifier = new PlatformID {
					value = "org.emftext.sdk.codegen.generators.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_concretesyntax {
			__id = "org.emftext.sdk.concretesyntax"
			identifier = new PlatformID {
				value = "org.emftext.sdk.concretesyntax"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			ownedEntities += new Metamodel metamodel__www_emftext_org_sdk_concretesyntax {
				__id = "_www_emftext_org_sdk_concretesyntax"
				identifier = new PlatformID {
					value = "_www_emftext_org_sdk_concretesyntax"
				}
				locator = new EFSLocator {
					value = "http://www.emftext.org/sdk/concretesyntax"
				}
			}
				ownedEntities += new Service service_conformsTo__www_emftext_org_sdk_concretesyntax {
					__id = "conformsTo__www_emftext_org_sdk_concretesyntax"
					identifier = new PlatformID {
						value = "conformsTo__www_emftext_org_sdk_concretesyntax"
					}
					locator = new EFSLocator {
						value = "http://www.emftext.org/sdk/concretesyntax.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_emftext_sdk_concretesyntax {
				__id = "org.emftext.sdk.concretesyntax"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax"
				}
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_impl {
				__id = "org.emftext.sdk.concretesyntax.impl"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.impl"
				}
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_util {
				__id = "org.emftext.sdk.concretesyntax.util"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.util"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_concretesyntax_edit {
			__id = "org.emftext.sdk.concretesyntax.edit"
			identifier = new PlatformID {
				value = "org.emftext.sdk.concretesyntax.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.v200911130906"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_edit
				target = plugin_org_emftext_sdk_concretesyntax
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_edit
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_edit
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_edit
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_edit
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_edit
				target = plugin_org_eclipse_emf_codegen_ecore_ui
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_provider {
				__id = "org.emftext.sdk.concretesyntax.provider"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_concretesyntax_resource_cs {
			__id = "org.emftext.sdk.concretesyntax.resource.cs"
			identifier = new PlatformID {
				value = "org.emftext.sdk.concretesyntax.resource.cs"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_emftext_access
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_emf_workspace
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_eclipse_ui_views
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_emftext_sdk_concretesyntax
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_emftext_sdk
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs
				target = plugin_org_emftext_sdk_antlr3_2_0
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_resource_cs {
				__id = "org.emftext.sdk.concretesyntax.resource.cs"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.resource.cs"
				}
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_resource_cs_analysis {
				__id = "org.emftext.sdk.concretesyntax.resource.cs.analysis"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.resource.cs.analysis"
				}
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_resource_cs_mopp {
				__id = "org.emftext.sdk.concretesyntax.resource.cs.mopp"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.resource.cs.mopp"
				}
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_resource_cs_mopp {
				__id = "org.emftext.sdk.concretesyntax.resource.cs.mopp"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.resource.cs.mopp"
				}
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_resource_cs_ui {
				__id = "org.emftext.sdk.concretesyntax.resource.cs.ui"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.resource.cs.ui"
				}
			}
			exports += new Package package_org_emftext_sdk_concretesyntax_resource_cs_util {
				__id = "org.emftext.sdk.concretesyntax.resource.cs.util"
				identifier = new PlatformID {
					value = "org.emftext.sdk.concretesyntax.resource.cs.util"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing {
			__id = "org.emftext.sdk.concretesyntax.resource.cs.post_processing"
			identifier = new PlatformID {
				value = "org.emftext.sdk.concretesyntax.resource.cs.post_processing"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_emftext_sdk_concretesyntax
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_emftext_sdk_concretesyntax_resource_cs
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_eclipse_emf_ecore_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_eclipse_emf_workspace
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_emftext_sdk_automaton
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_concretesyntax_resource_cs_post_processing
				target = plugin_org_emftext_sdk
			}
			exports += new Package package_org_emftext_sdk {
				__id = "org.emftext.sdk"
				identifier = new PlatformID {
					value = "org.emftext.sdk"
				}
			}
			exports += new Package package_org_emftext_sdk_syntax_analysis {
				__id = "org.emftext.sdk.syntax_analysis"
				identifier = new PlatformID {
					value = "org.emftext.sdk.syntax_analysis"
				}
			}
			exports += new Package package_org_emftext_sdk_syntax_annotations {
				__id = "org.emftext.sdk.syntax_annotations"
				identifier = new PlatformID {
					value = "org.emftext.sdk.syntax_annotations"
				}
			}
			exports += new Package package_org_emftext_sdk_syntax_extension {
				__id = "org.emftext.sdk.syntax_extension"
				identifier = new PlatformID {
					value = "org.emftext.sdk.syntax_extension"
				}
			}
		}
		plugins += new Plugin plugin_org_emftext_sdk_ui {
			__id = "org.emftext.sdk.ui"
			identifier = new PlatformID {
				value = "org.emftext.sdk.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.2.0.201001072102"
			}
			vendor = vendor_Software_Technology_Group___TU_Dresden_Germany
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_emftext_sdk
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_emftext_sdk_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_emftext_sdk_ui
				target = plugin_org_emftext_sdk_concretesyntax_resource_cs
			}
			exports += new Package package_org_emftext_sdk_ui {
				__id = "org.emftext.sdk.ui"
				identifier = new PlatformID {
					value = "org.emftext.sdk.ui"
				}
			}
			exports += new Package package_org_emftext_sdk_ui_actions {
				__id = "org.emftext.sdk.ui.actions"
				identifier = new PlatformID {
					value = "org.emftext.sdk.ui.actions"
				}
			}
			exports += new Package package_org_emftext_sdk_ui_jobs {
				__id = "org.emftext.sdk.ui.jobs"
				identifier = new PlatformID {
					value = "org.emftext.sdk.ui.jobs"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_compiler {
			__id = "org.kermeta.compiler"
			identifier = new PlatformID {
				value = "org.kermeta.compiler"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA___INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_kermeta_simk
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_emf_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_emf_codegen_ecore_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_emf_codegen_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_fr_irisa_triskell_kermeta_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_kermeta_merger
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_kermeta_compiler_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_apache_commons_logging
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.0.4'"
				maxVersion = "'1.0.4'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_kermeta_compiler_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_kermeta_framework_compiler_directives
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler
				target = plugin_org_kermeta_log4j_util
			}
			exports += new Package package_org_kermeta_compiler {
				__id = "org.kermeta.compiler"
				identifier = new PlatformID {
					value = "org.kermeta.compiler"
				}
			}
			exports += new Package package_org_kermeta_compiler_util {
				__id = "org.kermeta.compiler.util"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_compiler_common {
			__id = "org.kermeta.compiler.common"
			identifier = new PlatformID {
				value = "org.kermeta.compiler.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_common
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_common
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_common
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_common
				target = plugin_org_kermeta_log4j_util
			}
			exports += new Package package_org_kermeta_compiler_common {
				__id = "org.kermeta.compiler.common"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.common"
				}
			}
			exports += new Package package_org_kermeta_compiler_common_util {
				__id = "org.kermeta.compiler.common.util"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.common.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_compiler_generator {
			__id = "org.kermeta.compiler.generator"
			identifier = new PlatformID {
				value = "org.kermeta.compiler.generator"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_eclipse_emf_ecore_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_kermeta_simk
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_kermeta_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator
				target = plugin_org_kermeta_compiler_common
			}
			exports += new Package package_org_kermeta_compiler_generator_helper_model {
				__id = "org.kermeta.compiler.generator.helper.model"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.generator.helper.model"
				}
			}
			exports += new Package package_org_kermeta_compiler_generator_internal {
				__id = "org.kermeta.compiler.generator.internal"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.generator.internal"
				}
			}
			exports += new Package package_org_kermeta_compiler_generator_internal_actions {
				__id = "org.kermeta.compiler.generator.internal.actions"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.generator.internal.actions"
				}
			}
			exports += new Package package_org_kermeta_compiler_generator_internal_generators {
				__id = "org.kermeta.compiler.generator.internal.generators"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.generator.internal.generators"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_compiler_generator_emftemplates {
			__id = "org.kermeta.compiler.generator.emftemplates"
			identifier = new PlatformID {
				value = "org.kermeta.compiler.generator.emftemplates"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator_emftemplates
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_generator_emftemplates
				target = plugin_org_eclipse_core_runtime
			}
			exports += new Package package_org_kermeta_compiler_generator_emftemplates {
				__id = "org.kermeta.compiler.generator.emftemplates"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.generator.emftemplates"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_compiler_ui {
			__id = "org.kermeta.compiler.ui"
			identifier = new PlatformID {
				value = "org.kermeta.compiler.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_eclipse_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_eclipse_emf_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_merger
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_compiler
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_compiler_generator
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_simk
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_io_loader
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_compiler_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_structurecompiler_compiled
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_compiler_ui
				target = plugin_org_kermeta_log4j_util
			}
			exports += new Package package_org_kermeta_compiler_ui {
				__id = "org.kermeta.compiler.ui"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.ui"
				}
			}
			exports += new Package package_org_kermeta_compiler_ui_popup_actions {
				__id = "org.kermeta.compiler.ui.popup.actions"
				identifier = new PlatformID {
					value = "org.kermeta.compiler.ui.popup.actions"
				}
			}
			exports += new Package package_org_eclipse_jface_action {
				__id = "org.eclipse.jface.action"
				identifier = new PlatformID {
					value = "org.eclipse.jface.action"
				}
			}
			exports += new Package package_org_eclipse_ui_ {
				__id = "org.eclipse.ui'"
				identifier = new PlatformID {
					value = "org.eclipse.ui'"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_emfutils_models_ui {
			__id = "org.kermeta.emfutils.models.ui"
			identifier = new PlatformID {
				value = "org.kermeta.emfutils.models.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.1"
			}
			vendor = vendor_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_emfutils_models_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_emfutils_models_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_emfutils_models_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_emfutils_models_ui
				target = plugin_org_eclipse_emf_ecore
			}
			exports += new Package package_org_kermeta_emfutils_models_ui {
				__id = "org.kermeta.emfutils.models.ui"
				identifier = new PlatformID {
					value = "org.kermeta.emfutils.models.ui"
				}
			}
			exports += new Package package_org_kermeta_emfutils_models_ui_popup_actions {
				__id = "org.kermeta.emfutils.models.ui.popup.actions"
				identifier = new PlatformID {
					value = "org.kermeta.emfutils.models.ui.popup.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_framework_compiler_directives {
			__id = "org.kermeta.framework.compiler.directives"
			identifier = new PlatformID {
				value = "org.kermeta.framework.compiler.directives"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_framework_compiler_directives
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_framework_compiler_directives
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_org_kermeta_generator {
			__id = "org.kermeta.generator"
			identifier = new PlatformID {
				value = "org.kermeta.generator"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_emf_codegen_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_jdt_launching
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_jdt_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_generator
				target = plugin_org_eclipse_ui
			}
			exports += new Package package_org_kermeta_generator {
				__id = "org.kermeta.generator"
				identifier = new PlatformID {
					value = "org.kermeta.generator"
				}
			}
			exports += new Package package_org_kermeta_generator_internal {
				__id = "org.kermeta.generator.internal"
				identifier = new PlatformID {
					value = "org.kermeta.generator.internal"
				}
			}
			exports += new Package package_org_kermeta_generator_jet {
				__id = "org.kermeta.generator.jet"
				identifier = new PlatformID {
					value = "org.kermeta.generator.jet"
				}
			}
			exports += new Package package_org_kermeta_generator_util {
				__id = "org.kermeta.generator.util"
				identifier = new PlatformID {
					value = "org.kermeta.generator.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_ket_texteditor {
			__id = "org.kermeta.ket.texteditor"
			identifier = new PlatformID {
				value = "org.kermeta.ket.texteditor"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_fr_irisa_triskell_kermeta_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_fr_irisa_triskell_kermeta_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_org_eclipse_debug_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_fr_irisa_triskell_kermeta_io
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_fr_irisa_triskell_kermeta
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_fr_irisa_triskell_kermeta_kpm
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_ket_texteditor
				target = plugin_fr_irisa_triskell_kermeta_ui
			}
			exports += new Package package_org_kermeta_ket_texteditor {
				__id = "org.kermeta.ket.texteditor"
				identifier = new PlatformID {
					value = "org.kermeta.ket.texteditor"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_kmlogo_tutorial {
			__id = "org.kermeta.kmlogo.tutorial"
			identifier = new PlatformID {
				value = "org.kermeta.kmlogo.tutorial"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			ownedEntities += new Document {
				__id = "org.kermeta.kmlogo.tutorial"
				identifier = new PlatformID {
					value = "org.kermeta.kmlogo.tutorial"
				}
				locator = new EFSLocator {
					value = "org.kermeta.kmlogo.tutorial"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kmlogo_tutorial
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kmlogo_tutorial
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kmlogo_tutorial
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kmlogo_tutorial
				target = plugin_org_eclipse_ui_cheatsheets
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kmlogo_tutorial
				target = plugin_fr_irisa_triskell_eclipse_util
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_core_model {
			__id = "org.kermeta.kompose.core.model"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.core.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_IRISA___CSU
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.1'"
				maxVersion = "'2.4.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.1'"
				maxVersion = "'2.4.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model
				target = plugin_fr_irisa_triskell_traceability_model
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model
				target = plugin_org_eclipse_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.1'"
				maxVersion = "'3.4.1'"
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kompose {
				__id = "_www_kermeta_org_kompose"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kompose"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kompose"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kompose {
					__id = "conformsTo__www_kermeta_org_kompose"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kompose"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kompose.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_kompose {
				__id = "kompose"
				identifier = new PlatformID {
					value = "kompose"
				}
			}
			exports += new Package package_kompose_impl {
				__id = "kompose.impl"
				identifier = new PlatformID {
					value = "kompose.impl"
				}
			}
			exports += new Package package_kompose_util {
				__id = "kompose.util"
				identifier = new PlatformID {
					value = "kompose.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_core_model_edit {
			__id = "org.kermeta.kompose.core.model.edit"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.core.model.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_edit
				target = plugin_org_kermeta_kompose_core_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_kompose_provider {
				__id = "kompose.provider"
				identifier = new PlatformID {
					value = "kompose.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_core_model_editor {
			__id = "org.kermeta.kompose.core.model.editor"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.core.model.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_www_example_org
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_editor
				target = plugin_org_kermeta_kompose_core_model_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_editor
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.1'"
				maxVersion = "'2.4.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_model_editor
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_kompose_presentation {
				__id = "kompose.presentation"
				identifier = new PlatformID {
					value = "kompose.presentation"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_core_parser {
			__id = "org.kermeta.kompose.core.parser"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.core.parser"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_parser
				target = plugin_org_eclipse_emf
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_parser
				target = plugin_org_eclipse_emf_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.0'"
				maxVersion = "'2.4.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_parser
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.1'"
				maxVersion = "'2.4.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_parser
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.1'"
				maxVersion = "'2.4.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_parser
				target = plugin_org_kermeta_kompose_core_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_core_parser
				target = plugin_org_antlr_antlr3
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.1.1'"
				maxVersion = "'3.1.1'"
			}
			exports += new Package package_org_kermeta_kompose_core_parser {
				__id = "org.kermeta.kompose.core.parser"
				identifier = new PlatformID {
					value = "org.kermeta.kompose.core.parser"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_samples_ui {
			__id = "org.kermeta.kompose.samples.ui"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.samples.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_samples_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_samples_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_samples_ui
				target = plugin_org_eclipse_core_resources
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_ecore {
			__id = "org.kermeta.kompose.specialization.ecore"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.ecore"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_kermeta_org
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore
				target = plugin_org_kermeta_kompose_core_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_ecore_samples {
			__id = "org.kermeta.kompose.specialization.ecore.samples"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.ecore.samples"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.0.5"
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_ecore_test {
			__id = "org.kermeta.kompose.specialization.ecore.test"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.ecore.test"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore_test
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore_test
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_ecore_ui {
			__id = "org.kermeta.kompose.specialization.ecore.ui"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.ecore.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_ecore_ui
				target = plugin_org_eclipse_core_resources
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_rdbschema {
			__id = "org.kermeta.kompose.specialization.rdbschema"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.rdbschema"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_kermeta_org
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema
				target = plugin_org_eclipse_core_expressions
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'3.4.0'"
				maxVersion = "'3.4.0'"
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_rdbschema_samples {
			__id = "org.kermeta.kompose.specialization.rdbschema.samples"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.rdbschema.samples"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.0.5"
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_rdbschema_test {
			__id = "org.kermeta.kompose.specialization.rdbschema.test"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.rdbschema.test"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema_test
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema_test
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_rdbschema_ui {
			__id = "org.kermeta.kompose.specialization.rdbschema.ui"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization.rdbschema.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_rdbschema_ui
				target = plugin_org_eclipse_core_resources
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_specialization_wizard {
			__id = "org.kermeta.kompose.specialization_wizard"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.specialization_wizard"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_triskell
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_wizard
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_wizard
				target = plugin_org_eclipse_pde_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_wizard
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_wizard
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_wizard
				target = plugin_org_eclipse_jdt
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_specialization_wizard
				target = plugin_org_eclipse_jdt_core
			}
		}
		plugins += new Plugin plugin_org_kermeta_kompose_ui {
			__id = "org.kermeta.kompose.ui"
			identifier = new PlatformID {
				value = "org.kermeta.kompose.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.0.5"
			}
			vendor = vendor_IRISA___CSU
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_eclipse_core_filesystem
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'2.4.1'"
				maxVersion = "'2.4.1'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_kermeta_kompose_core_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_kompose_ui
				target = plugin_org_kermeta_kompose_core_parser
			}
			exports += new Package package_org_kermeta_kompose_ui_console {
				__id = "org.kermeta.kompose.ui.console"
				identifier = new PlatformID {
					value = "org.kermeta.kompose.ui.console"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_log4j_util {
			__id = "org.kermeta.log4j.util"
			identifier = new PlatformID {
				value = "org.kermeta.log4j.util"
			}
			state = : "State.active"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_log4j_util
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_log4j_util
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_log4j_util
				target = plugin_org_apache_log4j
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_log4j_util
				target = plugin_org_eclipse_core_resources
			}
			exports += new Package package_org_apache_commons_logging {
				__id = "org.apache.commons.logging"
				identifier = new PlatformID {
					value = "org.apache.commons.logging"
				}
			}
			exports += new Package package_org_apache_commons_logging_impl {
				__id = "org.apache.commons.logging.impl"
				identifier = new PlatformID {
					value = "org.apache.commons.logging.impl"
				}
			}
			exports += new Package package_org_kermeta_log4j_util {
				__id = "org.kermeta.log4j.util"
				identifier = new PlatformID {
					value = "org.kermeta.log4j.util"
				}
			}
			exports += new Package package_org_kermeta_log4j_util_plugin {
				__id = "org.kermeta.log4j.util.plugin"
				identifier = new PlatformID {
					value = "org.kermeta.log4j.util.plugin"
				}
			}
			exports += new Package package_org_kermeta_log4j_util_preferences {
				__id = "org.kermeta.log4j.util.preferences"
				identifier = new PlatformID {
					value = "org.kermeta.log4j.util.preferences"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_log4j_util
				target = package_org_apache_log4j
			}
		}
		plugins += new Plugin plugin_org_kermeta_simk {
			__id = "org.kermeta.simk"
			identifier = new PlatformID {
				value = "org.kermeta.simk"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_simk
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_simk
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_simk
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_simk
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_simk
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_simk
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_simk
				target = plugin_org_eclipse_ui_ide
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_simk {
				__id = "_www_kermeta_org_simk"
				identifier = new PlatformID {
					value = "_www_kermeta_org_simk"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/simk"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_simk {
					__id = "conformsTo__www_kermeta_org_simk"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_simk"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/simk.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_kermeta_simk {
				__id = "org.kermeta.simk"
				identifier = new PlatformID {
					value = "org.kermeta.simk"
				}
			}
			exports += new Package package_org_kermeta_simk_impl {
				__id = "org.kermeta.simk.impl"
				identifier = new PlatformID {
					value = "org.kermeta.simk.impl"
				}
			}
			exports += new Package package_org_kermeta_simk_presentation {
				__id = "org.kermeta.simk.presentation"
				identifier = new PlatformID {
					value = "org.kermeta.simk.presentation"
				}
			}
			exports += new Package package_org_kermeta_simk_provider {
				__id = "org.kermeta.simk.provider"
				identifier = new PlatformID {
					value = "org.kermeta.simk.provider"
				}
			}
			exports += new Package package_org_kermeta_simk_util {
				__id = "org.kermeta.simk.util"
				identifier = new PlatformID {
					value = "org.kermeta.simk.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_sintaks {
			__id = "org.kermeta.sintaks"
			identifier = new PlatformID {
				value = "org.kermeta.sintaks"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.3.200910271327"
			}
			vendor = vendor_IRISA_INRIA___MIPS
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_swt
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_org_kermeta_sintaks_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks
				target = plugin_fr_uha_mips_sintaks_trace
			}
			exports += new Package package_org_kermeta_sintaks {
				__id = "org.kermeta.sintaks"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks"
				}
			}
			exports += new Package package_org_kermeta_sintaks_errors {
				__id = "org.kermeta.sintaks.errors"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.errors"
				}
			}
			exports += new Package package_org_kermeta_sintaks_lexer {
				__id = "org.kermeta.sintaks.lexer"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.lexer"
				}
			}
			exports += new Package package_org_kermeta_sintaks_main {
				__id = "org.kermeta.sintaks.main"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.main"
				}
			}
			exports += new Package package_org_kermeta_sintaks_parser {
				__id = "org.kermeta.sintaks.parser"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.parser"
				}
			}
			exports += new Package package_org_kermeta_sintaks_parser_ll {
				__id = "org.kermeta.sintaks.parser.ll"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.parser.ll"
				}
			}
			exports += new Package package_org_kermeta_sintaks_printer {
				__id = "org.kermeta.sintaks.printer"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.printer"
				}
			}
			exports += new Package package_org_kermeta_sintaks_registering {
				__id = "org.kermeta.sintaks.registering"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.registering"
				}
			}
			exports += new Package package_org_kermeta_sintaks_subject {
				__id = "org.kermeta.sintaks.subject"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.subject"
				}
			}
			exports += new Package package_org_kermeta_sintaks_subject_operation {
				__id = "org.kermeta.sintaks.subject.operation"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.subject.operation"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_sintaks_model {
			__id = "org.kermeta.sintaks.model"
			identifier = new PlatformID {
				value = "org.kermeta.sintaks.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.3.200910271327"
			}
			vendor = vendor_IRISA_INRIA___MIPS
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_Sts {
				__id = "_www_kermeta_org_Sts"
				identifier = new PlatformID {
					value = "_www_kermeta_org_Sts"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/Sts"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_Sts {
					__id = "conformsTo__www_kermeta_org_Sts"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_Sts"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/Sts.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_kermeta_sintaks_sts {
				__id = "org.kermeta.sintaks.sts"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.sts"
				}
			}
			exports += new Package package_org_kermeta_sintaks_sts_impl {
				__id = "org.kermeta.sintaks.sts.impl"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.sts.impl"
				}
			}
			exports += new Package package_org_kermeta_sintaks_sts_util {
				__id = "org.kermeta.sintaks.sts.util"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.sts.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_sintaks_model_edit {
			__id = "org.kermeta.sintaks.model.edit"
			identifier = new PlatformID {
				value = "org.kermeta.sintaks.model.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.3.200910271327"
			}
			vendor = vendor_IRISA_INRIA___MIPS
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_edit
				target = plugin_org_eclipse_emf_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_edit
				target = plugin_org_kermeta_sintaks_model
			}
			exports += new Package package_org_kermeta_sintaks_sts_provider {
				__id = "org.kermeta.sintaks.sts.provider"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.sts.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_sintaks_model_editor {
			__id = "org.kermeta.sintaks.model.editor"
			identifier = new PlatformID {
				value = "org.kermeta.sintaks.model.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.3.200910271327"
			}
			vendor = vendor_IRISA_INRIA___MIPS
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_editor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_editor
				target = plugin_org_kermeta_sintaks_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_model_editor
				target = plugin_org_kermeta_sintaks_model_edit
			}
			exports += new Package package_org_kermeta_sintaks_sts_presentation {
				__id = "org.kermeta.sintaks.sts.presentation"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.sts.presentation"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_sintaks_texteditor {
			__id = "org.kermeta.sintaks.texteditor"
			identifier = new PlatformID {
				value = "org.kermeta.sintaks.texteditor"
			}
			state = : "State.active"
			version = new Version {
				value = "0.1.3.200910271327"
			}
			vendor = vendor_IRISA_INRIA___MIPS
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_eclipse_ui_editors
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_eclipse_ui_workbench_texteditor
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_kermeta_sintaks
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_kermeta_sintaks_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_kermeta_sintaks_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_texteditor
				target = plugin_org_kermeta_log4j_util
			}
			exports += new Package package_org_kermeta_sintaks_texteditor {
				__id = "org.kermeta.sintaks.texteditor"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.texteditor"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_sintaks_ui {
			__id = "org.kermeta.sintaks.ui"
			identifier = new PlatformID {
				value = "org.kermeta.sintaks.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.3.200910271327"
			}
			vendor = vendor_IRISA_INRIA___MIPS
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_swt
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_ui_ide
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_sintaks_ui
				target = plugin_org_kermeta_sintaks
			}
			exports += new Package package_org_kermeta_sintaks_ui {
				__id = "org.kermeta.sintaks.ui"
				identifier = new PlatformID {
					value = "org.kermeta.sintaks.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_structurecompiler_compiled {
			__id = "org.kermeta.structurecompiler.compiled"
			identifier = new PlatformID {
				value = "org.kermeta.structurecompiler.compiled"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_org_eclipse_emf_codegen
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_fr_irisa_triskell_kermeta_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_org_eclipse_emf_ecoretools_registration
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_org_kermeta_simk
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_fr_irisa_triskell_traceability_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_structurecompiler_compiled
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_km2ecore_kermeta_temp_uri {
				__id = "_www_kermeta_org_km2ecore_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_km2ecore_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/km2ecore/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_km2ecore_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_km2ecore_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_km2ecore_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/km2ecore/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_km2ecore_common_kermeta_temp_uri {
				__id = "_www_kermeta_org_km2ecore_common_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_km2ecore_common_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/km2ecore/common/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_km2ecore_common_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_km2ecore_common_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_km2ecore_common_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/km2ecore/common/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_km2ecore_common_exception_kermeta_temp_uri {
				__id = "_www_kermeta_org_km2ecore_common_exception_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_km2ecore_common_exception_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/km2ecore/common/exception/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_km2ecore_common_exception_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_km2ecore_common_exception_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_km2ecore_common_exception_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/km2ecore/common/exception/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_km2ecore_helper_java_kermeta_temp_uri {
				__id = "_www_kermeta_org_km2ecore_helper_java_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_km2ecore_helper_java_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/km2ecore/helper/java/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_km2ecore_helper_java_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_km2ecore_helper_java_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_km2ecore_helper_java_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/km2ecore/helper/java/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_km2ecore_helper_ecore_kermeta_temp_uri {
				__id = "_www_kermeta_org_km2ecore_helper_ecore_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_km2ecore_helper_ecore_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/km2ecore/helper/ecore/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_km2ecore_helper_ecore_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_km2ecore_helper_ecore_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_km2ecore_helper_ecore_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/km2ecore/helper/ecore/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_km2ecore_helper_kermeta_kermeta_temp_uri {
				__id = "_www_kermeta_org_km2ecore_helper_kermeta_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_km2ecore_helper_kermeta_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/km2ecore/helper/kermeta/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_km2ecore_helper_kermeta_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_km2ecore_helper_kermeta_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_km2ecore_helper_kermeta_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/km2ecore/helper/kermeta/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_utils_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_utils_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_utils_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/utils/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_utils_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_utils_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_utils_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/utils/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_language_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_structure_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_structure_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/structure/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_structure_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/structure/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_language_behavior_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/language/behavior/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_standard_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_standard_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_standard_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/standard/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_standard_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_standard_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_standard_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/standard/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_kunit_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_kunit_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_kunit_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/kunit/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_kunit_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_kunit_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_kunit_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/kunit/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_io_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_io_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_io_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/io/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_io_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_io_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_io_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/io/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_persistence_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_persistence_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_persistence_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/persistence/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_persistence_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_persistence_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_persistence_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/persistence/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_ecore_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_ecore_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_ecore_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/ecore/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_ecore_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_ecore_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_ecore_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/ecore/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_exceptions_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_exceptions_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_exceptions_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/exceptions/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_exceptions_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_exceptions_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_exceptions_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/exceptions/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_1_2_0__kermeta_interpreter_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_1_2_0__kermeta_interpreter_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_1_2_0__kermeta_interpreter_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/interpreter/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_interpreter_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_interpreter_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_1_2_0__kermeta_interpreter_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/1_2_0//kermeta/interpreter/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_kermeta_compiler_kermeta_temp_uri {
				__id = "_www_kermeta_org_kermeta_compiler_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_kermeta_compiler_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/kermeta/compiler/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_kermeta_compiler_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_kermeta_compiler_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_kermeta_compiler_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/kermeta/compiler/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_simk_kermeta_temp_uri {
				__id = "_www_kermeta_org_simk_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_simk_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/simk/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_simk_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_simk_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_simk_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/simk/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_emf_2002_Ecore_kermeta_temp_uri {
				__id = "_www_eclipse_org_emf_2002_Ecore_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_eclipse_org_emf_2002_Ecore_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/emf/2002/Ecore/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_emf_2002_Ecore_kermeta_temp_uri {
					__id = "conformsTo__www_eclipse_org_emf_2002_Ecore_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_emf_2002_Ecore_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/emf/2002/Ecore/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_Traceability_kermeta_temp_uri {
				__id = "_www_kermeta_org_Traceability_kermeta_temp_uri"
				identifier = new PlatformID {
					value = "_www_kermeta_org_Traceability_kermeta_temp_uri"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/Traceability/kermeta_temp_uri"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_Traceability_kermeta_temp_uri {
					__id = "conformsTo__www_kermeta_org_Traceability_kermeta_temp_uri"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_Traceability_kermeta_temp_uri"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/Traceability/kermeta_temp_uri.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_ecore {
				__id = "ecore"
				identifier = new PlatformID {
					value = "ecore"
				}
			}
			exports += new Package package_ecore_impl {
				__id = "ecore.impl"
				identifier = new PlatformID {
					value = "ecore.impl"
				}
			}
			exports += new Package package_ecore_util {
				__id = "ecore.util"
				identifier = new PlatformID {
					value = "ecore.util"
				}
			}
			exports += new Package package_kermeta {
				__id = "kermeta"
				identifier = new PlatformID {
					value = "kermeta"
				}
			}
			exports += new Package package_kermeta_compiler {
				__id = "kermeta.compiler"
				identifier = new PlatformID {
					value = "kermeta.compiler"
				}
			}
			exports += new Package package_kermeta_compiler_impl {
				__id = "kermeta.compiler.impl"
				identifier = new PlatformID {
					value = "kermeta.compiler.impl"
				}
			}
			exports += new Package package_kermeta_compiler_runner {
				__id = "kermeta.compiler.runner"
				identifier = new PlatformID {
					value = "kermeta.compiler.runner"
				}
			}
			exports += new Package package_kermeta_compiler_util {
				__id = "kermeta.compiler.util"
				identifier = new PlatformID {
					value = "kermeta.compiler.util"
				}
			}
			exports += new Package package_kermeta_ecore {
				__id = "kermeta.ecore"
				identifier = new PlatformID {
					value = "kermeta.ecore"
				}
			}
			exports += new Package package_kermeta_ecore_impl {
				__id = "kermeta.ecore.impl"
				identifier = new PlatformID {
					value = "kermeta.ecore.impl"
				}
			}
			exports += new Package package_kermeta_ecore_util {
				__id = "kermeta.ecore.util"
				identifier = new PlatformID {
					value = "kermeta.ecore.util"
				}
			}
			exports += new Package package_kermeta_exceptions {
				__id = "kermeta.exceptions"
				identifier = new PlatformID {
					value = "kermeta.exceptions"
				}
			}
			exports += new Package package_kermeta_exceptions_impl {
				__id = "kermeta.exceptions.impl"
				identifier = new PlatformID {
					value = "kermeta.exceptions.impl"
				}
			}
			exports += new Package package_kermeta_exceptions_util {
				__id = "kermeta.exceptions.util"
				identifier = new PlatformID {
					value = "kermeta.exceptions.util"
				}
			}
			exports += new Package package_kermeta_impl {
				__id = "kermeta.impl"
				identifier = new PlatformID {
					value = "kermeta.impl"
				}
			}
			exports += new Package package_kermeta_interpreter {
				__id = "kermeta.interpreter"
				identifier = new PlatformID {
					value = "kermeta.interpreter"
				}
			}
			exports += new Package package_kermeta_interpreter_impl {
				__id = "kermeta.interpreter.impl"
				identifier = new PlatformID {
					value = "kermeta.interpreter.impl"
				}
			}
			exports += new Package package_kermeta_interpreter_util {
				__id = "kermeta.interpreter.util"
				identifier = new PlatformID {
					value = "kermeta.interpreter.util"
				}
			}
			exports += new Package package_kermeta_io {
				__id = "kermeta.io"
				identifier = new PlatformID {
					value = "kermeta.io"
				}
			}
			exports += new Package package_kermeta_io_impl {
				__id = "kermeta.io.impl"
				identifier = new PlatformID {
					value = "kermeta.io.impl"
				}
			}
			exports += new Package package_kermeta_io_util {
				__id = "kermeta.io.util"
				identifier = new PlatformID {
					value = "kermeta.io.util"
				}
			}
			exports += new Package package_kermeta_kunit {
				__id = "kermeta.kunit"
				identifier = new PlatformID {
					value = "kermeta.kunit"
				}
			}
			exports += new Package package_kermeta_kunit_impl {
				__id = "kermeta.kunit.impl"
				identifier = new PlatformID {
					value = "kermeta.kunit.impl"
				}
			}
			exports += new Package package_kermeta_kunit_util {
				__id = "kermeta.kunit.util"
				identifier = new PlatformID {
					value = "kermeta.kunit.util"
				}
			}
			exports += new Package package_kermeta_language {
				__id = "kermeta.language"
				identifier = new PlatformID {
					value = "kermeta.language"
				}
			}
			exports += new Package package_kermeta_language_behavior {
				__id = "kermeta.language.behavior"
				identifier = new PlatformID {
					value = "kermeta.language.behavior"
				}
			}
			exports += new Package package_kermeta_language_behavior_impl {
				__id = "kermeta.language.behavior.impl"
				identifier = new PlatformID {
					value = "kermeta.language.behavior.impl"
				}
			}
			exports += new Package package_kermeta_language_behavior_util {
				__id = "kermeta.language.behavior.util"
				identifier = new PlatformID {
					value = "kermeta.language.behavior.util"
				}
			}
			exports += new Package package_kermeta_language_impl {
				__id = "kermeta.language.impl"
				identifier = new PlatformID {
					value = "kermeta.language.impl"
				}
			}
			exports += new Package package_kermeta_language_structure {
				__id = "kermeta.language.structure"
				identifier = new PlatformID {
					value = "kermeta.language.structure"
				}
			}
			exports += new Package package_kermeta_language_structure_impl {
				__id = "kermeta.language.structure.impl"
				identifier = new PlatformID {
					value = "kermeta.language.structure.impl"
				}
			}
			exports += new Package package_kermeta_language_structure_util {
				__id = "kermeta.language.structure.util"
				identifier = new PlatformID {
					value = "kermeta.language.structure.util"
				}
			}
			exports += new Package package_kermeta_language_util {
				__id = "kermeta.language.util"
				identifier = new PlatformID {
					value = "kermeta.language.util"
				}
			}
			exports += new Package package_kermeta_persistence {
				__id = "kermeta.persistence"
				identifier = new PlatformID {
					value = "kermeta.persistence"
				}
			}
			exports += new Package package_kermeta_persistence_impl {
				__id = "kermeta.persistence.impl"
				identifier = new PlatformID {
					value = "kermeta.persistence.impl"
				}
			}
			exports += new Package package_kermeta_persistence_util {
				__id = "kermeta.persistence.util"
				identifier = new PlatformID {
					value = "kermeta.persistence.util"
				}
			}
			exports += new Package package_kermeta_standard {
				__id = "kermeta.standard"
				identifier = new PlatformID {
					value = "kermeta.standard"
				}
			}
			exports += new Package package_kermeta_standard_impl {
				__id = "kermeta.standard.impl"
				identifier = new PlatformID {
					value = "kermeta.standard.impl"
				}
			}
			exports += new Package package_kermeta_standard_util {
				__id = "kermeta.standard.util"
				identifier = new PlatformID {
					value = "kermeta.standard.util"
				}
			}
			exports += new Package package_kermeta_util {
				__id = "kermeta.util"
				identifier = new PlatformID {
					value = "kermeta.util"
				}
			}
			exports += new Package package_kermeta_utils {
				__id = "kermeta.utils"
				identifier = new PlatformID {
					value = "kermeta.utils"
				}
			}
			exports += new Package package_kermeta_utils_impl {
				__id = "kermeta.utils.impl"
				identifier = new PlatformID {
					value = "kermeta.utils.impl"
				}
			}
			exports += new Package package_kermeta_utils_util {
				__id = "kermeta.utils.util"
				identifier = new PlatformID {
					value = "kermeta.utils.util"
				}
			}
			exports += new Package package_km2ecore {
				__id = "km2ecore"
				identifier = new PlatformID {
					value = "km2ecore"
				}
			}
			exports += new Package package_km2ecore_common {
				__id = "km2ecore.common"
				identifier = new PlatformID {
					value = "km2ecore.common"
				}
			}
			exports += new Package package_km2ecore_common_exception {
				__id = "km2ecore.common.exception"
				identifier = new PlatformID {
					value = "km2ecore.common.exception"
				}
			}
			exports += new Package package_km2ecore_common_exception_impl {
				__id = "km2ecore.common.exception.impl"
				identifier = new PlatformID {
					value = "km2ecore.common.exception.impl"
				}
			}
			exports += new Package package_km2ecore_common_exception_util {
				__id = "km2ecore.common.exception.util"
				identifier = new PlatformID {
					value = "km2ecore.common.exception.util"
				}
			}
			exports += new Package package_km2ecore_common_impl {
				__id = "km2ecore.common.impl"
				identifier = new PlatformID {
					value = "km2ecore.common.impl"
				}
			}
			exports += new Package package_km2ecore_common_util {
				__id = "km2ecore.common.util"
				identifier = new PlatformID {
					value = "km2ecore.common.util"
				}
			}
			exports += new Package package_km2ecore_helper_ecore {
				__id = "km2ecore.helper.ecore"
				identifier = new PlatformID {
					value = "km2ecore.helper.ecore"
				}
			}
			exports += new Package package_km2ecore_helper_ecore_impl {
				__id = "km2ecore.helper.ecore.impl"
				identifier = new PlatformID {
					value = "km2ecore.helper.ecore.impl"
				}
			}
			exports += new Package package_km2ecore_helper_ecore_util {
				__id = "km2ecore.helper.ecore.util"
				identifier = new PlatformID {
					value = "km2ecore.helper.ecore.util"
				}
			}
			exports += new Package package_km2ecore_helper_java {
				__id = "km2ecore.helper.java"
				identifier = new PlatformID {
					value = "km2ecore.helper.java"
				}
			}
			exports += new Package package_km2ecore_helper_java_impl {
				__id = "km2ecore.helper.java.impl"
				identifier = new PlatformID {
					value = "km2ecore.helper.java.impl"
				}
			}
			exports += new Package package_km2ecore_helper_java_util {
				__id = "km2ecore.helper.java.util"
				identifier = new PlatformID {
					value = "km2ecore.helper.java.util"
				}
			}
			exports += new Package package_km2ecore_helper_kermeta {
				__id = "km2ecore.helper.kermeta"
				identifier = new PlatformID {
					value = "km2ecore.helper.kermeta"
				}
			}
			exports += new Package package_km2ecore_helper_kermeta_impl {
				__id = "km2ecore.helper.kermeta.impl"
				identifier = new PlatformID {
					value = "km2ecore.helper.kermeta.impl"
				}
			}
			exports += new Package package_km2ecore_helper_kermeta_util {
				__id = "km2ecore.helper.kermeta.util"
				identifier = new PlatformID {
					value = "km2ecore.helper.kermeta.util"
				}
			}
			exports += new Package package_km2ecore_impl {
				__id = "km2ecore.impl"
				identifier = new PlatformID {
					value = "km2ecore.impl"
				}
			}
			exports += new Package package_km2ecore_util {
				__id = "km2ecore.util"
				identifier = new PlatformID {
					value = "km2ecore.util"
				}
			}
			exports += new Package package_simk {
				__id = "simk"
				identifier = new PlatformID {
					value = "simk"
				}
			}
			exports += new Package package_simk_impl {
				__id = "simk.impl"
				identifier = new PlatformID {
					value = "simk.impl"
				}
			}
			exports += new Package package_simk_util {
				__id = "simk.util"
				identifier = new PlatformID {
					value = "simk.util"
				}
			}
			exports += new Package package_traceability {
				__id = "traceability"
				identifier = new PlatformID {
					value = "traceability"
				}
			}
			exports += new Package package_traceability_impl {
				__id = "traceability.impl"
				identifier = new PlatformID {
					value = "traceability.impl"
				}
			}
			exports += new Package package_traceability_util {
				__id = "traceability.util"
				identifier = new PlatformID {
					value = "traceability.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_trek_model {
			__id = "org.kermeta.trek.model"
			identifier = new PlatformID {
				value = "org.kermeta.trek.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model
				target = plugin_org_eclipse_emf_ecore
			}
			ownedEntities += new Metamodel metamodel__www_kermeta_org_trek {
				__id = "_www_kermeta_org_trek"
				identifier = new PlatformID {
					value = "_www_kermeta_org_trek"
				}
				locator = new EFSLocator {
					value = "http://www.kermeta.org/trek"
				}
			}
				ownedEntities += new Service service_conformsTo__www_kermeta_org_trek {
					__id = "conformsTo__www_kermeta_org_trek"
					identifier = new PlatformID {
						value = "conformsTo__www_kermeta_org_trek"
					}
					locator = new EFSLocator {
						value = "http://www.kermeta.org/trek.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_kermeta_trek {
				__id = "org.kermeta.trek"
				identifier = new PlatformID {
					value = "org.kermeta.trek"
				}
			}
			exports += new Package package_org_kermeta_trek_impl {
				__id = "org.kermeta.trek.impl"
				identifier = new PlatformID {
					value = "org.kermeta.trek.impl"
				}
			}
			exports += new Package package_org_kermeta_trek_util {
				__id = "org.kermeta.trek.util"
				identifier = new PlatformID {
					value = "org.kermeta.trek.util"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_trek_model_edit {
			__id = "org.kermeta.trek.model.edit"
			identifier = new PlatformID {
				value = "org.kermeta.trek.model.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_edit
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_edit
				target = plugin_org_kermeta_trek_model
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_edit
				target = plugin_org_eclipse_emf_edit
			}
			exports += new Package package_org_kermeta_trek_provider {
				__id = "org.kermeta.trek.provider"
				identifier = new PlatformID {
					value = "org.kermeta.trek.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_trek_model_editor {
			__id = "org.kermeta.trek.model.editor"
			identifier = new PlatformID {
				value = "org.kermeta.trek.model.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_editor
				target = plugin_org_kermeta_trek_model_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_editor
				target = plugin_org_eclipse_emf_edit_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_model_editor
				target = plugin_org_eclipse_ui_ide
			}
			exports += new Package package_org_kermeta_trek_presentation {
				__id = "org.kermeta.trek.presentation"
				identifier = new PlatformID {
					value = "org.kermeta.trek.presentation"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_trek_ui {
			__id = "org.kermeta.trek.ui"
			identifier = new PlatformID {
				value = "org.kermeta.trek.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_trek_ui
				target = plugin_org_kermeta_trek_model_edit
			}
			exports += new Package package_org_kermeta_trek_ui_views {
				__id = "org.kermeta.trek.ui.views"
				identifier = new PlatformID {
					value = "org.kermeta.trek.ui.views"
				}
			}
			exports += new Package package_org_kermeta_trek_ui_views_nav {
				__id = "org.kermeta.trek.ui.views.nav"
				identifier = new PlatformID {
					value = "org.kermeta.trek.ui.views.nav"
				}
			}
			exports += new Package package_org_kermeta_trek_ui_views_nav_operations {
				__id = "org.kermeta.trek.ui.views.nav.operations"
				identifier = new PlatformID {
					value = "org.kermeta.trek.ui.views.nav.operations"
				}
			}
			exports += new Package package_org_kermeta_trek_ui_wizards {
				__id = "org.kermeta.trek.ui.wizards"
				identifier = new PlatformID {
					value = "org.kermeta.trek.ui.wizards"
				}
			}
			exports += new Package package_org_kermeta_trek_ui_wizards_kusecase {
				__id = "org.kermeta.trek.ui.wizards.kusecase"
				identifier = new PlatformID {
					value = "org.kermeta.trek.ui.wizards.kusecase"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_uml2_profile_marte {
			__id = "org.kermeta.uml2.profile.marte"
			identifier = new PlatformID {
				value = "org.kermeta.uml2.profile.marte"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.0"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte
				target = plugin_org_eclipse_emf_ecore
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte
				target = plugin_org_kermeta_uml2
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte
				target = plugin_org_kermeta_uml2_profiles_model
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
		}
		plugins += new Plugin plugin_org_kermeta_uml2_profile_marte_ui {
			__id = "org.kermeta.uml2.profile.marte.ui"
			identifier = new PlatformID {
				value = "org.kermeta.uml2.profile.marte.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.1.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_fr_irisa_triskell_kermeta
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_org_eclipse_ui_console
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.3.0-4.0.0)'"
				maxVersion = "'[3.3.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_fr_irisa_triskell_kermeta_interpreter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_org_kermeta_uml2_profile_marte
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[0.0.1-1.0.0)'"
				maxVersion = "'[0.0.1-1.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_org_kermeta_uml2_profiles_model
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.2.0-2.0.0)'"
				maxVersion = "'[1.2.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profile_marte_ui
				target = plugin_org_apache_commons_logging
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.0.1-2.0.0)'"
				maxVersion = "'[1.0.1-2.0.0)'"
			}
			exports += new Package package_org_kermeta_uml2_profile_marte_ui {
				__id = "org.kermeta.uml2.profile.marte.ui"
				identifier = new PlatformID {
					value = "org.kermeta.uml2.profile.marte.ui"
				}
			}
			exports += new Package package_org_kermeta_uml2_profile_marte_ui_popup_actions {
				__id = "org.kermeta.uml2.profile.marte.ui.popup.actions"
				identifier = new PlatformID {
					value = "org.kermeta.uml2.profile.marte.ui.popup.actions"
				}
			}
		}
		plugins += new Plugin plugin_org_odf_ctrte_nfp {
			__id = "org.odf.ctrte.nfp"
			identifier = new PlatformID {
				value = "org.odf.ctrte.nfp"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_CEA_List___Thales_Research___Technology
			dependencies += new VersionDependency {
				source = plugin_org_odf_ctrte_nfp
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_odf_ctrte_nfp
				target = plugin_org_eclipse_jface_text
			}
			dependencies += new VersionDependency {
				source = plugin_org_odf_ctrte_nfp
				target = plugin_org_eclipse_uml2_uml_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_odf_ctrte_nfp
				target = plugin_com_cea_nfp_parsers
			}
			dependencies += new VersionDependency {
				source = plugin_org_odf_ctrte_nfp
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_odf_ctrte_nfp
				target = plugin_org_eclipse_ui_views_properties_tabbed
			}
			exports += new Package package_com_cea_nfp {
				__id = "com.cea.nfp"
				identifier = new PlatformID {
					value = "com.cea.nfp"
				}
			}
			exports += new Package package_com_cea_nfp_popup_actions {
				__id = "com.cea.nfp.popup.actions"
				identifier = new PlatformID {
					value = "com.cea.nfp.popup.actions"
				}
			}
			exports += new Package package_model {
				__id = "model"
				identifier = new PlatformID {
					value = "model"
				}
			}
		}
		plugins += new Plugin plugin_org_openembedd_launchexec {
			__id = "org.openembedd.launchexec"
			identifier = new PlatformID {
				value = "org.openembedd.launchexec"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_INRIA_OpenEmbeDD_integration_team
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_launchexec
				target = plugin_org_eclipse_ui_console
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_launchexec
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_launchexec
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_launchexec
				target = plugin_org_eclipse_core_resources
			}
			exports += new Package package_org_openembedd_launchexec {
				__id = "org.openembedd.launchexec"
				identifier = new PlatformID {
					value = "org.openembedd.launchexec"
				}
			}
			exports += new Package package_org_osgi_framework {
				__id = "org.osgi.framework"
				identifier = new PlatformID {
					value = "org.osgi.framework"
				}
			}
			exports += new Package package_org_eclipse_ui_plugin_ {
				__id = "org.eclipse.ui.plugin'"
				identifier = new PlatformID {
					value = "org.eclipse.ui.plugin'"
				}
			}
		}
		plugins += new Plugin plugin_org_openembedd_logo_csm_tutorial {
			__id = "org.openembedd.logo.csm.tutorial"
			identifier = new PlatformID {
				value = "org.openembedd.logo.csm.tutorial"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_OpenEmbeDD_integration_team
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_logo_csm_tutorial
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_logo_csm_tutorial
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_logo_csm_tutorial
				target = plugin_org_openembedd_wizards
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_logo_csm_tutorial
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_logo_csm_tutorial
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_logo_csm_tutorial
				target = plugin_org_kermeta_kmlogo_tutorial
			}
			exports += new Package package_org_openembedd_logo_csm_tutorial {
				__id = "org.openembedd.logo.csm.tutorial"
				identifier = new PlatformID {
					value = "org.openembedd.logo.csm.tutorial"
				}
			}
			exports += new Package package_org_openembedd_logo_csm_tutorial_wizards {
				__id = "org.openembedd.logo.csm.tutorial.wizards"
				identifier = new PlatformID {
					value = "org.openembedd.logo.csm.tutorial.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_openembedd_marteintegration_documentation {
			__id = "org.openembedd.marteintegration.documentation"
			identifier = new PlatformID {
				value = "org.openembedd.marteintegration.documentation"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.2"
			}
			vendor = vendor_OpenEmbeDD_integration_team
			ownedEntities += new Document {
				__id = "org.openembedd.marteintegration.documentation"
				identifier = new PlatformID {
					value = "org.openembedd.marteintegration.documentation"
				}
				locator = new EFSLocator {
					value = "org.openembedd.marteintegration.documentation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_marteintegration_documentation
				target = plugin_org_eclipse_help
			}
		}
		plugins += new Plugin plugin_org_openembedd_wizards {
			__id = "org.openembedd.wizards"
			identifier = new PlatformID {
				value = "org.openembedd.wizards"
			}
			state = : "State.resolved"
			version = new Version {
				value = "0.4.1"
			}
			vendor = vendor_INRIA___OpenEmbeDD
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_wizards
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_wizards
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_wizards
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_openembedd_wizards
				target = plugin_org_eclipse_ui
			}
			exports += new Package package_org_openembedd_wizards {
				__id = "org.openembedd.wizards"
				identifier = new PlatformID {
					value = "org.openembedd.wizards"
				}
			}
		}
		plugins += new Plugin plugin_org_osgi_cartography {
			__id = "org.osgi.cartography"
			identifier = new PlatformID {
				value = "org.osgi.cartography"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.0"
			}
			vendor = vendor_INRIA_Rennes_Bretagne_Atlantique
			ownedEntities += new Metamodel metamodel_OSGi {
				__id = "OSGi"
				identifier = new PlatformID {
					value = "OSGi"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/gmt/am3/2009/OSGi"
				}
			}
				ownedEntities += new Service service_conformsTo_OSGi {
					__id = "conformsTo_OSGi"
					identifier = new PlatformID {
						value = "conformsTo_OSGi"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/gmt/am3/2009/OSGi.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
		}
		plugins += new Plugin plugin_org_sat4j_core {
			__id = "org.sat4j.core"
			identifier = new PlatformID {
				value = "org.sat4j.core"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.1.0.v20090520"
			}
			vendor = vendor_CRIL_CNRS_UMR_8188___Universite_d_Artois
			exports += new Package package_org_sat4j {
				__id = "org.sat4j"
				identifier = new PlatformID {
					value = "org.sat4j"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_core {
				__id = "org.sat4j.core"
				identifier = new PlatformID {
					value = "org.sat4j.core"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat {
				__id = "org.sat4j.minisat"
				identifier = new PlatformID {
					value = "org.sat4j.minisat"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_constraints {
				__id = "org.sat4j.minisat.constraints"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.constraints"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_constraints_card {
				__id = "org.sat4j.minisat.constraints.card"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.constraints.card"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_constraints_cnf {
				__id = "org.sat4j.minisat.constraints.cnf"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.constraints.cnf"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_core {
				__id = "org.sat4j.minisat.core"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.core"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_learning {
				__id = "org.sat4j.minisat.learning"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.learning"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_orders {
				__id = "org.sat4j.minisat.orders"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.orders"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_restarts {
				__id = "org.sat4j.minisat.restarts"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.restarts"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_minisat_uip {
				__id = "org.sat4j.minisat.uip"
				identifier = new PlatformID {
					value = "org.sat4j.minisat.uip"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_opt {
				__id = "org.sat4j.opt"
				identifier = new PlatformID {
					value = "org.sat4j.opt"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_reader {
				__id = "org.sat4j.reader"
				identifier = new PlatformID {
					value = "org.sat4j.reader"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_specs {
				__id = "org.sat4j.specs"
				identifier = new PlatformID {
					value = "org.sat4j.specs"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_tools {
				__id = "org.sat4j.tools"
				identifier = new PlatformID {
					value = "org.sat4j.tools"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_tools_xplain {
				__id = "org.sat4j.tools.xplain"
				identifier = new PlatformID {
					value = "org.sat4j.tools.xplain"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
		}
		plugins += new Plugin plugin_org_sat4j_pb {
			__id = "org.sat4j.pb"
			identifier = new PlatformID {
				value = "org.sat4j.pb"
			}
			state = : "State.resolved"
			version = new Version {
				value = "2.1.0.v20090520"
			}
			vendor = vendor_CRIL_CNRS_UMR_8188___Universite_d_Artois
			dependencies += new VersionDependency {
				source = plugin_org_sat4j_pb
				target = plugin_org_sat4j_core
			}
			exports += new Package package_org_sat4j_pb {
				__id = "org.sat4j.pb"
				identifier = new PlatformID {
					value = "org.sat4j.pb"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_pb_constraints {
				__id = "org.sat4j.pb.constraints"
				identifier = new PlatformID {
					value = "org.sat4j.pb.constraints"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_pb_constraints_pb {
				__id = "org.sat4j.pb.constraints.pb"
				identifier = new PlatformID {
					value = "org.sat4j.pb.constraints.pb"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_pb_core {
				__id = "org.sat4j.pb.core"
				identifier = new PlatformID {
					value = "org.sat4j.pb.core"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_pb_orders {
				__id = "org.sat4j.pb.orders"
				identifier = new PlatformID {
					value = "org.sat4j.pb.orders"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_pb_reader {
				__id = "org.sat4j.pb.reader"
				identifier = new PlatformID {
					value = "org.sat4j.pb.reader"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
			exports += new Package package_org_sat4j_pb_tools {
				__id = "org.sat4j.pb.tools"
				identifier = new PlatformID {
					value = "org.sat4j.pb.tools"
				}
				version = new Version {
					value = "2.1.0.v20090520"
				}
			}
		}
		plugins += new Plugin plugin_org_w3c_css_sac {
			__id = "org.w3c.css.sac"
			identifier = new PlatformID {
				value = "org.w3c.css.sac"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.3.0.v200805290154"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_w3c_css_sac {
				__id = "org.w3c.css.sac"
				identifier = new PlatformID {
					value = "org.w3c.css.sac"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
			exports += new Package package_org_w3c_css_sac_helpers {
				__id = "org.w3c.css.sac.helpers"
				identifier = new PlatformID {
					value = "org.w3c.css.sac.helpers"
				}
				version = new Version {
					value = "1.3.0"
				}
			}
		}
		plugins += new Plugin plugin_org_w3c_dom_events {
			__id = "org.w3c.dom.events"
			identifier = new PlatformID {
				value = "org.w3c.dom.events"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.0.draft20060413_v200905140418"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_w3c_dom_events {
				__id = "org.w3c.dom.events"
				identifier = new PlatformID {
					value = "org.w3c.dom.events"
				}
				version = new Version {
					value = "3.0.0"
				}
			}
		}
		plugins += new Plugin plugin_org_w3c_dom_smil {
			__id = "org.w3c.dom.smil"
			identifier = new PlatformID {
				value = "org.w3c.dom.smil"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.0.1.v200903091627"
			}
			vendor = vendor_Eclipse_org
			exports += new Package package_org_w3c_dom_smil {
				__id = "org.w3c.dom.smil"
				identifier = new PlatformID {
					value = "org.w3c.dom.smil"
				}
				version = new Version {
					value = "1.0.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_w3c_dom_smil
				target = package_org_w3c_dom
			}
			dependencies += new VersionDependency {
				source = plugin_org_w3c_dom_smil
				target = package_org_w3c_dom_events
				closure = : "IntervalClosure.includeExclude"
				minVersion = "3.0.0"
				maxVersion = "4.0.0"
			}
		}
		plugins += new Plugin plugin_org_w3c_dom_svg {
			__id = "org.w3c.dom.svg"
			identifier = new PlatformID {
				value = "org.w3c.dom.svg"
			}
			state = : "State.resolved"
			version = new Version {
				value = "1.1.0.v200806040011"
			}
			vendor = vendor_Eclipse_org
			dependencies += new VersionDependency {
				source = plugin_org_w3c_dom_svg
				target = plugin_org_w3c_dom_smil
				closure = : "IntervalClosure.includeExclude"
				minVersion = "1.0.0"
				maxVersion = "1.1.0"
			}
			exports += new Package package_org_w3c_dom_svg {
				__id = "org.w3c.dom.svg"
				identifier = new PlatformID {
					value = "org.w3c.dom.svg"
				}
				version = new Version {
					value = "1.1.0"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_w3c_dom_svg
				target = package_org_w3c_dom
			}
		}
	}

	features += new Feature feature_org_eclipse_xpand_examples {
		__id = "org.eclipse.xpand.examples"
		identifier = new PlatformID {
			value = "org.eclipse.xpand.examples"
		}
		version = new Version {
			value = "0.7.2.v200908120436"
		}
		provider = vendor_Eclipse_Modeling_Project
		description = new Description {
			name = "description"
			text = "Xpand Examples (Incubation)"
		}
		plugins += new Plugin plugin_org_eclipse_xpand_examples {
			__id = "org.eclipse.xpand.examples"
			identifier = new PlatformID {
				value = "org.eclipse.xpand.examples"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_emf_generic_editor {
			__id = "org.eclipse.emf.generic.editor"
			identifier = new PlatformID {
				value = "org.eclipse.emf.generic.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "0.7.2.v200908120436"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_emf_ecore_editor
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_ui_forms
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_jface_databinding
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.2.0'"
				maxVersion = "'1.2.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_emf_databinding_edit
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_xtend
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_xtend_typesystem_emf
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_jdt_core
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_xtend_shared_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_emf_generic_editor
				target = plugin_org_eclipse_emf_ecore_xmi
			}
			exports += new Package package_org_eclipse_emf_editor {
				__id = "org.eclipse.emf.editor"
				identifier = new PlatformID {
					value = "org.eclipse.emf.editor"
				}
			}
			exports += new Package package_org_eclipse_emf_editor_extxpt {
				__id = "org.eclipse.emf.editor.extxpt"
				identifier = new PlatformID {
					value = "org.eclipse.emf.editor.extxpt"
				}
			}
			exports += new Package package_org_eclipse_emf_editor_provider {
				__id = "org.eclipse.emf.editor.provider"
				identifier = new PlatformID {
					value = "org.eclipse.emf.editor.provider"
				}
			}
			exports += new Package package_org_eclipse_emf_editor_ui {
				__id = "org.eclipse.emf.editor.ui"
				identifier = new PlatformID {
					value = "org.eclipse.emf.editor.ui"
				}
			}
			exports += new Package package_org_eclipse_emf_editor_ui_binding {
				__id = "org.eclipse.emf.editor.ui.binding"
				identifier = new PlatformID {
					value = "org.eclipse.emf.editor.ui.binding"
				}
			}
		}
	}

	features += new Feature feature_org_eclipse_uml2 {
		__id = "org.eclipse.uml2"
		identifier = new PlatformID {
			value = "org.eclipse.uml2"
		}
		version = new Version {
			value = "3.0.1.v200908281330"
		}
		provider = vendor_Eclipse_Modeling_Project
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright (c) 2003, 2009 IBM Corporation, Embarcadero Technologies, and others. All rights reserved.   This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "Unified Modeling Language 2.x"
		}
		plugins += new Plugin plugin_org_eclipse_uml2 {
			__id = "org.eclipse.uml2"
			identifier = new PlatformID {
				value = "org.eclipse.uml2"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
		}
		plugins += new Plugin plugin_org_eclipse_uml2_codegen_ecore {
			__id = "org.eclipse.uml2.codegen.ecore"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.codegen.ecore"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.5.0.v200905151700"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.3.0-3.0.0)'"
				maxVersion = "'[2.3.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore
				target = plugin_org_eclipse_emf_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-2.6.0)'"
				maxVersion = "'[2.5.0-2.6.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_uml2_1_1_0_GenModel {
				__id = "_www_eclipse_org_uml2_1_1_0_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_uml2_1_1_0_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/uml2/1.1.0/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_uml2_1_1_0_GenModel {
					__id = "conformsTo__www_eclipse_org_uml2_1_1_0_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_uml2_1_1_0_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/uml2/1.1.0/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_uml2_2_2_0_GenModel {
				__id = "_www_eclipse_org_uml2_2_2_0_GenModel"
				identifier = new PlatformID {
					value = "_www_eclipse_org_uml2_2_2_0_GenModel"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/uml2/2.2.0/GenModel"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_uml2_2_2_0_GenModel {
					__id = "conformsTo__www_eclipse_org_uml2_2_2_0_GenModel"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_uml2_2_2_0_GenModel"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/uml2/2.2.0/GenModel.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_uml2_codegen_ecore {
				__id = "org.eclipse.uml2.codegen.ecore"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_genmodel {
				__id = "org.eclipse.uml2.codegen.ecore.genmodel"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.genmodel"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_genmodel_generator {
				__id = "org.eclipse.uml2.codegen.ecore.genmodel.generator"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.genmodel.generator"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_genmodel_impl {
				__id = "org.eclipse.uml2.codegen.ecore.genmodel.impl"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.genmodel.impl"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_genmodel_util {
				__id = "org.eclipse.uml2.codegen.ecore.genmodel.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.genmodel.util"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_templates_edit {
				__id = "org.eclipse.uml2.codegen.ecore.templates.edit"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.templates.edit"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_templates_model {
				__id = "org.eclipse.uml2.codegen.ecore.templates.model"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.templates.model"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_templates_model_tests {
				__id = "org.eclipse.uml2.codegen.ecore.templates.model.tests"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.templates.model.tests"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_codegen_ecore_ui {
			__id = "org.eclipse.uml2.codegen.ecore.ui"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.codegen.ecore.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.5.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore_ui
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore_ui
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore_ui
				target = plugin_org_eclipse_jdt_core
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore_ui
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-2.6.0)'"
				maxVersion = "'[2.5.0-2.6.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore_ui
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_codegen_ecore_ui
				target = plugin_org_eclipse_uml2_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.5.0-2.0.0)'"
				maxVersion = "'[1.5.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_genmodel_provider {
				__id = "org.eclipse.uml2.codegen.ecore.genmodel.provider"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.genmodel.provider"
				}
			}
			exports += new Package package_org_eclipse_uml2_codegen_ecore_ui {
				__id = "org.eclipse.uml2.codegen.ecore.ui"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.codegen.ecore.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_common {
			__id = "org.eclipse.uml2.common"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.common"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.5.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_common
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_common
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_uml2_common {
				__id = "org.eclipse.uml2.common"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.common"
				}
			}
			exports += new Package package_org_eclipse_uml2_common_util {
				__id = "org.eclipse.uml2.common.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.common.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_common_edit {
			__id = "org.eclipse.uml2.common.edit"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.common.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.5.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_common_edit
				target = plugin_org_eclipse_uml2_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.5.0-2.0.0)'"
				maxVersion = "'[1.5.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_common_edit
				target = plugin_org_eclipse_emf_ecore_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_common_edit
				target = plugin_org_eclipse_emf_ecore_change
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_common_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_uml2_common_edit_command {
				__id = "org.eclipse.uml2.common.edit.command"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.common.edit.command"
				}
			}
			exports += new Package package_org_eclipse_uml2_common_edit_domain {
				__id = "org.eclipse.uml2.common.edit.domain"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.common.edit.domain"
				}
			}
			exports += new Package package_org_eclipse_uml2_common_edit_provider {
				__id = "org.eclipse.uml2.common.edit.provider"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.common.edit.provider"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_uml {
			__id = "org.eclipse.uml2.uml"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.uml"
			}
			state = : "State.active"
			version = new Version {
				value = "3.0.1.v200908281330"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml
				target = plugin_org_eclipse_emf_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml
				target = plugin_org_eclipse_uml2_common
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.5.0-2.0.0)'"
				maxVersion = "'[1.5.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml
				target = plugin_org_eclipse_emf_mapping_ecore2xml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_uml2_2_0_0_UML {
				__id = "_www_eclipse_org_uml2_2_0_0_UML"
				identifier = new PlatformID {
					value = "_www_eclipse_org_uml2_2_0_0_UML"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/uml2/2.0.0/UML"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_uml2_2_0_0_UML {
					__id = "conformsTo__www_eclipse_org_uml2_2_0_0_UML"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_uml2_2_0_0_UML"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/uml2/2.0.0/UML.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_uml2_2_1_0_UML {
				__id = "_www_eclipse_org_uml2_2_1_0_UML"
				identifier = new PlatformID {
					value = "_www_eclipse_org_uml2_2_1_0_UML"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/uml2/2.1.0/UML"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_uml2_2_1_0_UML {
					__id = "conformsTo__www_eclipse_org_uml2_2_1_0_UML"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_uml2_2_1_0_UML"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/uml2/2.1.0/UML.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			ownedEntities += new Metamodel metamodel__www_eclipse_org_uml2_3_0_0_UML {
				__id = "_www_eclipse_org_uml2_3_0_0_UML"
				identifier = new PlatformID {
					value = "_www_eclipse_org_uml2_3_0_0_UML"
				}
				locator = new EFSLocator {
					value = "http://www.eclipse.org/uml2/3.0.0/UML"
				}
			}
				ownedEntities += new Service service_conformsTo__www_eclipse_org_uml2_3_0_0_UML {
					__id = "conformsTo__www_eclipse_org_uml2_3_0_0_UML"
					identifier = new PlatformID {
						value = "conformsTo__www_eclipse_org_uml2_3_0_0_UML"
					}
					locator = new EFSLocator {
						value = "http://www.eclipse.org/uml2/3.0.0/UML.metamodel"
					}
					metadata += new Metadata {
						key = "category"
						value = "metamodel"
					}
				}
			exports += new Package package_org_eclipse_uml2_uml {
				__id = "org.eclipse.uml2.uml"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_internal_impl {
				__id = "org.eclipse.uml2.uml.internal.impl"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.internal.impl"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_internal_operations {
				__id = "org.eclipse.uml2.uml.internal.operations"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.internal.operations"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_internal_resource {
				__id = "org.eclipse.uml2.uml.internal.resource"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.internal.resource"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_resource {
				__id = "org.eclipse.uml2.uml.resource"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.resource"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_util {
				__id = "org.eclipse.uml2.uml.util"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.util"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_uml_ecore_exporter {
			__id = "org.eclipse.uml2.uml.ecore.exporter"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.uml.ecore.exporter"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.3.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project_
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_exporter
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_exporter
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_exporter
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_exporter
				target = plugin_org_eclipse_emf_exporter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-2.6.0)'"
				maxVersion = "'[2.5.0-2.6.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_exporter
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-2.6.0)'"
				maxVersion = "'[2.5.0-2.6.0)'"
			}
			exports += new Package package_org_eclipse_uml2_uml_ecore_exporter {
				__id = "org.eclipse.uml2.uml.ecore.exporter"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.ecore.exporter"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ecore_exporter_ui {
				__id = "org.eclipse.uml2.uml.ecore.exporter.ui"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.ecore.exporter.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_uml_ecore_importer {
			__id = "org.eclipse.uml2.uml.ecore.importer"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.uml.ecore.importer"
			}
			state = : "State.starting"
			version = new Version {
				value = "2.3.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_eclipse_uml2_codegen_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.5.0-2.0.0)'"
				maxVersion = "'[1.5.0-2.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_eclipse_emf_importer
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-2.6.0)'"
				maxVersion = "'[2.5.0-2.6.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_eclipse_emf_codegen_ecore_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-2.6.0)'"
				maxVersion = "'[2.5.0-2.6.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_eclipse_emf_ant
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.4.0-3.0.0)'"
				maxVersion = "'[2.4.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_ecore_importer
				target = plugin_org_apache_ant
			}
			exports += new Package package_org_eclipse_uml2_uml_ecore_importer {
				__id = "org.eclipse.uml2.uml.ecore.importer"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.ecore.importer"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ecore_importer_taskdefs {
				__id = "org.eclipse.uml2.uml.ecore.importer.taskdefs"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.ecore.importer.taskdefs"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_ecore_importer_ui {
				__id = "org.eclipse.uml2.uml.ecore.importer.ui"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.ecore.importer.ui"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_uml_edit {
			__id = "org.eclipse.uml2.uml.edit"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.uml.edit"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_edit
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_edit
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_edit
				target = plugin_org_eclipse_emf_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_edit
				target = plugin_org_eclipse_uml2_common_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.5.0-2.0.0)'"
				maxVersion = "'[1.5.0-2.0.0)'"
			}
			exports += new Package package_org_eclipse_uml2_uml_edit {
				__id = "org.eclipse.uml2.uml.edit"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.edit"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_edit_providers {
				__id = "org.eclipse.uml2.uml.edit.providers"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.edit.providers"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_uml_editor {
			__id = "org.eclipse.uml2.uml.editor"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.uml.editor"
			}
			state = : "State.starting"
			version = new Version {
				value = "3.0.0.v200905041045"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_editor
				target = plugin_org_eclipse_core_runtime
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_editor
				target = plugin_org_eclipse_core_resources
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_editor
				target = plugin_org_eclipse_uml2_uml_edit
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_editor
				target = plugin_org_eclipse_emf_ecore_xmi
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_editor
				target = plugin_org_eclipse_emf_edit_ui
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[2.5.0-3.0.0)'"
				maxVersion = "'[2.5.0-3.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_editor
				target = plugin_org_eclipse_ui_ide
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.5.0-4.0.0)'"
				maxVersion = "'[3.5.0-4.0.0)'"
			}
			exports += new Package package_org_eclipse_uml2_uml_editor {
				__id = "org.eclipse.uml2.uml.editor"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.editor"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_editor_actions {
				__id = "org.eclipse.uml2.uml.editor.actions"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.editor.actions"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_editor_dialogs {
				__id = "org.eclipse.uml2.uml.editor.dialogs"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.editor.dialogs"
				}
			}
			exports += new Package package_org_eclipse_uml2_uml_editor_presentation {
				__id = "org.eclipse.uml2.uml.editor.presentation"
				identifier = new PlatformID {
					value = "org.eclipse.uml2.uml.editor.presentation"
				}
			}
		}
		plugins += new Plugin plugin_org_eclipse_uml2_uml_resources {
			__id = "org.eclipse.uml2.uml.resources"
			identifier = new PlatformID {
				value = "org.eclipse.uml2.uml.resources"
			}
			state = : "State.resolved"
			version = new Version {
				value = "3.0.0.v200906011111"
			}
			vendor = vendor_Eclipse_Modeling_Project
			dependencies += new VersionDependency {
				source = plugin_org_eclipse_uml2_uml_resources
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
		}
		sites += site__download_eclipse_org_modeling_mdt_updates_
	}

	features += new Feature feature_org_kermeta_uml2 {
		__id = "org.kermeta.uml2"
		identifier = new PlatformID {
			value = "org.kermeta.uml2"
		}
		version = new Version {
			value = "1.3.2"
		}
		provider = vendor_IRISA_INRIA
		license = license__www_example_com_license
		copyright = new Copyright {
			name = "_www_eclipse_org_legal_epl_v10_html"
			text = "Copyright : IRISA / INRIA / Universite de Rennes 1. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html"
			locator = new URLLocator {
				value = "http://www.eclipse.org/legal/epl-v10.html"
			}
		}
		description = new Description {
			name = "description"
			text = "A Model Development Kit dedicated to UML."
		}
		plugins += new Plugin plugin_org_kermeta_uml2_profiles_model {
			__id = "org.kermeta.uml2.profiles.model"
			identifier = new PlatformID {
				value = "org.kermeta.uml2.profiles.model"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model
				target = plugin_org_junit4
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model
				target = plugin_org_eclipse_uml2_uml
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[3.0.0-4.0.0)'"
				maxVersion = "'[3.0.0-4.0.0)'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model
				target = plugin_fr_irisa_triskell_kermeta_interpreter
			}
			exports += new Package package_org_kermeta_uml2_profiles_kermeta_runtime_basetypes {
				__id = "org.kermeta.uml2.profiles.kermeta.runtime.basetypes"
				identifier = new PlatformID {
					value = "org.kermeta.uml2.profiles.kermeta.runtime.basetypes"
				}
			}
			exports += new Package package_org_kermeta_uml2_profiles_model_plugin {
				__id = "org.kermeta.uml2.profiles.model.plugin"
				identifier = new PlatformID {
					value = "org.kermeta.uml2.profiles.model.plugin"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_uml2 {
			__id = "org.kermeta.uml2"
			identifier = new PlatformID {
				value = "org.kermeta.uml2"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_eclipse_uml2
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_eclipse_uml2_common
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_eclipse_uml2_uml
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_kermeta_language_mdk
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_eclipse_jface
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_fr_irisa_triskell_eclipse_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_apache_commons_logging
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_org_kermeta_log4j_util
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2
				target = plugin_fr_irisa_triskell_kermeta
			}
			exports += new Package package_org_kermeta_uml2 {
				__id = "org.kermeta.uml2"
				identifier = new PlatformID {
					value = "org.kermeta.uml2"
				}
			}
		}
		plugins += new Plugin plugin_org_kermeta_uml2_documentation {
			__id = "org.kermeta.uml2.documentation"
			identifier = new PlatformID {
				value = "org.kermeta.uml2.documentation"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.0"
			}
			vendor = vendor_IRISA_INRIA
			ownedEntities += new Document {
				__id = "org.kermeta.uml2.documentation"
				identifier = new PlatformID {
					value = "org.kermeta.uml2.documentation"
				}
				locator = new EFSLocator {
					value = "org.kermeta.uml2.documentation"
				}
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_documentation
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_documentation
				target = plugin_org_eclipse_core_runtime
			}
		}
		plugins += new Plugin plugin_org_kermeta_uml2_profiles_model_ui {
			__id = "org.kermeta.uml2.profiles.model.ui"
			identifier = new PlatformID {
				value = "org.kermeta.uml2.profiles.model.ui"
			}
			state = : "State.starting"
			version = new Version {
				value = "1.3.2"
			}
			vendor = vendor_IRISA_INRIA
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model_ui
				target = plugin_org_eclipse_ui
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model_ui
				target = plugin_org_eclipse_core_runtime
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model_ui
				target = plugin_org_eclipse_core_resources
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model_ui
				target = plugin_fr_irisa_triskell_eclipse_util
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.3.0'"
				maxVersion = "'1.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model_ui
				target = plugin_fr_irisa_triskell_kermeta_interpreter
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'1.3.0'"
				maxVersion = "'1.3.0'"
			}
			dependencies += new VersionDependency {
				source = plugin_org_kermeta_uml2_profiles_model_ui
				target = plugin_fr_irisa_triskell_kermeta_ecore
				closure = : "IntervalClosure.includeInclude"
				minVersion = "'[1.3.0-2.0.0)'"
				maxVersion = "'[1.3.0-2.0.0)'"
			}
		}
		sites += site__www_kermeta_org_update
	}

	ownedElements += new Vendor vendor_inria_org {
		__id = "inria.org"
		identifier = new PlatformID {
			value = "inria.org"
		}
	}
	ownedElements += new Vendor vendor_michel_hassenforder_uha_fr {
		__id = "michel.hassenforder@uha.fr"
		identifier = new PlatformID {
			value = "michel.hassenforder@uha.fr"
		}
	}
	ownedElements += new Vendor vendor_INRIA {
		__id = "INRIA"
		identifier = new PlatformID {
			value = "INRIA"
		}
	}
	ownedElements += new Vendor vendor_Topcased {
		__id = "Topcased"
		identifier = new PlatformID {
			value = "Topcased"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_Buckminster_Project {
		__id = "Eclipse Buckminster Project"
		identifier = new PlatformID {
			value = "Eclipse Buckminster Project"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org_INRIA {
		__id = "Eclipse.org/INRIA"
		identifier = new PlatformID {
			value = "Eclipse.org/INRIA"
		}
	}
	ownedElements += new Vendor vendor_CRIL_CNRS_UMR_8188___Universite_d_Artois {
		__id = "CRIL CNRS UMR 8188 - Universite d'Artois"
		identifier = new PlatformID {
			value = "CRIL CNRS UMR 8188 - Universite d'Artois"
		}
	}
	ownedElements += new Vendor vendor_Contix_Technologies {
		__id = "Contix Technologies"
		identifier = new PlatformID {
			value = "Contix Technologies"
		}
	}
	ownedElements += new Vendor vendor_CEA_List___Thales_Research___Technology {
		__id = "CEA List / Thales Research & Technology"
		identifier = new PlatformID {
			value = "CEA List / Thales Research & Technology"
		}
	}
	ownedElements += new Vendor vendor_kermeta_org {
		__id = "kermeta.org"
		identifier = new PlatformID {
			value = "kermeta.org"
		}
	}
	ownedElements += new Vendor vendor_itemis_AG {
		__id = "itemis AG"
		identifier = new PlatformID {
			value = "itemis AG"
		}
	}
	ownedElements += new Vendor vendor_Cloudsmith_Inc {
		__id = "Cloudsmith Inc"
		identifier = new PlatformID {
			value = "Cloudsmith Inc"
		}
	}
	ownedElements += new Vendor vendor_Timothy_Wall {
		__id = "Timothy Wall"
		identifier = new PlatformID {
			value = "Timothy Wall"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org___EPP {
		__id = "Eclipse.org - EPP"
		identifier = new PlatformID {
			value = "Eclipse.org - EPP"
		}
	}
	ownedElements += new Vendor vendor_INRIA_Rennes_Bretagne_Atlantique {
		__id = "INRIA Rennes Bretagne/Atlantique"
		identifier = new PlatformID {
			value = "INRIA Rennes Bretagne/Atlantique"
		}
	}
	ownedElements += new Vendor vendor_Johannes_Schneider___Matthias_Mergenthaler {
		__id = "Johannes Schneider | Matthias Mergenthaler"
		identifier = new PlatformID {
			value = "Johannes Schneider | Matthias Mergenthaler"
		}
	}
	ownedElements += new Vendor vendor_Eclipse {
		__id = "Eclipse"
		identifier = new PlatformID {
			value = "Eclipse"
		}
	}
	ownedElements += new Vendor vendor_Bundle_Vendor_0 {
		__id = "Bundle-Vendor.0"
		identifier = new PlatformID {
			value = "Bundle-Vendor.0"
		}
	}
	ownedElements += new Vendor vendor_INRIA_AtlanMod_Espresso {
		__id = "INRIA AtlanMod/Espresso"
		identifier = new PlatformID {
			value = "INRIA AtlanMod/Espresso"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org___Equinox {
		__id = "Eclipse.org - Equinox"
		identifier = new PlatformID {
			value = "Eclipse.org - Equinox"
		}
	}
	ownedElements += new Vendor vendor_IBM_Corporation {
		__id = "IBM Corporation"
		identifier = new PlatformID {
			value = "IBM Corporation"
		}
	}
	ownedElements += new Vendor vendor_IRISA___INRIA {
		__id = "IRISA / INRIA"
		identifier = new PlatformID {
			value = "IRISA / INRIA"
		}
	}
	ownedElements += new Vendor vendor_OpenEmbeDD_integration_team {
		__id = "OpenEmbeDD integration team"
		identifier = new PlatformID {
			value = "OpenEmbeDD integration team"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_Modeling_Project {
		__id = "Eclipse Modeling Project"
		identifier = new PlatformID {
			value = "Eclipse Modeling Project"
		}
	}
	ownedElements += new Vendor vendor_INRIA___IRISA {
		__id = "INRIA / IRISA"
		identifier = new PlatformID {
			value = "INRIA / IRISA"
		}
	}
	ownedElements += new Vendor vendor_Software_Technology_Group___TU_Dresden_Germany {
		__id = "Software Technology Group - TU Dresden Germany"
		identifier = new PlatformID {
			value = "Software Technology Group - TU Dresden Germany"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org___ECF {
		__id = "Eclipse.org - ECF"
		identifier = new PlatformID {
			value = "Eclipse.org - ECF"
		}
	}
	ownedElements += new Vendor vendor_Anyware_Technologies {
		__id = "Anyware Technologies"
		identifier = new PlatformID {
			value = "Anyware Technologies"
		}
	}
	ownedElements += new Vendor vendor_INRIA_OpenEmbeDD_integration_team {
		__id = "INRIA/OpenEmbeDD integration team"
		identifier = new PlatformID {
			value = "INRIA/OpenEmbeDD integration team"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_Modeling_Project_ {
		__id = "Eclipse Modeling Project "
		identifier = new PlatformID {
			value = "Eclipse Modeling Project "
		}
	}
	ownedElements += new Vendor vendor_www_antlr_org {
		__id = "www.antlr.org"
		identifier = new PlatformID {
			value = "www.antlr.org"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org_adapted_by_INRIA {
		__id = "Eclipse.org adapted by INRIA"
		identifier = new PlatformID {
			value = "Eclipse.org adapted by INRIA"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org_ {
		__id = "Eclipse.org "
		identifier = new PlatformID {
			value = "Eclipse.org "
		}
	}
	ownedElements += new Vendor vendor_IRISA_INRIA___MIPS {
		__id = "IRISA/INRIA & MIPS"
		identifier = new PlatformID {
			value = "IRISA/INRIA & MIPS"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_Mylyn {
		__id = "Eclipse Mylyn"
		identifier = new PlatformID {
			value = "Eclipse Mylyn"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_Web_Tools_Platform {
		__id = "Eclipse Web Tools Platform"
		identifier = new PlatformID {
			value = "Eclipse Web Tools Platform"
		}
	}
	ownedElements += new Vendor vendor_tigris_org {
		__id = "tigris.org"
		identifier = new PlatformID {
			value = "tigris.org"
		}
	}
	ownedElements += new Vendor vendor_Johannes_Schneider {
		__id = "Johannes Schneider"
		identifier = new PlatformID {
			value = "Johannes Schneider"
		}
	}
	ownedElements += new Vendor vendor_CEA_List___Thales_Research___Technology {
		__id = "CEA-List / Thales Research & Technology"
		identifier = new PlatformID {
			value = "CEA-List / Thales Research & Technology"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org {
		__id = "Eclipse.org"
		identifier = new PlatformID {
			value = "Eclipse.org"
		}
	}
	ownedElements += new Vendor vendor_Mort_Bay_Consulting {
		__id = "Mort Bay Consulting"
		identifier = new PlatformID {
			value = "Mort Bay Consulting"
		}
	}
	ownedElements += new Vendor vendor_The_Buckminster_project {
		__id = "The Buckminster project"
		identifier = new PlatformID {
			value = "The Buckminster project"
		}
	}
	ownedElements += new Vendor vendor_INRIA___OpenEmbeDD {
		__id = "INRIA - OpenEmbeDD"
		identifier = new PlatformID {
			value = "INRIA - OpenEmbeDD"
		}
	}
	ownedElements += new Vendor vendor_IRISA___CSU {
		__id = "IRISA / CSU"
		identifier = new PlatformID {
			value = "IRISA / CSU"
		}
	}
	ownedElements += new Vendor vendor_Thales_Research___Technology {
		__id = "Thales Research & Technology"
		identifier = new PlatformID {
			value = "Thales Research & Technology"
		}
	}
	ownedElements += new Vendor vendor_google_com {
		__id = "google.com"
		identifier = new PlatformID {
			value = "google.com"
		}
	}
	ownedElements += new Vendor vendor_JCraft__Inc_ {
		__id = "JCraft, Inc."
		identifier = new PlatformID {
			value = "JCraft, Inc."
		}
	}
	ownedElements += new Vendor vendor_TMate_Software {
		__id = "TMate Software"
		identifier = new PlatformID {
			value = "TMate Software"
		}
	}
	ownedElements += new Vendor vendor_www_example_org {
		__id = "www.example.org"
		identifier = new PlatformID {
			value = "www.example.org"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_org___EclipseLink_Project {
		__id = "Eclipse.org - EclipseLink Project"
		identifier = new PlatformID {
			value = "Eclipse.org - EclipseLink Project"
		}
	}
	ownedElements += new Vendor vendor_Eclipse_Packaging_Project {
		__id = "Eclipse Packaging Project"
		identifier = new PlatformID {
			value = "Eclipse Packaging Project"
		}
	}
	ownedElements += new Vendor vendor_INRIA_AtlanMod__INRIA_Espresso {
		__id = "INRIA AtlanMod, INRIA Espresso"
		identifier = new PlatformID {
			value = "INRIA AtlanMod, INRIA Espresso"
		}
	}
	ownedElements += new Vendor vendor_INRIA_Espresso {
		__id = "INRIA Espresso"
		identifier = new PlatformID {
			value = "INRIA Espresso"
		}
	}
	ownedElements += new Vendor vendor_Net4j_and_CDO_Plus {
		__id = "Net4j and CDO Plus"
		identifier = new PlatformID {
			value = "Net4j and CDO Plus"
		}
	}
	ownedElements += new Vendor vendor_TeXlapse_Team {
		__id = "TeXlapse Team"
		identifier = new PlatformID {
			value = "TeXlapse Team"
		}
	}
	ownedElements += new Vendor vendor_triskell {
		__id = "triskell"
		identifier = new PlatformID {
			value = "triskell"
		}
	}
	ownedElements += new Vendor vendor_IRISA_INRIA {
		__id = "IRISA/INRIA"
		identifier = new PlatformID {
			value = "IRISA/INRIA"
		}
	}
	ownedElements += new Vendor vendor_bundleVendor {
		__id = "bundleVendor"
		identifier = new PlatformID {
			value = "bundleVendor"
		}
	}
	ownedElements += new Vendor vendor_CEA_LIST {
		__id = "CEA LIST"
		identifier = new PlatformID {
			value = "CEA LIST"
		}
	}
	ownedElements += new Vendor vendor_providerName {
		__id = "providerName"
		identifier = new PlatformID {
			value = "providerName"
		}
	}
	ownedElements += new Vendor vendor_pluginProvider {
		__id = "pluginProvider"
		identifier = new PlatformID {
			value = "pluginProvider"
		}
	}
	ownedElements += new License license__www_h2database_com_html_license_html {
		name = "_www_h2database_com_html_license_html"
		text = "Summary and License FAQ H2 is dual licensed and available under a modified version of the MPL 1.1 ( Mozilla Public License ) or under the (unmodified) EPL 1.0 ( Eclipse Public License ). The changes to the MPL are underlined . There is a License FAQ for both the MPL and the EPL, most of that is applicable to the H2 License as well. * You can use H2 for free. You can integrate it into your application (including commercial applications), and you can distribute it. * Files containing only your code are not covered by this license (it is 'commercial friendly'). * Modifications to the H2 source code must be published. * You don't need to provide the source code of H2 if you did not modify anything. However, nobody is allowed to rename H2, modify it a little, and sell it as a database engine without telling the customers it is in fact H2. This happened to HSQLDB: A company called 'bungisoft' copied HSQLDB, renamed it to 'RedBase', and tried to sell it, hiding the fact that it was in fact just HSQLDB. It seems 'bungisoft' does not exist any more, but you can use the Wayback Machine of http://www.archive.org and visit old web pages of http://www.bungisoft.com . About porting the source code to another language (for example C# or C++): Converted source code (even if done manually) stays under the same copyright and license as the original code. The copyright of the ported source code does not (automatically) go to the person who ported the code. H2 License, Version 1.0 1. Definitions 1.0.1. 'Commercial Use' means distribution or otherwise making the Covered Code available to a third party. 1.1. 'Contributor' means each entity that creates or contributes to the creation of Modifications. 1.2. 'Contributor Version' means the combination of the Original Code, prior Modifications used by a Contributor, and the Modifications made by that particular Contributor. 1.3. 'Covered Code' means the Original Code or Modifications or the combination of the Original Code and Modifications, in each case including portions thereof. 1.4. 'Electronic Distribution Mechanism' means a mechanism generally accepted in the software development community for the electronic transfer of data. 1.5. 'Executable' means Covered Code in any form other than Source Code. 1.6. 'Initial Developer' means the individual or entity identified as the Initial Developer in the Source Code notice required by Exhibit A . 1.7. 'Larger Work' means a work which combines Covered Code or portions thereof with code not governed by the terms of this License. 1.8. 'License' means this document. 1.8.1. 'Licensable' means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein. 1.9. 'Modifications' means any addition to or deletion from the substance or structure of either the Original Code or any previous Modifications. When Covered Code is released as a series of files, a Modification is: 1.9.a. Any addition to or deletion from the contents of a file containing Original Code or previous Modifications. 1.9.b. Any new file that contains any part of the Original Code or previous Modifications. 1.10. 'Original Code' means Source Code of computer software code which is described in the Source Code notice required by Exhibit A as Original Code, and which, at the time of its release under this License is not already Covered Code governed by this License. 1.10.1. 'Patent Claims' means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor. 1.11. 'Source Code' means the preferred form of the Covered Code for making modifications to it, including all modules it contains, plus any associated interface definition files, scripts used to control compilation and installation of an Executable, or source code differential comparisons against either the Original Code or another well known, available Covered Code of the Contributor's choice. The Source Code can be in a compressed or archival form, provided the appropriate decompression or de-archiving software is widely available for no charge. 1.12. 'You' (or 'Your') means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License or a future version of this License issued under Section 6.1. For legal entities, 'You' includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, 'control' means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. 2. Source Code License 2.1. The Initial Developer Grant The Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license, subject to third party intellectual property claims: 2.1.a. under intellectual property rights (other than patent or trademark) Licensable by Initial Developer to use, reproduce, modify, display, perform, sublicense and distribute the Original Code (or portions thereof) with or without Modifications, and/or as part of a Larger Work; and 2.1.b. under Patents Claims infringed by the making, using or selling of Original Code, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Code (or portions thereof). 2.1.c. the licenses granted in this Section 2.1 ( a ) and ( b ) are effective on the date Initial Developer first distributes Original Code under the terms of this License. 2.1.d. Notwithstanding Section 2.1 ( b ) above, no patent license is granted: 1) for code that You delete from the Original Code; 2) separate from the Original Code; or 3) for infringements caused by: i) the modification of the Original Code or ii) the combination of the Original Code with other software or devices. 2.2. Contributor Grant Subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license 2.2.a. under intellectual property rights (other than patent or trademark) Licensable by Contributor, to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof) either on an unmodified basis, with other Modifications, as Covered Code and/or as part of a Larger Work; and 2.2.b. under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: 1) Modifications made by that Contributor (or portions thereof); and 2) the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination). 2.2.c. the licenses granted in Sections 2.2 ( a ) and 2.2 ( b ) are effective on the date Contributor first makes Commercial Use of the Covered Code. 2.2.c. Notwithstanding Section 2.2 ( b ) above, no patent license is granted: 1) for any code that Contributor has deleted from the Contributor Version; 2) separate from the Contributor Version; 3) for infringements caused by: i) third party modifications of Contributor Version or ii) the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or 4) under Patent Claims infringed by Covered Code in the absence of Modifications made by that Contributor. 3. Distribution Obligations 3.1. Application of License The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section 2.2 . The Source Code version of Covered Code may be distributed only under the terms of this License or a future version of this License released under Section 6.1 , and You must include a copy of this License with every copy of the Source Code You distribute. You may not offer or impose any terms on any Source Code version that alters or restricts the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section 3.5 . 3.2. Availability of Source Code Any Modification which You create or to which You contribute must be made available in Source Code form under the terms of this License either on the same media as an Executable version or via an accepted Electronic Distribution Mechanism to anyone to whom you made an Executable version available; and if made available via Electronic Distribution Mechanism, must remain available for at least twelve (12) months after the date it initially became available, or at least six (6) months after a subsequent version of that particular Modification has been made available to such recipients. You are responsible for ensuring that the Source Code version remains available even if the Electronic Distribution Mechanism is maintained by a third party. 3.3. Description of Modifications You must cause all Covered Code to which You contribute to contain a file documenting the changes You made to create that Covered Code and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Code provided by the Initial Developer and including the name of the Initial Developer in (a) the Source Code, and (b) in any notice in an Executable version or related documentation in which You describe the origin or ownership of the Covered Code. 3.4. Intellectual Property Matters 3.4.a. Third Party Claims: If Contributor has knowledge that a license under a third party's intellectual property rights is required to exercise the rights granted by such Contributor under Sections 2.1 or 2.2 , Contributor must include a text file with the Source Code distribution titled 'LEGAL' which describes the claim and the party making the claim in sufficient detail that a recipient will know whom to contact. If Contributor obtains such knowledge after the Modification is made available as described in Section 3.2 , Contributor shall promptly modify the LEGAL file in all copies Contributor makes available thereafter and shall take other steps (such as notifying appropriate mailing lists or newsgroups) reasonably calculated to inform those who received the Covered Code that new knowledge has been obtained. 3.4.b. Contributor APIs: If Contributor's Modifications include an application programming interface and Contributor has knowledge of patent licenses which are reasonably necessary to implement that API, Contributor must also include this information in the legal file. 3.4.c. Representations: Contributor represents that, except as disclosed pursuant to Section 3.4 ( a ) above, Contributor believes that Contributor's Modifications are Contributor's original creation(s) and/or Contributor has sufficient rights to grant the rights conveyed by this License. 3.5. Required Notices You must duplicate the notice in Exhibit A in each file of the Source Code. If it is not possible to put such notice in a particular Source Code file due to its structure, then You must include such notice in a location (such as a relevant directory) where a user would be likely to look for such a notice. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in Exhibit A . You must also duplicate this License in any documentation for the Source Code where You describe recipients' rights or ownership rights relating to Covered Code. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Code. However, You may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer. 3.6. Distribution of Executable Versions You may distribute Covered Code in Executable form only if the requirements of Sections 3.1 , 3.2 , 3.3 , 3.4 and 3.5 have been met for that Covered Code, and if You include a notice stating that the Source Code version of the Covered Code is available under the terms of this License, including a description of how and where You have fulfilled the obligations of Section 3.2 . The notice must be conspicuously included in any notice in an Executable version, related documentation or collateral in which You describe recipients' rights relating to the Covered Code. You may distribute the Executable version of Covered Code or ownership rights under a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable version does not attempt to limit or alter the recipient's rights in the Source Code version from the rights set forth in this License. If You distribute the Executable version under a different license You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or any Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer. 3.7. Larger Works You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Code. 4. Inability to Comply Due to Statute or Regulation. If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Code due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be included in the legal file described in Section 3.4 and must be included with all distributions of the Source Code. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it. 5. Application of this License. This License applies to code to which the Initial Developer has attached the notice in Exhibit A and to related Covered Code. 6. Versions of the License. 6.1. New Versions The H2 Group may publish revised and/or new versions of the License from time to time. Each version will be given a distinguishing version number. 6.2. Effect of New Versions Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by the H2 Group . No one other than the H2 Group has the right to modify the terms applicable to Covered Code created under this License. 6.3. Derivative Works If You create or use a modified version of this License (which you may only do in order to apply it to code which is not already Covered Code governed by this License), You must (a) rename Your license so that the phrases 'H2 Group', 'H2' or any confusingly similar phrase do not appear in your license (except to note that your license differs from this License) and (b) otherwise make it clear that Your version of the license contains terms which differ from the H2 License . (Filling in the name of the Initial Developer, Original Code or Contributor in the notice described in Exhibit A shall not of themselves be deemed to be modifications of this License.) 7. Disclaimer of Warranty Covered code is provided under this license on an 'as is' basis, without warranty of any kind, either expressed or implied, including, without limitation, warranties that the covered code is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the covered code is with you. Should any covered code prove defective in any respect, you (not the initial developer or any other contributor) assume the cost of any necessary servicing, repair or correction. This disclaimer of warranty constitutes an essential part of this license. No use of any covered code is authorized hereunder except under this disclaimer. 8. Termination 8.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Covered Code which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive. 8.2. If You initiate litigation by asserting a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You file such action is referred to as 'Participant') alleging that: 8.2.a. such Participant's Contributor Version directly or indirectly infringes any patent, then any and all rights granted by such Participant to You under Sections 2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively, unless if within 60 days after receipt of notice You either: (i) agree in writing to pay Participant a mutually agreeable reasonable royalty for Your past and future use of Modifications made by such Participant, or (ii) withdraw Your litigation claim with respect to the Contributor Version against such Participant. If within 60 days of notice, a reasonable royalty and payment arrangement are not mutually agreed upon in writing by the parties or the litigation claim is not withdrawn, the rights granted by Participant to You under Sections 2.1 and/or 2.2 automatically terminate at the expiration of the 60 day notice period specified above. 8.2.b. any software, hardware, or device, other than such Participant's Contributor Version, directly or indirectly infringes any patent, then any rights granted to You by such Participant under Sections 2.1( b ) and 2.2( b ) are revoked effective as of the date You first made, used, sold, distributed, or had made, Modifications made by that Participant. 8.3. If You assert a patent infringement claim against Participant alleging that such Participant's Contributor Version directly or indirectly infringes any patent where such claim is resolved (such as by license or settlement) prior to the initiation of patent infringement litigation, then the reasonable value of the licenses granted by such Participant under Sections 2.1 or 2.2 shall be taken into account in determining the amount or value of any payment or license. 8.4. In the event of termination under Sections 8.1 or 8.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or any distributor hereunder prior to termination shall survive termination. 9. Limitation of Liability Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall you, the initial developer, any other contributor, or any distributor of covered code, or any supplier of any of such parties, be liable to any person for any indirect, special, incidental, or consequential damages of any character including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to you. 10. United States Government End Users The Covered Code is a 'commercial item', as that term is defined in 48 C.F.R. 2.101 (October 1995), consisting of 'commercial computer software' and 'commercial computer software documentation', as such terms are used in 48 C.F.R. 12.212 (September 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Code with only those rights set forth herein. 11. Miscellaneous This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by California law provisions (except to the extent applicable law, if any, provides otherwise), excluding its conflict-of-law provisions. With respect to disputes in which at least one party is a citizen of, or an entity chartered or registered to do business in United States of America, any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California, with venue lying in Santa Clara County, California, with the losing party responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. 12. Responsibility for Claims As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability. 13. Multiple-Licensed Code Initial Developer may designate portions of the Covered Code as 'Multiple-Licensed'. 'Multiple-Licensed' means that the Initial Developer permits you to utilize portions of the Covered Code under Your choice of this or the alternative licenses, if any, specified by the Initial Developer in the file described in Exhibit A . Exhibit A Multiple-Licensed under the H2 License, Version 1.0, and under the Eclipse Public License, Version 1.0 (http://h2database.com/html/license.html). Initial Developer: H2 Group Eclipse Public License - Version 1.0 THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE ('AGREEMENT'). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT. 1. DEFINITIONS 'Contribution' means: a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and b) in the case of each subsequent Contributor: i) changes to the Program, and ii) additions to the Program; where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program. 'Contributor' means any person or entity that distributes the Program. 'Licensed Patents ' mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program. 'Program' means the Contributions distributed in accordance with this Agreement. 'Recipient' means anyone who receives the Program under this Agreement, including all Contributors. 2. GRANT OF RIGHTS a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form. b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder. c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program. d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement. 3. REQUIREMENTS A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that: a) it complies with the terms and conditions of this Agreement; and b) its license agreement: i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose; ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits; iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange. When the Program is made available in source code form: a) it must be made available under this Agreement; and b) a copy of this Agreement must be included with each copy of the Program. Contributors may not remove or alter any copyright notices contained within the Program. Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution. 4. COMMERCIAL DISTRIBUTION Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ('Commercial Contributor') hereby agrees to defend and indemnify every other Contributor ('Indemnified Contributor') against any losses, damages and costs (collectively 'Losses') arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense. For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages. 5. NO WARRANTY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations. 6. DISCLAIMER OF LIABILITY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 7. GENERAL If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable. If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed. All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive. Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation."
		locator = new URLLocator {
			value = "http://www.h2database.com/html/license.html"
		}
	}
	ownedElements += new License license__www_example_com_license {
		name = "_www_example_com_license"
		text = "[Enter License Description here.]"
		locator = new URLLocator {
			value = "http://www.example.com/license"
		}
	}
	ownedElements += new License license__www_kermeta_org_ {
		name = "_www_kermeta_org_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__www_gnu_org_licenses_old_licenses_lgpl_2_1_html {
		name = "_www_gnu_org_licenses_old_licenses_lgpl_2_1_html"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__www_kermeta_org_ {
		name = "_www_kermeta_org_"
		text = "KerMeta workbench and most of its plugins are distributed under the terms of the EPL licence. Special note: KerMeta TouchGraph plugin is distributed under the terms of the GPL license."
		locator = new URLLocator {
			value = "http://www.kermeta.org/"
		}
	}
	ownedElements += new License license__svnkit_com_license_html {
		name = "_svnkit_com_license_html"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__Enter_License_URL_here__ {
		name = "_Enter_License_URL_here__"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__svnkit_com_license_html {
		name = "_svnkit_com_license_html"
		text = "%license"
		locator = new URLLocator {
			value = "http://svnkit.com/license.html"
		}
	}
	ownedElements += new License license__www_opensource_org_licenses_mit_license_php {
		name = "_www_opensource_org_licenses_mit_license_php"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__www_opensource_org_licenses_mit_license_php {
		name = "_www_opensource_org_licenses_mit_license_php"
		text = "The MIT License  Copyright (c) 2009, Joakim Recht  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
		locator = new URLLocator {
			value = "http://www.opensource.org/licenses/mit-license.php"
		}
	}
	ownedElements += new License license_license_html {
		name = "license_html"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__www_gnu_org_licenses_old_licenses_lgpl_2_1_html {
		name = "_www_gnu_org_licenses_old_licenses_lgpl_2_1_html"
		text = "%license"
		locator = new URLLocator {
			value = "http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"
		}
	}
	ownedElements += new License license_license_html {
		name = "license_html"
		text = "%license"
		locator = new URLLocator {
			value = "license.html"
		}
	}
	ownedElements += new License license__Enter_License_URL_here__ {
		name = "_Enter_License_URL_here__"
		text = "[Enter License Description here.]"
		locator = new URLLocator {
			value = "[Enter License URL here.]"
		}
	}
	ownedElements += new License license_EPL {
		name = "EPL"
		text = "Eclipse Public License - v 1.0 THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE ('AGREEMENT'). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT. 1. DEFINITIONS 'Contribution' means: a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and b) in the case of each subsequent Contributor: i) changes to the Program, and ii) additions to the Program; where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program. 'Contributor' means any person or entity that distributes the Program. 'Licensed Patents ' mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program. 'Program' means the Contributions distributed in accordance with this Agreement. 'Recipient' means anyone who receives the Program under this Agreement, including all Contributors. 2. GRANT OF RIGHTS a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form. b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder. c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program. d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement. 3. REQUIREMENTS A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that: a) it complies with the terms and conditions of this Agreement; and b) its license agreement: i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose; ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits; iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange. When the Program is made available in source code form: a) it must be made available under this Agreement; and b) a copy of this Agreement must be included with each copy of the Program. Contributors may not remove or alter any copyright notices contained within the Program. Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution. 4. COMMERCIAL DISTRIBUTION Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ('Commercial Contributor') hereby agrees to defend and indemnify every other Contributor ('Indemnified Contributor') against any losses, damages and costs (collectively 'Losses') arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense. For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages. 5. NO WARRANTY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations. 6. DISCLAIMER OF LIABILITY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 7. GENERAL If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable. If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed. All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive. Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation."
		locator = new URLLocator {
			value = "http://www.eclipse.org/legal/epl-v10.html"
		}
	}
	ownedElements += new License license__www_h2database_com_html_license_html {
		name = "_www_h2database_com_html_license_html"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__www_example_com_license {
		name = "_www_example_com_license"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__www_gnu_org_copyleft_gpl_html {
		name = "_www_gnu_org_copyleft_gpl_html"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new License license__www_gnu_org_copyleft_gpl_html {
		name = "_www_gnu_org_copyleft_gpl_html"
		text = "CAP is released under the GPL"
		locator = new URLLocator {
			value = "http://www.gnu.org/copyleft/gpl.html"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_emft_updates_ {
		name = "_download_eclipse_org_modeling_emft_updates_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_emf_updates_ {
		name = "_download_eclipse_org_modeling_emf_updates_"
		text = "%EMFUpdateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/modeling/emf/updates/"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_eclipse_updates_3_5 {
		name = "_download_eclipse_org_eclipse_updates_3_5"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_emf_updates_ {
		name = "_download_eclipse_org_modeling_emf_updates_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__www_eclipse_org_modeling_emft_updates_ {
		name = "_www_eclipse_org_modeling_emft_updates_"
		text = "%updateSiteName"
		locator = new URLLocator {
			value = "http://www.eclipse.org/modeling/emft/updates/"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_eclipse_updates_3_5 {
		name = "_download_eclipse_org_eclipse_updates_3_5"
		text = "%updateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/eclipse/updates/3.5"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_tools_mylyn_update_e3_4 {
		name = "_download_eclipse_org_tools_mylyn_update_e3_4"
		text = "%discovery_Mylyn"
		locator = new URLLocator {
			value = "http://download.eclipse.org/tools/mylyn/update/e3.4"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_releases_galileo {
		name = "_download_eclipse_org_releases_galileo"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_webtools_updates {
		name = "_download_eclipse_org_webtools_updates"
		text = "Web Tools Platform (WTP) Updates"
		locator = new URLLocator {
			value = "http://download.eclipse.org/webtools/updates"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_rt_eclipselink_incremental_updates_milestone {
		name = "_download_eclipse_org_rt_eclipselink_incremental_updates_milestone"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_tools_gef_updates_releases_site_xml {
		name = "_download_eclipse_org_tools_gef_updates_releases_site_xml"
		text = "%updateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/tools/gef/updates/releases/site.xml"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_emft_updates_ {
		name = "_download_eclipse_org_modeling_emft_updates_"
		text = "%EMFTUpdateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/modeling/emft/updates/"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_m2t_updates_ {
		name = "_download_eclipse_org_modeling_m2t_updates_"
		text = "%UpdateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/modeling/m2t/updates/"
		}
	}
	ownedElements += new DiscoverySite site__eclipse_svnkit_com_1_3_x_ {
		name = "_eclipse_svnkit_com_1_3_x_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_releases_galileo_ {
		name = "_download_eclipse_org_releases_galileo_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__eclipse_svnkit_com_1_3_x_ {
		name = "_eclipse_svnkit_com_1_3_x_"
		text = "TMate Software SVNKit 1.3.x Update Site"
		locator = new URLLocator {
			value = "http://eclipse.svnkit.com/1.3.x/"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_releases_galileo {
		name = "_download_eclipse_org_releases_galileo"
		text = "%secondaryUpdateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/releases/galileo"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_m2t_updates_ {
		name = "_download_eclipse_org_modeling_m2t_updates_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__www_eclipse_org_modeling_emft_updates_ {
		name = "_www_eclipse_org_modeling_emft_updates_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_mdt_updates_ {
		name = "_download_eclipse_org_modeling_mdt_updates_"
		text = "%update.label"
		locator = new URLLocator {
			value = "http://download.eclipse.org/modeling/mdt/updates/"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_tools_gef_updates_releases_site_xml {
		name = "_download_eclipse_org_tools_gef_updates_releases_site_xml"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_mdt_updates_ {
		name = "_download_eclipse_org_modeling_mdt_updates_"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_rt_eclipselink_incremental_updates_milestone {
		name = "_download_eclipse_org_rt_eclipselink_incremental_updates_milestone"
		text = "%secondaryUpdateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/rt/eclipselink/incremental-updates/milestone"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_tools_mylyn_update_extras {
		name = "_download_eclipse_org_tools_mylyn_update_extras"
		text = "%discovery_Mylyn_Extras"
		locator = new URLLocator {
			value = "http://download.eclipse.org/tools/mylyn/update/extras"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_tools_mylyn_update_e3_4 {
		name = "_download_eclipse_org_tools_mylyn_update_e3_4"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_webtools_updates {
		name = "_download_eclipse_org_webtools_updates"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_m2t_updates_site_xml {
		name = "_download_eclipse_org_modeling_m2t_updates_site_xml"
		text = "%updateSiteName"
		locator = new URLLocator {
			value = "http://download.eclipse.org/modeling/m2t/updates/site.xml"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_releases_galileo_ {
		name = "_download_eclipse_org_releases_galileo_"
		text = "Galileo"
		locator = new URLLocator {
			value = "http://download.eclipse.org/releases/galileo/"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_modeling_m2t_updates_site_xml {
		name = "_download_eclipse_org_modeling_m2t_updates_site_xml"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__www_kermeta_org_update {
		name = "_www_kermeta_org_update"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__texlipse_sourceforge_net {
		name = "_texlipse_sourceforge_net"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new DiscoverySite site__www_kermeta_org_update {
		name = "_www_kermeta_org_update"
		text = "Kermeta update site"
		locator = new URLLocator {
			value = "http://www.kermeta.org/update"
		}
	}
	ownedElements += new DiscoverySite site__texlipse_sourceforge_net {
		name = "_texlipse_sourceforge_net"
		text = "TeXlipse update site"
		locator = new URLLocator {
			value = "http://texlipse.sourceforge.net"
		}
	}
	ownedElements += new DiscoverySite site__download_eclipse_org_tools_mylyn_update_extras {
		name = "_download_eclipse_org_tools_mylyn_update_extras"
		text = "null"
		locator = new URLLocator {
			value = "null"
		}
	}
	ownedElements += new Plugin plugin_system_bundle {
		// required by someone but not found in the platform
		__id = "system.bundle"
	}
	ownedElements += new Plugin plugin_org_eclipse_emf_cdo_server {
		// required by someone but not found in the platform
		__id = "org.eclipse.emf.cdo.server"
	}
	ownedElements += new Package package_oracle_xml_util {
		// required by someone but not found in the platform
		__id = "oracle.xml.util"
	}
	ownedElements += new Package package_oracle_xdb {
		// required by someone but not found in the platform
		__id = "oracle.xdb"
	}
	ownedElements += new Package package_oracle_spatial_geometry {
		// required by someone but not found in the platform
		__id = "oracle.spatial.geometry"
	}
	ownedElements += new Package package_org_slf4j {
		// required by someone but not found in the platform
		__id = "org.slf4j"
	}
	ownedElements += new Package package_oracle_xml_jaxp {
		// required by someone but not found in the platform
		__id = "oracle.xml.jaxp"
	}
	ownedElements += new Package package_oracle_jdbc_pool {
		// required by someone but not found in the platform
		__id = "oracle.jdbc.pool"
	}
	ownedElements += new Package package_javax_resource_cci {
		// required by someone but not found in the platform
		__id = "javax.resource.cci"
	}
	ownedElements += new Package package_oracle_sql {
		// required by someone but not found in the platform
		__id = "oracle.sql"
	}
	ownedElements += new Package package_oracle_jdbc {
		// required by someone but not found in the platform
		__id = "oracle.jdbc"
	}
	ownedElements += new Package package_oracle_jdbc_internal {
		// required by someone but not found in the platform
		__id = "oracle.jdbc.internal"
	}
	ownedElements += new Package package_oracle_AQ {
		// required by someone but not found in the platform
		__id = "oracle.AQ"
	}
	ownedElements += new Package package_oracle_xml_parser_schema {
		// required by someone but not found in the platform
		__id = "oracle.xml.parser.schema"
	}
	ownedElements += new Package package_javax_resource {
		// required by someone but not found in the platform
		__id = "javax.resource"
	}
	ownedElements += new Package package_oracle_xdb_dom {
		// required by someone but not found in the platform
		__id = "oracle.xdb.dom"
	}
	ownedElements += new Package package_org_mortbay_jetty_handler_management {
		// required by someone but not found in the platform
		__id = "org.mortbay.jetty.handler.management"
	}
	ownedElements += new Package package_oracle_xml_parser_v2 {
		// required by someone but not found in the platform
		__id = "oracle.xml.parser.v2"
	}

}
