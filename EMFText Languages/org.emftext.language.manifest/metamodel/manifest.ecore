<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="manifest"
    nsURI="http://www.emftext.org/language/manifest" nsPrefix="manifest">
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="id" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="Directive" eSuperTypes="#//Parameter">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="token" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="argument" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="#//Parameter">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="token" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="argument" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Entry">
    <eStructuralFeatures xsi:type="ecore:EReference" name="path" lowerBound="1" upperBound="-1"
        eType="#//PathExtended" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1"
        eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PathExtended">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="path" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Path" eSuperTypes="#//NamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Manifest">
    <eOperations name="getBundleActivationPolicy" eType="#//BundleActivationPolicy">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleActivationPolicy ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleActivationPolicy ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleActivationPolicy">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleActivationPolicy existingElement = getBundleActivationPolicy();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleActivationPolicy"/>
    </eOperations>
    <eOperations name="getBundleActivator" eType="#//BundleActivator">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleActivator ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleActivator ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleActivator">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleActivator existingElement = getBundleActivator();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleActivator"/>
    </eOperations>
    <eOperations name="getBundleCategory" eType="#//BundleCategory">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleCategory ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleCategory ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleCategory">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleCategory existingElement = getBundleCategory();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleCategory"/>
    </eOperations>
    <eOperations name="getBundleClassPath" eType="#//BundleClassPath">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleClassPath ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleClassPath ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleClassPath">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleClassPath existingElement = getBundleClassPath();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleClassPath"/>
    </eOperations>
    <eOperations name="getBundleContactAddress" eType="#//BundleContactAddress">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleContactAddress ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleContactAddress ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleContactAddress">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleContactAddress existingElement = getBundleContactAddress();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleContactAddress"/>
    </eOperations>
    <eOperations name="getBundleCopyright" eType="#//BundleCopyright">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleCopyright ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleCopyright ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleCopyright">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleCopyright existingElement = getBundleCopyright();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleCopyright"/>
    </eOperations>
    <eOperations name="getBundleDescription" eType="#//BundleDescription">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleDescription ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleDescription ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleDescription">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleDescription existingElement = getBundleDescription();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleDescription"/>
    </eOperations>
    <eOperations name="getBundleDocURL" eType="#//BundleDocURL">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleDocURL ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleDocURL ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleDocURL">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleDocURL existingElement = getBundleDocURL();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleDocURL"/>
    </eOperations>
    <eOperations name="getBundleIcon" eType="#//BundleIcon">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleIcon ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleIcon ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleIcon">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleIcon existingElement = getBundleIcon();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleIcon"/>
    </eOperations>
    <eOperations name="getBundleLicense" eType="#//BundleLicense">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleLicense ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleLicense ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleLicense">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleLicense existingElement = getBundleLicense();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleLicense"/>
    </eOperations>
    <eOperations name="getBundleLocalization" eType="#//BundleLocalization">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleLocalization ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleLocalization ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleLocalization">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleLocalization existingElement = getBundleLocalization();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleLocalization"/>
    </eOperations>
    <eOperations name="getBundleManifestVersion" eType="#//BundleManifestVersion">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleManifestVersion ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleManifestVersion ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleManifestVersion">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleManifestVersion existingElement = getBundleManifestVersion();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleManifestVersion"/>
    </eOperations>
    <eOperations name="getBundleName" eType="#//BundleName">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleName ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleName ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleName">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleName existingElement = getBundleName();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleName"/>
    </eOperations>
    <eOperations name="getBundleNativeCode" eType="#//BundleNativeCode">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleNativeCode ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleNativeCode ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleNativeCode">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleNativeCode existingElement = getBundleNativeCode();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleNativeCode"/>
    </eOperations>
    <eOperations name="getBundleRequiredExecutionEnvironment" eType="#//BundleRequiredExecutionEnvironment">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleRequiredExecutionEnvironment ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleRequiredExecutionEnvironment ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleRequiredExecutionEnvironment">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleRequiredExecutionEnvironment existingElement = getBundleRequiredExecutionEnvironment();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleRequiredExecutionEnvironment"/>
    </eOperations>
    <eOperations name="getBundleSymbolicName" eType="#//BundleSymbolicName">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleSymbolicName ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleSymbolicName ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleSymbolicName">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleSymbolicName existingElement = getBundleSymbolicName();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleSymbolicName"/>
    </eOperations>
    <eOperations name="getBundleUpdateLocation" eType="#//BundleUpdateLocation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleUpdateLocation ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleUpdateLocation ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleUpdateLocation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleUpdateLocation existingElement = getBundleUpdateLocation();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleUpdateLocation"/>
    </eOperations>
    <eOperations name="getBundleVendor" eType="#//BundleVendor">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleVendor ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleVendor ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleVendor">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleVendor existingElement = getBundleVendor();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleVendor"/>
    </eOperations>
    <eOperations name="getBundleVersion" eType="#//BundleVersion">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.BundleVersion ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.BundleVersion ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBundleVersion">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.BundleVersion existingElement = getBundleVersion();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//BundleVersion"/>
    </eOperations>
    <eOperations name="getDynamicImportPackage" eType="#//DynamicImportPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.DynamicImportPackage ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.DynamicImportPackage ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setDynamicImportPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.DynamicImportPackage existingElement = getDynamicImportPackage();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//DynamicImportPackage"/>
    </eOperations>
    <eOperations name="getExportPackage" eType="#//ExportPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.ExportPackage ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.ExportPackage ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setExportPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.ExportPackage existingElement = getExportPackage();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//ExportPackage"/>
    </eOperations>
    <eOperations name="getFragmentHost" eType="#//FragmentHost">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.FragmentHost ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.FragmentHost ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setFragmentHost">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.FragmentHost existingElement = getFragmentHost();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//FragmentHost"/>
    </eOperations>
    <eOperations name="getImportPackage" eType="#//ImportPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.ImportPackage ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.ImportPackage ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setImportPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.ImportPackage existingElement = getImportPackage();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//ImportPackage"/>
    </eOperations>
    <eOperations name="getRequireBundle" eType="#//RequireBundle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.RequireBundle ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.RequireBundle ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setRequireBundle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.RequireBundle existingElement = getRequireBundle();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//RequireBundle"/>
    </eOperations>
    <eOperations name="getEclipseLazyStart" eType="#//EclipseLazyStart">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.EclipseLazyStart ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.EclipseLazyStart ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setEclipseLazyStart">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.EclipseLazyStart existingElement = getEclipseLazyStart();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//EclipseLazyStart"/>
    </eOperations>
    <eOperations name="getImportBundle" eType="#//ImportBundle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.ImportBundle ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.ImportBundle ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setImportBundle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.ImportBundle existingElement = getImportBundle();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//ImportBundle"/>
    </eOperations>
    <eOperations name="getImportLibrary" eType="#//ImportLibrary">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.ImportLibrary ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.ImportLibrary ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setImportLibrary">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.ImportLibrary existingElement = getImportLibrary();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//ImportLibrary"/>
    </eOperations>
    <eOperations name="getIncludeResource" eType="#//IncludeResource">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.IncludeResource ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.IncludeResource ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setIncludeResource">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.IncludeResource existingElement = getIncludeResource();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//IncludeResource"/>
    </eOperations>
    <eOperations name="getModuleScope" eType="#//ModuleScope">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.ModuleScope ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.ModuleScope ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setModuleScope">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.ModuleScope existingElement = getModuleScope();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//ModuleScope"/>
    </eOperations>
    <eOperations name="getModuleType" eType="#//ModuleType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.ModuleType ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.ModuleType ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setModuleType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.ModuleType existingElement = getModuleType();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//ModuleType"/>
    </eOperations>
    <eOperations name="getPrivatePackage" eType="#//PrivatePackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.PrivatePackage ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.PrivatePackage ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setPrivatePackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.PrivatePackage existingElement = getPrivatePackage();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//PrivatePackage"/>
    </eOperations>
    <eOperations name="getWebContextPath" eType="#//WebContextPath">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.WebContextPath ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.WebContextPath ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setWebContextPath">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.WebContextPath existingElement = getWebContextPath();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//WebContextPath"/>
    </eOperations>
    <eOperations name="getWebDispatcherServletUrlPatterns" eType="#//WebDispatcherServletUrlPatterns">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.WebDispatcherServletUrlPatterns ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.WebDispatcherServletUrlPatterns ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setWebDispatcherServletUrlPatterns">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.WebDispatcherServletUrlPatterns existingElement = getWebDispatcherServletUrlPatterns();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//WebDispatcherServletUrlPatterns"/>
    </eOperations>
    <eOperations name="getWebFilterMappings" eType="#//WebFilterMappings">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for ( org.emftext.language.manifest.ManifestElement element:getElements()) {&#xD;&#xA;&#x9;if (element instanceof org.emftext.language.manifest.WebFilterMappings ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.manifest.WebFilterMappings ) element;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setWebFilterMappings">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.manifest.ManifestElement >elements = getElements();&#xD;&#xA;org.emftext.language.manifest.WebFilterMappings existingElement = getWebFilterMappings();&#xD;&#xA;if (existingElement != null) {&#xD;&#xA;&#x9;int index = elements.indexOf(existingElement);&#xD;&#xA;&#x9;elements.remove(existingElement);&#xD;&#xA;&#x9;elements.add(index,element);&#xD;&#xA;}else {&#xD;&#xA;&#x9;elements.add(element);&#xD;&#xA;}&#xD;&#xA;"/>
        <details key="documentation" value=""/>
      </eAnnotations>
      <eParameters name="element" eType="#//WebFilterMappings"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="manifestVersion" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="elements" upperBound="-1"
        eType="#//ManifestElement" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ManifestElement" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleActivationPolicy" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="directive" upperBound="-1"
        eType="#//Directive" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleActivator" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleCategory" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="category" lowerBound="1"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleClassPath" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="entry" lowerBound="1" upperBound="-1"
        eType="#//Entry" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleContactAddress" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleCopyright" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleDescription" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleDocURL" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleIcon" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="url" lowerBound="1" upperBound="-1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="size" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleLicense" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="license" lowerBound="1"
        upperBound="-1" eType="#//License" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="License">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="licenseAttr" upperBound="-1"
        eType="#//LicenseAttr" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LicenseAttr" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="Description" eSuperTypes="#//LicenseAttr">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="description" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Link" eSuperTypes="#//LicenseAttr">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="url" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleLocalization" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleManifestVersion" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleName" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleNativeCode" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="nativeCode" lowerBound="1"
        upperBound="-1" eType="#//NativeCode" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="optional" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NativeCode">
    <eStructuralFeatures xsi:type="ecore:EReference" name="path" lowerBound="1" upperBound="-1"
        eType="#//Path" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" lowerBound="1"
        upperBound="-1" eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleRequiredExecutionEnvironment"
      eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="eeName" lowerBound="1"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleSymbolicName" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="symbolicName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1"
        eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BundleUpdateLocation" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleVendor" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="BundleVersion" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="major" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="minor" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="micro" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifier" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DynamicImportPackage" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="dynamicDescription" lowerBound="1"
        upperBound="-1" eType="#//DynamicDescription" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DynamicDescription">
    <eStructuralFeatures xsi:type="ecore:EReference" name="wildcardName" lowerBound="1"
        upperBound="-1" eType="#//WildcardName" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1"
        eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WildcardName">
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageName" lowerBound="1"
        eType="#//PackageName" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PackageName" eSuperTypes="#//NamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="ExportPackage" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="export" lowerBound="1"
        upperBound="-1" eType="#//Export" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Export">
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageName" lowerBound="1"
        upperBound="-1" eType="#//PackageName" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1"
        eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FragmentHost" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="symbolicName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1"
        eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ImportPackage" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="import" lowerBound="1"
        upperBound="-1" eType="#//Import" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Import">
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageName" lowerBound="1"
        upperBound="-1" eType="#//PackageName" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1"
        eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RequireBundle" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="requireBundleDescription"
        lowerBound="1" upperBound="-1" eType="#//RequireBundleDescription" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RequireBundleDescription">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="symbolicName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1"
        eType="#//Parameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EclipseLazyStart" eSuperTypes="#//ManifestElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ImportBundle" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="ImportLibrary" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="IncludeResource" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="ModuleScope" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="ModuleType" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="PrivatePackage" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="WebContextPath" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="WebDispatcherServletUrlPatterns" eSuperTypes="#//NamedElement #//ManifestElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="WebFilterMappings" eSuperTypes="#//NamedElement #//ManifestElement"/>
</ecore:EPackage>
