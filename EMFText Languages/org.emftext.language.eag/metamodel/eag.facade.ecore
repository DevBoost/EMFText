annotate "eag.text.ecore" package eag{
	class AttributeGrammar {
		reference imports;
		reference attributes;
		reference computations;
	@"http://www.eclipse.org/emf/2002/GenModel"("body"="for ( org.emftext.language.eag.Attribute attribute : getAttributes ( ) ) { 
	if ( name .equals ( attribute .getName ( ) ) ) { 
		return attribute ; 
	} 
} 
return null ; 
", "documentation"="")
		operation getAttribute(name);
	}

	class Import {
		attribute prefix;
		reference importedPackage;
	}

		enum AttributeKind {
			INHERITED;
			SYNTHESIZED;
}
	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="Declares an attribute")
	class Attribute {
		attribute name;
		attribute kind;
		reference type;
	}

	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="A specification of how to compute the value of an attribute for a particular metaclass")

	class Computation {
		reference targetAttribute;
		reference context;
		reference body;
	}

	class Statement {
	}

	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="Assigns the value of the right expression to the reference on the left")

	class Assignment {
		reference left;
		attribute operator;
		reference right;
	}

	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="Iterates over a collection")

	class ForLoop {
		reference collection;
		reference variable;
		reference body;
	}

	class IfElse {
		reference condition;
		reference ifBody;
		reference elseBody;
	}

	interface TypedElement {
		operation getType();
	}

	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="Declares a new variable")

	class Variable {
		attribute name;
	}

	class Expression {
	}

	class ExpressionChain {
		reference previous;
		reference next;
	}

	class Reference {
		reference target;
	}

	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="Represents the current model element that is subject to attribute evaluation")

	class ThisReference {
	@"http://www.eclipse.org/emf/2002/GenModel"("body"="org.eclipse.emf.ecore.EObject parent = this .eContainer ( ) ; 
while ( parent != null ) { 
	if ( parent instanceof org.emftext.language.eag.Computation ) { 
		org.emftext.language.eag.Computation computation = ( org.emftext.language.eag.Computation ) parent ; 
		return ( org.eclipse.emf.ecore.EClass ) computation .getContext ( ) ; 
	} 
	parent = parent .eContainer ( ) ; 
} 
return null ; 
", "documentation"="")
		operation getType();
	}

	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="Represents the value of the attribute. This can be used to access features of the attribute, if the attribute has a complex type")

	class Value {
	@"http://www.eclipse.org/emf/2002/GenModel"("body"="org.eclipse.emf.ecore.EObject parent = this .eContainer ( ) ; 
while ( parent != null ) { 
	if ( parent instanceof org.emftext.language.eag.Computation ) { 
		org.emftext.language.eag.Computation computation = ( org.emftext.language.eag.Computation ) parent ; 
		return ( org.eclipse.emf.ecore.EClass ) computation .getTargetAttribute ( ) .getType ( ) ; 
	} 
	parent = parent .eContainer ( ) ; 
} 
return null ; 
", "documentation"="")
		operation getType();
	}

	@"http://www.eclipse.org/emf/2002/GenModel"("documentation"="Computes the value of an attribute for the given model element")

	class AttributeValue {
		reference targetAttribute;
		reference expression;
	@"http://www.eclipse.org/emf/2002/GenModel"("body"="return ( org.eclipse.emf.ecore.EClass ) this .getTargetAttribute ( ) .getType ( ) ; 
", "documentation"="")
		operation getType();
	}

	class BinaryExpression {
		reference left;
		attribute operator;
		reference right;
	}

	class BooleanExpression {
		reference left;
		attribute operator;
		reference right;
	}

	class StringLiteral {
		attribute value;
	}

	class IntegerLiteral {
		attribute value;
	}

		enum BooleanOperator {
			EQUALS;
}
		enum BinaryOperator {
			PLUS;
			MINUS;
			TIMES;
			DIV;
}
		enum AssignmentOperator {
			EQUALS;
			EQUALS_PLUS;
}
}