[%--
--
-- This EGL and its accompanying metamodel has been developed during the SystemB 
-- project, funded by AWE plc. (CDK0747). 
-- Date: July 2009
-- Contact details: Edward Turner and Helen Treharne
-- http://www.csp-b.org/
--
import 'definitions.eol';
%]/***********************************************************************
 * File: [%=main_machine.name%].mch
 * Time stamp: [%
	var date := new Native('java.util.Date');
	var date_string := date.toString();
   %][%=date%]
 * Generated by UML2CSPB (developed using the Eclipse Epsilon project).
 * Developed and distributed by The University of Surrey, United Kingdom.
 * http://www.csp-b.org/
 ***********************************************************************/

MACHINE
   [%=main_machine.name%]
[%

var sets_string : String := '';
var inv_string : String := '';
var var_string : String := '';
var init_string : String := '';
var op_string : String := '';
var initial_indent : String := 1.indent();

if(main_machine.sets.size() > 0) {
	sets_string := '\nSETS\n'+initial_indent+main_machine.sets.writeCollection(1,';',1)+'\n'; 
}

if(main_machine.variables.size() > 0) {
	var_string := '\nVARIABLES\n'+initial_indent+main_machine.variables.writeCollection(1,',',1)+'\n';
}

if(main_machine.invariants.size() > 0) {
	inv_string := '\nINVARIANT\n'+initial_indent+main_machine.invariants.writeCollection(1,' /\\',1)+'\n';
}

-- initialisation clause
if(main_machine.initialisations.size() > 0) {
	init_string := '\nINITIALISATION\n'+initial_indent+main_machine.initialisations.writeCollection(1,' ||',1)+'\n';
}

if(main_machine.operations.size() > 0) {
	op_string := '\nOPERATIONS\n'+initial_indent+main_machine.operations.writeCollection(1,';',2)+'\n';
}
%]
[%=sets_string%][%=var_string%][%=inv_string%][%=init_string%][%=op_string%]END 

[%
operation Collection writeCollection(indentCount : Integer, separator : String, i : Integer) : String {
	var toReturn : String := '';
	var sep : String := '';
	var nl : String := '';
	var indt : String := indentCount.indent();
	nl := '\n'.stringRepeat(i);
	for(v in self) {
		--v.println();
		toReturn := toReturn + sep + v.write(0);
		sep := separator + nl + indt;
	}
	return toReturn;
}

operation SET write(i : Integer) : String {
	var indt : String := i.indent();
	return indt+self.name;
}

operation Variable write(i : Integer) : String {
	var indt : String := i.indent();
	return indt+self.name;
}

operation Expression write(i : Integer) : String {
	var indt : String := i.indent();
	return indt+self.expression;
}

operation Operation write(i : Integer) : String {
	var indt : String := i.indent();
	var op_string : String := '';
	
	-- write the outputs if they exist
	if(self.outputs.size > 0) {
		op_string := indt+self.outputs.write(0)+' <-- ';
	}
	
	-- complete the signature of the operation
	op_string := op_string+self.name+self.inputs.write(0).parenthesise()+' == \n';
	
	if(self.preconditions.size() > 0) {
		op_string := op_string + (i+2).indent()+'PRE\n'+(i+3).indent()+self.preconditions.writeCollection(i+3,' /\\',1)+'\n'+(i+2).indent()+'THEN\n';
	}
	op_string := op_string+(i+3).indent()+self.statements.writeCollection(i+3,' ||',1)+'\n';
	if(self.preconditions.size() > 0) {
		op_string := op_string + (i+2).indent()+'END';
	}
	return op_string;
}

operation Action write(i : Integer) : String {
	return self.expression;
}

operation Skip write(i : Integer) : String {
	return 'SKIP';
}

operation VariableList write(i : Integer) : String {
	var indt : String := i.indent();
	if(self.size = 0) {
		return '';
	} 
	else {
		var toReturn : String := '';
		var varr : Variable := self.first;
		var sep : String := '';
		while(varr.isDefined()) {
			toReturn := toReturn + sep + varr.write(0);
			varr := varr.preceeds;
			sep := ', ';
		}
		return indt+toReturn;
	}
}

operation String parenthesise() : String {
	if(self = '') {
		return '';
	}
	else {
		return '( '+self+' )';
	}
}

operation String stringRepeat(i : Integer) : String {
	var cnt : Integer := 0;
	var toReturn : String := '';
	while(cnt < i) {
		toReturn := toReturn + self;
		cnt := cnt + 1;
	}
	return toReturn;
}

%]