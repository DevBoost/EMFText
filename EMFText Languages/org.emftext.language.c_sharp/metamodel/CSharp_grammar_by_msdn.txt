///////////////////////////////////////////////////////////// MRange
Zusammenfassung der noch offenen Bereiche:
- hauptsächlich fehlen einige class-, interface-, event-, ... -Declarations sowie deren verwendeten Unter-Regeln
- Zulassen von Kommenaren
- Pre-processing directives können - wie schon Kommentare - überall stehen
- Überprüfen der "IDENTIFIER"-Tokens da diese bisher nur direkt aus Java Übernommen wurden
- Bedeutung von (global-)attribute-target wegen ungenauer Vorlage von MSDN nicht ganz klar
/////////////////////////////////////////////////////////////




C# Language Specification
C. Grammar

This appendix contains summaries of the lexical and syntactic grammars found in the main document, and of the grammar extensions for unsafe code. Grammar productions appear here in the same order that they appear in the main document.
C.1 Lexical grammar

input:
    input-section *
    
input-section:
    input-element *   new-line
    pp-directive
    
input-element:
    whitespace
    comment
    token

C.1.1 Line terminators

new-line:
    Carriage return character (U+000D)
    Line feed character (U+000A)
    Carriage return character (U+000D) followed by line feed character (U+000A)
    Line separator character (U+2028)
    Paragraph separator character (U+2029)

C.1.2 White space

whitespace:
    Any character with Unicode class Zs
    Horizontal tab character (U+0009)
    Vertical tab character (U+000B)
    Form feed character (U+000C)

C.1.3 Comments

comment:
    single-line-comment
    delimited-comment
    
single-line-comment:
    '//'   input-character *

input-character:
    Any Unicode character except a new-line-character
    
new-line-character:
    Carriage return character (U+000D)
    Line feed character (U+000A)
    Line separator character (U+2028)
    Paragraph separator character (U+2029)
    
delimited-comment:
    /*   delimited-comment-character *   */

delimited-comment-character:
    not-asterisk
    '*'   not-slash
    
not-asterisk:
    Any Unicode character except *
    
not-slash:
    Any Unicode character except /

C.1.4 Tokens

token:
    identifier
    keyword
    integer-literal
    real-literal
    character-literal
    string-literal
    operator-or-punctuator

C.1.5 Unicode character escape sequences

unicode-escape-sequence:
    '\u'   hex-digit   hex-digit   hex-digit   hex-digit
    '\U'   hex-digit   hex-digit   hex-digit   hex-digit   hex-digit   hex-digit   hex-digit   hex-digit



C.1.6 Identifiers

//Identifier bisher als direkte Kopie von der Java-Grammatik -->siehe NamedElement ("name[]") 

//pre-done
identifier:  
    available-identifier
    '@'   identifier-or-keyword

//pre-done
available-identifier: 
    An identifier-or-keyword that is not a keyword

//pre-done    
identifier-or-keyword: 
    identifier-start-character   identifier-part-character *

//pre-done  
identifier-start-character: 
    letter-character
    '_' (the underscore character U+005F) 

//pre-done  
identifier-part-character: 
    letter-character
    decimal-digit-character
    connecting-character
    combining-character
    formatting-character

//pre-done
letter-character: 
    A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl
    A unicode-escape-sequence representing a character of classes Lu, Ll, Lt, Lm, Lo, or Nl

//pre-done
combining-character: 
    A Unicode character of classes Mn or Mc
    A unicode-escape-sequence representing a character of classes Mn or Mc

//pre-done
decimal-digit-character: 
    A Unicode character of the class Nd 
    A unicode-escape-sequence representing a character of the class Nd

//pre-done
connecting-character: 
    A Unicode character of the class Pc
    A unicode-escape-sequence representing a character of the class Pc

//pre-done
formatting-character: 
    A Unicode character of the class Cf
    A unicode-escape-sequence representing a character of the class Cf

C.1.7 Keywords

//done
keyword: one of
    abstract 	as 	base 	bool 	break 	byte 	case
    catch 	char 	checked 	class 	const 	continue 	decimal
    default 	delegate 	do 	double 	else 	enum 	event
    explicit 	extern 	false 	finally 	fixed 	float 	for
    foreach 	goto 	if 	implicit 	in 	int 	interface
    internal 	is 	lock 	long 	namespace 	new 	null
    object 	operator 	out 	override 	params 	private 	protected
    public 	readonly 	ref 	return 	sbyte 	sealed 	short
    sizeof 	stackalloc 	static 	string 	struct 	switch 	this
    throw 	true 	try 	typeof 	uint 	ulong 	unchecked
    unsafe 	ushort 	using 	virtual 	void 	volatile 	while

C.1.8 Literals

//done
literal:
    boolean-literal 
    integer-literal
    real-literal
    character-literal
    string-literal
    null-literal

//done    
boolean-literal:
    'true'
    'false'
 
//done   as token
integer-literal:
    decimal-integer-literal
    hexadecimal-integer-literal

//done    
decimal-integer-literal:
    decimal-digit *   integer-type-suffix ?

//done    
decimal-digit: one of
    0 1 2 3 4 5 6 7 8 9
    
//done
integer-type-suffix: one of
    U u L l UL Ul uL ul LU Lu lU lu

//done    
hexadecimal-integer-literal:
    '0x'   hex-digit *   integer-type-suffix ?
    '0X'   hex-digit *   integer-type-suffix ?

//done
hex-digit: one of
    0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f

//done    
real-literal:
    decimal-digit *   '.'   decimal-digit *   exponent-part ?   real-type-suffix ?
    '.'   decimal-digit *   exponent-part ?   real-type-suffix ?
    decimal-digit *   exponent-part   real-type-suffix ?
    decimal-digit *   real-type-suffix

//done    
exponent-part:
    'e'   sign ?   decimal-digit *
    'E'   sign ?   decimal-digit *

//done    
sign: one of
    + -

//done  
real-type-suffix: one of
    F f D d M m


//done in CHARACTER_LITERAL    
character-literal:
   '''   character   ''' //also '

//done    
character:
    single-character
    simple-escape-sequence
    hexadecimal-escape-sequence
    unicode-escape-sequence

//done with '\\'('0'..'3')('0'..'7')('0'..'7') like java-grammar  
// unklar: "new-line-character"-rule nötig?
single-character:
    Any character except ' (U+0027), \ (U+005C), and new-line-character

//done     
simple-escape-sequence: one of
    \' \" \\ \0 \a \b \f \n \r \t \v

//done     
hexadecimal-escape-sequence:
    '\x'   hex-digit   hex-digit ?   hex-digit ?   hex-digit ?

//done    
string-literal:
    regular-string-literal
    verbatim-string-literal

//done    
regular-string-literal:
    '"'   regular-string-literal-character *   '"'

//done
regular-string-literal-character:
    single-regular-string-literal-character
    simple-escape-sequence
    hexadecimal-escape-sequence
    unicode-escape-sequence

//done with '\\'('0'..'3')('0'..'7')('0'..'7') like java-grammar  
// unklar: "new-line-character"-rule nötig?    
single-regular-string-literal-character:
    Any character except " (U+0022), \ (U+005C), and new-line-character

//done    
verbatim-string-literal:
    '@"'   verbatim-string-literal-character *   '"'

//done    
verbatim-string-literal-character:
    single-verbatim-string-literal-character
    quote-escape-sequence

//done    
single-verbatim-string-literal-character:
    any character except "

//done    
quote-escape-sequence:
    '""'
    
//done
null-literal:
    'null'

C.1.9 Operators and punctuators

//done
operator-or-punctuator: one of
    { } [ ] ( ) . , : ;
    + - * / % & | ^ ! ~
    = < > ? ++ -- && || << >>
    == != <= >= += -= *= /= %= &=
    |= ^= <<= >>= ->

C.1.10 Pre-processing directives

pp-directive:
    pp-declaration
    pp-conditional
    pp-line
    pp-diagnostic
    pp-region
    
pp-new-line:
    whitespace ?   single-line-comment ?   new-line

conditional-symbol:
    Any identifier-or-keyword except true or false

pp-expression:
    whitespace ?   pp-or-expression   whitespace ?
    
pp-or-expression:
    pp-and-expression
    pp-or-expression   whitespace ?   '||'   whitespace ?   pp-and-expression

pp-and-expression:
    pp-equality-expression
    pp-and-expression   whitespace ?   '&&'   whitespace ?   pp-equality-expression

pp-equality-expression:
    pp-unary-expression
    pp-equality-expression   whitespace ?   '=='   whitespace ?   pp-unary-expression
    pp-equality-expression   whitespace ?   '!='   whitespace ?   pp-unary-expression
 
pp-unary-expression:
    pp-primary-expression
    '!'   whitespace ?   pp-unary-expression
 
pp-primary-expression:
    'true'
    'false'
    conditional-symbol
    '('   whitespace ?   pp-expression   whitespace ?   ')'
    
pp-declaration:
    whitespace ?   '#'   whitespace ?   define   whitespace   conditional-symbol   pp-new-line
    whitespace ?   '#'   whitespace ?   undef   whitespace   conditional-symbol   pp-new-line

pp-conditional:
    pp-if-section   pp-elif-section *   pp-else-section ?   pp-endif

pp-if-section:
    whitespace ?   '#'   whitespace ?   'if'   whitespace   pp-expression   pp-new-line   conditional-section ?
 
pp-elif-section:
    whitespace ?   '#'   whitespace ?   'elif'   whitespace   pp-expression   pp-new-line   conditional-section ?
    
pp-else-section:
    whitespace ?   '#'   whitespace ?   'else'   pp-new-line   conditional-section ?
    
pp-endif:
    whitespace ?   '#'   whitespace ?   'endif'   pp-new-line

conditional-section:
    input-section
    skipped-section +
    
skipped-section:
    skipped-characters ?   new-line
    pp-directive
    
skipped-characters:
    whitespace ?   not-number-sign   input-character *
    
not-number-sign:
    Any input-character except '#'
    
pp-line:
    whitespace ?   '#'   whitespace ?   line   whitespace   line-indicator   pp-new-line
    
line-indicator:
    decimal-digit *   whitespace   file-name
    decimal-digit *
    'default'
    
file-name:
    '"'   file-name-character *   '"'
    
file-name-character:
    Any input-character except "
    
pp-diagnostic:
    whitespace ?   '#'   whitespace ?   error   pp-message
    whitespace ?   '#'   whitespace ?   warning   pp-message
    
pp-message:
    new-line
    whitespace   input-character *   new-line
    
pp-region:
    pp-start-region   conditional-section ?   pp-end-region
    
pp-start-region:
    whitespace ?   '#'   whitespace ?   region   pp-message
    
pp-end-region:
    whitespace ?   '#'   whitespace ?   endregion   pp-message
    

C.2 Syntactic grammar

C.2.1 Basic concepts

namespace-or-type-name: //done with namespaceOrTypeNameParts
    identifier ( '.' namespace-or-type-name) ? 


C.2.2 Types

//done
//splitt type with/without array caused of left-recursion
type:
    non-array-type
	array-type

//done
non-array-type:
	value-type 
    reference-type 
    pointer-type

//done  : ( simpleType | referenceType )  ( "*" )+    
pointer-type: //achtung: Linksrekursiv
    type   '*'
    'void'   '*' //void in simple-type

//done, splitt in SimpleType and ReferenceType    
value-type:
    struct-type
    enum-type

//done, splitt in SimpleType and ReferenceType  
struct-type:
    namespace-or-type-name 
    simple-type

//done as abstract  
simple-type:
    numeric-type
    'bool' //done as Simpletype

//done as Simpletype    
numeric-type:
    integral-type
    floating-point-type
    'decimal'

//done as Simpletype    
integral-type:
    sbyte
    byte
    short
    ushort
    int
    uint
    long
    ulong
    char

//done as Simpletype    
floating-point-type:
    float
    double
    
//done in ClassOrInterfaceOrDelegateOrEnumType   
enum-type:
    namespace-or-type-name

//done
reference-type:		
    class-type
    interface-type
    delegate-type

//done in ClassOrInterfaceOrDelegateOrEnumType
class-type: 		
    namespace-or-type-name
    'object'
    'string'			

//done in ClassOrInterfaceOrDelegateOrEnumType 
interface-type:
    namespace-or-type-name
    
//done in ClassOrInterfaceOrDelegateOrEnumType
delegate-type:
    namespace-or-type-name



C.2.3 Variables

//done, no special rule, always used as expression
variable-reference:
    expression

C.2.4 Expressions

//done		Zehlike
argument-list:
    argument ( ','   argument) * 

//done		Zehlike/Range  (ref/out as keyword)       
argument:		//Reihenfolge beachten 
    expression
    'ref'   variable-reference
    'out'   variable-reference

//done    
primary-expression:
    primary-no-array-creation-expression
    array-creation-expression

//done    
primary-no-array-creation-expression:
    literal							//done		Zehlike
    identifier						//done		MRange
    parenthesized-expression		//done		Zehlike
    'this'							//done as Literal
    base-access						//done		Zehlike
    object-creation-expression		//done		Zehlike
    delegate-creation-expression	//done		Zehlike
    typeof-expression				//done		Zehlike
    checked-expression				//done		Zehlike
    unchecked-expression			//done		Zehlike
    sizeof-expression				//done		Zehlike
    

//Links-Rekursions-Lösung
primary-extended-expression-type:
	member-access				//done
	invocation-expression		//done
	element-access				//done
	post-increment-expression	//done
	post-decrement-expression	//done
	pointer-member-access		//done
 
//done		Zehlike   
pointer-member-access:	
    '->'   identifier

//done		Zehlike    
addressof-expression:
    '&'   unary-expression

//done		Zehlike    
sizeof-expression:
    'sizeof'   (   type   )
    
//done		Zehlike    
parenthesized-expression:
    '('   expression   ')'

//done MRange
//		Zehlike, where simple-type is used as predefined-type    
member-access:
    (predefined-type)?  '.'  identifier

//done as simpletype 		     
predefined-type: one of
    bool byte char decimal double float int long
    object sbyte short string uint ulong ushort

//done MRange    
invocation-expression:
    '('   argument-list ?   ')'

//done MRange
element-access:
	'['   expression-list   ']'

//done		Zehlike    
expression-list:
    expression ( ','   expression )*

//done		Zehlike      
base-access:
    'base'   '.'   identifier
    'base'   '['   expression-list   ']'

//done MRange    
post-increment-expression:
     '++'

//done MRange
post-decrement-expression:
     '--'

//done		Zehlike    
object-creation-expression:
    'new'   type   '('   argument-list ?   ')'

//done MRange   
array-creation-expression:
    'new'   type   '['   expression-list   ']'   rank-specifier *   array-initializer ?
    'new'   array-type   array-initializer

//done		Zehlike  
delegate-creation-expression:
    'new'   delegate-type   (   expression   )

//done		Zehlike
typeof-expression:
    'typeof'   '('   type   ')'
    'typeof'   '('   'void'   ')'   //remove "void" cause this is a type

//done		Zehlike   
checked-expression:
    'checked'   '('   expression   ')'

//done		Zehlike
unchecked-expression:
    'unchecked'   '('   expression   ')'

//done		Zehlike    
unary-expression:
	member-access 	//muss wegen predefined-type schon eher geprüft werden
    primary-expression   primary-extended-expression-type *		//aus Umbau der Linksrekursion hervorgegangen
    '+'   unary-expression	
    '-'   unary-expression	
    '!'   unary-expression	
    '~'   unary-expression 	
    '*'   unary-expression	
    pre-increment-expression
    pre-decrement-expression
    cast-expression
    pointer-indirection-expression
    addressof-expression

//done		Zehlike    
pre-increment-expression:
    '++'   unary-expression

//done		Zehlike
pre-decrement-expression:
    '--'   unary-expression

//done		Zehlike    
cast-expression:
    '('   type   ')'   unary-expression

//done		Zehlike    
multiplicative-expression:
    unary-expression   ( ( '*' | '/' | '%' )   unary-expression )*
    
//done		Zehlike
additive-expression:
    multiplicative-expression ( ( '+' | '-' ) multiplicative-expression

//done		Zehlike
shift-expression:
    additive-expression ( ( '<<' | '>>' | '%' )   additive-expression )?

//half-done: Kommentar noch nicht beachtet		Zehlike
relational-expression:
    shift-expression (( 'is' | 'as' ) type )? ( ( '<' | '>' | '<=' | '>=' )   shift-expression (( 'is' | 'as' ) type )? )* 
	//(( is | as ) type )? muss weiter unterschieden werden

//done		Zehlike    
equality-expression:
    relational-expression   (('==' | '!=')   relational-expression)*

//done		Zehlike   
and-expression:
    equality-expression   ('&'   equality-expression)*
    
//done		Zehlike    
exclusive-or-expression:
    and-expression  ( '^'   and-expression )*
    
//done		Zehlike
inclusive-or-expression:
    exclusive-or-expression   ('|'   exclusive-or-expression)*

//done		Zehlike   
conditional-and-expression:
    inclusive-and-expression   ('&&'   inclusive-or-expression)*

//done		Zehlike    
conditional-or-expression:
    conditional-and-expression   ('||'   conditional-and-expression)*
    
conditional-expression:
    conditional-or-expression  ( '?'   expression   ':'   expression ) ?

//done		Zehlike    
assignment-expression:
    unary-expression   assignment-operator   expression
    
    
//done		Zehlike
expression:
    conditional-expression
    assignment-expression


C.2.5 Statements

//done 		Zehlike
statement:
    labeled-statement
    declaration-statement
    embedded-statement

//done MRange  
embedded-statement:
    ( unsafe ) ?  block		//done in SimpleEmbeddedStatement
    empty-statement			
    expression-statement	
    selection-statement		
    iteration-statement		
    jump-statement			
    try-statement			
    checked-statement
    unchecked-statement
    lock-statement
    using-statement
	fixed-statement

//done		Zehlike
//";" added MRange
block:
    '{'   statement *  '}'
	';'
	
//done		Zehlike
empty-statement:
    ';'

//done, while identifier is just a name[] of Type NamedElement		Zehlike
labeled-statement:
    identifier  ':'   statement

//done		Zehlike
declaration-statement:
    variable-declaration   ';'
    local-constant-declaration   ';'
    
//done		Zehlike
variable-declaration:
    type   local-variable-declarator +
   
//done		Zehlike 
//renamed in VariableDeclarator (equal functions) MRange
local-variable-declarator:
    identifier ( '='   local-variable-initializer) ? 

//half-done, as abstract class, 
//array-initializer is missing	MRange  
//renamed in VariableInitializer (equal functions)
local-variable-initializer:
    expression
    array-initializer

//done		Zehlike   
local-constant-declaration:
    'const'   type   constant-declarators

//done		in local-constant-declaration		Range
constant-declarators:
    constant-declarator ( ','   constant-declarator)*

//done		Zehlike
constant-declarator:
    identifier   =   expression

//done
expression-statement:
    statement-expression   ';'

//done MRange
statement-expression:
    invocation-expression
    object-creation-expression
    assignment-expression		
    post-increment-expression	
    post-decrement-expression	
    pre-increment-expression
    pre-decrement-expression

//done     
selection-statement:
    if-statement
    switch-statement

//done    
if-statement:
    'if'   '('   expression   ')'   embedded-statement	( 'else'   embedded-statement ) ?
    
//done     
switch-statement:
    'switch'   '('   expression   ')'   '{'   switch-section *   '}'

//done    
switch-section:
    switch-label *   statement *

//done with "default" and "case" as seperate Model 
switch-label:
    ( 'default' | ('case'   expression ) ) ':'

//done    
iteration-statement:
    while-statement	
    do-statement	
    for-statement
    foreach-statement

//done    
while-statement:
    'while'   '('   expression   ')'   embedded-statement

//done    
do-statement:
    'do'   embedded-statement   'while'   '('   expression   ')'   ';'

//done    
for-statement:
    'for'   '('   for-initializer ?   ';'   expression ?   ';'   statement-expression-list ?   ')'   embedded-statement

//done    
for-initializer:
    variable-declaration
    statement-expression-list

//done    
statement-expression-list:
    statement-expression (  ','   statement-expression )*  

//done    
foreach-statement:
    'foreach'   '('   type   identifier   'in'   expression   ')'   embedded-statement

//done    
jump-statement:
    break-statement
    continue-statement
    goto-statement
    return-statement
    throw-statement

//done    
break-statement:
    'break'   ';'

//done    
continue-statement:
    'continue'   ';'

//done       
goto-statement:
    'goto'   identifier   ';'
    'goto'   'case'   expression   ';'
    'goto'   'default'   ';'

//done       
return-statement:
    'return'   expression ?   ';'

//done       
throw-statement:
    'throw'   expression ?   ';'

//done    
try-statement:
    'try'   block   catch-clauses
    'try'   block   finally-clause
    'try'   block   catch-clauses   finally-clause

//done in  try-statement   
catch-clauses:
    specific-catch-clauses +   general-catch-clause ?
    specific-catch-clauses *   general-catch-clause

//done  
specific-catch-clause:
    'catch'   '('   class-type   identifier ?   ')'   block

//done    
general-catch-clause:
    'catch'   block

//done    
finally-clause:
    'finally'   block

//done     
checked-statement:
    'checked'   block

//done     
unchecked-statement:
    'unchecked'   block

//done     
lock-statement:
    'lock'   '('   expression   ')'   embedded-statement

//done     
using-statement:
    'using'   '('    resource-acquisition   ')'    embedded-statement

//done     
resource-acquisition:
    variable-declaration
    expression

//done
fixed-statement:
    'fixed'   '('   pointer-type   fixed-pointer-declarator ( ','   fixed-pointer-declarator)*   ')'   embedded-statement

//done MRange
// variable-reference = expression, '&' in unary-expression
fixed-pointer-declarator:
    identifier   =  ( '&'  variable-reference | expression )
    
    

C.2.6 Namespaces

//done
compilation-unit:
    using-directive *   global-attributes *   namespace-member-declaration *

//done, merge alias and namespace
using-directive:  			
    using-alias-directive
    using-namespace-directive

//done
using-alias-directive: 		
    'using'   identifier   '='   namespace-or-type-name   ';'

//done 
using-namespace-directive: 	
    'using'   namespace-or-type-name   ';'
    
//done, abstract
namespace-member-declaration:
    namespace-declaration
    type-declaration

//done
namespace-declaration:
    'namespace'   qualified-identifier   namespace-body   ( ';' ) ?

//done as namespaceOrTypeName
qualified-identifier:
    identifier ('.'   identifier)*

//done
namespace-body:
    '{'   using-directive *   namespace-member-declaration *   '}'
        
       
type-declaration:
    class-declaration //done
    struct-declaration
    interface-declaration
    enum-declaration
    delegate-declaration



C.2.7 Classes

//done MRange
class-declaration:
    attributes *   class-modifier *   'class'   identifier   class-base ?   class-body   ( ';' ) ?

//done in Modifier
class-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    'abstract'
    'sealed'
    'unsafe'

//done    
class-base:
   ':'   class-type
   ':'   interface-type-list
   ':'   class-type   ','   interface-type-list

//done in ClassBase
interface-type-list:
    interface-type (','   interface-type)*

//done
class-body:
    '{'   class-member-declaration *  '}'
    
class-member-declaration:
    constant-declaration			//done
    field-declaration				//done
    method-declaration				//done
    property-declaration
    event-declaration
    indexer-declaration
    operator-declaration
    constructor-declaration
    destructor-declaration
    static-constructor-declaration
    type-declaration 				//done

//done    
constant-declaration:
    attributes *   constant-modifier *   'const'   type   constant-declarator ( ','   constant-declarator)*   ';'

//done in Modifier
constant-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'

//done  
field-declaration:
    attributes *   field-modifier *   type   variable-declarator (  ','   variable-declarator)*   ';'

//done in Modifier   
field-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    'static'
    'readonly'
    'volatile'
    'unsafe'

//done    
variable-declarator:
    identifier  ( '='   variable-initializer) ?

//done
variable-initializer:
    expression
    array-initializer

//done as method 
method-declaration:
    attributes *   method-modifier *   return-type   ( interface-type   '.') ?   identifier   (   formal-parameter-list ?   )   block   

//done in Modifier
method-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    'static'
    'virtual'
    'sealed'
    override
    'abstract'
    'extern'
    'unsafe'
    
//done in Method
return-type:
    type
    'void'
    
    
//done    
formal-parameter-list:
    fixed-parameter  ( ','   fixed-parameter)*
    fixed-parameter  ( ','   fixed-parameter)*   ','   parameter-array
    parameter-array  

//done     
fixed-parameter:
    attributes *   (ref|out) ?   type   identifier    

//done        
parameter-array:
    attributes *   params   array-type   identifier
    
property-declaration:
    attributes *   property-modifier *   type   ( interface-type   '.') ?   identifier   '{'   accessor-declarations   '}'

//done in Modifier
property-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    'static'
    'virtual'
    'sealed'
    override
    'abstract'
    'extern'
    'unsafe'
    
    
accessor-declarations: 		//soll accessor-declaration+(abstract) beinhalten
    get-accessor-declaration   set-accessor-declaration ?
    set-accessor-declaration   get-accessor-declaration ?
    
get-accessor-declaration:	//Ableitung von accessor-declaration
    attributes *   'get'   block
    
set-accessor-declaration:	//Ableitung von accessor-declaration
    attributes *   'set'   block
    
event-declaration:
    attributes *   event-modifier *   'event'   type   variable-declarator (  ','   variable-declarator)*   ';'
    attributes *   event-modifier *   'event'   type   ( interface-type   '.') ?   identifier   '{'   event-accessor-declarations   '}'

//done in Modifier    
event-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    'static'
    'virtual'
    'sealed'
    'override'
    'abstract'
    'extern'
    'unsafe'
    
event-accessor-declarations: 	//soll event-accessor-declaration(abstract) 2mal beinhalten
    add-accessor-declaration   remove-accessor-declaration
    remove-accessor-declaration   add-accessor-declaration
    
add-accessor-declaration:		//Ableitung von event-accessor-declaration
    attributes *   add   block
    
remove-accessor-declaration:	//Ableitung von event-accessor-declaration
    attributes *   remove   block
    
indexer-declaration:
    attributes *   indexer-modifiers *   indexer-declarator   '{'   accessor-declarations   '}'

//done in Modifier    
indexer-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    'virtual'
    'sealed'
    'override'
    'abstract'
    'extern'
    'unsafe'
    
indexer-declarator:
    type   (interface-type   '.') 'this'   '['   formal-parameter-list   ']'
    
operator-declaration:
    attributes *   operator-modifier +   operator-declarator   block

//done in Modifier    
operator-modifier:
    'public'
    'static'
    'extern'
    'unsafe'
    
operator-declarator:
    unary-operator-declarator
    binary-operator-declarator
    conversion-operator-declarator
    
unary-operator-declarator:
    type   'operator'   overloadable-unary-operator   '('   type   identifier   ')'
    
overloadable-unary-operator: one of
    +   -   !   ~   ++   --   true   false
    
binary-operator-declarator:
    type   'operator'   overloadable-binary-operator   '('   type   identifier   ','   type   identifier   ')'
    
overloadable-binary-operator: one of
    +   -   *   /   %   &   |   ^   <<   >>   ==   !=   >   <   >=   <=
    
conversion-operator-declarator:
    ( 'implicit' | 'explicit' )  'operator'   type   '('   type   identifier   ')'
    
constructor-declaration:
    attributes *   constructor-modifier *   constructor-declarator   block

//done in Modifier    
constructor-modifier:
    'public'
    'protected'
    'internal'
    'private'
    'extern'
    'unsafe'
    
constructor-declarator:
    identifier   '('   formal-parameter-list ?   ')'   constructor-initializer ?
    
constructor-initializer:
   ':'   ( 'base' | 'this' )   '('   argument-list ?   ')'

static-constructor-declaration:
    attributes *   static-constructor-modifiers   identifier   '('  ')'   block

//pre-done in Modifier, static-constructor-modifiers bekommt ein +    
static-constructor-modifiers
	extern ?   unsafe ?   static
    unsafe ?   extern ?   static
    extern ?   static   unsafe ?
    unsafe ?    static   extern ?
    static   extern ?   unsafeop
    static   unsafe ?   extern ?
    
destructor-declaration:
    attributes *   'extern' ?   'unsafe' ?   ~   identifier   '('   ')'    block
    attributes *   'unsafe' ?   'extern' ?   ~   identifier   '('   ')'    block



C.2.8 Structs

struct-declaration:
    attributes *   struct-modifier *   'struct'   identifier   interface-type-list ?   '{'   struct-member-declaration *   '}'   ( ';' ) ?

//done in Modifier   
struct-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    'unsafe'
      
    
struct-member-declaration:
    constant-declaration
    field-declaration
    method-declaration
    property-declaration
    event-declaration
    indexer-declaration
    operator-declaration
    constructor-declaration
    static-constructor-declaration
    type-declaration


//done MRange
C.2.9 Arrays

//done
array-type:
    non-array-type   rank-specifier +

//done
rank-specifier:
    '['  (',') *   ']'

//done    
array-initializer:
    '{'  (variable-initializer ( ','   variable-initializer) *) ?   '}'
    '{'   variable-initializer ( ','   variable-initializer) *   ','   '}'

//done in classes    
variable-initializer:
    expression
    array-initializer
    stackalloc-initializer

//done    
stackalloc-initializer:
    'stackalloc'   type   '['   expression   ']'


    
C.2.10 Interfaces

interface-declaration:
    attributes *   interface-modifier *   'interface'   identifier   interface-type-list ?   '{'   interface-member-declaration *  '}'   ( ';') ?

//done in Modifier       
interface-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
	'unsafe'
   

interface-member-declaration:
    interface-method-declaration
    interface-property-declaration
    interface-event-declaration
    interface-indexer-declaration
    
interface-method-declaration:
    attributes *   'new' ?   return-type   identifier   '('   formal-parameter-list ?   ')'   ';'
    
interface-property-declaration:
    attributes *   'new' ?   type   identifier   '{'   interface-accessors   '}'
    
interface-accessors:
    attributes *   get   ';'   ( attribute *   set   ';' )?
    attributes *   set   ';'   ( attribute *   get   ';' )?
    
interface-event-declaration:
    attributes *   'new' ?   'event'   type   identifier   ';'
    
interface-indexer-declaration:
    attributes *   'new' ?   type   'this'   '['   formal-parameter-list   ']'   '{'   interface-accessors   '}'



C.2.11 Enums

enum-declaration:
    attributes *   enum-modifier *   'enum'   identifier   integral-type ?   enum-body  ( ';' ) ?
    
enum-body:
    '{'  (enum-member-declaration  ( ','   enum-member-declaration) ?) ?   '}'
    '{'   enum-member-declaration  ( ','   enum-member-declaration) ?   ','   '}'

//done in Modifier      
enum-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
    
enum-member-declaration:
    attributes *   identifier (  '='   expression ) ?



C.2.12 Delegates

delegate-declaration:
    attributes *   delegate-modifier *   'delegate'   return-type   identifier   '('   formal-parameter-list ?   ')'   ';'

//done in Modifier       
delegate-modifier:
    'new'
    'public'
    'protected'
    'internal'
    'private'
	'unsafe'
	
	

//pre-done	
C.2.13 Attributes
 
//done   
global-attributes:
   '['   global-attribute-target  ':'   attribute ( ','   attribute)*   ( ',' )? ']'

//pre-done with identifier, genaue Bedeutung noch unklar    
global-attribute-target:
    assembly
    module

//done    
attributes:
   '['   ( attribute-target  ':' )?   attribute ( ','   attribute)*   ( ',' )?   ']'

//pre-done    
attribute-target:
    field
    'event'
    method
    param			//Schreibfehler? params?
    property		//keine Ahnung was genau gemeint ist, property-declaration?
    'return'
    type

//done       
attribute:
    namespace-or-type-name  attribute-arguments ?

//done    
attribute-arguments:
   	'('   expression-list ?   ')'
	'('   expression-list   ','   named-argument-list   ')'
	'('   named-argument-list   ')'

//done    
named-argument-list:
    named-argument ( ','   named-argument )*

//done    
named-argument:
    identifier   =   expression    

