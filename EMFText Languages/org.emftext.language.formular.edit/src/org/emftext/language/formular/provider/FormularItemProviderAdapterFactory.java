/*******************************************************************************
 * Copyright (c) 2006-2012
 * Software Technology Group, Dresden University of Technology
 * DevBoost GmbH, Berlin, Amtsgericht Charlottenburg, HRB 140026
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Software Technology Group - TU Dresden, Germany;
 *   DevBoost GmbH - Berlin, Germany
 *      - initial API and implementation
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.emftext.language.formular.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.emftext.language.formular.util.FormularAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FormularItemProviderAdapterFactory extends FormularAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
   * This constructs an instance.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public FormularItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Formular} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected FormularItemProvider formularItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Formular}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createFormularAdapter() {
    if (formularItemProvider == null)
    {
      formularItemProvider = new FormularItemProvider(this);
    }

    return formularItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Frage} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected FrageItemProvider frageItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Frage}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createFrageAdapter() {
    if (frageItemProvider == null)
    {
      frageItemProvider = new FrageItemProvider(this);
    }

    return frageItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Freitext} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected FreitextItemProvider freitextItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Freitext}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createFreitextAdapter() {
    if (freitextItemProvider == null)
    {
      freitextItemProvider = new FreitextItemProvider(this);
    }

    return freitextItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Auswahl} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected AuswahlItemProvider auswahlItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Auswahl}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createAuswahlAdapter() {
    if (auswahlItemProvider == null)
    {
      auswahlItemProvider = new AuswahlItemProvider(this);
    }

    return auswahlItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Option} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected OptionItemProvider optionItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Option}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createOptionAdapter() {
    if (optionItemProvider == null)
    {
      optionItemProvider = new OptionItemProvider(this);
    }

    return optionItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Datum} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected DatumItemProvider datumItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Datum}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createDatumAdapter() {
    if (datumItemProvider == null)
    {
      datumItemProvider = new DatumItemProvider(this);
    }

    return datumItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Zahl} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ZahlItemProvider zahlItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Zahl}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createZahlAdapter() {
    if (zahlItemProvider == null)
    {
      zahlItemProvider = new ZahlItemProvider(this);
    }

    return zahlItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Gruppe} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected GruppeItemProvider gruppeItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Gruppe}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createGruppeAdapter() {
    if (gruppeItemProvider == null)
    {
      gruppeItemProvider = new GruppeItemProvider(this);
    }

    return gruppeItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.emftext.language.formular.Entscheidung} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected EntscheidungItemProvider entscheidungItemProvider;

	/**
   * This creates an adapter for a {@link org.emftext.language.formular.Entscheidung}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createEntscheidungAdapter() {
    if (entscheidungItemProvider == null)
    {
      entscheidungItemProvider = new EntscheidungItemProvider(this);
    }

    return entscheidungItemProvider;
  }

	/**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

	/**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

	/**
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

	/**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

	/**
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Object adapt(Object object, Object type) {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

	/**
   * This adds a listener.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

	/**
   * This removes a listener.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

	/**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

	/**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void dispose() {
    if (formularItemProvider != null) formularItemProvider.dispose();
    if (frageItemProvider != null) frageItemProvider.dispose();
    if (freitextItemProvider != null) freitextItemProvider.dispose();
    if (auswahlItemProvider != null) auswahlItemProvider.dispose();
    if (optionItemProvider != null) optionItemProvider.dispose();
    if (datumItemProvider != null) datumItemProvider.dispose();
    if (zahlItemProvider != null) zahlItemProvider.dispose();
    if (gruppeItemProvider != null) gruppeItemProvider.dispose();
    if (entscheidungItemProvider != null) entscheidungItemProvider.dispose();
  }

}
