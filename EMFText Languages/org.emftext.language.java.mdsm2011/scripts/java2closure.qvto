// TODO 
// 1)
// until now the invocation of the 'invoke'-method of an anonymous class will be generated
// in such cases if the method won't be invoked after instantiation of the anonymous class
// - should not happen but is hard to determine
//
// 2)
// no method arguments will be adopted into the generated code - 
// not only in the 'invoke'-methods but in the other code too - 
// can be seen best in CTest8
// - I assume that this is a printer problem and not the transformation


modeltype CLOSURES uses 'http://www.emftext.org/language/java/closures';  
--modeltype CLOSURES uses 'platform:/resource/org.emftext.language.java.closures/model/closures.ecore';
modeltype JAVA uses "http://www.emftext.org/java";

-- in place transformation funktioniert nun auch
-- 'inout' ist entscheidend
-- grundsätzlich werden alle methoden und attribute übernommen,
-- sie müssen manuell entfernt werden per 'exclude()' methode' 

transformation Java2Closure(inout java : CLOSURES); 

main() {
	java.objects()[JAVA::classifiers::Class]->map Count_Classifiers_Class();
	java.objects()[JAVA::classifiers::AnonymousClass]->map Count_Classifiers_AnonymousClass();
//	java.objects()[JAVA::instantiations::NewConstructorCall]->map Count_Instantiations_NewConstructorCall();
//	java.objects()[JAVA::_references::MethodCall]->map Count_References_MethodCall();
	
	java.objects()[JAVA::instantiations::NewConstructorCall]->map Instantiations_NewConstructorCall();
	java.objects()[JAVA::_references::MethodCall]->map References_MethodCall();
	java.objects()[JAVA::statements::ExpressionStatement]->map Expressions_ExpressionStatement();
	java.objects()[JAVA::expressions::AssignmentExpression]->map Expressions_AssignmentExpression();
	java.objects()[JAVA::variables::LocalVariable]->map Variables_LocalVariable();
	java.objects()[JAVA::statements::Return]->map Statements_Return();
}

// Zähler
mapping inout JAVA::classifiers::Class::Count_Classifiers_Class(){}
// Zähler
mapping inout JAVA::classifiers::AnonymousClass::Count_Classifiers_AnonymousClass(){}

//mapping inout JAVA::instantiations::NewConstructorCall::Count_Instantiations_NewConstructorCall(){}
//mapping inout JAVA::_references::MethodCall::Count_References_MethodCall(){}

mapping inout JAVA::statements::Return::Statements_Return(){
	
	var closure : CLOSURES::Closure := null;
	
	if returnValue.oclIsTypeOf(JAVA::instantiations::NewConstructorCall) then
		closure := map Closures_Closure_Return(returnValue.oclAsType(JAVA::instantiations::NewConstructorCall))
	endif;
	if closure <> null then
			returnValue := closure
	endif

}

mapping inout JAVA::variables::LocalVariable::Variables_LocalVariable(){
	
	var closure : CLOSURES::Closure := null;
	
	if initialValue.oclIsTypeOf(JAVA::instantiations::NewConstructorCall) then
		closure := map Closures_Closure_LocalVariable(initialValue.oclAsType(JAVA::instantiations::NewConstructorCall))
	endif;
	if closure <> null then
			initialValue := closure
	endif

}

mapping inout JAVA::expressions::AssignmentExpression::Expressions_AssignmentExpression(){
	
	var closure : CLOSURES::Closure := null;
	
	if value.oclIsTypeOf(JAVA::instantiations::NewConstructorCall) then
		closure := map Closures_Closure_AssignmentExpression(value.oclAsType(JAVA::instantiations::NewConstructorCall))
	endif;
	if closure <> null then
			value := closure
	endif

}

-- Argument von MethodCall
mapping inout JAVA::_references::MethodCall::References_MethodCall(){
	
	var closure : CLOSURES::Closure := null;
	var tempArgs : OrderedSet(JAVA::expressions::Expression);
	
	self.arguments->forEach(a){
		if a.oclIsTypeOf(JAVA::instantiations::NewConstructorCall) then
			closure := map Closures_Closure_MethodCall(a.oclAsType(JAVA::instantiations::NewConstructorCall))
		endif;
		if closure <> null then
			tempArgs->append(closure)
		else
			tempArgs->append(a)
		endif;
	};
	
	self.arguments := tempArgs;
}

-- Argument von NewConstructorCall
mapping inout JAVA::instantiations::NewConstructorCall::Instantiations_NewConstructorCall(){
	
	var closure : CLOSURES::Closure := null;
	var tempArgs : OrderedSet(JAVA::expressions::Expression);
	
	self.arguments->forEach(a){
		if a.oclIsTypeOf(JAVA::instantiations::NewConstructorCall) then
			closure := map Closures_Closure_NewConstructorCall(a.oclAsType(JAVA::instantiations::NewConstructorCall))
		endif;
		if closure <> null then
			tempArgs->append(closure)
		else
			tempArgs->append(a)
		endif;
	};
	self.arguments := tempArgs;
}

-- NewConstructorCall in einer StatementExpression
mapping inout JAVA::statements::ExpressionStatement::Expressions_ExpressionStatement(){
	
	var closure : CLOSURES::Closure := null;
	
	if self.expression.oclIsTypeOf(JAVA::instantiations::NewConstructorCall) then
		closure := map Closures_Closure_NewConstructorCall(self.expression.oclAsType(JAVA::instantiations::NewConstructorCall))
	endif;
	if closure <> null then
			self.expression := closure
	endif
	
}
/*
query Closures_Closure_NewConstructorCall(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure =
	
	return map Closures_Closure(newConstructorCall);

query Closures_Closure_MethodCall(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure =
	
	return map Closures_Closure(newConstructorCall);
	
query Closures_Closure_Return(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure =
	
	return map Closures_Closure(newConstructorCall);
	
query Closures_Closure_LocalVariable(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure =
	
	return map Closures_Closure(newConstructorCall);
	
query Closures_Closure_AssignmentExpression(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure =
	
	return map Closures_Closure(newConstructorCall);
*/

mapping Closures_Closure_NewConstructorCall(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure
	when{
		newConstructorCall.typeReference <> null
		and
		newConstructorCall.anonymousClass <> null
		and
		newConstructorCall.anonymousClass.members->size() = 1
		and
		newConstructorCall.anonymousClass.members->at(1).oclIsTypeOf(JAVA::members::ClassMethod) 
	}
	{
		var innerMethod : JAVA::members::ClassMethod := 
			newConstructorCall.anonymousClass.members->at(1).oclAsType(JAVA::members::ClassMethod) ;
		var methodCall : JAVA::_references::MethodCall := 
			newConstructorCall.next.oclAsType(JAVA::_references::MethodCall) ;
		
		annotationsAndModifiers := innerMethod.annotationsAndModifiers;
		innerMethod.parameters->forEach(p){
			parameterTypes := parameterTypes->append(p.typeReference.deepclone().oclAsType(JAVA::types::TypeReference));
			p.arrayDimensionsBefore->forEach(adb){
				arrayDimensionsBefore := arrayDimensionsBefore->append(adb.deepclone().oclAsType(JAVA::arrays::ArrayDimension));
			}
		};
		valueType := innerMethod.typeReference;
		valueTypeArrayDimension := innerMethod.arrayDimensionsBefore;
		typeReference := newConstructorCall.typeReference;
		name := "";
		parameters := innerMethod.parameters;
		statements := innerMethod.statements;
		//methodName := innerMethod.name;
		//if methodCall <> null then
		//	arguments := methodCall.arguments
		//endif
	}

mapping Closures_Closure_MethodCall(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure
	when{
		newConstructorCall.typeReference <> null
		and
		newConstructorCall.anonymousClass <> null
		and
		newConstructorCall.anonymousClass.members->size() = 1
		and
		newConstructorCall.anonymousClass.members->at(1).oclIsTypeOf(JAVA::members::ClassMethod) 
	}
	{
		var innerMethod : JAVA::members::ClassMethod := 
			newConstructorCall.anonymousClass.members->at(1).oclAsType(JAVA::members::ClassMethod) ;
		var methodCall : JAVA::_references::MethodCall := 
			newConstructorCall.next.oclAsType(JAVA::_references::MethodCall) ;
		
		annotationsAndModifiers := innerMethod.annotationsAndModifiers;
		innerMethod.parameters->forEach(p){
			parameterTypes := parameterTypes->append(p.typeReference.deepclone().oclAsType(JAVA::types::TypeReference));
			arrayDimensionsBefore := p.arrayDimensionsBefore.deepclone().oclAsType(JAVA::arrays::ArrayDimension);
		};
		valueType := innerMethod.typeReference;
		valueTypeArrayDimension := innerMethod.arrayDimensionsBefore;
		typeReference := newConstructorCall.typeReference;
		name := "";
		parameters := innerMethod.parameters;
		statements := innerMethod.statements;
		/*
		methodName := innerMethod.name;
		if methodCall <> null then
			arguments := methodCall.arguments
		endif
		*/
	}

mapping Closures_Closure_AssignmentExpression(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure
	when{
		newConstructorCall.typeReference <> null
		and
		newConstructorCall.anonymousClass <> null
		and
		newConstructorCall.anonymousClass.members->size() = 1
		and
		newConstructorCall.anonymousClass.members->at(1).oclIsTypeOf(JAVA::members::ClassMethod) 
	}
	{
		var innerMethod : JAVA::members::ClassMethod := 
			newConstructorCall.anonymousClass.members->at(1).oclAsType(JAVA::members::ClassMethod) ;
		var methodCall : JAVA::_references::MethodCall := 
			newConstructorCall.next.oclAsType(JAVA::_references::MethodCall) ;
		
		annotationsAndModifiers := innerMethod.annotationsAndModifiers;
		innerMethod.parameters->forEach(p){
			parameterTypes := parameterTypes->append(p.typeReference.deepclone().oclAsType(JAVA::types::TypeReference));
			arrayDimensionsBefore := p.arrayDimensionsBefore.deepclone().oclAsType(JAVA::arrays::ArrayDimension);
		};
		valueType := innerMethod.typeReference;
		valueTypeArrayDimension := innerMethod.arrayDimensionsBefore;
		typeReference := newConstructorCall.typeReference;
		name := "";
		parameters := innerMethod.parameters;
		statements := innerMethod.statements;
		/*
		methodName := innerMethod.name;
		if methodCall <> null then
			arguments := methodCall.arguments
		endif
		*/
	}

mapping Closures_Closure_LocalVariable(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure
	when{
		newConstructorCall.typeReference <> null
		and
		newConstructorCall.anonymousClass <> null
		and
		newConstructorCall.anonymousClass.members->size() = 1
		and
		newConstructorCall.anonymousClass.members->at(1).oclIsTypeOf(JAVA::members::ClassMethod) 
	}
	{
		var innerMethod : JAVA::members::ClassMethod := 
			newConstructorCall.anonymousClass.members->at(1).oclAsType(JAVA::members::ClassMethod) ;
		var methodCall : JAVA::_references::MethodCall := 
			newConstructorCall.next.oclAsType(JAVA::_references::MethodCall) ;
		
		annotationsAndModifiers := innerMethod.annotationsAndModifiers;
		innerMethod.parameters->forEach(p){
			parameterTypes := parameterTypes->append(p.typeReference.deepclone().oclAsType(JAVA::types::TypeReference));
			arrayDimensionsBefore := p.arrayDimensionsBefore.deepclone().oclAsType(JAVA::arrays::ArrayDimension);
		};
		valueType := innerMethod.typeReference;
		valueTypeArrayDimension := innerMethod.arrayDimensionsBefore;
		typeReference := newConstructorCall.typeReference;
		name := "";
		parameters := innerMethod.parameters;
		statements := innerMethod.statements;
		/*
		methodName := innerMethod.name;
		if methodCall <> null then
			arguments := methodCall.arguments
		endif
		*/
	}

mapping Closures_Closure_Return(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure
	when{
		newConstructorCall.typeReference <> null
		and
		newConstructorCall.anonymousClass <> null
		and
		newConstructorCall.anonymousClass.members->size() = 1
		and
		newConstructorCall.anonymousClass.members->at(1).oclIsTypeOf(JAVA::members::ClassMethod) 
	}
	{
		var innerMethod : JAVA::members::ClassMethod := 
			newConstructorCall.anonymousClass.members->at(1).oclAsType(JAVA::members::ClassMethod) ;
		var methodCall : JAVA::_references::MethodCall := 
			newConstructorCall.next.oclAsType(JAVA::_references::MethodCall) ;
		
		annotationsAndModifiers := innerMethod.annotationsAndModifiers;
		innerMethod.parameters->forEach(p){
			parameterTypes := parameterTypes->append(p.typeReference.deepclone().oclAsType(JAVA::types::TypeReference));
			arrayDimensionsBefore := p.arrayDimensionsBefore.deepclone().oclAsType(JAVA::arrays::ArrayDimension);
		};
		valueType := innerMethod.typeReference;
		valueTypeArrayDimension := innerMethod.arrayDimensionsBefore;
		typeReference := newConstructorCall.typeReference;
		name := "";
		parameters := innerMethod.parameters;
		statements := innerMethod.statements;
		/*
		methodName := innerMethod.name;
		if methodCall <> null then
			arguments := methodCall.arguments
		endif
		*/
	}

/*
query Closures_Closure(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure{
	
		var closure : CLOSURES::Closure := object CLOSURES::Closure{};
	
		var innerMethod : JAVA::members::ClassMethod := 
			newConstructorCall.anonymousClass.members->at(1).oclAsType(JAVA::members::ClassMethod) ;
		var methodCall : JAVA::_references::MethodCall := 
			newConstructorCall.next.oclAsType(JAVA::_references::MethodCall) ;
		
		closure.annotationsAndModifiers := innerMethod.annotationsAndModifiers;
		innerMethod.parameters->forEach(p){
			closure.parameterTypes := closure.parameterTypes->append(p.typeReference.deepclone().oclAsType(JAVA::types::TypeReference));
			closure.arrayDimensionsBefore := p.arrayDimensionsBefore.deepclone().oclAsType(JAVA::arrays::ArrayDimension);
		};
		closure.valueType := innerMethod.typeReference;
		closure.valueTypeArrayDimension := innerMethod.arrayDimensionsBefore;
		closure.typeReference := newConstructorCall.typeReference;
		closure.name := "";
		closure.parameters := innerMethod.parameters;
		closure.statements := innerMethod.statements;
		closure.methodName := innerMethod.name;
		if methodCall <> null then
			closure.arguments := methodCall.arguments
		endif;
		
		return closure
}
*/
/*	
mapping Closures_Closure(in newConstructorCall : JAVA::instantiations::NewConstructorCall) : CLOSURES::Closure
	when{
		newConstructorCall.typeReference <> null
		and
		newConstructorCall.anonymousClass <> null
		and
		newConstructorCall.anonymousClass.members->size() = 1
		and
		newConstructorCall.anonymousClass.members->at(1).oclIsTypeOf(JAVA::members::ClassMethod) 
	}
	{
		var innerMethod : JAVA::members::ClassMethod := 
			newConstructorCall.anonymousClass.members->at(1).oclAsType(JAVA::members::ClassMethod) ;
		var methodCall : JAVA::_references::MethodCall := 
			newConstructorCall.next.oclAsType(JAVA::_references::MethodCall) ;
		
		annotationsAndModifiers := innerMethod.annotationsAndModifiers;
		innerMethod.parameters->forEach(p){
			parameterTypes := parameterTypes->append(p.typeReference.deepclone().oclAsType(JAVA::types::TypeReference));
			arrayDimensionsBefore := p.arrayDimensionsBefore.deepclone().oclAsType(JAVA::arrays::ArrayDimension);
		};
		valueType := innerMethod.typeReference;
		valueTypeArrayDimension := innerMethod.arrayDimensionsBefore;
		typeReference := newConstructorCall.typeReference;
		name := "";
		parameters := innerMethod.parameters;
		statements := innerMethod.statements;
		methodName := innerMethod.name;
		if methodCall <> null then
			arguments := methodCall.arguments
		endif
	}
*/
