modeltype PROPJAVA uses 'http://www.emftext.org/language/java/properties';
modeltype JAVA uses "http://www.emftext.org/java";

-- in place transformation funktioniert nun auch
-- 'inout' ist entscheidend
-- grundsätzlich werden alle methoden und attribute übernommen,
-- sie müssen manuell entfernt werden per 'exclude()' methode' 

transformation Java2Propjava(inout java : PROPJAVA);

main() {

	java.objects()[JAVA::members::Field]->map Member_Field();
	java.objects()[JAVA::classifiers::Class]->map Classifiers_Class();
}

mapping inout JAVA::classifiers::Class::Classifiers_Class() {
	
--	self.members->forEach(m){
--		if m.oclIsTypeOf(JAVA::members::ClassMethod) then
--			members := members->append(m.oclAsType(JAVA::members::ClassMethod).map Member_ClassMethod())
--		endif
--	};
--	self.members->forEach(m){
--		if m.oclIsTypeOf(JAVA::members::Field) then
--			members := members->append(m.oclAsType(JAVA::members::Field).map Member_Field())
--		endif
--	};

	self.members->forEach(m){
		if m.oclIsTypeOf(JAVA::members::Field) then
			self.members->forEach(get){
				if get.oclIsTypeOf(JAVA::members::ClassMethod) then
					self.members->forEach(set){
						if set.oclIsTypeOf(JAVA::members::ClassMethod) then
							let prop : PROPJAVA::Property = 
								m.oclAsType(JAVA::members::Field).
									map Member_Property(
										get.oclAsType(JAVA::members::ClassMethod),
										set.oclAsType(JAVA::members::ClassMethod)) in
							if(prop <> null) then
								members := members->append(prop)->asOrderedSet()->
								excluding(m.oclAsType(JAVA::members::Field))->asOrderedSet()->
								excluding(get.oclAsType(JAVA::members::ClassMethod))->asOrderedSet()->
								excluding(set.oclAsType(JAVA::members::ClassMethod))
							endif
						endif
					}
				endif
			}
		endif	
	};
	self.members->forEach(m){
		if m.oclIsTypeOf(JAVA::members::Field) then
			self.members->forEach(get){
				if get.oclIsTypeOf(JAVA::members::ClassMethod) then
					let prop : PROPJAVA::Property = 
						m.oclAsType(JAVA::members::Field).
							map Member_Property_ReadOnly(
								get.oclAsType(JAVA::members::ClassMethod)) in
					if(prop <> null) then
							members := members->append(prop)->asOrderedSet()->
							excluding(m.oclAsType(JAVA::members::Field))->asOrderedSet()->
							excluding(get.oclAsType(JAVA::members::ClassMethod))
					endif
				endif
			}
		endif	
	};


}

mapping in JAVA::members::Field::Member_Property(in getter : JAVA::members::ClassMethod, in setter : JAVA::members::ClassMethod) : PROPJAVA::Property 
	
	when {
		getter.name = 'get'.concat(self.name.firstToUpper())
		and
		setter.name = 'set'.concat(self.name.firstToUpper())
		and
		isCorrectGetter(self,getter)
		and
		isCorrectSetter(self,setter);
	}
	{
	name := self.name;
	typeReference := self.typeReference;
	_readonly := false;
	arrayDimensionsBefore := self.arrayDimensionsBefore;
}

mapping in JAVA::members::Field::Member_Property_ReadOnly(in getter : JAVA::members::ClassMethod) : PROPJAVA::Property 
	when {
		getter.name = 'get'.concat(self.name.firstToUpper())
		and
		isCorrectGetter(self,getter)
		and 
		not existsACorrespondingSetter(self);
	}
	{
	name := self.name;
	typeReference := self.typeReference;
	_readonly := true;
	arrayDimensionsBefore := self.arrayDimensionsBefore;
}

mapping inout JAVA::members::ClassMethod::Member_ClassMethod()
	when {
	    not java.objects()[JAVA::members::Field]->exists( f |
	              isCorrectGetter(f, self)
	              or
	              isCorrectSetter(f, self)
		        );
	}
	{
}

mapping inout JAVA::members::Field::Member_Field(){
}

-- looks for a field to a corresponding get method
query isCorrectGetter (field: java::members::Field, method : java::members::ClassMethod) : Boolean {
		
		
		return
		-- name
		method.name = 'get'.concat(field.name.firstToUpper())
		and
		-- return Type of getter equal to type of field
		hasCorrectTypeReference(field.typeReference,method.typeReference)
		and
		-- no Parameter
		method.parameters->size() = 0
		and
		-- if array then dimension is okay
		method.arrayDimensionsBefore->size() = field.arrayDimensionsBefore->size()
		and
		-- has correct Return statement
		hasGetterCorrectReturnStatement(field, method)
		and
		-- getter has to be public
		method.annotationsAndModifiers->first().oclIsTypeOf(java::modifiers::Public)
		and
		-- field has to be private
		field.annotationsAndModifiers->first().oclIsTypeOf(java::modifiers::Private)

	}

-- looks for a field to a corresponding set method
query isCorrectSetter (field: java::members::Field, method : java::members::ClassMethod) : Boolean {
		
		
		return
		-- name
		method.name = 'set'.concat(field.name.firstToUpper())
		and
		-- only one Parameter
		method.parameters->size() = 1
		and
		-- correct type of parameter
		hasCorrectTypeReference(field.typeReference, method.parameters->first().typeReference)
		and
		-- if array then dimension is okay
		field.arrayDimensionsBefore->size() = method.parameters->first().arrayDimensionsBefore->size()
		and
		-- return type has to be Void
		method.typeReference.oclIsTypeOf(java::types::Void)
		and
		-- has correct statement
		hasSetterCorrectAssignmentStatement(field, method)
		and
		-- setter has to be public
		method.annotationsAndModifiers->first().oclIsTypeOf(java::modifiers::Public)
		and
		-- field has to be private
		field.annotationsAndModifiers->first().oclIsTypeOf(java::modifiers::Private)

	}

-- checks type reference of field ans the reference in the parameter are equal 
query hasCorrectTypeReference(t1 : java::types::TypeReference, t2 : java::types::TypeReference) : Boolean { 		
	
		return
		-- NamespaceClassifierReference	
		 if t1.oclIsTypeOf(java::types::NamespaceClassifierReference) and 
			t2.oclIsTypeOf(java::types::NamespaceClassifierReference) then
			
			let namespaceReference : java::types::NamespaceClassifierReference = 
				t1.oclAsType(java::types::NamespaceClassifierReference) in
			let selfNamespaceReference : java::types::NamespaceClassifierReference = 
				t2.oclAsType(java::types::NamespaceClassifierReference) in
			
			let classifierReference : java::types::ClassifierReference = 
				namespaceReference.classifierReferences->first() in
			let selfClassifierReference : java::types::ClassifierReference = 
				selfNamespaceReference.classifierReferences->first() in
			
			classifierReference.target.name = selfClassifierReference.target.name
		
		-- PrimitiveType
		else if t1.oclIsTypeOf(java::types::Int) and 
				t2.oclIsTypeOf(java::types::Int) then
			true
		else if t1.oclIsTypeOf(java::types::Boolean) and 
				t2.oclIsTypeOf(java::types::Boolean) then
			true
		else if t1.oclIsTypeOf(java::types::Byte) and 
				t2.oclIsTypeOf(java::types::Byte) then
			true
		else if t1.oclIsTypeOf(java::types::Char) and 
				t2.oclIsTypeOf(java::types::Char) then
			true
		else if t1.oclIsTypeOf(java::types::Double) and 
				t2.oclIsTypeOf(java::types::Double) then
			true
		else if t1.oclIsTypeOf(java::types::Float) and 
				t2.oclIsTypeOf(java::types::Float) then
			true
		else if t1.oclIsTypeOf(java::types::Long) and 
				t2.oclIsTypeOf(java::types::Long) then
			true
		else if t1.oclIsTypeOf(java::types::Short) and 
				t2.oclIsTypeOf(java::types::Short) then
			true
		else if t1.oclIsTypeOf(java::types::Void) and 
				t2.oclIsTypeOf(java::types::Void) then
			true		
		else
			false
		endif endif endif endif endif endif endif endif endif endif
	}
	
-- has getter correct Return statement? Only a Return expression?
query hasGetterCorrectReturnStatement(field: java::members::Field, method : java::members::ClassMethod) : Boolean { 
		
		return
		if method.statements->size() > 1 then
			false
		else
		let statements : OrderedSet(java::statements::Statement) = method.statements in
			if statements->first().oclIsTypeOf(java::statements::Return) then
				let _return : java::statements::Return = statements->first().oclAsType(java::statements::Return) in
				let expression : java::expressions::Expression = _return.returnValue in
				if expression.oclIsTypeOf(java::_references::IdentifierReference) then
					let idReference : java::_references::IdentifierReference = expression.oclAsType(java::_references::IdentifierReference) in
					if idReference.target.name = field.name then
						true
					else
						false
					endif
				else
					false
				endif
			else
				false
			endif
		endif
	}
	
-- check if setter has correct assignment operation with left and right side
query hasSetterCorrectAssignmentStatement(field: java::members::Field, method : java::members::ClassMethod) : Boolean { 
		
		return
		let statements : OrderedSet(java::statements::Statement) = method.statements in
		-- only one statement
		
		if(statements->size() > 1) then
			false
		else
			-- has to be a expression statement
			if not statements->first().oclIsTypeOf(java::statements::ExpressionStatement) then
				false
			else
				let expressionStatement : java::statements::ExpressionStatement = 
					statements->first().oclAsType(java::statements::ExpressionStatement) in
				-- only one expression -> assignment expression
				if not expressionStatement.expression.oclIsTypeOf(java::expressions::AssignmentExpression) then
					false
				else
					let assignmentExpression : java::expressions::AssignmentExpression = 
						expressionStatement.expression.oclAsType(java::expressions::AssignmentExpression) in
					-- get attributes
					let child : java::expressions::Expression = assignmentExpression.child in
					let value : java::expressions::Expression = assignmentExpression.value in
					let operator : java::operators::AssignmentOperator = assignmentExpression.assignmentOperator in
					
					if (child.oclIsTypeOf(java::_references::SelfReference) and 
						value.oclIsTypeOf(java::_references::IdentifierReference) and
						operator.oclIsTypeOf(java::operators::Assignment)) then
						-- child	
						let childReference : java::_references::SelfReference = 
							child.oclAsType(java::_references::SelfReference) in
						-- value
						let valueReference : java::_references::IdentifierReference = 
							value.oclAsType(java::_references::IdentifierReference) in
						
						if (childReference._self.oclIsTypeOf(java::literals::This) and
							childReference.next.oclIsTypeOf(java::_references::IdentifierReference)) then
						
							let childNextReference : java::_references::IdentifierReference = 
								childReference.next.oclAsType(java::_references::IdentifierReference) in
							
							if	childNextReference.target.oclIsTypeOf(java::members::Field) then
								
								let childTargetField : java::members::Field = 
									childNextReference.target.oclAsType(java::members::Field) in
								
								childTargetField = field 
								and 
								valueReference.target.name = method.parameters->first().name 
								and
								hasCorrectTypeReference(valueReference.target.oclAsType(java::parameters::OrdinaryParameter).typeReference, method.parameters->first().typeReference)
							else
								false
							endif
						else
							false
						endif
					else
						false
					endif
				endif
			endif
		endif
}
	
query existsACorrespondingSetter(field : java::members::Field) : Boolean {

		return
        let foundMethodSize : Integer =
			java::members::ClassMethod.allInstances()->select( m |
                isCorrectSetter(field, m))->size()
        in
        foundMethodSize > 0
}
	
query existsACorrespondingGetter(field : java::members::Field) : Boolean {

	return
    let foundMethodSize : Integer =
		java::members::ClassMethod.allInstances()->select( m |
            isCorrectGetter(field, m))->size()
    in
    foundMethodSize > 0
}

query existsACorrespondingField(method : java::members::ClassMethod) : Boolean {

	return
    let foundFieldSize : Integer =
		java::members::Field.allInstances()->select( f |
            isCorrectGetter(f, method) 
       --     or 
       --     isCorrectSetter(f, method)
            )->size()
    in
    foundFieldSize > 0
}