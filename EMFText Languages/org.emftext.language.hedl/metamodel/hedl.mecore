hedl <http://www.emftext.org/language/hedl>

import <../../org.emftext.commons.jdt/metamodel/jdt.ecore> as jdt

EntityModel (
	options Option*
	entities Entity* <> Entity.entityModel
	enums Enum*
)

Option (
	key OptionType
	value EString
)

enum OptionType (
	PreserveTableNames
	PreserveColumnNames
)

abstract Commentable (
	comment EString?
)

abstract NamedElement (
	name EString
)

abstract Type : NamedElement (
	getJavaClassname() EString
)

Entity : Type, Commentable (
	~entityModel EntityModel <> EntityModel.entities
	properties Property*
	constraints Constraint*
	~superType Entity?
	~implementedInterfaces jdt.JDTJavaClassifier*
	
	getConstructorProperties() Property*
)

abstract Constraint

// a constraint over multiple properties
UniqueConstraint : Constraint (
	~properties Property(2..-1)
)

Enum : Type, Commentable (
	literals EnumLiteral*
)

EnumLiteral : NamedElement, Commentable

JavaType : Type (
	javaClass EJavaClass
)

Property : NamedElement, Commentable (
	readonly EBoolean
	unique EBoolean
	nullable EBoolean
	persist EBoolean
	refresh EBoolean
	eager EBoolean
	~type Type
	fromMultiplicity EBoolean
	toMultiplicity EBoolean
	~mappedBy Property? // TODO check that mappedBy is a property of the type of this property
	getTypeClassname() EString
	// properties can be either declared to be unique or be automatically unique if
	// they are a one-to-one mapping to some other entity
	isToOneReference() EBoolean
)
