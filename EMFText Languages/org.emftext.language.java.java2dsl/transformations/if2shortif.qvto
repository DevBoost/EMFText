--modeltype CLOSURES uses 'http://www.emftext.org/language/java/closures';  
--modeltype CLOSURES uses 'platform:/resource/org.emftext.language.java.closures/model/closures.ecore';
modeltype JAVA uses "http://www.emftext.org/java";

-- in place transformation funktioniert nun auch
-- 'inout' ist entscheidend
-- grundsätzlich werden alle methoden und attribute übernommen,
-- sie müssen manuell entfernt werden per 'exclude()' methode' 

transformation Java2Closure(inout java : JAVA);

main() {
	java.objects()[JAVA::classifiers::Class]->map Classifiers_Class();
	java.objects()[JAVA::statements::Condition]->map Statements_Condition();
	java.objects()[JAVA::statements::StatementListContainer]->map Statements_StatementListContainer();
	java.objects()[JAVA::statements::StatementContainer]->map Statements_StatementContainer();
	
}

// für Zähler
mapping inout JAVA::classifiers::Class::Classifiers_Class(){}

// für Zähler
mapping inout JAVA::statements::Condition::Statements_Condition(){}

// untersucht ob condition korrektes ResturnStatement enthält
query JAVA::statements::Statement::StatementToReturn() : JAVA::statements::Return {
	
	var condition : JAVA::statements::Condition; 
	var ret : JAVA::statements::Return;
	
	if self.oclIsTypeOf(JAVA::statements::Condition) then
		condition := self.oclAsType(JAVA::statements::Condition)
	endif;
	
	if not condition.oclIsUndefined() then
		if condition.statement.oclIsTypeOf(JAVA::statements::Return) 
			and
			condition.elseStatement.oclIsTypeOf(JAVA::statements::Return) then
				ret := map Condition2CondExpr_Return(condition)
		endif
	endif;
	
	return ret;
}

// untersucht ob statement korrekte condition ist
query JAVA::statements::Statement::StatementToCondExpr() : JAVA::expressions::ConditionalExpression {
	
	var condition : JAVA::statements::Condition; 
	var condExpr : JAVA::expressions::ConditionalExpression;
	
	if self.oclIsTypeOf(JAVA::statements::Condition) then
		condition := self.oclAsType(JAVA::statements::Condition)
	endif;
	
	if not condition.oclIsUndefined() then
		if condition.statement.oclIsTypeOf(JAVA::statements::ExpressionStatement) and
			condition.statement.oclAsType(
				JAVA::statements::ExpressionStatement).expression.
				oclIsTypeOf(JAVA::expressions::AssignmentExpression)
		   and
		   condition.elseStatement.oclIsTypeOf(JAVA::statements::ExpressionStatement) and
			condition.elseStatement.oclAsType(
				JAVA::statements::ExpressionStatement).expression.
				oclIsTypeOf(JAVA::expressions::AssignmentExpression) then
			condExpr := map expressions_ConditionalExpression(condition)
		endif 
	endif;
	
	return condExpr;
}

// durchläuft alle statements
mapping inout JAVA::statements::StatementListContainer::Statements_StatementListContainer(){
	
	var tempStatements : OrderedSet(JAVA::statements::Statement);
	
	self.statements->forEach(s){
		
		var condExpr : JAVA::expressions::ConditionalExpression :=
			s.StatementToCondExpr();
		var ret : JAVA::statements::Return :=
				s.StatementToReturn();
		
		var locVar : JAVA::variables::LocalVariable = null;
		var gloVar : JAVA::members::Field := null;
		
		if condExpr <> null then
			locVar := variables_LocalVariable(s.oclAsType(JAVA::statements::Condition))
		endif;
		if condExpr <> null then
			gloVar := members_Field(s.oclAsType(JAVA::statements::Condition))
		endif;
		
		if condExpr <> null then
			if locVar <> null then
				if locVar.initialValue = null then
					locVar.map set_initialValue(condExpr)
				else
					tempStatements := 
					tempStatements->append(
						map statements_ExpressionStatement(condExpr,locVar))
				endif
			else
			if gloVar <> null then
				tempStatements := 
					tempStatements->append(map statements_ExpressionStatement(condExpr,gloVar))
			endif endif
		endif;

		if ret <> null then
			tempStatements := tempStatements->append(ret)
		endif;
		
		if ret = null and condExpr = null then
			tempStatements := tempStatements->append(s)
		endif
	};
	
	self.statements := tempStatements;
}

// durchläuft statement aus container
mapping inout JAVA::statements::StatementContainer::Statements_StatementContainer(){
	

	var condExpr : JAVA::expressions::ConditionalExpression :=
			self.statement.StatementToCondExpr();
	var ret : JAVA::statements::Return :=
			self.statement.StatementToReturn();
	
	var locVar : JAVA::variables::LocalVariable := null;
	var gloVar : JAVA::members::Field := null;
	
	if condExpr <> null then
		locVar := variables_LocalVariable(self.statement.oclAsType(JAVA::statements::Condition))
	endif;
	if condExpr <> null then
		gloVar := members_Field(self.statement.oclAsType(JAVA::statements::Condition))
	endif;
	
	if not condExpr.oclIsUndefined() then
		if locVar <> null then
			if locVar.initialValue = null then
				locVar.map set_initialValue(condExpr)
			else
				self.statement := 
					map statements_ExpressionStatement(condExpr,locVar)
			endif
		else
		if gloVar <> null then
			self.statement := 
				map statements_ExpressionStatement(condExpr,gloVar)
		endif endif
	endif;
	if not ret.oclIsUndefined() then
		self.statement := ret
	endif;

}

// setzt in ReferenceableElement eine StatementExpression
mapping statements_ExpressionStatement(
	in ex : JAVA::expressions::Expression,
	in lv : JAVA::_references::ReferenceableElement) : 
	JAVA::statements::ExpressionStatement {
	
	expression := map expressions_AssignmentExpression(ex,lv);
}

// setzt in ReferenceableElement eine Expression
mapping expressions_AssignmentExpression(
	in ex : JAVA::expressions::Expression,
	in lv : JAVA::_references::ReferenceableElement) : 
	JAVA::expressions::AssignmentExpression {
	
	child := object JAVA::_references::IdentifierReference{
		target := lv;
	};
	assignmentOperator := object JAVA::operators::Assignment{};
	value := ex;
}

// setzt neue ConditionalExpression in Return-Statement
mapping Condition2CondExpr_Return (in c : JAVA::statements::Condition) : 
	JAVA::statements::Return{
	
	returnValue := map expressions_ConditionalExpression(c);
}
/*
mapping Condition2CondExpr_LocVarStat (in c : JAVA::statements::Condition) : 
	JAVA::statements::LocalVariableStatement{
	
	var condExpr : JAVA::expressions::ConditionalExpression;
	var localVariable : JAVA::variables::LocalVariable;

	condExpr := map expressions_ConditionalExpression(c);
	
	if not condExpr.expressionIf.oclIsUndefined() and
		not condExpr.expressionElse.oclIsUndefined() then
			
		localVariable := 
			variables_LocalVariable(c)
	endif;
	if not localVariable.oclIsUndefined() then
		localVariable.map set_initialValue(condExpr)
	endif;
	if not localVariable.oclIsUndefined() then
		variable := localVariable
	endif;
}
*/

// sucht die lokale variable in einer methode, welche im if-statement der condition gesetzt wird
query variables_LocalVariable(c : JAVA::statements::Condition) : 
	JAVA::variables::LocalVariable {
	
	return	java.objects()[JAVA::variables::LocalVariable]->selectOne(l|
			l.name = 
			c.statement.oclAsType(
			JAVA::statements::ExpressionStatement).expression.
			oclAsType(JAVA::expressions::AssignmentExpression).child.
			oclAsType(JAVA::_references::IdentifierReference).target.name)
		--	.clone().oclAsType(JAVA::variables::LocalVariable)
			;
}

// sucht LocalVariableStatement, welche im if-statement der condition gesetzt wird
query statements_LocalVariableStatement(c : JAVA::statements::Condition) : 
	JAVA::statements::LocalVariableStatement {
	
	return	java.objects()[JAVA::statements::LocalVariableStatement]->selectOne(lvs|
			lvs.variable.name = 
			c.statement.oclAsType(
			JAVA::statements::ExpressionStatement).expression.
			oclAsType(JAVA::expressions::AssignmentExpression).child.
			oclAsType(JAVA::_references::IdentifierReference).target.name);
}

// sucht das feld in der klasse, welches im if-statement der condition gesetzt wird
query members_Field(c : JAVA::statements::Condition) : 
	JAVA::members::Field {
	
	return	java.objects()[JAVA::members::Field]->selectOne(f|
			f.name = 
			c.statement.oclAsType(
			JAVA::statements::ExpressionStatement).expression.
			oclAsType(JAVA::expressions::AssignmentExpression).child.
			oclAsType(JAVA::_references::IdentifierReference).target.name);
}

// setzt conditionalExpression als initialValue in eine Variable 
mapping inout JAVA::variables::LocalVariable::set_initialValue(
	in ce : JAVA::expressions::ConditionalExpression){
		
		self.initialValue := ce
	}


// wandelt condition in conditionalExpression um
mapping expressions_ConditionalExpression(in c : JAVA::statements::Condition) : 
	JAVA::expressions::ConditionalExpression{
		
		-- condition
	child := c.condition.oclAsType(
		JAVA::expressions::ConditionalExpressionChild);

	-- if expression
	if c.statement.oclIsTypeOf(JAVA::statements::ExpressionStatement) then
		if c.statement.oclAsType(
			JAVA::statements::ExpressionStatement).expression.
			oclIsTypeOf(JAVA::expressions::AssignmentExpression) then
			
		expressionIf := 
		c.statement.oclAsType(
			JAVA::statements::ExpressionStatement).expression.
			oclAsType(JAVA::expressions::AssignmentExpression).value
		endif
	else if c.statement.oclIsTypeOf(JAVA::statements::Return) then
		
		expressionIf := 
		c.statement.oclAsType(
			JAVA::statements::Return).returnValue
	endif endif;	

	-- else expression
	if c.elseStatement.oclIsTypeOf(JAVA::statements::ExpressionStatement) then
		if c.elseStatement.oclAsType(
			JAVA::statements::ExpressionStatement).expression.
			oclIsTypeOf(JAVA::expressions::AssignmentExpression) then
			
		expressionElse := 
		c.elseStatement.oclAsType(
			JAVA::statements::ExpressionStatement).expression.
			oclAsType(JAVA::expressions::AssignmentExpression).value.
			oclAsType(JAVA::expressions::AssignmentExpressionChild)
		endif
	else if c.elseStatement.oclIsTypeOf(JAVA::statements::Return) then
		
		expressionElse := 
		c.elseStatement.oclAsType(
			JAVA::statements::Return).returnValue.
			oclAsType(JAVA::expressions::AssignmentExpressionChild)
	endif endif;	
	}  
