--modeltype CLOSURES uses 'http://www.emftext.org/language/java/closures';  
--modeltype CLOSURES uses 'platform:/resource/org.emftext.language.java.closures/model/closures.ecore';
modeltype JAVA uses "http://www.emftext.org/java";

-- in place transformation funktioniert nun auch
-- 'inout' ist entscheidend
-- grundsätzlich werden alle methoden und attribute übernommen,
-- sie müssen manuell entfernt werden per 'exclude()' methode' 

transformation Java2Closure(inout java : JAVA);

main() {
	java.objects()[JAVA::classifiers::Class]->map Classifiers_Class();
	java.objects()[JAVA::statements::ForLoop]->map Statements_ForLoop();
	java.objects()[JAVA::statements::StatementListContainer]->map Statements_StatementListContainer();
	java.objects()[JAVA::statements::StatementContainer]->map Statements_StatementContainer();
	
}

// für Zähler
mapping inout JAVA::classifiers::Class::Classifiers_Class(){}

// für Zähler
mapping inout JAVA::statements::ForLoop::Statements_ForLoop(){}

// durchläuft alle statements
mapping inout JAVA::statements::StatementListContainer::Statements_StatementListContainer(){
	
	var tempList : OrderedSet(JAVA::statements::Statement);
	
	// wenn s forEachLoop dann umwandeln
	self.statements->forEach(s){
		
		var forEachLoop : JAVA::statements::ForEachLoop := map ForLoopToForEachLoop(s);

		if forEachLoop <> null then
			tempList := tempList->append(forEachLoop)
		else
			tempList := tempList->append(s)
		endif;
	};
	
	self.statements := tempList;
	
}

// durchläuft ein statement
mapping inout JAVA::statements::StatementContainer::Statements_StatementContainer(){
	
	var forEachLoop : JAVA::statements::ForEachLoop := 
		map ForLoopToForEachLoop(self.statement);
	if forEachLoop <> null then
		self.statement := forEachLoop
	endif;
}

// wenn statement ein forLoop dann umwandlung möglich
mapping ForLoopToForEachLoop(s : JAVA::statements::Statement): 
	JAVA::statements::ForEachLoop
	when{
		s.oclIsTypeOf(JAVA::statements::ForLoop)
		and
		s.oclAsType(JAVA::statements::ForLoop).
			condition.oclIsTypeOf(JAVA::expressions::RelationExpression)
	}{

	var forLoop : JAVA::statements::ForLoop := s.oclAsType(JAVA::statements::ForLoop);
	var condExpr : JAVA::expressions::RelationExpression := null;
	var identRef : JAVA::_references::IdentifierReference := null;
	var typRef : JAVA::types::TypeReference := null;
	
	// condition
	condExpr := forLoop.condition.oclAsType(JAVA::expressions::RelationExpression);
	
	// liste
	if condExpr <> null then
		if condExpr.children->at(2).oclIsTypeOf(JAVA::_references::IdentifierReference) then
			identRef := condExpr.children->at(2).oclAsType(JAVA::_references::IdentifierReference)
		endif
	endif;	
	if identRef <> null then
		identRef.next := null
	endif;
	
	// suche zugehörige variable
	var _var : JAVA::variables::Variable := null;
	if identRef <> null then
		_var := variables_LocalVariable(identRef.target)
	endif;
	if _var = null and identRef <> null then
		_var := members_Field(identRef.target)
	endif;
	
	// generischer type der liste herausfinden
	typRef := _var.typeReference.oclAsType(JAVA::types::NamespaceClassifierReference).
		classifierReferences->at(1).typeArguments->at(1).
		oclAsType(JAVA::generics::QualifiedTypeArgument).typeReference.
		deepclone().oclAsType(JAVA::types::NamespaceClassifierReference);	
	
	// benutze typ 
	var param := object JAVA::parameters::OrdinaryParameter{
		name := "one";
		typeReference := typRef
		
	};
	
	// setze neuen elemente
	next := param;
	collection := identRef;
	
	statement := map Statements_Block(
		forLoop.statement.oclAsType(JAVA::statements::Block),identRef,param);

}

// suche alle vorkommen der collection im block und ersetze
mapping Statements_Block(
	in block : JAVA::statements::Block,
	in identRef : JAVA::_references::IdentifierReference,
	in param : JAVA::parameters::OrdinaryParameter) :
		JAVA::statements::Block{
		
		block.allSubobjects()[JAVA::_references::IdentifierReference].
			map Copy_Statements_Block(identRef,param);
						
		statements := block.statements;
		name := block.name;
		modifiers := block.modifiers
	}

// mit neuen Parameter aus ForEach
mapping inout JAVA::_references::IdentifierReference::Copy_Statements_Block(
	in identRef : JAVA::_references::IdentifierReference,
	in param : JAVA::parameters::OrdinaryParameter)
	
	when{
		self.target.name = identRef.target.name
	}{
		target := param;
		next := null;
	}

// sucht die lokale variable in einer methode, welche im if-statement der condition gesetzt wird
query variables_LocalVariable(c : JAVA::_references::ReferenceableElement) : 
	JAVA::variables::LocalVariable {
	
	return	java.objects()[JAVA::variables::LocalVariable]->selectOne(l|
			l.name = c.name);
}

// sucht das feld in der klasse, welches im if-statement der condition gesetzt wird
query members_Field(c : JAVA::_references::ReferenceableElement) : 
	JAVA::members::Field {
	
	return	java.objects()[JAVA::members::Field]->selectOne(f|
			f.name = c.name);
}