modeltype JAVA uses "http://www.emftext.org/java";

transformation Java2Closure(inout java : JAVA);

main() {
	java.objects()[JAVA::expressions::ConditionalExpression]->map Expressions_ConditionalExpression();
	java.objects()[JAVA::classifiers::Class]->map Classifiers_Class();
	java.objects()[JAVA::statements::StatementListContainer]->map Statements_StatementListContainer();
	java.objects()[JAVA::statements::StatementContainer]->map Statements_StatementContainer();
	
--	java.objects()[JAVA::_references::MethodCall]->map References_MethodCall();
--	java.objects()[JAVA::statements::ExpressionStatement]->map Expressions_ExpressionStatement();
}

// nur zum zählen
mapping inout JAVA::classifiers::Class::Classifiers_Class(){}

// nur zum zählen
mapping inout JAVA::expressions::ConditionalExpression::Expressions_ConditionalExpression(){}


// wandelt conditions in conditionalExpressions um
query JAVA::statements::Statement::StatementToCondition() : JAVA::statements::Condition {
	
	var localVar : JAVA::variables::LocalVariable;
	var ret :  JAVA::statements::Return;
	var assExpr : JAVA::expressions::AssignmentExpression;
	var lvCondition : JAVA::statements::Condition;
	var rCondition : JAVA::statements::Condition;
	var aeCondition : JAVA::statements::Condition;
	
	-- first look which statement it is and save necessary variable
	
	-- LocalVariable Statement
	if self.oclIsTypeOf(JAVA::statements::LocalVariableStatement) then
		localVar := self.oclAsType(JAVA::statements::LocalVariableStatement).variable
	endif;
	-- Return
	if self.oclIsTypeOf(JAVA::statements::Return) then
		ret := self.oclAsType(JAVA::statements::Return)
	endif;
	-- ExpressionStatement
	if self.oclIsTypeOf(JAVA::statements::ExpressionStatement) then
		if self.oclAsType(JAVA::statements::ExpressionStatement).expression.
			oclIsTypeOf(JAVA::expressions::AssignmentExpression) then
				assExpr:= self.oclAsType(JAVA::statements::ExpressionStatement).expression.
				oclAsType(JAVA::expressions::AssignmentExpression)
		endif
	endif;
	
	-- call map operations
	if not localVar.oclIsUndefined() then
		lvCondition := map CondExpr2Cond(localVar)
	endif;
	if not ret.oclIsUndefined() then
		rCondition := map CondExpr2Cond(ret)
	endif;
	if not assExpr.oclIsUndefined() then
		aeCondition := map CondExpr2Cond(assExpr)
	endif;
	
	-- add condition to statements
	if not lvCondition.oclIsUndefined() then
		localVar.initialValue := null
	endif;
	if not lvCondition.oclIsUndefined() then
		return lvCondition
	endif;
	if not rCondition.oclIsUndefined() then
		return rCondition
	endif;
	if not aeCondition.oclIsUndefined() then
		return aeCondition
	endif;
}

// untersuche ob statement korrekt
mapping inout JAVA::statements::StatementContainer::Statements_StatementContainer(){
	
	var condition : JAVA::statements::Condition :=
		self.statement.StatementToCondition();

	if condition <> null then
		self.statement := condition
	endif;
}

//durchsuche alle statements und wandle in conditionalExpressions um
mapping inout JAVA::statements::StatementListContainer::Statements_StatementListContainer(){
	
	var tempStatements : OrderedSet(JAVA::statements::Statement);
	
	self.statements->forEach(s){
				
		var condition : JAVA::statements::Condition :=
			s.StatementToCondition();
		
		if condition <> null then
			if not s.oclIsTypeOf(JAVA::statements::Return)
				and	
				not s.oclIsTypeOf(JAVA::statements::ExpressionStatement) then
			   	tempStatements := tempStatements->append(s)
			endif
		else
			tempStatements := tempStatements->append(s)
		endif;
		
		if condition <> null then
			tempStatements := tempStatements->append(condition)
		endif;
		
	};
	
	self.statements := tempStatements;
}

// wandle conditionalExpression in condition um
mapping CondExpr2Cond(in ae : JAVA::expressions::AssignmentExpression) : 
	JAVA::statements::Condition 
	when {
		ae.value.oclIsTypeOf(JAVA::expressions::ConditionalExpression)
		and
		ae.child.oclIsTypeOf(JAVA::_references::IdentifierReference)
	}
	{
	
	var condExpr : JAVA::expressions::ConditionalExpression :=
		ae.value.oclAsType(JAVA::expressions::ConditionalExpression);
	var refEle : JAVA::_references::ReferenceableElement :=
		ae.child.oclAsType(JAVA::_references::IdentifierReference).target;
	
	condition := condExpr.child;
	statement := map statements_ExpressionStatement(condExpr.expressionIf,refEle);
	elseStatement := map statements_ExpressionStatement(condExpr.expressionElse,refEle);
}

// wandle conditionalExpression in condition um
mapping CondExpr2Cond(in lv : JAVA::variables::LocalVariable) : 
	JAVA::statements::Condition 
	when {
		lv.initialValue.oclIsTypeOf(JAVA::expressions::ConditionalExpression)
	}
	{
	
	var condExpr : JAVA::expressions::ConditionalExpression :=
		lv.initialValue.oclAsType(JAVA::expressions::ConditionalExpression);
	
	condition := condExpr.child;
	statement := map statements_ExpressionStatement(condExpr.expressionIf,lv);
	elseStatement := map statements_ExpressionStatement(condExpr.expressionElse,lv);
}

// wandle conditionalExpression in condition um
mapping CondExpr2Cond(in r : JAVA::statements::Return) : 
	JAVA::statements::Condition 
	when {
		r.returnValue.oclIsTypeOf(JAVA::expressions::ConditionalExpression)
	}
	{
	
	var condExpr : JAVA::expressions::ConditionalExpression :=
		r.returnValue.oclAsType(JAVA::expressions::ConditionalExpression);
	
	condition := condExpr.child;
	statement := map statements_Return(condExpr.expressionIf);
	elseStatement := map statements_Return(condExpr.expressionElse);
}

mapping statements_ExpressionStatement(
	in ex : JAVA::expressions::Expression,in lv : JAVA::_references::ReferenceableElement) : 
	JAVA::statements::ExpressionStatement {
	
	expression := map expressions_AssignmentExpression(ex,lv);
}

mapping expressions_AssignmentExpression(
	in ex : JAVA::expressions::Expression,in lv : JAVA::_references::ReferenceableElement) : 
	JAVA::expressions::AssignmentExpression {
	
	child := object JAVA::_references::IdentifierReference{
		target := lv;
	};
	assignmentOperator := object JAVA::operators::Assignment{};
	value := ex;
}

mapping statements_Return(in ex : JAVA::expressions::Expression) : 
	JAVA::statements::Return {
	
	returnValue := ex;
}