package org.emftext.language.sumup;

petrinet Sumup 

types <../metamodel/sumup.text.ecore> <../metamodel/sumup.genmodel>;
 
{ 
	autoinit place Ands : And
	autoinit place Ors : Or
	autoinit place Unaries : Unary
	autoinit place Booleans : Boolean
	autoinit place Floats : Float
	autoinit place Integers : Int
	autoinit place Nesteds : Nested
	autoinit place Multiplicatives : Multiplicative
	autoinit place Additives : Additive
	autoinit place Assignments : Assignment 
	
	place EvaluatedCalculations : Calculation
	place EvaluatedAssignments : Assignment
	
	Assignments - a -> evaluateAssignment
	EvaluatedCalculations - e -> evaluateAssignment
	evaluateAssignment - a (result := out) -> EvaluatedAssignments

	transition evaluateAssignment
	if (a.getCalculation().equals(e))
	do {
		floatValue = ((Float) e.getResult().getValue()).getValue();
		f = new Float(value := floatValue);
		out = new Result( value := f);
	}
	
	Unaries - u -> evaluateUnaryMinus
	EvaluatedCalculations - e -> evaluateUnaryMinus
	evaluateUnaryMinus - u (result := out) -> EvaluatedCalculations

	transition evaluateUnaryMinus
	if (u.getCalculation().equals(e) && u.isMinus())
	do {
		floatValue = ((Float) e.getResult().getValue()).getValue().mult(- 1.0f);
		f = new Float(value := floatValue);
		out = new Result( value := f);
	}
	
	Unaries - u -> evaluateUnary
	EvaluatedCalculations - e -> evaluateUnary
	evaluateUnary - u (result := out) -> EvaluatedCalculations

	transition evaluateUnary
	if (u.getCalculation().equals(e) && u.isMinus().not())
	do {
		floatValue = ((Float) e.getResult().getValue()).getValue();
		f = new Float(value := floatValue);
		out = new Result( value := f);
	}

	Nesteds - n -> evaluateNested
	EvaluatedCalculations - e -> evaluateNested
	evaluateNested - n (result := out) -> EvaluatedCalculations

	transition evaluateNested 
	if ( n.getCalculation().equals(e) )
	do {
		floatValue = ((Float)  e.getResult().getValue()).getValue();
		f = new Float(value := floatValue);
		out = new Result( value := f);
	}

	Booleans - c -> evaluateBoolean
	evaluateBoolean - c ( result := out ) -> EvaluatedCalculations

	transition evaluateBoolean
	do {
		booleanResult = c.isValue();
		booleanLiteral = new Boolean( value := booleanResult);
		out = new Result(value := booleanLiteral);
	}

	
	Ors - c -> evaluateOr
	EvaluatedCalculations - left -> evaluateOr
	EvaluatedCalculations - right -> evaluateOr
	evaluateOr - c ( result := out ) -> EvaluatedCalculations

	transition evaluateOr
	if (c.getLeft().equals(left) 
		&& c.getRight().equals(right) )
	do {
		booleanResult = ((Boolean) left.getResult().getValue()).isValue() || ((Boolean) right.getResult().getValue()).isValue();
		booleanLiteral = new Boolean( value := booleanResult);
		out = new Result(value := booleanLiteral);
	}
	
	Ands - c -> evaluateAnd
	EvaluatedCalculations - left -> evaluateAnd
	EvaluatedCalculations - right -> evaluateAnd
	evaluateAnd - c ( result := out ) -> EvaluatedCalculations

	transition evaluateAnd
	if (c.getLeft().equals(left) 
		&& c.getRight().equals(right) )
	do {
		booleanResult = ((Boolean) left.getResult().getValue()).isValue() && ((Boolean) right.getResult().getValue()).isValue();
		booleanLiteral = new Boolean( value := booleanResult);
		out = new Result(value := booleanLiteral);
	}
		
	
	
	Floats - c -> evaluateFloat
	evaluateFloat - c ( result := out ) -> EvaluatedCalculations

	transition evaluateFloat
	do {
		floatValue = c.getValue();
		floatLiteral = new Float( value := floatValue);
		out = new Result(value := floatLiteral);
	}
	
	
	
	Integers - c -> evaluateInteger
	evaluateInteger - c ( result := out ) -> EvaluatedCalculations

	transition evaluateInteger
	do {
		floatValue = c.getValue().floatValue();
		floatLiteral = new Float( value := floatValue);
		out = new Result(value := floatLiteral);
	}
	
	
	Multiplicatives - c -> evaluateMultiplicativeMult
	EvaluatedCalculations - left -> evaluateMultiplicativeMult
	EvaluatedCalculations - right -> evaluateMultiplicativeMult
	evaluateMultiplicativeMult - c ( result := out ) -> EvaluatedCalculations

	transition evaluateMultiplicativeMult
	if (c.getOperator().getLiteral().equals("*") 
		&& c.getLeft().equals(left) 
		&& c.getRight().equals(right) )
	do {
		floatValue = ((Float) left.getResult().getValue()).getValue().mult(((Float) right.getResult().getValue()).getValue());
		floatLiteral = new Float( value := floatValue);
		out = new Result(value := floatLiteral);
	}
	
	Multiplicatives - c -> evaluateMultiplicativeDiv
	EvaluatedCalculations - left -> evaluateMultiplicativeDiv
	EvaluatedCalculations - right -> evaluateMultiplicativeDiv
	evaluateMultiplicativeDiv - c ( result := out ) -> EvaluatedCalculations

	transition evaluateMultiplicativeDiv
	if (c.getOperator().getLiteral().equals("/") 
		&& c.getLeft().equals(left)
		&& c.getRight().equals(right) )
	do {
		floatValue = ((Float) left.getResult().getValue()).getValue().div(((Float) right.getResult().getValue()).getValue());
		floatLiteral = new Float( value := floatValue);
		out = new Result(value := floatLiteral);
	}
	
	Additives - c -> evaluateAddititivePlus
	EvaluatedCalculations - left -> evaluateAddititivePlus
	EvaluatedCalculations - right -> evaluateAddititivePlus
	evaluateAddititivePlus - c ( result := out ) -> EvaluatedCalculations

	transition evaluateAddititivePlus
	if (c.getOperator().getLiteral().equals("+") 
	    && c.getLeft().equals(left) 
		&& c.getRight().equals(right) )
	do {
		floatValue = ((Float) left.getResult().getValue()).getValue().add(((Float) right.getResult().getValue()).getValue());
		floatLiteral = new Float( value := floatValue);
		out = new Result(value := floatLiteral);
	}
	
	Multiplicatives - c -> evaluateAddititiveMinus
	EvaluatedCalculations - left -> evaluateAddititiveMinus
	EvaluatedCalculations - right -> evaluateAddititiveMinus
	evaluateAddititiveMinus - c ( result := out ) -> EvaluatedCalculations

	transition evaluateAddititiveMinus
	if (c.getOperator().getLiteral().equals("-") 
		&& c.getLeft().equals(left)
		&& c.getRight().equals(right) )
	do {
		floatValue = ((Float) left.getResult().getValue()).getValue().sub(((Float) right.getResult().getValue()).getValue());
		floatLiteral = new Float( value := floatValue);
		out = new Result(value := floatLiteral);
	}
}