package org.reuseware.emftextedit.codegen;

import java.io.PrintWriter;
import java.util.Iterator;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EEnum;
import org.reuseware.emftextedit.concretesyntax.Choice;
import org.reuseware.emftextedit.concretesyntax.ConcreteSyntax;
import org.reuseware.emftextedit.concretesyntax.CompoundDefinition;
import org.reuseware.emftextedit.concretesyntax.CsString;
import org.reuseware.emftextedit.concretesyntax.Definition;
import org.reuseware.emftextedit.concretesyntax.LineBreak;
import org.reuseware.emftextedit.concretesyntax.PLUS;
import org.reuseware.emftextedit.concretesyntax.Rule;
import org.reuseware.emftextedit.concretesyntax.STAR;
import org.reuseware.emftextedit.concretesyntax.Sequence;
import org.reuseware.emftextedit.concretesyntax.Terminal;
import org.reuseware.emftextedit.concretesyntax.WhiteSpaces;


public class TextPrinterGenerator extends BaseGenerator{
	
	private String basePrinterClassName; 
	
	public TextPrinterGenerator(String csPrinterClassName, String csPackageName, String basePrinterClassName){
		super(csPrinterClassName, csPackageName);
		this.basePrinterClassName = basePrinterClassName;
	}
	
	@Override
	public boolean generate(PrintWriter out) {
		boolean basenull = basePrinterClassName==null;
		out.println("package " + super.getResourcePackageName() + ";");
		out.println();
	    out.println("import java.io.OutputStream;");
	    out.println("import org.reuseware.emftextedit.resource.*;");
	    if(basenull){
	    	out.println("import java.io.IOException;");
	    	out.println("import org.eclipse.emf.ecore.EObject;");
	    }
		out.println();
	    out.println("/**");
		out.println("* This is the printer class used by EMFText.");
		if(!basenull){
			out.println("* Users may implement own behavior by overriding printing methods in the printer base.");
			out.println("* The baseclass contains a pretty printer implementation generated by EMFText which");
			out.println("* is not granted to work in all cases, but should work in most cases.");			
		}
		out.println("*/");
	    out.println("public class " + super.getResourceClassName() + (basenull?" implements EMFTextPrinter":" extends " +basePrinterClassName)+ " {");
	    out.println();
	    out.println("\tpublic " + super.getResourceClassName() + "(OutputStream o, TextResource resource) {");
	    if(!basenull)
	    	out.println("\t\tsuper(o, resource);");
	    out.println("\t}");
	    
	    if(basenull){
	    	out.println();
	    	out.println("\tpublic void print(EObject arg0) throws IOException {");
	    	out.println("\t\t//insert printer implementation here.");
	    	out.println("\t}");
	    }
	    out.println("}");
		return true;
	}
	
	


}
